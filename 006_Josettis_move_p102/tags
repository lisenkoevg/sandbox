!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	qualified	/Include an extra class-qualified tag entry for each tag/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	access	/Access (or export) of class members/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	inherits	/Inheritance information/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	signature	/Signature of routine (e.g. prototype or parameter list)/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	p,prototype	/function prototypes/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/cygdrive/d/YandexDisk/Projects/sandbox/006_Josettis_move_p102/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	//
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
ATOMIC_BOOL_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_BOOL_LOCK_FREE		__GCC_ATOMIC_BOOL_LOCK_FREE$/;"	d
ATOMIC_CHAR16_T_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_CHAR16_T_LOCK_FREE	__GCC_ATOMIC_CHAR16_T_LOCK_FREE$/;"	d
ATOMIC_CHAR32_T_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_CHAR32_T_LOCK_FREE	__GCC_ATOMIC_CHAR32_T_LOCK_FREE$/;"	d
ATOMIC_CHAR8_T_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_CHAR8_T_LOCK_FREE	__GCC_ATOMIC_CHAR8_T_LOCK_FREE$/;"	d
ATOMIC_CHAR_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_CHAR_LOCK_FREE		__GCC_ATOMIC_CHAR_LOCK_FREE$/;"	d
ATOMIC_FLAG_INIT	d:/include/c++/14/bits/atomic_base.h	/^#define ATOMIC_FLAG_INIT /;"	d
ATOMIC_INT_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_INT_LOCK_FREE		__GCC_ATOMIC_INT_LOCK_FREE$/;"	d
ATOMIC_LLONG_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_LLONG_LOCK_FREE		__GCC_ATOMIC_LLONG_LOCK_FREE$/;"	d
ATOMIC_LONG_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_LONG_LOCK_FREE		__GCC_ATOMIC_LONG_LOCK_FREE$/;"	d
ATOMIC_POINTER_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_POINTER_LOCK_FREE	__GCC_ATOMIC_POINTER_LOCK_FREE$/;"	d
ATOMIC_SHORT_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_SHORT_LOCK_FREE		__GCC_ATOMIC_SHORT_LOCK_FREE$/;"	d
ATOMIC_VAR_INIT	d:/include/c++/14/bits/atomic_base.h	/^#define ATOMIC_VAR_INIT(/;"	d	signature:(_VI)
ATOMIC_WCHAR_T_LOCK_FREE	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define ATOMIC_WCHAR_T_LOCK_FREE	__GCC_ATOMIC_WCHAR_T_LOCK_FREE$/;"	d
BUFSIZ	d:/include/stdio.h	/^#define BUFSIZ /;"	d
CLK_TCK	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLK_TCK ((__clock_t) __sysconf (2))	\/* 2 is _SC_CLK_TCK /;"	d
CLOCKS_PER_SEC	d:/include/x86_64-linux-gnu/bits/time.h	/^#define CLOCKS_PER_SEC /;"	d
CLOCK_BOOTTIME	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_BOOTTIME	/;"	d
CLOCK_BOOTTIME_ALARM	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_BOOTTIME_ALARM	/;"	d
CLOCK_MONOTONIC	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC	/;"	d
CLOCK_MONOTONIC_COARSE	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC_COARSE	/;"	d
CLOCK_MONOTONIC_RAW	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_MONOTONIC_RAW	/;"	d
CLOCK_PROCESS_CPUTIME_ID	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_PROCESS_CPUTIME_ID	/;"	d
CLOCK_REALTIME	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME	/;"	d
CLOCK_REALTIME_ALARM	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME_ALARM	/;"	d
CLOCK_REALTIME_COARSE	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_REALTIME_COARSE	/;"	d
CLOCK_TAI	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_TAI	/;"	d
CLOCK_THREAD_CPUTIME_ID	d:/include/x86_64-linux-gnu/bits/time.h	/^# define CLOCK_THREAD_CPUTIME_ID	/;"	d
CLONE_CHILD_CLEARTID	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_CHILD_CLEARTID /;"	d
CLONE_CHILD_SETTID	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_CHILD_SETTID /;"	d
CLONE_DETACHED	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_DETACHED /;"	d
CLONE_FILES	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_FILES /;"	d
CLONE_FS	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_FS /;"	d
CLONE_IO	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_IO	/;"	d
CLONE_NEWCGROUP	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWCGROUP /;"	d
CLONE_NEWIPC	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWIPC	/;"	d
CLONE_NEWNET	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWNET	/;"	d
CLONE_NEWNS	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWNS /;"	d
CLONE_NEWPID	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWPID	/;"	d
CLONE_NEWTIME	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define CLONE_NEWTIME	/;"	d
CLONE_NEWUSER	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWUSER	/;"	d
CLONE_NEWUTS	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_NEWUTS	/;"	d
CLONE_PARENT	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PARENT /;"	d
CLONE_PARENT_SETTID	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PARENT_SETTID /;"	d
CLONE_PIDFD	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PIDFD /;"	d
CLONE_PTRACE	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_PTRACE /;"	d
CLONE_SETTLS	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SETTLS /;"	d
CLONE_SIGHAND	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SIGHAND /;"	d
CLONE_SYSVSEM	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_SYSVSEM /;"	d
CLONE_THREAD	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_THREAD /;"	d
CLONE_UNTRACED	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_UNTRACED /;"	d
CLONE_VFORK	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_VFORK /;"	d
CLONE_VM	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CLONE_VM /;"	d
CPU_ALLOC	d:/include/sched.h	/^# define CPU_ALLOC(count) __CPU_ALLOC /;"	d	signature:(count)
CPU_ALLOC_SIZE	d:/include/sched.h	/^# define CPU_ALLOC_SIZE(count) __CPU_ALLOC_SIZE /;"	d	signature:(count)
CPU_AND	d:/include/sched.h	/^# define CPU_AND(/;"	d	signature:(destset,srcset1,srcset2)
CPU_AND_S	d:/include/sched.h	/^# define CPU_AND_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_CLR	d:/include/sched.h	/^# define CPU_CLR(cpu, cpusetp)	 __CPU_CLR_/;"	d	signature:(cpu,cpusetp)
CPU_CLR_S	d:/include/sched.h	/^# define CPU_CLR_S(cpu, setsize, cpusetp)   __CPU_CLR_S /;"	d	signature:(cpu,setsize,cpusetp)
CPU_COUNT	d:/include/sched.h	/^# define CPU_COUNT(cpusetp)	 __CPU_COUNT_/;"	d	signature:(cpusetp)
CPU_COUNT_S	d:/include/sched.h	/^# define CPU_COUNT_S(setsize, cpusetp)	    __CPU_COUNT_S /;"	d	signature:(setsize,cpusetp)
CPU_EQUAL	d:/include/sched.h	/^# define CPU_EQUAL(/;"	d	signature:(cpusetp1,cpusetp2)
CPU_EQUAL_S	d:/include/sched.h	/^# define CPU_EQUAL_S(/;"	d	signature:(setsize,cpusetp1,cpusetp2)
CPU_FREE	d:/include/sched.h	/^# define CPU_FREE(cpuset) __CPU_FREE /;"	d	signature:(cpuset)
CPU_ISSET	d:/include/sched.h	/^# define CPU_ISSET(cpu, cpusetp) __CPU_ISSET_/;"	d	signature:(cpu,cpusetp)
CPU_ISSET_S	d:/include/sched.h	/^# define CPU_ISSET_S(cpu, setsize, cpusetp) __CPU_ISSET_S /;"	d	signature:(cpu,setsize,cpusetp)
CPU_OR	d:/include/sched.h	/^# define CPU_OR(/;"	d	signature:(destset,srcset1,srcset2)
CPU_OR_S	d:/include/sched.h	/^# define CPU_OR_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_SET	d:/include/sched.h	/^# define CPU_SET(cpu, cpusetp)	 __CPU_SET_/;"	d	signature:(cpu,cpusetp)
CPU_SETSIZE	d:/include/sched.h	/^# define CPU_SETSIZE __CPU_SETSIZE$/;"	d
CPU_SET_S	d:/include/sched.h	/^# define CPU_SET_S(cpu, setsize, cpusetp)   __CPU_SET_S /;"	d	signature:(cpu,setsize,cpusetp)
CPU_XOR	d:/include/sched.h	/^# define CPU_XOR(/;"	d	signature:(destset,srcset1,srcset2)
CPU_XOR_S	d:/include/sched.h	/^# define CPU_XOR_S(/;"	d	signature:(setsize,destset,srcset1,srcset2)
CPU_ZERO	d:/include/sched.h	/^# define CPU_ZERO(cpusetp)	 __CPU_ZERO_/;"	d	signature:(cpusetp)
CPU_ZERO_S	d:/include/sched.h	/^# define CPU_ZERO_S(setsize, cpusetp)	    __CPU_ZERO_S /;"	d	signature:(setsize,cpusetp)
CSIGNAL	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define CSIGNAL /;"	d
DEFAULT_LOCALE	../../../../../../usr/include/cygwin/config.h	/^#define DEFAULT_LOCALE /;"	d
E2BIG	d:/include/asm-generic/errno-base.h	/^#define	E2BIG	/;"	d
EACCES	d:/include/asm-generic/errno-base.h	/^#define	EACCES	/;"	d
EADDRINUSE	d:/include/asm-generic/errno.h	/^#define	EADDRINUSE	/;"	d
EADDRNOTAVAIL	d:/include/asm-generic/errno.h	/^#define	EADDRNOTAVAIL	/;"	d
EADV	d:/include/asm-generic/errno.h	/^#define	EADV	/;"	d
EAFNOSUPPORT	d:/include/asm-generic/errno.h	/^#define	EAFNOSUPPORT	/;"	d
EAGAIN	d:/include/asm-generic/errno-base.h	/^#define	EAGAIN	/;"	d
EALREADY	d:/include/asm-generic/errno.h	/^#define	EALREADY	/;"	d
EBADE	d:/include/asm-generic/errno.h	/^#define	EBADE	/;"	d
EBADF	d:/include/asm-generic/errno-base.h	/^#define	EBADF	/;"	d
EBADFD	d:/include/asm-generic/errno.h	/^#define	EBADFD	/;"	d
EBADMSG	d:/include/asm-generic/errno.h	/^#define	EBADMSG	/;"	d
EBADR	d:/include/asm-generic/errno.h	/^#define	EBADR	/;"	d
EBADRQC	d:/include/asm-generic/errno.h	/^#define	EBADRQC	/;"	d
EBADSLT	d:/include/asm-generic/errno.h	/^#define	EBADSLT	/;"	d
EBFONT	d:/include/asm-generic/errno.h	/^#define	EBFONT	/;"	d
EBUSY	d:/include/asm-generic/errno-base.h	/^#define	EBUSY	/;"	d
ECANCELED	d:/include/asm-generic/errno.h	/^#define	ECANCELED	/;"	d
ECANCELED	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define ECANCELED	/;"	d
ECHILD	d:/include/asm-generic/errno-base.h	/^#define	ECHILD	/;"	d
ECHRNG	d:/include/asm-generic/errno.h	/^#define	ECHRNG	/;"	d
ECOMM	d:/include/asm-generic/errno.h	/^#define	ECOMM	/;"	d
ECONNABORTED	d:/include/asm-generic/errno.h	/^#define	ECONNABORTED	/;"	d
ECONNREFUSED	d:/include/asm-generic/errno.h	/^#define	ECONNREFUSED	/;"	d
ECONNRESET	d:/include/asm-generic/errno.h	/^#define	ECONNRESET	/;"	d
EDEADLK	d:/include/asm-generic/errno.h	/^#define	EDEADLK	/;"	d
EDEADLOCK	d:/include/asm-generic/errno.h	/^#define	EDEADLOCK	/;"	d
EDESTADDRREQ	d:/include/asm-generic/errno.h	/^#define	EDESTADDRREQ	/;"	d
EDOM	d:/include/asm-generic/errno-base.h	/^#define	EDOM	/;"	d
EDOTDOT	d:/include/asm-generic/errno.h	/^#define	EDOTDOT	/;"	d
EDQUOT	d:/include/asm-generic/errno.h	/^#define	EDQUOT	/;"	d
EEXIST	d:/include/asm-generic/errno-base.h	/^#define	EEXIST	/;"	d
EFAULT	d:/include/asm-generic/errno-base.h	/^#define	EFAULT	/;"	d
EFBIG	d:/include/asm-generic/errno-base.h	/^#define	EFBIG	/;"	d
EHOSTDOWN	d:/include/asm-generic/errno.h	/^#define	EHOSTDOWN	/;"	d
EHOSTUNREACH	d:/include/asm-generic/errno.h	/^#define	EHOSTUNREACH	/;"	d
EHWPOISON	d:/include/asm-generic/errno.h	/^#define EHWPOISON	/;"	d
EHWPOISON	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define EHWPOISON	/;"	d
EIDRM	d:/include/asm-generic/errno.h	/^#define	EIDRM	/;"	d
EILSEQ	d:/include/asm-generic/errno.h	/^#define	EILSEQ	/;"	d
EINPROGRESS	d:/include/asm-generic/errno.h	/^#define	EINPROGRESS	/;"	d
EINTR	d:/include/asm-generic/errno-base.h	/^#define	EINTR	/;"	d
EINVAL	d:/include/asm-generic/errno-base.h	/^#define	EINVAL	/;"	d
EIO	d:/include/asm-generic/errno-base.h	/^#define	EIO	/;"	d
EISCONN	d:/include/asm-generic/errno.h	/^#define	EISCONN	/;"	d
EISDIR	d:/include/asm-generic/errno-base.h	/^#define	EISDIR	/;"	d
EISNAM	d:/include/asm-generic/errno.h	/^#define	EISNAM	/;"	d
EKEYEXPIRED	d:/include/asm-generic/errno.h	/^#define	EKEYEXPIRED	/;"	d
EKEYREJECTED	d:/include/asm-generic/errno.h	/^#define	EKEYREJECTED	/;"	d
EKEYREVOKED	d:/include/asm-generic/errno.h	/^#define	EKEYREVOKED	/;"	d
EL2HLT	d:/include/asm-generic/errno.h	/^#define	EL2HLT	/;"	d
EL2NSYNC	d:/include/asm-generic/errno.h	/^#define	EL2NSYNC	/;"	d
EL3HLT	d:/include/asm-generic/errno.h	/^#define	EL3HLT	/;"	d
EL3RST	d:/include/asm-generic/errno.h	/^#define	EL3RST	/;"	d
ELIBACC	d:/include/asm-generic/errno.h	/^#define	ELIBACC	/;"	d
ELIBBAD	d:/include/asm-generic/errno.h	/^#define	ELIBBAD	/;"	d
ELIBEXEC	d:/include/asm-generic/errno.h	/^#define	ELIBEXEC	/;"	d
ELIBMAX	d:/include/asm-generic/errno.h	/^#define	ELIBMAX	/;"	d
ELIBSCN	d:/include/asm-generic/errno.h	/^#define	ELIBSCN	/;"	d
ELNRNG	d:/include/asm-generic/errno.h	/^#define	ELNRNG	/;"	d
ELOOP	d:/include/asm-generic/errno.h	/^#define	ELOOP	/;"	d
EMEDIUMTYPE	d:/include/asm-generic/errno.h	/^#define	EMEDIUMTYPE	/;"	d
EMFILE	d:/include/asm-generic/errno-base.h	/^#define	EMFILE	/;"	d
EMLINK	d:/include/asm-generic/errno-base.h	/^#define	EMLINK	/;"	d
EMSGSIZE	d:/include/asm-generic/errno.h	/^#define	EMSGSIZE	/;"	d
EMULTIHOP	d:/include/asm-generic/errno.h	/^#define	EMULTIHOP	/;"	d
ENAMETOOLONG	d:/include/asm-generic/errno.h	/^#define	ENAMETOOLONG	/;"	d
ENAVAIL	d:/include/asm-generic/errno.h	/^#define	ENAVAIL	/;"	d
ENETDOWN	d:/include/asm-generic/errno.h	/^#define	ENETDOWN	/;"	d
ENETRESET	d:/include/asm-generic/errno.h	/^#define	ENETRESET	/;"	d
ENETUNREACH	d:/include/asm-generic/errno.h	/^#define	ENETUNREACH	/;"	d
ENFILE	d:/include/asm-generic/errno-base.h	/^#define	ENFILE	/;"	d
ENOANO	d:/include/asm-generic/errno.h	/^#define	ENOANO	/;"	d
ENOBUFS	d:/include/asm-generic/errno.h	/^#define	ENOBUFS	/;"	d
ENOCSI	d:/include/asm-generic/errno.h	/^#define	ENOCSI	/;"	d
ENODATA	d:/include/asm-generic/errno.h	/^#define	ENODATA	/;"	d
ENODEV	d:/include/asm-generic/errno-base.h	/^#define	ENODEV	/;"	d
ENOENT	d:/include/asm-generic/errno-base.h	/^#define	ENOENT	/;"	d
ENOEXEC	d:/include/asm-generic/errno-base.h	/^#define	ENOEXEC	/;"	d
ENOKEY	d:/include/asm-generic/errno.h	/^#define	ENOKEY	/;"	d
ENOLCK	d:/include/asm-generic/errno.h	/^#define	ENOLCK	/;"	d
ENOLINK	d:/include/asm-generic/errno.h	/^#define	ENOLINK	/;"	d
ENOMEDIUM	d:/include/asm-generic/errno.h	/^#define	ENOMEDIUM	/;"	d
ENOMEM	d:/include/asm-generic/errno-base.h	/^#define	ENOMEM	/;"	d
ENOMSG	d:/include/asm-generic/errno.h	/^#define	ENOMSG	/;"	d
ENONET	d:/include/asm-generic/errno.h	/^#define	ENONET	/;"	d
ENOPKG	d:/include/asm-generic/errno.h	/^#define	ENOPKG	/;"	d
ENOPROTOOPT	d:/include/asm-generic/errno.h	/^#define	ENOPROTOOPT	/;"	d
ENOSPC	d:/include/asm-generic/errno-base.h	/^#define	ENOSPC	/;"	d
ENOSR	d:/include/asm-generic/errno.h	/^#define	ENOSR	/;"	d
ENOSTR	d:/include/asm-generic/errno.h	/^#define	ENOSTR	/;"	d
ENOSYS	d:/include/asm-generic/errno.h	/^#define	ENOSYS	/;"	d
ENOTBLK	d:/include/asm-generic/errno-base.h	/^#define	ENOTBLK	/;"	d
ENOTCONN	d:/include/asm-generic/errno.h	/^#define	ENOTCONN	/;"	d
ENOTDIR	d:/include/asm-generic/errno-base.h	/^#define	ENOTDIR	/;"	d
ENOTEMPTY	d:/include/asm-generic/errno.h	/^#define	ENOTEMPTY	/;"	d
ENOTNAM	d:/include/asm-generic/errno.h	/^#define	ENOTNAM	/;"	d
ENOTRECOVERABLE	d:/include/asm-generic/errno.h	/^#define	ENOTRECOVERABLE	/;"	d
ENOTRECOVERABLE	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define ENOTRECOVERABLE	/;"	d
ENOTSOCK	d:/include/asm-generic/errno.h	/^#define	ENOTSOCK	/;"	d
ENOTSUP	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define ENOTSUP	/;"	d
ENOTTY	d:/include/asm-generic/errno-base.h	/^#define	ENOTTY	/;"	d
ENOTUNIQ	d:/include/asm-generic/errno.h	/^#define	ENOTUNIQ	/;"	d
ENXIO	d:/include/asm-generic/errno-base.h	/^#define	ENXIO	/;"	d
EOF	d:/include/stdio.h	/^#define EOF /;"	d
EOPNOTSUPP	d:/include/asm-generic/errno.h	/^#define	EOPNOTSUPP	/;"	d
EOVERFLOW	d:/include/asm-generic/errno.h	/^#define	EOVERFLOW	/;"	d
EOWNERDEAD	d:/include/asm-generic/errno.h	/^#define	EOWNERDEAD	/;"	d
EOWNERDEAD	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define EOWNERDEAD	/;"	d
EPERM	d:/include/asm-generic/errno-base.h	/^#define	EPERM	/;"	d
EPFNOSUPPORT	d:/include/asm-generic/errno.h	/^#define	EPFNOSUPPORT	/;"	d
EPIPE	d:/include/asm-generic/errno-base.h	/^#define	EPIPE	/;"	d
EPROTO	d:/include/asm-generic/errno.h	/^#define	EPROTO	/;"	d
EPROTONOSUPPORT	d:/include/asm-generic/errno.h	/^#define	EPROTONOSUPPORT	/;"	d
EPROTOTYPE	d:/include/asm-generic/errno.h	/^#define	EPROTOTYPE	/;"	d
ERANGE	d:/include/asm-generic/errno-base.h	/^#define	ERANGE	/;"	d
EREMCHG	d:/include/asm-generic/errno.h	/^#define	EREMCHG	/;"	d
EREMOTE	d:/include/asm-generic/errno.h	/^#define	EREMOTE	/;"	d
EREMOTEIO	d:/include/asm-generic/errno.h	/^#define	EREMOTEIO	/;"	d
ERESTART	d:/include/asm-generic/errno.h	/^#define	ERESTART	/;"	d
ERFKILL	d:/include/asm-generic/errno.h	/^#define ERFKILL	/;"	d
ERFKILL	d:/include/x86_64-linux-gnu/bits/errno.h	/^#  define ERFKILL	/;"	d
EROFS	d:/include/asm-generic/errno-base.h	/^#define	EROFS	/;"	d
ESHUTDOWN	d:/include/asm-generic/errno.h	/^#define	ESHUTDOWN	/;"	d
ESOCKTNOSUPPORT	d:/include/asm-generic/errno.h	/^#define	ESOCKTNOSUPPORT	/;"	d
ESPIPE	d:/include/asm-generic/errno-base.h	/^#define	ESPIPE	/;"	d
ESRCH	d:/include/asm-generic/errno-base.h	/^#define	ESRCH	/;"	d
ESRMNT	d:/include/asm-generic/errno.h	/^#define	ESRMNT	/;"	d
ESTALE	d:/include/asm-generic/errno.h	/^#define	ESTALE	/;"	d
ESTRPIPE	d:/include/asm-generic/errno.h	/^#define	ESTRPIPE	/;"	d
ETIME	d:/include/asm-generic/errno.h	/^#define	ETIME	/;"	d
ETIMEDOUT	d:/include/asm-generic/errno.h	/^#define	ETIMEDOUT	/;"	d
ETOOMANYREFS	d:/include/asm-generic/errno.h	/^#define	ETOOMANYREFS	/;"	d
ETXTBSY	d:/include/asm-generic/errno-base.h	/^#define	ETXTBSY	/;"	d
EUCLEAN	d:/include/asm-generic/errno.h	/^#define	EUCLEAN	/;"	d
EUNATCH	d:/include/asm-generic/errno.h	/^#define	EUNATCH	/;"	d
EUSERS	d:/include/asm-generic/errno.h	/^#define	EUSERS	/;"	d
EWOULDBLOCK	d:/include/asm-generic/errno.h	/^#define	EWOULDBLOCK	/;"	d
EXDEV	d:/include/asm-generic/errno-base.h	/^#define	EXDEV	/;"	d
EXFULL	d:/include/asm-generic/errno.h	/^#define	EXFULL	/;"	d
EXIT_FAILURE	../../../../../../usr/include/stdlib.h	/^#define EXIT_FAILURE /;"	d
EXIT_SUCCESS	../../../../../../usr/include/stdlib.h	/^#define EXIT_SUCCESS /;"	d
FILE	d:/include/x86_64-linux-gnu/bits/types/FILE.h	/^typedef struct _IO_FILE FILE;$/;"	t	typeref:struct:_IO_FILE
FILENAME_MAX	d:/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define FILENAME_MAX /;"	d
FOPEN_MAX	d:/include/stdio.h	/^#define FOPEN_MAX /;"	d
H8300	../../../../../../usr/include/sys/config.h	/^#define H8300 /;"	d
HAVE_GETDATE	../../../../../../usr/include/sys/config.h	/^#define HAVE_GETDATE$/;"	d
INT16_C	d:/include/stdint.h	/^# define INT16_C(/;"	d	signature:(c)
INT16_MAX	d:/include/stdint.h	/^# define INT16_MAX	/;"	d
INT16_MIN	d:/include/stdint.h	/^# define INT16_MIN	/;"	d
INT16_WIDTH	d:/include/stdint.h	/^# define INT16_WIDTH /;"	d
INT32_C	d:/include/stdint.h	/^# define INT32_C(/;"	d	signature:(c)
INT32_MAX	d:/include/stdint.h	/^# define INT32_MAX	/;"	d
INT32_MIN	d:/include/stdint.h	/^# define INT32_MIN	/;"	d
INT32_WIDTH	d:/include/stdint.h	/^# define INT32_WIDTH /;"	d
INT64_C	d:/include/stdint.h	/^#  define INT64_C(/;"	d	signature:(c)
INT64_MAX	d:/include/stdint.h	/^# define INT64_MAX	/;"	d
INT64_MIN	d:/include/stdint.h	/^# define INT64_MIN	/;"	d
INT64_WIDTH	d:/include/stdint.h	/^# define INT64_WIDTH /;"	d
INT8_C	d:/include/stdint.h	/^# define INT8_C(/;"	d	signature:(c)
INT8_MAX	d:/include/stdint.h	/^# define INT8_MAX	/;"	d
INT8_MIN	d:/include/stdint.h	/^# define INT8_MIN	/;"	d
INT8_WIDTH	d:/include/stdint.h	/^# define INT8_WIDTH /;"	d
INTMAX_C	d:/include/stdint.h	/^#  define INTMAX_C(/;"	d	signature:(c)
INTMAX_MAX	d:/include/stdint.h	/^# define INTMAX_MAX	/;"	d
INTMAX_MIN	d:/include/stdint.h	/^# define INTMAX_MIN	/;"	d
INTMAX_WIDTH	d:/include/stdint.h	/^# define INTMAX_WIDTH /;"	d
INTPTR_MAX	d:/include/stdint.h	/^#  define INTPTR_MAX	/;"	d
INTPTR_MIN	d:/include/stdint.h	/^#  define INTPTR_MIN	/;"	d
INTPTR_WIDTH	d:/include/stdint.h	/^# define INTPTR_WIDTH /;"	d
INT_FAST16_MAX	d:/include/stdint.h	/^#  define INT_FAST16_MAX	/;"	d
INT_FAST16_MIN	d:/include/stdint.h	/^#  define INT_FAST16_MIN	/;"	d
INT_FAST16_WIDTH	d:/include/stdint.h	/^# define INT_FAST16_WIDTH /;"	d
INT_FAST32_MAX	d:/include/stdint.h	/^#  define INT_FAST32_MAX	/;"	d
INT_FAST32_MIN	d:/include/stdint.h	/^#  define INT_FAST32_MIN	/;"	d
INT_FAST32_WIDTH	d:/include/stdint.h	/^# define INT_FAST32_WIDTH /;"	d
INT_FAST64_MAX	d:/include/stdint.h	/^# define INT_FAST64_MAX	/;"	d
INT_FAST64_MIN	d:/include/stdint.h	/^# define INT_FAST64_MIN	/;"	d
INT_FAST64_WIDTH	d:/include/stdint.h	/^# define INT_FAST64_WIDTH /;"	d
INT_FAST8_MAX	d:/include/stdint.h	/^# define INT_FAST8_MAX	/;"	d
INT_FAST8_MIN	d:/include/stdint.h	/^# define INT_FAST8_MIN	/;"	d
INT_FAST8_WIDTH	d:/include/stdint.h	/^# define INT_FAST8_WIDTH /;"	d
INT_LEAST16_MAX	d:/include/stdint.h	/^# define INT_LEAST16_MAX	/;"	d
INT_LEAST16_MIN	d:/include/stdint.h	/^# define INT_LEAST16_MIN	/;"	d
INT_LEAST16_WIDTH	d:/include/stdint.h	/^# define INT_LEAST16_WIDTH /;"	d
INT_LEAST32_MAX	d:/include/stdint.h	/^# define INT_LEAST32_MAX	/;"	d
INT_LEAST32_MIN	d:/include/stdint.h	/^# define INT_LEAST32_MIN	/;"	d
INT_LEAST32_WIDTH	d:/include/stdint.h	/^# define INT_LEAST32_WIDTH /;"	d
INT_LEAST64_MAX	d:/include/stdint.h	/^# define INT_LEAST64_MAX	/;"	d
INT_LEAST64_MIN	d:/include/stdint.h	/^# define INT_LEAST64_MIN	/;"	d
INT_LEAST64_WIDTH	d:/include/stdint.h	/^# define INT_LEAST64_WIDTH /;"	d
INT_LEAST8_MAX	d:/include/stdint.h	/^# define INT_LEAST8_MAX	/;"	d
INT_LEAST8_MIN	d:/include/stdint.h	/^# define INT_LEAST8_MIN	/;"	d
INT_LEAST8_WIDTH	d:/include/stdint.h	/^# define INT_LEAST8_WIDTH /;"	d
INT_MAX	../../../../../../usr/include/sys/config.h	/^#define INT_MAX /;"	d
INT_MAX	../../../../../../usr/include/sys/config.h	/^#define INT_MAX __INT_MAX_/;"	d
Init	d:/include/c++/14/bits/ios_base.h	/^      Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
Init	d:/include/c++/14/bits/ios_base.h	/^      Init(const Init&) = default;$/;"	p	class:std::ios_base::Init	access:public	signature:(const Init &)
Init	d:/include/c++/14/bits/ios_base.h	/^    class Init$/;"	c	class:std::ios_base	access:public
LC_ADDRESS	d:/include/locale.h	/^#define LC_ADDRESS	  __LC_ADDRESS$/;"	d
LC_ADDRESS_MASK	d:/include/locale.h	/^# define LC_ADDRESS_MASK	/;"	d
LC_ALL	d:/include/locale.h	/^#define	LC_ALL		  __LC_ALL$/;"	d
LC_ALL_MASK	d:/include/locale.h	/^# define LC_ALL_MASK	/;"	d
LC_COLLATE	d:/include/locale.h	/^#define LC_COLLATE        __LC_COLLATE$/;"	d
LC_COLLATE_MASK	d:/include/locale.h	/^# define LC_COLLATE_MASK	/;"	d
LC_CTYPE	d:/include/locale.h	/^#define LC_CTYPE          __LC_CTYPE$/;"	d
LC_CTYPE_MASK	d:/include/locale.h	/^# define LC_CTYPE_MASK	/;"	d
LC_GLOBAL_LOCALE	d:/include/locale.h	/^# define LC_GLOBAL_LOCALE	/;"	d
LC_IDENTIFICATION	d:/include/locale.h	/^#define LC_IDENTIFICATION __LC_IDENTIFICATION$/;"	d
LC_IDENTIFICATION_MASK	d:/include/locale.h	/^# define LC_IDENTIFICATION_MASK	/;"	d
LC_MEASUREMENT	d:/include/locale.h	/^#define LC_MEASUREMENT	  __LC_MEASUREMENT$/;"	d
LC_MEASUREMENT_MASK	d:/include/locale.h	/^# define LC_MEASUREMENT_MASK	/;"	d
LC_MESSAGES	d:/include/locale.h	/^#define LC_MESSAGES       __LC_MESSAGES$/;"	d
LC_MESSAGES_MASK	d:/include/locale.h	/^# define LC_MESSAGES_MASK	/;"	d
LC_MONETARY	d:/include/locale.h	/^#define LC_MONETARY       __LC_MONETARY$/;"	d
LC_MONETARY_MASK	d:/include/locale.h	/^# define LC_MONETARY_MASK	/;"	d
LC_NAME	d:/include/locale.h	/^#define LC_NAME		  __LC_NAME$/;"	d
LC_NAME_MASK	d:/include/locale.h	/^# define LC_NAME_MASK	/;"	d
LC_NUMERIC	d:/include/locale.h	/^#define LC_NUMERIC        __LC_NUMERIC$/;"	d
LC_NUMERIC_MASK	d:/include/locale.h	/^# define LC_NUMERIC_MASK	/;"	d
LC_PAPER	d:/include/locale.h	/^#define LC_PAPER	  __LC_PAPER$/;"	d
LC_PAPER_MASK	d:/include/locale.h	/^# define LC_PAPER_MASK	/;"	d
LC_TELEPHONE	d:/include/locale.h	/^#define LC_TELEPHONE	  __LC_TELEPHONE$/;"	d
LC_TELEPHONE_MASK	d:/include/locale.h	/^# define LC_TELEPHONE_MASK	/;"	d
LC_TIME	d:/include/locale.h	/^#define LC_TIME           __LC_TIME$/;"	d
LC_TIME_MASK	d:/include/locale.h	/^# define LC_TIME_MASK	/;"	d
L_ctermid	d:/include/stdio.h	/^# define L_ctermid /;"	d
L_cuserid	d:/include/stdio.h	/^#  define L_cuserid /;"	d
L_tmpnam	d:/include/stdio.h	/^#define L_tmpnam /;"	d
MALLOC_ALIGNMENT	../../../../../../usr/include/sys/config.h	/^#define MALLOC_ALIGNMENT /;"	d
MB_CUR_MAX	../../../../../../usr/include/stdlib.h	/^#define MB_CUR_MAX /;"	d
PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP	d:/include/pthread.h	/^# define PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_ATTR_NO_SIGMASK_NP	d:/include/pthread.h	/^#define PTHREAD_ATTR_NO_SIGMASK_NP /;"	d
PTHREAD_BARRIER_SERIAL_THREAD	d:/include/pthread.h	/^# define PTHREAD_BARRIER_SERIAL_THREAD /;"	d
PTHREAD_CANCELED	d:/include/pthread.h	/^#define PTHREAD_CANCELED /;"	d
PTHREAD_CANCEL_ASYNCHRONOUS	d:/include/pthread.h	/^  PTHREAD_CANCEL_ASYNCHRONOUS$/;"	e	enum:__anone6cbf2430a03	access:public
PTHREAD_CANCEL_ASYNCHRONOUS	d:/include/pthread.h	/^#define PTHREAD_CANCEL_ASYNCHRONOUS	PTHREAD_CANCEL_ASYNCHRONOUS$/;"	d
PTHREAD_CANCEL_DEFERRED	d:/include/pthread.h	/^  PTHREAD_CANCEL_DEFERRED,$/;"	e	enum:__anone6cbf2430a03	access:public
PTHREAD_CANCEL_DEFERRED	d:/include/pthread.h	/^#define PTHREAD_CANCEL_DEFERRED	PTHREAD_CANCEL_DEFERRED$/;"	d
PTHREAD_CANCEL_DISABLE	d:/include/pthread.h	/^  PTHREAD_CANCEL_DISABLE$/;"	e	enum:__anone6cbf2430903	access:public
PTHREAD_CANCEL_DISABLE	d:/include/pthread.h	/^#define PTHREAD_CANCEL_DISABLE  PTHREAD_CANCEL_DISABLE$/;"	d
PTHREAD_CANCEL_ENABLE	d:/include/pthread.h	/^  PTHREAD_CANCEL_ENABLE,$/;"	e	enum:__anone6cbf2430903	access:public
PTHREAD_CANCEL_ENABLE	d:/include/pthread.h	/^#define PTHREAD_CANCEL_ENABLE   PTHREAD_CANCEL_ENABLE$/;"	d
PTHREAD_COND_INITIALIZER	d:/include/pthread.h	/^#define PTHREAD_COND_INITIALIZER /;"	d
PTHREAD_CREATE_DETACHED	d:/include/pthread.h	/^  PTHREAD_CREATE_DETACHED$/;"	e	enum:__anone6cbf2430103	access:public
PTHREAD_CREATE_DETACHED	d:/include/pthread.h	/^#define PTHREAD_CREATE_DETACHED	PTHREAD_CREATE_DETACHED$/;"	d
PTHREAD_CREATE_JOINABLE	d:/include/pthread.h	/^  PTHREAD_CREATE_JOINABLE,$/;"	e	enum:__anone6cbf2430103	access:public
PTHREAD_CREATE_JOINABLE	d:/include/pthread.h	/^#define PTHREAD_CREATE_JOINABLE	PTHREAD_CREATE_JOINABLE$/;"	d
PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP	d:/include/pthread.h	/^# define PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_EXPLICIT_SCHED	d:/include/pthread.h	/^  PTHREAD_EXPLICIT_SCHED$/;"	e	enum:__anone6cbf2430603	access:public
PTHREAD_EXPLICIT_SCHED	d:/include/pthread.h	/^#define PTHREAD_EXPLICIT_SCHED  PTHREAD_EXPLICIT_SCHED$/;"	d
PTHREAD_INHERIT_SCHED	d:/include/pthread.h	/^  PTHREAD_INHERIT_SCHED,$/;"	e	enum:__anone6cbf2430603	access:public
PTHREAD_INHERIT_SCHED	d:/include/pthread.h	/^#define PTHREAD_INHERIT_SCHED   PTHREAD_INHERIT_SCHED$/;"	d
PTHREAD_MUTEX_ADAPTIVE_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_ADAPTIVE_NP$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_DEFAULT	d:/include/pthread.h	/^  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_ERRORCHECK	d:/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_ERRORCHECK_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_ERRORCHECK_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_FAST_NP	d:/include/pthread.h	/^  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_INITIALIZER	d:/include/pthread.h	/^#define PTHREAD_MUTEX_INITIALIZER /;"	d
PTHREAD_MUTEX_NORMAL	d:/include/pthread.h	/^  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_RECURSIVE	d:/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_RECURSIVE_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_MUTEX_ROBUST	d:/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST,$/;"	e	enum:__anone6cbf2430303	access:public
PTHREAD_MUTEX_ROBUST_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST$/;"	e	enum:__anone6cbf2430303	access:public
PTHREAD_MUTEX_STALLED	d:/include/pthread.h	/^  PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anone6cbf2430303	access:public
PTHREAD_MUTEX_STALLED_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,$/;"	e	enum:__anone6cbf2430303	access:public
PTHREAD_MUTEX_TIMED_NP	d:/include/pthread.h	/^  PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:__anone6cbf2430203	access:public
PTHREAD_ONCE_INIT	d:/include/pthread.h	/^#define PTHREAD_ONCE_INIT /;"	d
PTHREAD_PRIO_INHERIT	d:/include/pthread.h	/^  PTHREAD_PRIO_INHERIT,$/;"	e	enum:__anone6cbf2430403	access:public
PTHREAD_PRIO_NONE	d:/include/pthread.h	/^  PTHREAD_PRIO_NONE,$/;"	e	enum:__anone6cbf2430403	access:public
PTHREAD_PRIO_PROTECT	d:/include/pthread.h	/^  PTHREAD_PRIO_PROTECT$/;"	e	enum:__anone6cbf2430403	access:public
PTHREAD_PROCESS_PRIVATE	d:/include/pthread.h	/^  PTHREAD_PROCESS_PRIVATE,$/;"	e	enum:__anone6cbf2430803	access:public
PTHREAD_PROCESS_PRIVATE	d:/include/pthread.h	/^#define PTHREAD_PROCESS_PRIVATE PTHREAD_PROCESS_PRIVATE$/;"	d
PTHREAD_PROCESS_SHARED	d:/include/pthread.h	/^  PTHREAD_PROCESS_SHARED$/;"	e	enum:__anone6cbf2430803	access:public
PTHREAD_PROCESS_SHARED	d:/include/pthread.h	/^#define PTHREAD_PROCESS_SHARED  PTHREAD_PROCESS_SHARED$/;"	d
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP	d:/include/pthread.h	/^# define PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP /;"	d
PTHREAD_RWLOCK_DEFAULT_NP	d:/include/pthread.h	/^  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP$/;"	e	enum:__anone6cbf2430503	access:public
PTHREAD_RWLOCK_INITIALIZER	d:/include/pthread.h	/^# define PTHREAD_RWLOCK_INITIALIZER /;"	d
PTHREAD_RWLOCK_PREFER_READER_NP	d:/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_READER_NP,$/;"	e	enum:__anone6cbf2430503	access:public
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP	d:/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,$/;"	e	enum:__anone6cbf2430503	access:public
PTHREAD_RWLOCK_PREFER_WRITER_NP	d:/include/pthread.h	/^  PTHREAD_RWLOCK_PREFER_WRITER_NP,$/;"	e	enum:__anone6cbf2430503	access:public
PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP	d:/include/pthread.h	/^#  define PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP /;"	d
PTHREAD_SCOPE_PROCESS	d:/include/pthread.h	/^  PTHREAD_SCOPE_PROCESS$/;"	e	enum:__anone6cbf2430703	access:public
PTHREAD_SCOPE_PROCESS	d:/include/pthread.h	/^#define PTHREAD_SCOPE_PROCESS   PTHREAD_SCOPE_PROCESS$/;"	d
PTHREAD_SCOPE_SYSTEM	d:/include/pthread.h	/^  PTHREAD_SCOPE_SYSTEM,$/;"	e	enum:__anone6cbf2430703	access:public
PTHREAD_SCOPE_SYSTEM	d:/include/pthread.h	/^#define PTHREAD_SCOPE_SYSTEM    PTHREAD_SCOPE_SYSTEM$/;"	d
PTHREAD_STACK_MIN	d:/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h	/^#   define PTHREAD_STACK_MIN /;"	d
PTHREAD_STACK_MIN	d:/include/x86_64-linux-gnu/bits/pthread_stack_min.h	/^#define PTHREAD_STACK_MIN	/;"	d
PTRDIFF_MAX	d:/include/stdint.h	/^#   define PTRDIFF_MAX	/;"	d
PTRDIFF_MAX	d:/include/stdint.h	/^#  define PTRDIFF_MAX	/;"	d
PTRDIFF_MIN	d:/include/stdint.h	/^#   define PTRDIFF_MIN	/;"	d
PTRDIFF_MIN	d:/include/stdint.h	/^#  define PTRDIFF_MIN	/;"	d
PTRDIFF_WIDTH	d:/include/stdint.h	/^# define PTRDIFF_WIDTH /;"	d
P_tmpdir	d:/include/stdio.h	/^# define P_tmpdir	/;"	d
RAND_MAX	../../../../../../usr/include/stdlib.h	/^#define RAND_MAX __RAND_MAX$/;"	d
RENAME_EXCHANGE	d:/include/stdio.h	/^# define RENAME_EXCHANGE /;"	d
RENAME_NOREPLACE	d:/include/stdio.h	/^# define RENAME_NOREPLACE /;"	d
RENAME_WHITEOUT	d:/include/stdio.h	/^# define RENAME_WHITEOUT /;"	d
SCHED_ATTR_SIZE_VER0	d:/include/x86_64-linux-gnu/bits/sched.h	/^#  define SCHED_ATTR_SIZE_VER0 /;"	d
SCHED_ATTR_SIZE_VER1	d:/include/x86_64-linux-gnu/bits/sched.h	/^#  define SCHED_ATTR_SIZE_VER1 /;"	d
SCHED_BATCH	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_BATCH	/;"	d
SCHED_DEADLINE	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_DEADLINE	/;"	d
SCHED_EXT	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_EXT	/;"	d
SCHED_FIFO	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FIFO	/;"	d
SCHED_FLAG_DL_OVERRUN	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_DL_OVERRUN	/;"	d
SCHED_FLAG_KEEP_ALL	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_KEEP_ALL /;"	d
SCHED_FLAG_KEEP_PARAMS	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_KEEP_PARAMS	/;"	d
SCHED_FLAG_KEEP_POLICY	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_KEEP_POLICY	/;"	d
SCHED_FLAG_RECLAIM	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_RECLAIM	/;"	d
SCHED_FLAG_RESET_ON_FORK	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_RESET_ON_FORK	/;"	d
SCHED_FLAG_UTIL_CLAMP	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_UTIL_CLAMP /;"	d
SCHED_FLAG_UTIL_CLAMP_MAX	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_UTIL_CLAMP_MAX	/;"	d
SCHED_FLAG_UTIL_CLAMP_MIN	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_FLAG_UTIL_CLAMP_MIN	/;"	d
SCHED_IDLE	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_IDLE	/;"	d
SCHED_ISO	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_ISO	/;"	d
SCHED_NORMAL	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_NORMAL	/;"	d
SCHED_OTHER	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_OTHER	/;"	d
SCHED_RESET_ON_FORK	d:/include/x86_64-linux-gnu/bits/sched.h	/^# define SCHED_RESET_ON_FORK	/;"	d
SCHED_RR	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define SCHED_RR	/;"	d
SEEK_CUR	d:/include/stdio.h	/^#define SEEK_CUR	/;"	d
SEEK_DATA	d:/include/stdio.h	/^# define SEEK_DATA	/;"	d
SEEK_END	d:/include/stdio.h	/^#define SEEK_END	/;"	d
SEEK_HOLE	d:/include/stdio.h	/^# define SEEK_HOLE	/;"	d
SEEK_SET	d:/include/stdio.h	/^#define SEEK_SET	/;"	d
SIG_ATOMIC_MAX	d:/include/stdint.h	/^# define SIG_ATOMIC_MAX	/;"	d
SIG_ATOMIC_MIN	d:/include/stdint.h	/^# define SIG_ATOMIC_MIN	/;"	d
SIG_ATOMIC_WIDTH	d:/include/stdint.h	/^# define SIG_ATOMIC_WIDTH /;"	d
SIZE_MAX	d:/include/stdint.h	/^#   define SIZE_MAX	/;"	d
SIZE_MAX	d:/include/stdint.h	/^#  define SIZE_MAX	/;"	d
SIZE_WIDTH	d:/include/stdint.h	/^# define SIZE_WIDTH /;"	d
SharedInt	move_shared_ptr.cpp	/^  explicit SharedInt(int val) : sp{std::make_shared<int>(val)} {}$/;"	f	class:SharedInt	file:	access:public	signature:(int val)
SharedInt	move_shared_ptr.cpp	/^class SharedInt {$/;"	c	file:
SharedInt::SharedInt	move_shared_ptr.cpp	/^  explicit SharedInt(int val) : sp{std::make_shared<int>(val)} {}$/;"	f	class:SharedInt	file:	access:public	signature:(int val)
SharedInt::asString	move_shared_ptr.cpp	/^  std::string asString() const { return std::to_string(*sp) }$/;"	f	class:SharedInt	typeref:typename:std::string	file:	access:public	signature:() const
SharedInt::sp	move_shared_ptr.cpp	/^  std::shared_ptr<int> sp;$/;"	m	class:SharedInt	typeref:typename:std::shared_ptr<int>	file:	access:private
Sudden_Underflow	../../../../../../usr/include/machine/ieeefp.h	/^#define Sudden_Underflow /;"	d
TIMER_ABSTIME	d:/include/x86_64-linux-gnu/bits/time.h	/^# define TIMER_ABSTIME	/;"	d
TIME_UTC	d:/include/time.h	/^# define TIME_UTC /;"	d
TMP_MAX	d:/include/stdio.h	/^#define TMP_MAX /;"	d
UINT16_C	d:/include/stdint.h	/^# define UINT16_C(/;"	d	signature:(c)
UINT16_MAX	d:/include/stdint.h	/^# define UINT16_MAX	/;"	d
UINT16_WIDTH	d:/include/stdint.h	/^# define UINT16_WIDTH /;"	d
UINT32_C	d:/include/stdint.h	/^# define UINT32_C(/;"	d	signature:(c)
UINT32_MAX	d:/include/stdint.h	/^# define UINT32_MAX	/;"	d
UINT32_WIDTH	d:/include/stdint.h	/^# define UINT32_WIDTH /;"	d
UINT64_C	d:/include/stdint.h	/^#  define UINT64_C(/;"	d	signature:(c)
UINT64_MAX	d:/include/stdint.h	/^# define UINT64_MAX	/;"	d
UINT64_WIDTH	d:/include/stdint.h	/^# define UINT64_WIDTH /;"	d
UINT8_C	d:/include/stdint.h	/^# define UINT8_C(/;"	d	signature:(c)
UINT8_MAX	d:/include/stdint.h	/^# define UINT8_MAX	/;"	d
UINT8_WIDTH	d:/include/stdint.h	/^# define UINT8_WIDTH /;"	d
UINTMAX_C	d:/include/stdint.h	/^#  define UINTMAX_C(/;"	d	signature:(c)
UINTMAX_MAX	d:/include/stdint.h	/^# define UINTMAX_MAX	/;"	d
UINTMAX_WIDTH	d:/include/stdint.h	/^# define UINTMAX_WIDTH /;"	d
UINTPTR_MAX	d:/include/stdint.h	/^#  define UINTPTR_MAX	/;"	d
UINTPTR_WIDTH	d:/include/stdint.h	/^# define UINTPTR_WIDTH /;"	d
UINT_FAST16_MAX	d:/include/stdint.h	/^#  define UINT_FAST16_MAX	/;"	d
UINT_FAST16_WIDTH	d:/include/stdint.h	/^# define UINT_FAST16_WIDTH /;"	d
UINT_FAST32_MAX	d:/include/stdint.h	/^#  define UINT_FAST32_MAX	/;"	d
UINT_FAST32_WIDTH	d:/include/stdint.h	/^# define UINT_FAST32_WIDTH /;"	d
UINT_FAST64_MAX	d:/include/stdint.h	/^# define UINT_FAST64_MAX	/;"	d
UINT_FAST64_WIDTH	d:/include/stdint.h	/^# define UINT_FAST64_WIDTH /;"	d
UINT_FAST8_MAX	d:/include/stdint.h	/^# define UINT_FAST8_MAX	/;"	d
UINT_FAST8_WIDTH	d:/include/stdint.h	/^# define UINT_FAST8_WIDTH /;"	d
UINT_LEAST16_MAX	d:/include/stdint.h	/^# define UINT_LEAST16_MAX	/;"	d
UINT_LEAST16_WIDTH	d:/include/stdint.h	/^# define UINT_LEAST16_WIDTH /;"	d
UINT_LEAST32_MAX	d:/include/stdint.h	/^# define UINT_LEAST32_MAX	/;"	d
UINT_LEAST32_WIDTH	d:/include/stdint.h	/^# define UINT_LEAST32_WIDTH /;"	d
UINT_LEAST64_MAX	d:/include/stdint.h	/^# define UINT_LEAST64_MAX	/;"	d
UINT_LEAST64_WIDTH	d:/include/stdint.h	/^# define UINT_LEAST64_WIDTH /;"	d
UINT_LEAST8_MAX	d:/include/stdint.h	/^# define UINT_LEAST8_MAX	/;"	d
UINT_LEAST8_WIDTH	d:/include/stdint.h	/^# define UINT_LEAST8_WIDTH /;"	d
UINT_MAX	../../../../../../usr/include/sys/config.h	/^#define UINT_MAX /;"	d
WAIT_ANY	../../../../../../usr/include/cygwin/wait.h	/^#define WAIT_ANY	/;"	d
WAIT_MYPGRP	../../../../../../usr/include/cygwin/wait.h	/^#define WAIT_MYPGRP	/;"	d
WCHAR_MAX	d:/include/stdint.h	/^#  define WCHAR_MAX		__WCHAR_MAX$/;"	d
WCHAR_MAX	d:/include/wchar.h	/^# define WCHAR_MAX __WCHAR_MAX$/;"	d
WCHAR_MIN	d:/include/stdint.h	/^#  define WCHAR_MIN		__WCHAR_MIN$/;"	d
WCHAR_MIN	d:/include/wchar.h	/^# define WCHAR_MIN __WCHAR_MIN$/;"	d
WCHAR_WIDTH	d:/include/stdint.h	/^# define WCHAR_WIDTH /;"	d
WCONTINUED	../../../../../../usr/include/cygwin/wait.h	/^#define WCONTINUED /;"	d
WCOREDUMP	../../../../../../usr/include/cygwin/wait.h	/^#define WCOREDUMP(/;"	d	signature:(_w)
WEOF	d:/include/wchar.h	/^# define WEOF /;"	d
WEOF	d:/include/wctype.h	/^# define WEOF /;"	d
WEXITSTATUS	../../../../../../usr/include/cygwin/wait.h	/^#define WEXITSTATUS(/;"	d	signature:(_w)
WIFCONTINUED	../../../../../../usr/include/cygwin/wait.h	/^#define WIFCONTINUED(/;"	d	signature:(_w)
WIFEXITED	../../../../../../usr/include/cygwin/wait.h	/^#define WIFEXITED(/;"	d	signature:(_w)
WIFSIGNALED	../../../../../../usr/include/cygwin/wait.h	/^#define WIFSIGNALED(/;"	d	signature:(_w)
WIFSTOPPED	../../../../../../usr/include/cygwin/wait.h	/^#define WIFSTOPPED(/;"	d	signature:(_w)
WINT_MAX	d:/include/stdint.h	/^# define WINT_MAX	/;"	d
WINT_MIN	d:/include/stdint.h	/^# define WINT_MIN	/;"	d
WINT_WIDTH	d:/include/stdint.h	/^# define WINT_WIDTH /;"	d
WNOHANG	../../../../../../usr/include/cygwin/wait.h	/^#define WNOHANG /;"	d
WSTOPSIG	../../../../../../usr/include/cygwin/wait.h	/^#define WSTOPSIG	/;"	d
WTERMSIG	../../../../../../usr/include/cygwin/wait.h	/^#define WTERMSIG(/;"	d	signature:(_w)
WUNTRACED	../../../../../../usr/include/cygwin/wait.h	/^#define WUNTRACED /;"	d
_ALIGNED_BUFFER_H	d:/include/c++/14/ext/aligned_buffer.h	/^#define _ALIGNED_BUFFER_H /;"	d
_ALLOCATED_PTR_H	d:/include/c++/14/bits/allocated_ptr.h	/^#define _ALLOCATED_PTR_H /;"	d
_ALLOCATOR_H	d:/include/c++/14/bits/allocator.h	/^#define _ALLOCATOR_H /;"	d
_ALLOCA_H	d:/include/alloca.h	/^#define	_ALLOCA_H	/;"	d
_ALLOC_TRAITS_H	d:/include/c++/14/bits/alloc_traits.h	/^#define _ALLOC_TRAITS_H /;"	d
_ANSIDECL_H_	../../../../../../usr/include/_ansi.h	/^#define	_ANSIDECL_H_$/;"	d
_ASM_GENERIC_ERRNO_BASE_H	d:/include/asm-generic/errno-base.h	/^#define _ASM_GENERIC_ERRNO_BASE_H$/;"	d
_ASM_GENERIC_ERRNO_H	d:/include/asm-generic/errno.h	/^#define _ASM_GENERIC_ERRNO_H$/;"	d
_ATEXIT_DYNAMIC_ALLOC	../../../../../../usr/include/newlib.h	/^#define _ATEXIT_DYNAMIC_ALLOC /;"	d
_ATEXIT_INIT	../../../../../../usr/include/sys/reent.h	/^# define _ATEXIT_INIT /;"	d
_ATEXIT_SIZE	../../../../../../usr/include/sys/reent.h	/^#define	_ATEXIT_SIZE /;"	d
_ATFILE_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_ATFILE_SOURCE	/;"	d
_ATFILE_SOURCE	d:/include/features.h	/^# define _ATFILE_SOURCE	/;"	d
_ATTRIBUTE	../../../../../../usr/include/_ansi.h	/^#define _ATTRIBUTE(/;"	d	signature:(attrs)
_A_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<0, _Alloc>	_A_base;$/;"	t	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:_Sp_ebo_helper<0,_Alloc>	access:private
_Alloc	d:/include/c++/14/bits/shared_ptr.h	/^	  using _Alloc = allocator<_Sp_overwrite_tag>;$/;"	t	function:std::make_shared_for_overwrite	typeref:typename:allocator<_Sp_overwrite_tag>
_Alloc	d:/include/c++/14/bits/shared_ptr.h	/^      using _Alloc = allocator<void>;$/;"	t	function:std::make_shared	typeref:typename:allocator<void>
_Alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Alloc = allocator<_Sp_cd_type>;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:allocator<_Sp_cd_type>
_Alloc2	d:/include/c++/14/bits/shared_ptr.h	/^	  using _Alloc2 = __alloc_rebind<_Alloc, _Sp_overwrite_tag>;$/;"	t	function:std::allocate_shared_for_overwrite	typeref:typename:__alloc_rebind<_Alloc,_Sp_overwrite_tag>
_Alloc_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;$/;"	t	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Sp_ebo_helper<1,_Alloc>	access:private
_Alloc_hider	d:/include/c++/14/bits/basic_string.h	/^	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(pointer __dat,const _Alloc & __a=_Alloc ())
_Alloc_hider	d:/include/c++/14/bits/basic_string.h	/^      struct _Alloc_hider : allocator_type \/\/ TODO check __is_final$/;"	s	class:std::basic_string	inherits:allocator_type	access:private
_Alloc_hider	d:/include/c++/14/bits/cow_string.h	/^	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(_CharT * __dat,const _Alloc & __a)
_Alloc_hider	d:/include/c++/14/bits/cow_string.h	/^      struct _Alloc_hider : _Alloc$/;"	s	class:std::basic_string	inherits:_Alloc	access:private
_Alloc_traits	d:/include/c++/14/bits/basic_string.h	/^      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Char_alloc_type>	access:private
_Alloc_traits	d:/include/c++/14/bits/basic_string.h	/^      typedef __gnu_cxx::__alloc_traits<allocator_type> _Alloc_traits;$/;"	t	function:std::__str_concat	typeref:typename:__gnu_cxx::__alloc_traits<allocator_type>
_Alloc_traits	d:/include/c++/14/bits/basic_string.h	/^      using _Alloc_traits = allocator_traits<_Alloc>;$/;"	t	function:std::operator +	typeref:typename:allocator_traits<_Alloc>
_Alloc_traits	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Alloc_traits = allocator_traits<_Alloc>;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:allocator_traits<_Alloc>
_Arg1_type	d:/include/c++/14/backward/binders.h	/^      typedef typename _Operation::first_argument_type _Arg1_type;$/;"	t	function:std::bind1st	typeref:typename:_Operation::first_argument_type
_Arg2_type	d:/include/c++/14/backward/binders.h	/^      typedef typename _Operation::second_argument_type _Arg2_type;$/;"	t	function:std::bind2nd	typeref:typename:_Operation::second_argument_type
_Assignable	d:/include/c++/14/bits/shared_ptr.h	/^	using _Assignable = typename enable_if<$/;"	t	class:std::shared_ptr	typeref:typename:enable_if<is_assignable<__shared_ptr<_Tp> &,_Arg>::value,shared_ptr &>::type	access:private
_Assignable	d:/include/c++/14/bits/shared_ptr.h	/^	using _Assignable = typename enable_if<$/;"	t	class:std::weak_ptr	typeref:typename:enable_if<is_assignable<__weak_ptr<_Tp> &,_Arg>::value,weak_ptr &>::type	access:private
_Assignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Assignable = _Compatible<_Yp, __shared_ptr&>;$/;"	t	class:std::__shared_ptr	typeref:typename:_Compatible<_Yp,__shared_ptr &>	access:private
_Assignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Assignable = _Compatible<_Yp, __weak_ptr&>;$/;"	t	class:std::__weak_ptr	typeref:typename:_Compatible<_Yp,__weak_ptr &>	access:private
_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count(__count_type&& __c) noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:(__count_type && __c)
_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count(const _Atomic_count&) = delete;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:(const _Atomic_count &)
_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	constexpr _Atomic_count() noexcept = default;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:()
_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      struct _Atomic_count$/;"	s	class:std::_Sp_atomic	access:private
_BACKWARD_AUTO_PTR_H	d:/include/c++/14/backward/auto_ptr.h	/^#define _BACKWARD_AUTO_PTR_H /;"	d
_BACKWARD_BINDERS_H	d:/include/c++/14/backward/binders.h	/^#define _BACKWARD_BINDERS_H /;"	d
_BASIC_IOS_H	d:/include/c++/14/bits/basic_ios.h	/^#define _BASIC_IOS_H /;"	d
_BASIC_STRING_H	d:/include/c++/14/bits/basic_string.h	/^#define _BASIC_STRING_H /;"	d
_BEGIN_STD_C	../../../../../../usr/include/_ansi.h	/^#define _BEGIN_STD_C /;"	d
_BEGIN_STD_C	../../../../../../usr/include/_ansi.h	/^#define _BEGIN_STD_C$/;"	d
_BITS_ATOMIC_WIDE_COUNTER_H	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^#define _BITS_ATOMIC_WIDE_COUNTER_H$/;"	d
_BITS_CPU_SET_H	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define _BITS_CPU_SET_H /;"	d
_BITS_ENDIANNESS_H	d:/include/x86_64-linux-gnu/bits/endianness.h	/^#define _BITS_ENDIANNESS_H /;"	d
_BITS_ENDIAN_H	d:/include/x86_64-linux-gnu/bits/endian.h	/^#define _BITS_ENDIAN_H /;"	d
_BITS_ERRNO_H	d:/include/x86_64-linux-gnu/bits/errno.h	/^#define _BITS_ERRNO_H /;"	d
_BITS_FLOATN_COMMON_H	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define _BITS_FLOATN_COMMON_H$/;"	d
_BITS_FLOATN_H	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#define _BITS_FLOATN_H$/;"	d
_BITS_LOCALE_H	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define _BITS_LOCALE_H	/;"	d
_BITS_PTHREADTYPES_ARCH_H	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define _BITS_PTHREADTYPES_ARCH_H	/;"	d
_BITS_PTHREADTYPES_COMMON_H	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^# define _BITS_PTHREADTYPES_COMMON_H	/;"	d
_BITS_SCHED_H	d:/include/x86_64-linux-gnu/bits/sched.h	/^#define _BITS_SCHED_H /;"	d
_BITS_SETJMP_H	d:/include/x86_64-linux-gnu/bits/setjmp.h	/^#define _BITS_SETJMP_H /;"	d
_BITS_STDINT_INTN_H	d:/include/x86_64-linux-gnu/bits/stdint-intn.h	/^#define _BITS_STDINT_INTN_H	/;"	d
_BITS_STDINT_LEAST_H	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^#define _BITS_STDINT_LEAST_H	/;"	d
_BITS_STDINT_UINTN_H	d:/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^#define _BITS_STDINT_UINTN_H	/;"	d
_BITS_STDIO_LIM_H	d:/include/x86_64-linux-gnu/bits/stdio_lim.h	/^#define _BITS_STDIO_LIM_H /;"	d
_BITS_TIME64_H	d:/include/x86_64-linux-gnu/bits/time64.h	/^#define	_BITS_TIME64_H	/;"	d
_BITS_TIME_H	d:/include/x86_64-linux-gnu/bits/time.h	/^#define _BITS_TIME_H	/;"	d
_BITS_TYPESIZES_H	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define	_BITS_TYPESIZES_H	/;"	d
_BITS_TYPES_H	d:/include/x86_64-linux-gnu/bits/types.h	/^#define	_BITS_TYPES_H	/;"	d
_BITS_TYPES_LOCALE_T_H	d:/include/x86_64-linux-gnu/bits/types/locale_t.h	/^#define _BITS_TYPES_LOCALE_T_H /;"	d
_BITS_TYPES_STRUCT_SCHED_PARAM	d:/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^#define _BITS_TYPES_STRUCT_SCHED_PARAM /;"	d
_BITS_TYPES___LOCALE_T_H	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^#define _BITS_TYPES___LOCALE_T_H /;"	d
_BITS_WCHAR_H	d:/include/x86_64-linux-gnu/bits/wchar.h	/^#define _BITS_WCHAR_H	/;"	d
_BITS_WCTYPE_WCHAR_H	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^#define _BITS_WCTYPE_WCHAR_H /;"	d
_Base	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;$/;"	t	struct:std::__is_random_access_iter	typeref:typename:is_base_of<random_access_iterator_tag,_Cat>	access:public
_Base_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef std::allocator_traits<_Alloc>           _Base_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::allocator_traits<_Alloc>	access:public
_Bigint	../../../../../../usr/include/sys/reent.h	/^struct _Bigint$/;"	s
_Bigint::_k	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_Bigint::_maxwds	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_Bigint::_next	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_next;$/;"	m	struct:_Bigint	typeref:struct:_Bigint *	access:public
_Bigint::_sign	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_Bigint::_wds	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_Bigint::_x	../../../../../../usr/include/sys/reent.h	/^  __ULong _x[1];$/;"	m	struct:_Bigint	typeref:typename:__ULong[1]	access:public
_BoundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _BoundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
_BoundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _BoundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<__is_array_known_bounds<_Tp>::value,_Tp>
_Build_index_tuple	d:/include/c++/14/bits/utility.h	/^    struct _Build_index_tuple$/;"	s	namespace:std
_CHAR_TRAITS_H	d:/include/c++/14/bits/char_traits.h	/^#define _CHAR_TRAITS_H /;"	d
_CIter	d:/include/c++/14/bits/stl_iterator.h	/^	  using _CIter = common_iterator<_Iter, _Sent>;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:common_iterator<_Iter,_Sent>	access:public
_CLOCKID_T_	../../../../../../usr/include/sys/_types.h	/^#define	_CLOCKID_T_ /;"	d
_CLOCK_T_	../../../../../../usr/include/sys/_types.h	/^#define	_CLOCK_T_	/;"	d
_CONCEPT_CHECK_H	d:/include/c++/14/bits/concept_check.h	/^#define _CONCEPT_CHECK_H /;"	d
_CONCURRENCE_H	d:/include/c++/14/ext/concurrence.h	/^#define _CONCURRENCE_H /;"	d
_COW_STRING_H	d:/include/c++/14/bits/cow_string.h	/^#define _COW_STRING_H /;"	d
_CPP_TYPE_TRAITS_H	d:/include/c++/14/bits/cpp_type_traits.h	/^#define _CPP_TYPE_TRAITS_H /;"	d
_CT	d:/include/c++/14/bits/unique_ptr.h	/^	                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;$/;"	t	function:std::operator <	typeref:typename:std::common_type<typename unique_ptr<_Tp,_Dp>::pointer,typename unique_ptr<_Up,_Ep>::pointer>::type
_CTYPE_H	d:/include/ctype.h	/^#define	_CTYPE_H	/;"	d
_CXXABI_FORCED_H	d:/include/c++/14/bits/cxxabi_forced.h	/^#define _CXXABI_FORCED_H /;"	d
_CXXABI_INIT_EXCEPTION_H	d:/include/c++/14/bits/cxxabi_init_exception.h	/^#define _CXXABI_INIT_EXCEPTION_H /;"	d
_CYGWIN_CONFIG_H	../../../../../../usr/include/cygwin/config.h	/^#define _CYGWIN_CONFIG_H$/;"	d
_CYGWIN_STDLIB_H	../../../../../../usr/include/cygwin/stdlib.h	/^#define _CYGWIN_STDLIB_H$/;"	d
_CYGWIN_WAIT_H	../../../../../../usr/include/cygwin/wait.h	/^#define _CYGWIN_WAIT_H$/;"	d
_Callback_list	d:/include/c++/14/bits/ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
_Callback_list	d:/include/c++/14/bits/ios_base.h	/^    struct _Callback_list$/;"	s	class:std::ios_base	access:protected
_Cat	d:/include/c++/14/bits/char_traits.h	/^	    using _Cat = typename _ChTraits::comparison_category;$/;"	t	function:std::__detail::__char_traits_cmp_cat	typeref:typename:_ChTraits::comparison_category
_Cat	d:/include/c++/14/bits/stl_algobase.h	/^      using _Cat = decltype(__comp(*__first1, *__first2));$/;"	t	function:std::lexicographical_compare_three_way
_Cat1	d:/include/c++/14/bits/stl_algobase.h	/^      using _Cat1 = typename iterator_traits<_II1>::iterator_category;$/;"	t	function:std::__equal4	typeref:typename:iterator_traits<_II1>::iterator_category
_Cat2	d:/include/c++/14/bits/stl_algobase.h	/^      using _Cat2 = typename iterator_traits<_II2>::iterator_category;$/;"	t	function:std::__equal4	typeref:typename:iterator_traits<_II2>::iterator_category
_Category	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_BI1>::iterator_category _Category;$/;"	t	function:std::__copy_move_backward_a2	typeref:typename:iterator_traits<_BI1>::iterator_category
_Category	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II>::iterator_category _Category;$/;"	t	function:std::__copy_move_a2	typeref:typename:iterator_traits<_II>::iterator_category
_Category1	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::iterator_category _Category1;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:iterator_traits<_II1>::iterator_category
_Category2	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::iterator_category _Category2;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:iterator_traits<_II2>::iterator_category
_CharT_alloc_traits	d:/include/c++/14/bits/cow_string.h	/^      typedef __gnu_cxx::__alloc_traits<_CharT_alloc_type> _CharT_alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_CharT_alloc_type>	access:private
_CharT_alloc_type	d:/include/c++/14/bits/cow_string.h	/^	rebind<_CharT>::other _CharT_alloc_type;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<_CharT>::other	access:private
_Char_alloc_type	d:/include/c++/14/bits/basic_string.h	/^      using _Char_alloc_type = _Alloc;$/;"	t	class:std::basic_string	typeref:typename:_Alloc	access:private
_Char_types	d:/include/c++/14/bits/char_traits.h	/^    struct _Char_types$/;"	s	namespace:__gnu_cxx
_Compatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Compatible = typename$/;"	t	class:std::__shared_ptr	typeref:typename:enable_if<__sp_compatible_with<_Yp *,_Tp * >::value,_Res>::type	access:private
_Compatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Compatible = typename$/;"	t	class:std::__weak_ptr	typeref:typename:enable_if<__sp_compatible_with<_Yp *,_Tp * >::value,_Res>::type	access:private
_Construct	d:/include/c++/14/bits/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
_Construct	d:/include/c++/14/bits/stl_construct.h	/^    _Construct(_Tp* __p, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_Tp * __p,_Args &&...__args)
_Construct_novalue	d:/include/c++/14/bits/stl_construct.h	/^    _Construct_novalue(_T1* __p)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p)
_Constructible	d:/include/c++/14/bits/shared_ptr.h	/^	using _Constructible = typename enable_if<$/;"	t	class:std::shared_ptr	typeref:typename:enable_if<is_constructible<__shared_ptr<_Tp>,_Args...>::value>::type	access:private
_Constructible	d:/include/c++/14/bits/shared_ptr.h	/^	using _Constructible = typename enable_if<$/;"	t	class:std::weak_ptr	typeref:typename:enable_if<is_constructible<__weak_ptr<_Tp>,_Arg>::value>::type	access:private
_ConstructiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_CopyConstructible	d:/include/c++/14/bits/nested_exception.h	/^      using _CopyConstructible$/;"	t	function:std::throw_with_nested	typeref:typename:__and_<is_copy_constructible<_Up>,is_move_constructible<_Up>>
_Cxx_hashtable_define_trivial_hash	d:/include/c++/14/bits/functional_hash.h	/^#define _Cxx_hashtable_define_trivial_hash(/;"	d	signature:(_Tp)
_DEFAULT_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_DEFAULT_SOURCE	/;"	d
_DEFAULT_SOURCE	d:/include/features.h	/^# define _DEFAULT_SOURCE	/;"	d
_DOUBLE_IS_32BITS	../../../../../../usr/include/machine/ieeefp.h	/^# define _DOUBLE_IS_32BITS$/;"	d
_DOUBLE_IS_32BITS	../../../../../../usr/include/machine/ieeefp.h	/^#define _DOUBLE_IS_32BITS$/;"	d
_DYNAMIC_STACK_SIZE_SOURCE	d:/include/features.h	/^# define _DYNAMIC_STACK_SIZE_SOURCE /;"	d
_DanglingCheck1	d:/include/c++/14/bits/stl_pair.h	/^	  typedef int _DanglingCheck1[$/;"	t	function:std::pair::pair	typeref:typename:int[__reference_constructs_from_temporary (_T1,const _U1 &)?-1:1]
_DanglingCheck2	d:/include/c++/14/bits/stl_pair.h	/^	  typedef int _DanglingCheck2[$/;"	t	function:std::pair::pair	typeref:typename:int[__reference_constructs_from_temporary (_T2,const _U2 &)?-1:1]
_Del2	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Del2 = __conditional_t<is_reference<_Del>::value,$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:__conditional_t<is_reference<_Del>::value,reference_wrapper<typename remove_reference<_Del>::type>,_Del>
_Del_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;$/;"	t	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Sp_ebo_helper<0,_Deleter>	access:private
_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^	using _DeleterConstraint =$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Up>::_DeleterConstraint::type	access:private
_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^      using _DeleterConstraint = enable_if<$/;"	t	class:std::__uniq_ptr_impl	typeref:typename:enable_if<__and_<__not_<is_pointer<_Dp>>,is_default_constructible<_Dp>>::value>	access:public
_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^      using _DeleterConstraint =$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Up>::_DeleterConstraint::type	access:private
_Destroy	d:/include/c++/14/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
_Destroy	d:/include/c++/14/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Tp * __pointer)
_Destroy_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_aux$/;"	s	namespace:std
_Destroy_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_aux<true>$/;"	s	namespace:std
_Destroy_n	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
_Destroy_n_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_n_aux$/;"	s	namespace:std
_Destroy_n_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_n_aux<true>$/;"	s	namespace:std
_Diff	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Diff$/;"	s	struct:std::allocator_traits	access:private
_Diff	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>$/;"	s	struct:std::allocator_traits	access:private
_Diff	d:/include/c++/14/bits/atomic_base.h	/^      using _Diff = __conditional_t<is_pointer_v<_Tp>, ptrdiff_t, _Val<_Tp>>;$/;"	t	namespace:std::__atomic_impl	typeref:typename:__conditional_t<is_pointer_v<_Tp>,ptrdiff_t,_Val<_Tp>>
_Distance	d:/include/c++/14/bits/stl_algobase.h	/^	  typedef typename iterator_traits<_II>::difference_type _Distance;$/;"	t	function:std::__copy_move::__copy_m	typeref:typename:iterator_traits<_II>::difference_type
_DistanceType	d:/include/c++/14/bits/stl_algobase.h	/^	_DistanceType;$/;"	t	function:std::__lower_bound	typeref:typename:iterator_traits<_ForwardIterator>::difference_type
_ELIDABLE_INLINE	../../../../../../usr/include/_ansi.h	/^#define _ELIDABLE_INLINE /;"	d
_END_STD_C	../../../../../../usr/include/_ansi.h	/^#define _END_STD_C /;"	d
_END_STD_C	../../../../../../usr/include/_ansi.h	/^#define _END_STD_C$/;"	d
_ERRNO_H	d:/include/errno.h	/^#define	_ERRNO_H /;"	d
_EXCEPTION_DEFINES_H	d:/include/c++/14/bits/exception_defines.h	/^#define _EXCEPTION_DEFINES_H /;"	d
_EXCEPTION_PTR_H	d:/include/c++/14/bits/exception_ptr.h	/^#define _EXCEPTION_PTR_H$/;"	d
_EXT_ALLOC_TRAITS_H	d:/include/c++/14/ext/alloc_traits.h	/^#define _EXT_ALLOC_TRAITS_H /;"	d
_EXT_NUMERIC_TRAITS	d:/include/c++/14/ext/numeric_traits.h	/^#define _EXT_NUMERIC_TRAITS /;"	d
_EXT_TYPE_TRAITS	d:/include/c++/14/ext/type_traits.h	/^#define _EXT_TYPE_TRAITS /;"	d
_Ex2	d:/include/c++/14/bits/exception_ptr.h	/^      using _Ex2 = typename decay<_Ex>::type;$/;"	t	function:std::make_exception_ptr	typeref:typename:decay<_Ex>::type
_Exit	../../../../../../usr/include/stdlib.h	/^void	_Exit (int __status) _ATTRIBUTE ((__noreturn__));$/;"	p	typeref:typename:void	signature:(int __status)
_FEATURES_H	d:/include/features.h	/^#define	_FEATURES_H	/;"	d
_FLOAT_ARG	../../../../../../usr/include/machine/ieeefp.h	/^#define _FLOAT_ARG /;"	d
_FLOAT_RET	../../../../../../usr/include/sys/config.h	/^#define _FLOAT_RET /;"	d
_FSEEK_OPTIMIZATION	../../../../../../usr/include/newlib.h	/^#define _FSEEK_OPTIMIZATION /;"	d
_FUNCTEXCEPT_H	d:/include/c++/14/bits/functexcept.h	/^#define _FUNCTEXCEPT_H /;"	d
_FUNCTIONAL_HASH_H	d:/include/c++/14/bits/functional_hash.h	/^#define _FUNCTIONAL_HASH_H /;"	d
_FVWRITE_IN_STREAMIO	../../../../../../usr/include/newlib.h	/^#define _FVWRITE_IN_STREAMIO /;"	d
_Float128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^typedef __float128 _Float128;$/;"	t	typeref:typename:__float128
_Float16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef float _Float16 __attribute__ ((__mode__ (__HF__)));$/;"	t	typeref:typename:float
_Float32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef float _Float32;$/;"	t	typeref:typename:float
_Float32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef double _Float32x;$/;"	t	typeref:typename:double
_Float64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef double _Float64;$/;"	t	typeref:typename:double
_Float64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef long double _Float64;$/;"	t	typeref:typename:long double
_Float64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef _Float128 _Float64x;$/;"	t	typeref:typename:_Float128
_Float64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef long double _Float64x;$/;"	t	typeref:typename:long double
_Fnv_hash_bytes	d:/include/c++/14/bits/hash_bytes.h	/^  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
_Fnv_hash_impl	d:/include/c++/14/bits/functional_hash.h	/^  struct _Fnv_hash_impl$/;"	s	namespace:std
_From	d:/include/c++/14/bits/stl_uninitialized.h	/^      typedef typename iterator_traits<_InputIterator>::reference _From;$/;"	t	function:std::uninitialized_copy	typeref:typename:iterator_traits<_InputIterator>::reference
_From	d:/include/c++/14/bits/stl_uninitialized.h	/^      using _From = decltype(*__first);$/;"	t	function:std::uninitialized_copy
_GLIBCXX11_DEPRECATED	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::auto_ptr
_GLIBCXX11_DEPRECATED	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::auto_ptr_ref
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun1_ref_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun1_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun_ref_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun1_ref_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun1_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun_ref_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun_t
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::pointer_to_binary_function
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::pointer_to_unary_function
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::binary_function
_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::unary_function
_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::unique_ptr");$/;"	v	namespace:std	typeref:class:std::auto_ptr
_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/binders.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::bind");$/;"	v	namespace:std	typeref:class:std::binder1st
_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/binders.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::bind");$/;"	v	namespace:std	typeref:class:std::binder2nd
_GLIBCXX17_DEPRECATED	d:/include/c++/14/bits/functional_hash.h	/^      typedef _Arg      argument_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Arg argument_type	access:public
_GLIBCXX17_DEPRECATED	d:/include/c++/14/bits/functional_hash.h	/^      typedef _Result     result_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Result result_type	access:public
_GLIBCXX20_INIT	d:/include/c++/14/bits/atomic_base.h	/^      __pointer_type 	_M_p _GLIBCXX20_INIT(nullptr);$/;"	p	struct:std::__atomic_base	typeref:typename:__pointer_type _M_p	access:private	signature:(nullptr)
_GLIBCXX20_INIT	d:/include/c++/14/bits/atomic_base.h	/^# define _GLIBCXX20_INIT(/;"	d	signature:(I)
_GLIBCXX_ALIGN_H	d:/include/c++/14/bits/align.h	/^#define _GLIBCXX_ALIGN_H /;"	d
_GLIBCXX_ALWAYS_INLINE	d:/include/c++/14/bits/atomic_base.h	/^#define _GLIBCXX_ALWAYS_INLINE /;"	d
_GLIBCXX_ALWAYS_INLINE	d:/include/c++/14/bits/char_traits.h	/^# define _GLIBCXX_ALWAYS_INLINE /;"	d
_GLIBCXX_ATOMICITY_H	d:/include/c++/14/ext/atomicity.h	/^#define _GLIBCXX_ATOMICITY_H	/;"	d
_GLIBCXX_ATOMIC_BASE_H	d:/include/c++/14/bits/atomic_base.h	/^#define _GLIBCXX_ATOMIC_BASE_H /;"	d
_GLIBCXX_ATOMIC_LOCK_FREE_H	d:/include/c++/14/bits/atomic_lockfree_defines.h	/^#define _GLIBCXX_ATOMIC_LOCK_FREE_H /;"	d
_GLIBCXX_BITS_STD_ABS_H	d:/include/c++/14/bits/std_abs.h	/^#define _GLIBCXX_BITS_STD_ABS_H$/;"	d
_GLIBCXX_CDTOR_CALLABI	d:/include/c++/14/bits/cxxabi_init_exception.h	/^#define _GLIBCXX_CDTOR_CALLABI$/;"	d
_GLIBCXX_CHARCONV_H	d:/include/c++/14/bits/charconv.h	/^#define _GLIBCXX_CHARCONV_H /;"	d
_GLIBCXX_DEBUG_ASSERT	d:/include/c++/14/debug/assertions.h	/^# define _GLIBCXX_DEBUG_ASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEBUG_ASSERTIONS_H	d:/include/c++/14/debug/assertions.h	/^#define _GLIBCXX_DEBUG_ASSERTIONS_H /;"	d
_GLIBCXX_DEBUG_MACRO_SWITCH_H	d:/include/c++/14/debug/debug.h	/^#define _GLIBCXX_DEBUG_MACRO_SWITCH_H /;"	d
_GLIBCXX_DEBUG_ONLY	d:/include/c++/14/debug/assertions.h	/^# define _GLIBCXX_DEBUG_ONLY(/;"	d	signature:(_Statement)
_GLIBCXX_DEBUG_PEDASSERT	d:/include/c++/14/debug/assertions.h	/^#  define _GLIBCXX_DEBUG_PEDASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEBUG_PEDASSERT	d:/include/c++/14/debug/assertions.h	/^# define _GLIBCXX_DEBUG_PEDASSERT(/;"	d	signature:(_Condition)
_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::iostate");$/;"	t	class:std::ios_base	typeref:typename:int io_state ()("std::iostate")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::openmode");$/;"	t	class:std::ios_base	typeref:typename:int open_mode ()("std::openmode")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::seekdir");$/;"	t	class:std::ios_base	typeref:typename:int seek_dir ()("std::seekdir")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streamoff");$/;"	t	class:std::ios_base	typeref:typename:std::streamoff streamoff ()("std::streamoff")	access:public
_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streampos");$/;"	t	class:std::ios_base	typeref:typename:std::streampos streampos ()("std::streampos")	access:public
_GLIBCXX_EH_PTR_USED	d:/include/c++/14/bits/exception_ptr.h	/^# define _GLIBCXX_EH_PTR_USED /;"	d
_GLIBCXX_EH_PTR_USED	d:/include/c++/14/bits/exception_ptr.h	/^# define _GLIBCXX_EH_PTR_USED$/;"	d
_GLIBCXX_FORWARD	d:/include/c++/14/bits/move.h	/^#define _GLIBCXX_FORWARD(/;"	d	signature:(_Tp,__val)
_GLIBCXX_FWDREF	d:/include/c++/14/bits/move.h	/^#define _GLIBCXX_FWDREF(/;"	d	signature:(_Tp)
_GLIBCXX_HAVE_CDTOR_CALLABI	d:/include/c++/14/bits/cxxabi_init_exception.h	/^#define _GLIBCXX_HAVE_CDTOR_CALLABI /;"	d
_GLIBCXX_INCLUDE_NEXT_C_HEADERS	d:/include/c++/14/bits/std_abs.h	/^#define _GLIBCXX_INCLUDE_NEXT_C_HEADERS$/;"	d
_GLIBCXX_INT_N_TRAITS	d:/include/c++/14/ext/numeric_traits.h	/^#define _GLIBCXX_INT_N_TRAITS(/;"	d	signature:(T,WIDTH)
_GLIBCXX_INVOKE_H	d:/include/c++/14/bits/invoke.h	/^#define _GLIBCXX_INVOKE_H /;"	d
_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR	d:/include/c++/14/bits/stl_iterator.h	/^#define _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(/;"	d	signature:(_Iter)
_GLIBCXX_MAKE_MOVE_ITERATOR	d:/include/c++/14/bits/stl_iterator.h	/^#define _GLIBCXX_MAKE_MOVE_ITERATOR(/;"	d	signature:(_Iter)
_GLIBCXX_MEM_FN_TRAITS	d:/include/c++/14/bits/refwrap.h	/^#define _GLIBCXX_MEM_FN_TRAITS(/;"	d	signature:(_REF,_LVAL,_RVAL)
_GLIBCXX_MEM_FN_TRAITS2	d:/include/c++/14/bits/refwrap.h	/^#define _GLIBCXX_MEM_FN_TRAITS2(/;"	d	signature:(_CV,_REF,_LVAL,_RVAL)
_GLIBCXX_MOVE	d:/include/c++/14/bits/move.h	/^#define _GLIBCXX_MOVE(/;"	d	signature:(__val)
_GLIBCXX_MOVE3	d:/include/c++/14/bits/stl_algobase.h	/^#define _GLIBCXX_MOVE3(/;"	d	signature:(_Tp,_Up,_Vp)
_GLIBCXX_MOVE_BACKWARD3	d:/include/c++/14/bits/stl_algobase.h	/^#define _GLIBCXX_MOVE_BACKWARD3(/;"	d	signature:(_Tp,_Up,_Vp)
_GLIBCXX_NESTED_EXCEPTION_H	d:/include/c++/14/bits/nested_exception.h	/^#define _GLIBCXX_NESTED_EXCEPTION_H /;"	d
_GLIBCXX_NUM_CXX11_FACETS	d:/include/c++/14/bits/locale_facets.h	/^#define  _GLIBCXX_NUM_CXX11_FACETS /;"	d
_GLIBCXX_NUM_FACETS	d:/include/c++/14/bits/locale_facets.h	/^#define  _GLIBCXX_NUM_FACETS /;"	d
_GLIBCXX_NUM_LBDL_ALT128_FACETS	d:/include/c++/14/bits/locale_facets.h	/^#define _GLIBCXX_NUM_LBDL_ALT128_FACETS /;"	d
_GLIBCXX_NUM_UNICODE_FACETS	d:/include/c++/14/bits/locale_facets.h	/^# define _GLIBCXX_NUM_UNICODE_FACETS /;"	d
_GLIBCXX_OPERATOR_DELETE	d:/include/c++/14/bits/new_allocator.h	/^# define _GLIBCXX_OPERATOR_DELETE /;"	d
_GLIBCXX_OPERATOR_DELETE	d:/include/c++/14/bits/stl_tempbuf.h	/^# define _GLIBCXX_OPERATOR_DELETE /;"	d
_GLIBCXX_OPERATOR_NEW	d:/include/c++/14/bits/new_allocator.h	/^# define _GLIBCXX_OPERATOR_NEW /;"	d
_GLIBCXX_OPERATOR_NEW	d:/include/c++/14/bits/stl_tempbuf.h	/^# define _GLIBCXX_OPERATOR_NEW /;"	d
_GLIBCXX_POSTYPES_H	d:/include/c++/14/bits/postypes.h	/^#define _GLIBCXX_POSTYPES_H /;"	d
_GLIBCXX_PREDEFINED_OPS_H	d:/include/c++/14/bits/predefined_ops.h	/^#define _GLIBCXX_PREDEFINED_OPS_H	/;"	d
_GLIBCXX_RANGE_ACCESS_H	d:/include/c++/14/bits/range_access.h	/^#define _GLIBCXX_RANGE_ACCESS_H /;"	d
_GLIBCXX_READ_MEM_BARRIER	d:/include/c++/14/ext/atomicity.h	/^#define _GLIBCXX_READ_MEM_BARRIER /;"	d
_GLIBCXX_REFWRAP_H	d:/include/c++/14/bits/refwrap.h	/^#define _GLIBCXX_REFWRAP_H /;"	d
_GLIBCXX_SIZED_DEALLOC	d:/include/c++/14/bits/new_allocator.h	/^# define _GLIBCXX_SIZED_DEALLOC(/;"	d	signature:(p,n)
_GLIBCXX_SIZED_DEALLOC	d:/include/c++/14/bits/stl_tempbuf.h	/^# define _GLIBCXX_SIZED_DEALLOC(/;"	d	signature:(T,p,n)
_GLIBCXX_STRING_CONSTEXPR	d:/include/c++/14/bits/basic_string.h	/^# define _GLIBCXX_STRING_CONSTEXPR /;"	d
_GLIBCXX_TSAN_MUTEX_DESTROY	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_DESTROY(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_LOCKED	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_LOCKED(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_POST_SIGNAL	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_POST_SIGNAL(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_POST_UNLOCK	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_POST_UNLOCK(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_PRE_SIGNAL	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_PRE_SIGNAL(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_PRE_UNLOCK	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_PRE_UNLOCK(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_TRY_LOCK	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK(/;"	d	signature:(X)
_GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _GLIBCXX_TSAN_MUTEX_TRY_LOCK_FAILED(/;"	d	signature:(X)
_GLIBCXX_USE_ASSIGN_FOR_INIT	d:/include/c++/14/bits/stl_uninitialized.h	/^# define _GLIBCXX_USE_ASSIGN_FOR_INIT(/;"	d	signature:(T,U)
_GLIBCXX_UTILITY_H	d:/include/c++/14/bits/utility.h	/^#define _GLIBCXX_UTILITY_H /;"	d
_GLIBCXX_WRITE_MEM_BARRIER	d:/include/c++/14/ext/atomicity.h	/^#define _GLIBCXX_WRITE_MEM_BARRIER /;"	d
_GLIBC_EXTENSION	../../../../../../usr/include/cygwin/config.h	/^#define _GLIBC_EXTENSION /;"	d
_GLOBAL_REENT	../../../../../../usr/include/sys/reent.h	/^#define _GLOBAL_REENT /;"	d
_G_fpos64_t	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^typedef struct _G_fpos64_t$/;"	s
_G_fpos64_t::__pos	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __off64_t __pos;$/;"	m	struct:_G_fpos64_t	typeref:typename:__off64_t	access:public
_G_fpos64_t::__state	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos64_t	typeref:typename:__mbstate_t	access:public
_G_fpos_t	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^typedef struct _G_fpos_t$/;"	s
_G_fpos_t::__pos	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __off_t __pos;$/;"	m	struct:_G_fpos_t	typeref:typename:__off_t	access:public
_G_fpos_t::__state	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos_t	typeref:typename:__mbstate_t	access:public
_Guarded_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    _Guarded_ptr(_Sp_counted_array_base<_Alloc> __a)$/;"	f	struct:std::__shared_count::__shared_count::_Guarded_ptr	access:public	signature:(_Sp_counted_array_base<_Alloc> __a)
_Guarded_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	  struct _Guarded_ptr : _Sp_counted_array_base<_Alloc>$/;"	s	function:std::__shared_count::__shared_count	inherits:_Sp_counted_array_base<_Alloc>
_HASH_BYTES_H	d:/include/c++/14/bits/hash_bytes.h	/^#define _HASH_BYTES_H /;"	d
_HAVE_CC_INHIBIT_LOOP_TO_LIBCALL	../../../../../../usr/include/newlib.h	/^#define _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL /;"	d
_HAVE_LONG_DOUBLE	../../../../../../usr/include/newlib.h	/^#define _HAVE_LONG_DOUBLE /;"	d
_Hash_bytes	d:/include/c++/14/bits/hash_bytes.h	/^  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
_Hash_impl	d:/include/c++/14/bits/functional_hash.h	/^  struct _Hash_impl$/;"	s	namespace:std
_IOFBF	d:/include/stdio.h	/^#define _IOFBF /;"	d
_IOLBF	d:/include/stdio.h	/^#define _IOLBF /;"	d
_IONBF	d:/include/stdio.h	/^#define _IONBF /;"	d
_IOS_BASE_H	d:/include/c++/14/bits/ios_base.h	/^#define _IOS_BASE_H /;"	d
_IO_EOF_SEEN	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_EOF_SEEN /;"	d
_IO_ERR_SEEN	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_ERR_SEEN /;"	d
_IO_FILE	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^struct _IO_FILE$/;"	s
_IO_FILE::_IO_backup_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_backup_base;  \/* Pointer to first valid character of backup area *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_buf_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_base;	\/* Start of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_buf_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_end;	\/* End of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_base;	\/* Start of putback+get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_end;	\/* End of get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_read_ptr	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_ptr;	\/* Current read pointer *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_save_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_base; \/* Pointer to start of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_save_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_end; \/* Pointer to end of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_base;	\/* Start of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_end;	\/* End of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_IO_write_ptr	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_ptr;	\/* Current put pointer. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_FILE::_chain	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_chain;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE *	access:public
_IO_FILE::_cur_column	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  unsigned short _cur_column;$/;"	m	struct:_IO_FILE	typeref:typename:unsigned short	access:public
_IO_FILE::_fileno	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _fileno;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_IO_FILE::_flags	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags;		\/* High-order word is _IO_MAGIC; rest is flags. *\/$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_IO_FILE::_flags2	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags2:24;$/;"	m	struct:_IO_FILE	typeref:typename:int:24	access:public
_IO_FILE::_lock	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  _IO_lock_t *_lock;$/;"	m	struct:_IO_FILE	typeref:typename:_IO_lock_t *	access:public
_IO_FILE::_markers	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_marker *_markers;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_marker *	access:public
_IO_FILE::_old_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off_t _old_offset; \/* This used to be _offset but it's too small.  *\/$/;"	m	struct:_IO_FILE	typeref:typename:__off_t	access:public
_IO_FILE::_short_backupbuf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _short_backupbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_IO_FILE::_shortbuf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _shortbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_IO_FILE::_vtable_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  signed char _vtable_offset;$/;"	m	struct:_IO_FILE	typeref:typename:signed char	access:public
_IO_FILE_complete	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^struct _IO_FILE_complete$/;"	s
_IO_FILE_complete::_codecvt	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_codecvt *_codecvt;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_codecvt *	access:public
_IO_FILE_complete::_file	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE _file;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE	access:public
_IO_FILE_complete::_freeres_buf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  void *_freeres_buf;$/;"	m	struct:_IO_FILE_complete	typeref:typename:void *	access:public
_IO_FILE_complete::_freeres_list	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_freeres_list;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE *	access:public
_IO_FILE_complete::_mode	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _mode;$/;"	m	struct:_IO_FILE_complete	typeref:typename:int	access:public
_IO_FILE_complete::_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off64_t _offset;$/;"	m	struct:_IO_FILE_complete	typeref:typename:__off64_t	access:public
_IO_FILE_complete::_prevchain	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE **_prevchain;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE **	access:public
_IO_FILE_complete::_unused2	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];$/;"	m	struct:_IO_FILE_complete	typeref:typename:char[]	access:public
_IO_FILE_complete::_wide_data	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_wide_data *_wide_data;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_wide_data *	access:public
_IO_USER_LOCK	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define _IO_USER_LOCK /;"	d
_IO_backup_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_backup_base;  \/* Pointer to first valid character of backup area *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_buf_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_base;	\/* Start of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_buf_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_buf_end;	\/* End of reserve area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_cookie_io_functions_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef struct _IO_cookie_io_functions_t$/;"	s
_IO_cookie_io_functions_t::close	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_close_function_t *close;	\/* Close file.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_close_function_t *	access:public
_IO_cookie_io_functions_t::read	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_read_function_t *read;		\/* Read bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_read_function_t *	access:public
_IO_cookie_io_functions_t::seek	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_seek_function_t *seek;		\/* Seek\/tell file position.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_seek_function_t *	access:public
_IO_cookie_io_functions_t::write	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_write_function_t *write;	\/* Write bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_write_function_t *	access:public
_IO_lock_t	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^typedef void _IO_lock_t;$/;"	t	typeref:typename:void
_IO_read_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_base;	\/* Start of putback+get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_read_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_end;	\/* End of get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_read_ptr	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_read_ptr;	\/* Current read pointer *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_save_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_base; \/* Pointer to start of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_save_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_save_end; \/* Pointer to end of non-current get area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_base	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_base;	\/* Start of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_end	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_end;	\/* End of put area. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_IO_write_ptr	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char *_IO_write_ptr;	\/* Current put pointer. *\/$/;"	m	struct:_IO_FILE	typeref:typename:char *	access:public
_ISOC11_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_ISOC11_SOURCE	/;"	d
_ISOC11_SOURCE	d:/include/features.h	/^# define _ISOC11_SOURCE	/;"	d
_ISOC23_SOURCE	../../../../../../usr/include/sys/features.h	/^# define _ISOC23_SOURCE	/;"	d
_ISOC23_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_ISOC23_SOURCE	/;"	d
_ISOC23_SOURCE	d:/include/features.h	/^# define _ISOC23_SOURCE	/;"	d
_ISOC2Y_SOURCE	d:/include/features.h	/^# define _ISOC2Y_SOURCE	/;"	d
_ISOC95_SOURCE	d:/include/features.h	/^# define _ISOC95_SOURCE	/;"	d
_ISOC99_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_ISOC99_SOURCE	/;"	d
_ISOC99_SOURCE	d:/include/features.h	/^# define _ISOC99_SOURCE	/;"	d
_ISalnum	d:/include/ctype.h	/^  _ISalnum = _ISbit (11)	\/* Alphanumeric.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISalpha	d:/include/ctype.h	/^  _ISalpha = _ISbit (2),	\/* Alphabetic.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISbit	d:/include/ctype.h	/^#  define _ISbit(/;"	d	signature:(bit)
_ISblank	d:/include/ctype.h	/^  _ISblank = _ISbit (8),	\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon619378200103	access:public
_IScntrl	d:/include/ctype.h	/^  _IScntrl = _ISbit (9),	\/* Control character.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISdigit	d:/include/ctype.h	/^  _ISdigit = _ISbit (3),	\/* Numeric.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISgraph	d:/include/ctype.h	/^  _ISgraph = _ISbit (7),	\/* Graphical.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISlower	d:/include/ctype.h	/^  _ISlower = _ISbit (1),	\/* lowercase.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISprint	d:/include/ctype.h	/^  _ISprint = _ISbit (6),	\/* Printing.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISpunct	d:/include/ctype.h	/^  _ISpunct = _ISbit (10),	\/* Punctuation.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISspace	d:/include/ctype.h	/^  _ISspace = _ISbit (5),	\/* Whitespace.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISupper	d:/include/ctype.h	/^  _ISupper = _ISbit (0),	\/* UPPERCASE.  *\/$/;"	e	enum:__anon619378200103	access:public
_ISwalnum	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwalnum = _ISwbit (__ISwalnum)	\/* Alphanumeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwalpha	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwalpha = _ISwbit (__ISwalpha),	\/* Alphabetic.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwbit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^#   define _ISwbit(/;"	d	signature:(bit)
_ISwblank	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwblank = _ISwbit (__ISwblank),	\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwcntrl	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwcntrl = _ISwbit (__ISwcntrl),	\/* Control character.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwdigit = _ISwbit (__ISwdigit),	\/* Numeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwgraph	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwgraph = _ISwbit (__ISwgraph),	\/* Graphical.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwlower	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwlower = _ISwbit (__ISwlower),	\/* lowercase.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwprint	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwprint = _ISwbit (__ISwprint),	\/* Printing.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwpunct	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwpunct = _ISwbit (__ISwpunct),	\/* Punctuation.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwspace	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwspace = _ISwbit (__ISwspace),	\/* Whitespace.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwupper	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwupper = _ISwbit (__ISwupper),	\/* UPPERCASE.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISwxdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  _ISwxdigit = _ISwbit (__ISwxdigit),	\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
_ISxdigit	d:/include/ctype.h	/^  _ISxdigit = _ISbit (4),	\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon619378200103	access:public
_Identity	d:/include/c++/14/bits/stl_function.h	/^    struct _Identity$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
_Identity	d:/include/c++/14/bits/stl_function.h	/^  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };$/;"	s	namespace:std	inherits:_Identity<_Tp>
_IdxTuple	d:/include/c++/14/bits/utility.h	/^	using _IdxTuple = _Index_tuple<_Indices...>;$/;"	t	struct:std::_Build_index_tuple	typeref:typename:_Index_tuple<_Indices...>	access:public
_If_sv	d:/include/c++/14/bits/basic_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
_If_sv	d:/include/c++/14/bits/cow_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &)
_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	access:private	signature:(size_t)
_Impl	d:/include/c++/14/bits/locale_classes.h	/^  class locale::_Impl$/;"	c	class:std::locale
_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept$/;"	f	class:std::_Sp_counted_deleter::_Impl	access:public	signature:(_Ptr __p,_Deleter __d,const _Alloc & __a)
_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }$/;"	f	class:std::_Sp_counted_ptr_inplace::_Impl	access:public	signature:(_Alloc __a)
_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      class _Impl : _Sp_ebo_helper<0, _Alloc>$/;"	c	class:std::_Sp_counted_ptr_inplace	inherits:_Sp_ebo_helper<0,_Alloc>	access:private
_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>$/;"	c	class:std::_Sp_counted_deleter	inherits:_Sp_ebo_helper<0,_Deleter>,_Sp_ebo_helper<1,_Alloc>	access:private
_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^	_Impl(ptrdiff_t __original_len)$/;"	f	struct:std::_Temporary_buffer::_Impl	access:public	signature:(ptrdiff_t __original_len)
_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^      struct _Impl$/;"	s	class:std::_Temporary_buffer	access:protected
_ImplicitlyConvertiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_ImplicitlyMoveConvertiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyMoveConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_Index_tuple	d:/include/c++/14/bits/utility.h	/^  template<size_t... _Indexes> struct _Index_tuple { };$/;"	s	namespace:std
_Integral	d:/include/c++/14/bits/basic_string.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	t	function:std::basic_string::replace	typeref:typename:std::__is_integer<_InputIterator>::__type
_Integral	d:/include/c++/14/bits/cow_string.h	/^	  typedef typename std::__is_integer<_InIterator>::__type _Integral;$/;"	t	function:std::basic_string::_S_construct	typeref:typename:std::__is_integer<_InIterator>::__type
_Integral	d:/include/c++/14/bits/cow_string.h	/^	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;$/;"	t	function:std::basic_string::replace	typeref:typename:std::__is_integer<_InputIterator>::__type
_Ios_Fmtflags	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Fmtflags $/;"	g	namespace:std
_Ios_Iostate	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Iostate$/;"	g	namespace:std
_Ios_Openmode	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Openmode $/;"	g	namespace:std
_Ios_Seekdir	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Seekdir $/;"	g	namespace:std
_Iter	d:/include/c++/14/bits/shared_ptr_base.h	/^	      struct _Iter$/;"	s	function:std::_Sp_counted_array_base::_M_init
_Iter	d:/include/c++/14/bits/stl_iterator.h	/^      using _Iter = std::__detail::__range_iter_t<_Container>;$/;"	t	class:std::insert_iterator	typeref:typename:std::__detail::__range_iter_t<_Container>	access:private
_Iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(_Compare __comp)
_Iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Iterator1 __it1)
_Iter_comp_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_to_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_to_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_to_val(_Compare __comp, _Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Value & __value)
_Iter_comp_to_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_to_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equal_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_equal_to_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equal_to_val	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_equal_to_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equals_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_equals_iter(_Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iterator1 __it1)
_Iter_equals_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_equals_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_equals_val(_Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Value & __value)
_Iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_equals_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_less_iter$/;"	s	namespace:__gnu_cxx::__ops
_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^    _Iter_less_val(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^    constexpr _Iter_less_val() = default;$/;"	p	struct:__gnu_cxx::__ops::_Iter_less_val	access:public	signature:()
_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_less_val$/;"	s	namespace:__gnu_cxx::__ops
_Iter_negate	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_negate(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
_Iter_negate	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_negate$/;"	s	namespace:__gnu_cxx::__ops
_Iter_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_pred(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
_Iter_pred	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_pred$/;"	s	namespace:__gnu_cxx::__ops
_Kmax	../../../../../../usr/include/sys/reent.h	/^#define _Kmax /;"	d
_LARGEFILE64_SOURCE	../../../../../../usr/include/sys/config.h	/^#define _LARGEFILE64_SOURCE /;"	d
_LARGEFILE64_SOURCE	d:/include/features.h	/^# define _LARGEFILE64_SOURCE	/;"	d
_LARGEFILE_SOURCE	d:/include/features.h	/^#  define _LARGEFILE_SOURCE	/;"	d
_LOCALE_CLASSES_H	d:/include/c++/14/bits/locale_classes.h	/^#define _LOCALE_CLASSES_H /;"	d
_LOCALE_FACETS_H	d:/include/c++/14/bits/locale_facets.h	/^#define _LOCALE_FACETS_H /;"	d
_LOCALE_FWD_H	d:/include/c++/14/bits/localefwd.h	/^#define _LOCALE_FWD_H /;"	d
_LOCALE_H	d:/include/locale.h	/^#define	_LOCALE_H	/;"	d
_LOCK_RECURSIVE_T	../../../../../../usr/include/sys/lock.h	/^#define _LOCK_RECURSIVE_T /;"	d
_LOCK_T	../../../../../../usr/include/sys/lock.h	/^typedef void *_LOCK_T;$/;"	t	typeref:typename:void *
_LOCK_T_INITIALIZER	../../../../../../usr/include/sys/lock.h	/^#define _LOCK_T_INITIALIZER /;"	d
_LOCK_T_RECURSIVE_INITIALIZER	../../../../../../usr/include/sys/lock.h	/^#define _LOCK_T_RECURSIVE_INITIALIZER /;"	d
_LONG_DOUBLE	../../../../../../usr/include/_ansi.h	/^#define _LONG_DOUBLE /;"	d
_LONG_DOUBLE	../../../../../../usr/include/sys/config.h	/^#define _LONG_DOUBLE /;"	d
_Lock_policy	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	g	namespace:__gnu_cxx
_MACHINE__DEFAULT_TYPES_H	../../../../../../usr/include/machine/_default_types.h	/^#define _MACHINE__DEFAULT_TYPES_H$/;"	d
_MACHINE__TYPES_H	../../../../../../usr/include/machine/_types.h	/^#define _MACHINE__TYPES_H$/;"	d
_MACHSTDLIB_H_	../../../../../../usr/include/machine/stdlib.h	/^#define _MACHSTDLIB_H_$/;"	d
_MB_CAPABLE	../../../../../../usr/include/newlib.h	/^#define _MB_CAPABLE /;"	d
_MB_EXTENDED_CHARSETS_ALL	../../../../../../usr/include/cygwin/config.h	/^#define _MB_EXTENDED_CHARSETS_ALL /;"	d
_MB_EXTENDED_CHARSETS_ISO	../../../../../../usr/include/sys/config.h	/^#define _MB_EXTENDED_CHARSETS_ISO /;"	d
_MB_EXTENDED_CHARSETS_WINDOWS	../../../../../../usr/include/sys/config.h	/^#define _MB_EXTENDED_CHARSETS_WINDOWS /;"	d
_MB_LEN_MAX	../../../../../../usr/include/newlib.h	/^#define _MB_LEN_MAX /;"	d
_MEMORYFWD_H	d:/include/c++/14/bits/memoryfwd.h	/^#define _MEMORYFWD_H /;"	d
_MOVE_H	d:/include/c++/14/bits/move.h	/^#define _MOVE_H /;"	d
_M_a	d:/include/c++/14/bits/shared_ptr_base.h	/^      const _Alloc& _M_a;$/;"	m	struct:std::_Sp_alloc_shared_tag	typeref:typename:const _Alloc &	access:public
_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	m	struct:std::__uses_alloc0	typeref:struct:std::__uses_alloc0::_Sink	access:public
_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	m	struct:std::__uses_alloc1	typeref:typename:const _Alloc *	access:public
_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	m	struct:std::__uses_alloc2	typeref:typename:const _Alloc *	access:public
_M_add_ref_copy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_copy()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_add_ref_copy	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_add_ref_copy()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_add_ref_lock	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_lock()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_add_ref_lock_nothrow	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_lock_nothrow() noexcept;$/;"	p	class:std::_Sp_counted_base	typeref:typename:bool	access:public	signature:()
_M_add_ref_lock_nothrow	d:/include/c++/14/bits/shared_ptr_base.h	/^    _M_add_ref_lock_nothrow() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:bool	signature:()
_M_add_reference	d:/include/c++/14/bits/ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
_M_add_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_add_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:const void *	access:public	signature:() const
_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:const void *	access:public	signature:() const
_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:void *	access:public	signature:()
_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:void *	access:public	signature:()
_M_addref	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_addref() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
_M_alloc	d:/include/c++/14/bits/allocated_ptr.h	/^      _Alloc* _M_alloc;$/;"	m	struct:std::__allocated_ptr	typeref:typename:_Alloc *	access:private
_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:_Alloc &	access:public	signature:()
_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Alloc &	access:public	signature:()
_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^      [[no_unique_address]] _Alloc _M_alloc;$/;"	m	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Alloc	access:private
_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^      [[no_unique_address]] _Alloc _M_alloc{};$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:_Alloc	access:public
_M_alloc_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_alloc_array(size_t __tail)$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:allocator_traits<_Alloc>::pointer	access:public	signature:(size_t __tail)
_M_alloc_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      pointer _M_alloc_ptr;$/;"	m	class:std::_Sp_counted_array	typeref:typename:pointer	access:private
_M_allocated	d:/include/c++/14/bits/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_allocated_capacity	d:/include/c++/14/bits/basic_string.h	/^	size_type        _M_allocated_capacity;$/;"	m	union:std::basic_string::__anon24658990020a	typeref:typename:size_type	access:public
_M_append	d:/include/c++/14/bits/basic_string.h	/^      _M_append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const _CharT * __s,size_type __n)
_M_assign	d:/include/c++/14/bits/basic_string.h	/^      _M_assign(const basic_string&);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(const basic_string &)
_M_assign	d:/include/c++/14/bits/cow_string.h	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
_M_assign	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:private	signature:(_Tp * __ptr,const __shared_count<_Lp> & __refcount)
_M_assign	d:/include/c++/14/bits/stl_iterator.h	/^      _M_assign(_CIt&& __x)$/;"	f	class:std::common_iterator	typeref:typename:void	access:private	signature:(_CIt && __x)
_M_at_eof	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
_M_atoms_in	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_atoms_out	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
_M_bit	d:/include/c++/14/bits/locale_facets.h	/^      mask                      _M_bit[16];$/;"	m	class:std::ctype	typeref:typename:mask[16]	access:protected
_M_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^	pointer    _M_buffer;$/;"	m	struct:std::_Temporary_buffer::_Impl	typeref:typename:pointer	access:public
_M_c	d:/include/c++/14/bits/streambuf_iterator.h	/^      int_type			_M_c;$/;"	m	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
_M_c_locale_collate	d:/include/c++/14/bits/locale_classes.h	/^      __c_locale			_M_c_locale_collate;$/;"	m	class:std::collate	typeref:typename:__c_locale	access:protected
_M_c_locale_ctype	d:/include/c++/14/bits/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	typeref:typename:__c_locale	access:protected
_M_cache	d:/include/c++/14/bits/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
_M_cache_locale	d:/include/c++/14/bits/basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
_M_caches	d:/include/c++/14/bits/locale_classes.h	/^    const facet**			_M_caches;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_call_callbacks	d:/include/c++/14/bits/ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
_M_callbacks	d:/include/c++/14/bits/ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	m	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
_M_capacity	d:/include/c++/14/bits/basic_string.h	/^      _M_capacity(size_type __capacity)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __capacity)
_M_capacity	d:/include/c++/14/bits/cow_string.h	/^	size_type		_M_capacity;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
_M_cat	d:/include/c++/14/bits/ios_base.h	/^	const void*	_M_cat;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:const void *	access:private
_M_check	d:/include/c++/14/bits/basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:private	signature:(size_type __pos,const char * __s) const
_M_check	d:/include/c++/14/bits/cow_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
_M_check_length	d:/include/c++/14/bits/basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
_M_check_length	d:/include/c++/14/bits/cow_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
_M_check_same_name	d:/include/c++/14/bits/locale_classes.h	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
_M_clone	d:/include/c++/14/bits/cow_string.h	/^	_M_clone(const _Alloc&, size_type __res = 0);$/;"	p	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc &,size_type __res=0)
_M_clone	d:/include/c++/14/bits/cow_string.h	/^    _M_clone(const _Alloc& __alloc, size_type __res)$/;"	f	class:std::basic_string::_Rep	typeref:typename:_CharT *	signature:(const _Alloc & __alloc,size_type __res)
_M_cmp	d:/include/c++/14/bits/stl_algobase.h	/^	decltype(__x <=> __y) _M_cmp;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:decltype(__x<=>__y)	access:public
_M_coalesce	d:/include/c++/14/bits/locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
_M_code	d:/include/c++/14/bits/ios_base.h	/^      } _M_code;$/;"	m	struct:std::ios_base::system_error	typeref:struct:std::ios_base::system_error::error_code	access:public
_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_Compare	access:public
_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Compare	access:public
_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Compare	access:public
_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_Compare	access:public
_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_Compare	access:public
_M_compare	d:/include/c++/14/bits/locale_classes.h	/^      _M_compare(const _CharT*, const _CharT*) const throw();$/;"	p	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
_M_compare	d:/include/c++/14/bits/locale_classes.h	/^    collate<char>::_M_compare(const char*, const char*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
_M_compare	d:/include/c++/14/bits/locale_classes.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
_M_cond	d:/include/c++/14/ext/concurrence.h	/^    __gthread_cond_t _M_cond = __GTHREAD_COND_INIT;$/;"	m	class:__gnu_cxx::__cond	typeref:typename:__gthread_cond_t	access:private
_M_construct	d:/include/c++/14/bits/basic_string.h	/^        _M_construct(_FwdIterator __beg, _FwdIterator __end,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,std::forward_iterator_tag)
_M_construct	d:/include/c++/14/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_InIterator __beg,_InIterator __end,std::input_iterator_tag)
_M_construct	d:/include/c++/14/bits/basic_string.h	/^      _M_construct(size_type __req, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __req,_CharT __c)
_M_construct_aux	d:/include/c++/14/bits/basic_string.h	/^        _M_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::__false_type)
_M_construct_aux	d:/include/c++/14/bits/basic_string.h	/^        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_Integer __beg,_Integer __end,std::__true_type)
_M_construct_aux_2	d:/include/c++/14/bits/basic_string.h	/^      _M_construct_aux_2(size_type __req, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
_M_convert_to_wmask	d:/include/c++/14/bits/locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const throw();$/;"	p	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
_M_copy	d:/include/c++/14/bits/cow_string.h	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_M_cow_shim	d:/include/c++/14/bits/locale_classes.h	/^    const facet* _M_cow_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
_M_create	d:/include/c++/14/bits/basic_string.h	/^      _M_create(size_type&, size_type);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:(size_type &,size_type)
_M_ctype	d:/include/c++/14/bits/basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	m	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _It _M_current = _It();$/;"	m	class:std::counted_iterator	typeref:typename:_It	access:private
_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:protected
_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:std::move_iterator	typeref:typename:_Iterator	access:private
_M_current	d:/include/c++/14/bits/stl_iterator.h	/^    _It _M_current = _It();$/;"	m	class:std::basic_const_iterator	typeref:typename:_It	access:private
_M_data	d:/include/c++/14/bits/basic_string.h	/^      _M_data() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:() const
_M_data	d:/include/c++/14/bits/basic_string.h	/^      _M_data(pointer __p)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(pointer __p)
_M_data	d:/include/c++/14/bits/cow_string.h	/^      _M_data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:() const
_M_data	d:/include/c++/14/bits/cow_string.h	/^      _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_CharT * __p)
_M_data	d:/include/c++/14/bits/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::numpunct	typeref:typename:__cache_type *	access:protected
_M_data	d:/include/c++/14/bits/refwrap.h	/^      _Tp* _M_data;$/;"	m	class:std::reference_wrapper	typeref:typename:_Tp *	access:private
_M_dataplus	d:/include/c++/14/bits/basic_string.h	/^      _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
_M_dataplus	d:/include/c++/14/bits/cow_string.h	/^      mutable _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
_M_dealloc_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dealloc_array(typename allocator_traits<_Alloc>::pointer __p,$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:public	signature:(typename allocator_traits<_Alloc>::pointer __p,size_t __tail)
_M_decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_del	d:/include/c++/14/bits/locale_facets.h	/^      bool			_M_del;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
_M_del	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Deleter &	access:public	signature:()
_M_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR _Dp &	access:public	signature:()
_M_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR const _Dp &	access:public	signature:() const
_M_destroy	d:/include/c++/14/bits/basic_string.h	/^      _M_destroy(size_type __size) throw()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __size)
_M_destroy	d:/include/c++/14/bits/cow_string.h	/^	_M_destroy(const _Alloc&) throw();$/;"	p	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc &)
_M_destroy	d:/include/c++/14/bits/cow_string.h	/^    _M_destroy(const _Alloc& __a) throw ()$/;"	f	class:std::basic_string::_Rep	typeref:typename:void	signature:(const _Alloc & __a)
_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_array	typeref:typename:void	access:public	signature:()
_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void	access:public	signature:()
_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	access:public	signature:()
_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void	access:public	signature:()
_M_device	d:/include/c++/14/ext/concurrence.h	/^    __mutex_type& _M_device;$/;"	m	class:__gnu_cxx::__scoped_lock	typeref:typename:__mutex_type &	access:private
_M_disjunct	d:/include/c++/14/bits/basic_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
_M_disjunct	d:/include/c++/14/bits/cow_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
_M_dispose	d:/include/c++/14/bits/basic_string.h	/^      _M_dispose()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:()
_M_dispose	d:/include/c++/14/bits/cow_string.h	/^	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc & __a)
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept = 0;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_array	typeref:typename:void	access:public	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void	access:public	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	access:public	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void	access:public	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
_M_dispose_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose_array(typename allocator_traits<_Alloc>::value_type* __p)$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:protected	signature:(typename allocator_traits<_Alloc>::value_type * __p)
_M_dispose_callbacks	d:/include/c++/14/bits/ios_base.h	/^    _M_dispose_callbacks(void) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
_M_enable_shared_from_this_with	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_enable_shared_from_this_with(_Yp* __p) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:enable_if<__has_esft_base<_Yp2>::value>::type	access:private	signature:(_Yp * __p)
_M_enable_shared_from_this_with	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_enable_shared_from_this_with(_Yp*) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:enable_if<!__has_esft_base<_Yp2>::value>::type	access:private	signature:(_Yp *)
_M_erase	d:/include/c++/14/bits/basic_string.h	/^      _M_erase(size_type __pos, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __pos,size_type __n)
_M_errno	d:/include/c++/14/ext/string_conversions.h	/^	int _M_errno;$/;"	m	struct:__gnu_cxx::__stoa::_Save_errno	typeref:typename:int	access:public
_M_exception	d:/include/c++/14/bits/ios_base.h	/^    iostate		_M_exception;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
_M_exception_object	d:/include/c++/14/bits/exception_ptr.h	/^      void* _M_exception_object;$/;"	m	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private
_M_extract_float	d:/include/c++/14/bits/locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string &) const
_M_extract_int	d:/include/c++/14/bits/locale_facets.h	/^	_M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT &) const
_M_facets	d:/include/c++/14/bits/locale_classes.h	/^    const facet**			_M_facets;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
_M_facets_size	d:/include/c++/14/bits/locale_classes.h	/^    size_t				_M_facets_size;$/;"	m	class:std::locale::_Impl	typeref:typename:size_t	access:private
_M_failed	d:/include/c++/14/bits/streambuf_iterator.h	/^      bool		_M_failed;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
_M_falsename	d:/include/c++/14/bits/locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_falsename_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_fill	d:/include/c++/14/bits/basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	m	class:std::basic_ios	typeref:typename:char_type	access:protected
_M_fill_init	d:/include/c++/14/bits/basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	m	class:std::basic_ios	typeref:typename:bool	access:protected
_M_find	d:/include/c++/14/bits/locale_facets.h	/^	_M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 * __zero,size_t __len,_CharT2 __c) const
_M_find	d:/include/c++/14/bits/locale_facets.h	/^	_M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
_M_flags	d:/include/c++/14/bits/ios_base.h	/^    fmtflags		_M_flags;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	access:protected
_M_fn	d:/include/c++/14/bits/ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
_M_get	d:/include/c++/14/bits/exception_ptr.h	/^      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private	signature:() const
_M_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type *	access:private	signature:() const
_M_get	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
_M_get_allocator	d:/include/c++/14/bits/basic_string.h	/^      _M_get_allocator() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR const allocator_type &	access:private	signature:() const
_M_get_allocator	d:/include/c++/14/bits/basic_string.h	/^      _M_get_allocator()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type &	access:private	signature:()
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:void *	access:public	signature:(const std::type_info & __ti) const
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void *	access:private	signature:(const std::type_info & __ti) const
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) noexcept override$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void *	access:private	signature:(const std::type_info & __ti)
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept = 0;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void *	access:public	signature:(const std::type_info &)
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept override$/;"	f	class:std::_Sp_counted_array	typeref:typename:void *	access:public	signature:(const std::type_info &)
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept override$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void *	access:public	signature:(const std::type_info &)
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void *	access:public	signature:(const std::type_info &)
_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void *	access:public	signature:(const type_info & __ti)
_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:long	access:public	signature:() const
_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::__shared_count	typeref:typename:long	access:public	signature:() const
_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::__weak_count	typeref:typename:long	access:public	signature:() const
_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:long	signature:() const
_M_getloc	d:/include/c++/14/bits/ios_base.h	/^    _M_getloc() const$/;"	f	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
_M_grab	d:/include/c++/14/bits/cow_string.h	/^	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc & __alloc1,const _Alloc & __alloc2)
_M_group_float	d:/include/c++/14/bits/locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
_M_group_int	d:/include/c++/14/bits/locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
_M_grouping	d:/include/c++/14/bits/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
_M_grouping_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_grow_words	d:/include/c++/14/bits/ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
_M_has_value	d:/include/c++/14/bits/stl_iterator.h	/^    _M_has_value() const noexcept { return _M_index != _S_valueless; }$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:() const
_M_ibegin	d:/include/c++/14/bits/cow_string.h	/^      _M_ibegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
_M_id	d:/include/c++/14/bits/locale_classes.h	/^    _M_id() const throw();$/;"	p	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
_M_iend	d:/include/c++/14/bits/cow_string.h	/^      _M_iend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
_M_impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl*		_M_impl;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_M_impl	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic<shared_ptr<_Tp>> _M_impl;$/;"	m	struct:std::atomic	typeref:typename:_Sp_atomic<shared_ptr<_Tp>>	access:private
_M_impl	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic<weak_ptr<_Tp>> _M_impl;$/;"	m	struct:std::atomic	typeref:typename:_Sp_atomic<weak_ptr<_Tp>>	access:private
_M_impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Impl _M_impl;$/;"	m	class:std::_Sp_counted_deleter	typeref:typename:_Impl	access:private
_M_impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Impl _M_impl;$/;"	m	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Impl	access:private
_M_impl	d:/include/c++/14/bits/stl_tempbuf.h	/^      } _M_impl;$/;"	m	class:std::_Temporary_buffer	typeref:struct:std::_Temporary_buffer::_Impl	access:protected
_M_index	d:/include/c++/14/bits/ios_base.h	/^      int			_M_index;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
_M_index	d:/include/c++/14/bits/locale_classes.h	/^    mutable size_t		_M_index;$/;"	m	class:std::locale::id	typeref:typename:size_t	access:private
_M_index	d:/include/c++/14/bits/stl_iterator.h	/^    unsigned char _M_index; \/\/ 0 == _M_it, 1 == _M_sent, 2 == valueless$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
_M_init	d:/include/c++/14/bits/ios_base.h	/^    _M_init() throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:()
_M_init	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_init(typename allocator_traits<_Alloc>::value_type* __p,$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:public	signature:(typename allocator_traits<_Alloc>::value_type * __p,_Init __init)
_M_init_extra	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra(facet**);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(facet **)
_M_init_extra	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra(void*, void*, const char*, const char*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(void *,void *,const char *,const char *)
_M_init_extra_ldbl128	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra_ldbl128(bool);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(bool)
_M_init_facet	d:/include/c++/14/bits/locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
_M_init_facet_unchecked	d:/include/c++/14/bits/locale_classes.h	/^      _M_init_facet_unchecked(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
_M_init_local_buf	d:/include/c++/14/bits/basic_string.h	/^      _M_init_local_buf() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:()
_M_initialize_ctype	d:/include/c++/14/bits/locale_facets.h	/^      _M_initialize_ctype() throw();$/;"	p	class:std::ctype	typeref:typename:void	access:protected	signature:()
_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = 0);$/;"	p	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=0)
_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
_M_insert_float	d:/include/c++/14/bits/locale_facets.h	/^	_M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
_M_insert_int	d:/include/c++/14/bits/locale_facets.h	/^	_M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
_M_install_cache	d:/include/c++/14/bits/locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
_M_install_facet	d:/include/c++/14/bits/locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
_M_ios_locale	d:/include/c++/14/bits/ios_base.h	/^    locale		_M_ios_locale;$/;"	m	class:std::ios_base	typeref:typename:locale	access:protected
_M_is_leaked	d:/include/c++/14/bits/cow_string.h	/^	_M_is_leaked() const _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
_M_is_local	d:/include/c++/14/bits/basic_string.h	/^      _M_is_local() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:private	signature:() const
_M_is_shared	d:/include/c++/14/bits/cow_string.h	/^	_M_is_shared() const _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
_M_it	d:/include/c++/14/bits/stl_iterator.h	/^      _It _M_it;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:_It	access:public
_M_it1	d:/include/c++/14/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Iterator1	access:public
_M_it1	d:/include/c++/14/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_Iterator1	access:public
_M_iter	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      _OutputIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	typeref:typename:_OutputIterator	access:protected
_M_iword	d:/include/c++/14/bits/ios_base.h	/^      long	_M_iword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:long	access:public
_M_keep	d:/include/c++/14/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::__arrow_proxy	typeref:typename:iter_value_t<_It>	access:private
_M_keep	d:/include/c++/14/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::__postfix_proxy	typeref:typename:iter_value_t<_It>	access:private
_M_key1	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    unsigned char _M_key1;$/;"	m	struct:std::_Sp_locker	typeref:typename:unsigned char	access:private
_M_key2	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    unsigned char _M_key2;$/;"	m	struct:std::_Sp_locker	typeref:typename:unsigned char	access:private
_M_last	d:/include/c++/14/bits/stl_iterator.h	/^      _Sent _M_last;$/;"	m	class:std::move_sentinel	typeref:typename:_Sent	access:private
_M_leak	d:/include/c++/14/bits/cow_string.h	/^      _M_leak()    \/\/ for use in begin() & non-const op[]$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:()
_M_leak_hard	d:/include/c++/14/bits/cow_string.h	/^      _M_leak_hard();$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:()
_M_leak_hard	d:/include/c++/14/bits/cow_string.h	/^    _M_leak_hard()$/;"	f	class:std::basic_string	typeref:typename:void	signature:()
_M_len	d:/include/c++/14/bits/shared_ptr_base.h	/^		size_t _M_len;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:size_t	access:public
_M_len	d:/include/c++/14/bits/stl_tempbuf.h	/^	size_type  _M_len;$/;"	m	struct:std::_Temporary_buffer::_Impl	typeref:typename:size_type	access:public
_M_length	d:/include/c++/14/bits/basic_string.h	/^      _M_length(size_type __length)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __length)
_M_length	d:/include/c++/14/bits/cow_string.h	/^	size_type		_M_length;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
_M_length	d:/include/c++/14/bits/stl_iterator.h	/^      iter_difference_t<_It> _M_length = 0;$/;"	m	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:private
_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __shared_count& __rhs) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:(const __shared_count & __rhs) const
_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __shared_count<_Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_count	typeref:typename:bool	access:public	signature:(const __shared_count<_Lp> & __rhs) const
_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __weak_count& __rhs) const noexcept$/;"	f	class:std::__weak_count	typeref:typename:bool	access:public	signature:(const __weak_count & __rhs) const
_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __weak_count<_Lp>& __rhs) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:(const __weak_count<_Lp> & __rhs) const
_M_limit	d:/include/c++/14/bits/basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:private	signature:(size_type __pos,size_type __off) const
_M_limit	d:/include/c++/14/bits/cow_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
_M_local_buf	d:/include/c++/14/bits/basic_string.h	/^	_CharT           _M_local_buf[_S_local_capacity + 1];$/;"	m	union:std::basic_string::__anon24658990020a	typeref:typename:_CharT[]	access:public
_M_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_local_data() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR const_pointer	access:private	signature:() const
_M_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_local_data()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:()
_M_local_word	d:/include/c++/14/bits/ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	typeref:typename:_Words[]	access:protected
_M_max_size	d:/include/c++/14/bits/new_allocator.h	/^      _M_max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX_CONSTEXPR size_type	access:private	signature:() const
_M_min	d:/include/c++/14/bits/stl_algobase.h	/^	_Tp _M_min;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:_Tp	access:public
_M_move	d:/include/c++/14/bits/cow_string.h	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_M_move	d:/include/c++/14/bits/ios_base.h	/^    _M_move(ios_base&) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base &)
_M_mutate	d:/include/c++/14/bits/basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,size_type __len2)
_M_mutate	d:/include/c++/14/bits/cow_string.h	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,size_type __len2)
_M_mutate	d:/include/c++/14/bits/cow_string.h	/^    _M_mutate(size_type __pos, size_type __len1, size_type __len2)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __pos,size_type __len1,size_type __len2)
_M_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_mutex_t _M_mutex = __GTHREAD_MUTEX_INIT;$/;"	m	class:__gnu_cxx::__mutex	typeref:typename:__gthread_mutex_t	access:private
_M_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_recursive_mutex_t _M_mutex = __GTHREAD_RECURSIVE_MUTEX_INIT;$/;"	m	class:__gnu_cxx::__recursive_mutex	typeref:typename:__gthread_recursive_mutex_t	access:private
_M_n	d:/include/c++/14/bits/shared_ptr_base.h	/^      size_t _M_n = 0;$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:size_t	access:public
_M_names	d:/include/c++/14/bits/locale_classes.h	/^    char**				_M_names;$/;"	m	class:std::locale::_Impl	typeref:typename:char **	access:private
_M_narrow	d:/include/c++/14/bits/locale_facets.h	/^      char                      _M_narrow[128];$/;"	m	class:std::ctype	typeref:typename:char[128]	access:protected
_M_narrow	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
_M_narrow_init	d:/include/c++/14/bits/locale_facets.h	/^      void _M_narrow_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_narrow_ok	d:/include/c++/14/bits/locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
_M_narrow_ok	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	m	class:std::ctype	typeref:typename:char	access:protected
_M_next	d:/include/c++/14/bits/ios_base.h	/^      _Callback_list*		_M_next;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
_M_num_get	d:/include/c++/14/bits/basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	m	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
_M_num_put	d:/include/c++/14/bits/basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	m	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
_M_obj	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Tp _M_obj;$/;"	m	union:std::_Sp_counted_ptr_inplace::__anonc68b537e030a	typeref:typename:_Tp	access:public
_M_off	d:/include/c++/14/bits/postypes.h	/^      streamoff	                _M_off;$/;"	m	class:std::fpos	typeref:typename:streamoff	access:private
_M_original_len	d:/include/c++/14/bits/stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	m	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
_M_overwrite	d:/include/c++/14/bits/shared_ptr_base.h	/^      bool _M_overwrite = false;$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:bool	access:public
_M_p	d:/include/c++/14/bits/basic_string.h	/^	pointer _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:pointer	access:public
_M_p	d:/include/c++/14/bits/cow_string.h	/^	_CharT* _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:_CharT *	access:public
_M_p	d:/include/c++/14/bits/shared_ptr_base.h	/^		const _Up* _M_p;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up *	access:public
_M_pad	d:/include/c++/14/bits/locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
_M_pi	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base<_Lp>*  _M_pi;$/;"	m	class:std::__shared_count	typeref:typename:_Sp_counted_base<_Lp> *	access:private
_M_pi	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base<_Lp>*  _M_pi;$/;"	m	class:std::__weak_count	typeref:typename:_Sp_counted_base<_Lp> *	access:private
_M_pos	d:/include/c++/14/bits/shared_ptr_base.h	/^		size_t _M_pos;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:size_t	access:public
_M_precision	d:/include/c++/14/bits/ios_base.h	/^    streamsize		_M_precision;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_Predicate	access:public
_M_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_Predicate	access:public
_M_pred	d:/include/c++/14/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	typeref:typename:_Predicate	access:protected
_M_pred	d:/include/c++/14/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	typeref:typename:_Predicate	access:protected
_M_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      _Tp* _M_ptr;$/;"	m	class:std::auto_ptr	typeref:typename:_Tp *	access:private
_M_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      _Tp1* _M_ptr;$/;"	m	struct:std::auto_ptr_ref	typeref:typename:_Tp1 *	access:public
_M_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      pointer _M_ptr;$/;"	m	struct:std::__allocated_ptr	typeref:typename:pointer	access:private
_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Fp* _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Fp *	access:private
_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Tp* _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Tp *	access:private
_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Tp** _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Tp **	access:private
_M_ptr	d:/include/c++/14/bits/nested_exception.h	/^    exception_ptr _M_ptr;$/;"	m	class:std::nested_exception	typeref:typename:exception_ptr	access:private
_M_ptr	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      typename _Tp::element_type* _M_ptr = nullptr;$/;"	m	class:std::_Sp_atomic	typeref:typename:_Tp::element_type *	access:private
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    typename allocator_traits<_Alloc>::pointer _M_ptr;$/;"	m	struct:std::__shared_count::__shared_count::_Guarded_ptr	typeref:typename:allocator_traits<_Alloc>::pointer	access:public
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Ptr _M_ptr;$/;"	m	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Ptr	access:public
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Ptr             _M_ptr;$/;"	m	class:std::_Sp_counted_ptr	typeref:typename:_Ptr	access:private
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Tp *	access:private	signature:()
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp* _M_ptr() noexcept { return std::__addressof(_M_obj); }$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Tp *	access:private	signature:()
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      auto _M_ptr() const noexcept { return std::to_address(_M_alloc_ptr); }$/;"	f	class:std::_Sp_counted_array	typeref:typename:auto	access:private	signature:() const
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      element_type*	   _M_ptr;         \/\/ Contained pointer.$/;"	m	class:std::__shared_ptr	typeref:typename:element_type *	access:private
_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      element_type*	 _M_ptr;         \/\/ Contained pointer.$/;"	m	class:std::__weak_ptr	typeref:typename:element_type *	access:private
_M_ptr	d:/include/c++/14/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
_M_ptr	d:/include/c++/14/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
_M_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
_M_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer &	access:public	signature:()
_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:const _Tp *	access:public	signature:() const
_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:const _Tp *	access:public	signature:() const
_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:_Tp *	access:public	signature:()
_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:_Tp *	access:public	signature:()
_M_put	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
_M_pword	d:/include/c++/14/bits/ios_base.h	/^      void*	_M_pword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:void *	access:public
_M_r	d:/include/c++/14/bits/cow_string.h	/^	size_type _M_r;$/;"	m	struct:std::basic_string::resize_and_overwrite::_Terminator	typeref:typename:size_type	access:public
_M_refcopy	d:/include/c++/14/bits/cow_string.h	/^	_M_refcopy() throw()$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
_M_refcount	d:/include/c++/14/bits/cow_string.h	/^	_Atomic_word		_M_refcount;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:_Atomic_word	access:public
_M_refcount	d:/include/c++/14/bits/ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
_M_refcount	d:/include/c++/14/bits/locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	m	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
_M_refcount	d:/include/c++/14/bits/locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	m	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
_M_refcount	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Atomic_count _M_refcount;$/;"	m	class:std::_Sp_atomic	typeref:typename:_Atomic_count	access:private
_M_refcount	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count<_Lp>  _M_refcount;    \/\/ Reference counter.$/;"	m	class:std::__shared_ptr	typeref:typename:__shared_count<_Lp>	access:private
_M_refcount	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count<_Lp>  _M_refcount;    \/\/ Reference counter.$/;"	m	class:std::__weak_ptr	typeref:typename:__weak_count<_Lp>	access:private
_M_refdata	d:/include/c++/14/bits/cow_string.h	/^	_M_refdata() throw()$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
_M_release	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_release() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release() noexcept;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_atomic>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_mutex>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_release_last_use	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release_last_use() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_release_last_use_cold	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release_last_use_cold() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_remove_reference	d:/include/c++/14/bits/ios_base.h	/^      _M_remove_reference() $/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
_M_remove_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
_M_remove_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
_M_rep	d:/include/c++/14/bits/cow_string.h	/^      _M_rep() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_Rep *	access:private	signature:() const
_M_replace	d:/include/c++/14/bits/basic_string.h	/^      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,const size_type __len2)
_M_replace_aux	d:/include/c++/14/bits/basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
_M_replace_aux	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
_M_replace_aux	d:/include/c++/14/bits/cow_string.h	/^    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
_M_replace_categories	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
_M_replace_category	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
_M_replace_cold	d:/include/c++/14/bits/basic_string.h	/^      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(pointer __p,size_type __len1,const _CharT * __s,const size_type __len2,const size_type __how_much)
_M_replace_dispatch	d:/include/c++/14/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_Integer __n,_Integer __val,__true_type)
_M_replace_dispatch	d:/include/c++/14/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_Integer __n,_Integer __val,__true_type)
_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
_M_replace_facet	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
_M_replace_safe	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
_M_replace_safe	d:/include/c++/14/bits/cow_string.h	/^    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
_M_safe_bool_dummy	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:()
_M_sbuf	d:/include/c++/14/bits/streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	m	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_sbuf	d:/include/c++/14/bits/streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
_M_sent	d:/include/c++/14/bits/stl_iterator.h	/^      _Sent _M_sent;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:_Sent	access:public
_M_set_leaked	d:/include/c++/14/bits/cow_string.h	/^	_M_set_leaked() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
_M_set_length	d:/include/c++/14/bits/basic_string.h	/^      _M_set_length(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __n)
_M_set_length_and_sharable	d:/include/c++/14/bits/cow_string.h	/^	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(size_type __n)
_M_set_sharable	d:/include/c++/14/bits/cow_string.h	/^	_M_set_sharable() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
_M_setstate	d:/include/c++/14/bits/basic_ios.h	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
_M_sso_shim	d:/include/c++/14/bits/locale_classes.h	/^    const facet* _M_sso_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
_M_state	d:/include/c++/14/bits/postypes.h	/^      _StateT			_M_state;$/;"	m	class:std::fpos	typeref:typename:_StateT	access:private
_M_storage	d:/include/c++/14/bits/shared_ptr_base.h	/^	__gnu_cxx::__aligned_buffer<_Tp> _M_storage;$/;"	m	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:__gnu_cxx::__aligned_buffer<_Tp>	access:public
_M_storage	d:/include/c++/14/ext/aligned_buffer.h	/^	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;$/;"	m	struct:__gnu_cxx::__aligned_buffer	typeref:typename:std::aligned_storage<sizeof (_Tp),__alignof__ (_Tp)>::type	access:public
_M_storage	d:/include/c++/14/ext/aligned_buffer.h	/^      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];$/;"	m	struct:__gnu_cxx::__aligned_membuf	typeref:typename:unsigned char[]	access:public
_M_streambuf	d:/include/c++/14/bits/basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	m	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
_M_streambuf_state	d:/include/c++/14/bits/ios_base.h	/^    iostate		_M_streambuf_state;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
_M_string_length	d:/include/c++/14/bits/basic_string.h	/^      size_type		_M_string_length;$/;"	m	class:std::basic_string	typeref:typename:size_type	access:private
_M_sv	d:/include/c++/14/bits/basic_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
_M_sv	d:/include/c++/14/bits/cow_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
_M_swap	d:/include/c++/14/bits/ios_base.h	/^    _M_swap(ios_base& __rhs) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base & __rhs)
_M_swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_swap(__shared_count& __r) noexcept$/;"	f	class:std::__shared_count	typeref:typename:void	access:public	signature:(__shared_count & __r)
_M_swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_swap(__weak_count& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:void	access:public	signature:(__weak_count & __r)
_M_swap_unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_M_swap_unlock(__count_type& __c, memory_order __o) noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(__count_type & __c,memory_order __o)
_M_t	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data<_Tp, _Dp> _M_t;$/;"	m	class:std::unique_ptr	typeref:typename:__uniq_ptr_data<_Tp,_Dp>	access:private
_M_t	d:/include/c++/14/bits/unique_ptr.h	/^      tuple<pointer, _Dp> _M_t;$/;"	m	class:std::__uniq_ptr_impl	typeref:typename:tuple<pointer,_Dp>	access:private
_M_t	d:/include/c++/14/ext/aligned_buffer.h	/^      struct _Tp2 { _Tp _M_t; };$/;"	m	struct:__gnu_cxx::__aligned_membuf::_Tp2	typeref:typename:_Tp	access:public
_M_table	d:/include/c++/14/bits/locale_facets.h	/^      const mask*		_M_table;$/;"	m	class:std::ctype	typeref:typename:const mask *	access:protected
_M_this	d:/include/c++/14/bits/cow_string.h	/^	basic_string* _M_this;$/;"	m	struct:std::basic_string::resize_and_overwrite::_Terminator	typeref:typename:basic_string *	access:public
_M_thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
_M_tie	d:/include/c++/14/bits/basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	m	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
_M_tolower	d:/include/c++/14/bits/locale_facets.h	/^      __to_type			_M_tolower;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
_M_toupper	d:/include/c++/14/bits/locale_facets.h	/^      __to_type			_M_toupper;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
_M_tp	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp _M_tp;$/;"	m	struct:std::_Sp_ebo_helper	typeref:typename:_Tp	access:private
_M_transform	d:/include/c++/14/bits/locale_classes.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
_M_transform	d:/include/c++/14/bits/locale_classes.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
_M_transform	d:/include/c++/14/bits/locale_classes.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
_M_truename	d:/include/c++/14/bits/locale_facets.h	/^      const _CharT*			_M_truename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
_M_truename_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_truename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
_M_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }$/;"	f	struct:std::__atomic_base	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d) const
_M_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }$/;"	f	struct:std::__atomic_base	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d) const
_M_unique	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_unique() const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:() const
_M_unused	d:/include/c++/14/bits/shared_ptr_base.h	/^	char _M_unused;$/;"	m	union:std::_Sp_counted_ptr_inplace::__anonc68b537e030a	typeref:typename:char	access:public
_M_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Atomic_word  _M_use_count;     \/\/ #shared$/;"	m	class:std::_Sp_counted_base	typeref:typename:_Atomic_word	access:private
_M_use_grouping	d:/include/c++/14/bits/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
_M_use_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_use_local_data() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX14_CONSTEXPR pointer	access:private	signature:()
_M_val	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	mutable __atomic_base<uintptr_t> _M_val{0};$/;"	m	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:__atomic_base<uintptr_t>	access:private
_M_value	d:/include/c++/14/bits/ios_base.h	/^	int		_M_value;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:int	access:private
_M_value	d:/include/c++/14/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Value &	access:public
_M_value	d:/include/c++/14/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_Value &	access:public
_M_valueless	d:/include/c++/14/bits/stl_iterator.h	/^      unsigned char _M_valueless;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:unsigned char	access:public
_M_wait_unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_M_wait_unlock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(memory_order __o) const
_M_weak_add_ref	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_weak_add_ref() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_weak_add_ref	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_weak_assign	d:/include/c++/14/bits/shared_ptr.h	/^	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:void	access:private	signature:(_Tp1 * __p,const __shared_count<> & __n) const
_M_weak_assign	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:void	access:private	signature:(_Tp1 * __p,const __shared_count<_Lp> & __n) const
_M_weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Atomic_word  _M_weak_count;    \/\/ #weak + (#shared != 0)$/;"	m	class:std::_Sp_counted_base	typeref:typename:_Atomic_word	access:private
_M_weak_release	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_weak_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
_M_weak_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_weak_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
_M_weak_this	d:/include/c++/14/bits/shared_ptr.h	/^      mutable weak_ptr<_Tp>  _M_weak_this;$/;"	m	class:std::enable_shared_from_this	typeref:typename:weak_ptr<_Tp>	access:private
_M_weak_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;$/;"	m	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<_Tp,_Lp>	access:private
_M_widen	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
_M_widen	d:/include/c++/14/bits/locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:wint_t[]	access:protected
_M_widen_init	d:/include/c++/14/bits/locale_facets.h	/^      void _M_widen_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
_M_widen_ok	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	m	class:std::ctype	typeref:typename:char	access:protected
_M_width	d:/include/c++/14/bits/ios_base.h	/^    streamsize		_M_width;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
_M_wmask	d:/include/c++/14/bits/locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	m	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
_M_word	d:/include/c++/14/bits/ios_base.h	/^    _Words*		_M_word;$/;"	m	class:std::ios_base	typeref:typename:_Words *	access:protected
_M_word_size	d:/include/c++/14/bits/ios_base.h	/^    int			_M_word_size;$/;"	m	class:std::ios_base	typeref:typename:int	access:protected
_M_word_zero	d:/include/c++/14/bits/ios_base.h	/^    _Words		_M_word_zero;$/;"	m	class:std::ios_base	typeref:typename:_Words	access:protected
_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq$/;"	s	namespace:std::__detail
_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq<_Tp[]>$/;"	s	namespace:std::__detail
_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq<_Tp[_Bound]>$/;"	s	namespace:std::__detail
_Maybe_get_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_get_result_type$/;"	s	namespace:std
_Maybe_get_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_get_result_type<_Functor,$/;"	s	namespace:std
_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function { };$/;"	s	namespace:std
_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>$/;"	s	namespace:std	inherits:std::binary_function<_T1,_T2,_Res>
_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function<_Res, _T1>$/;"	s	namespace:std	inherits:std::unary_function<_T1,_Res>
_Mem_fn_traits_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Mem_fn_traits_base$/;"	s	namespace:std
_MoveConstructiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _MoveConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
_Mutex_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Mutex_base$/;"	c	namespace:std
_Mutex_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Mutex_base<_S_mutex>$/;"	c	namespace:std	inherits:__gnu_cxx::__mutex
_NEWLIB_VERSION	../../../../../../usr/include/_newlib_version.h	/^#define _NEWLIB_VERSION /;"	d
_NEWLIB_VERSION_H__	../../../../../../usr/include/_newlib_version.h	/^#define _NEWLIB_VERSION_H__ /;"	d
_NOINLINE	../../../../../../usr/include/_ansi.h	/^#define _NOINLINE	/;"	d
_NOINLINE	../../../../../../usr/include/_ansi.h	/^#define _NOINLINE$/;"	d
_NOINLINE_STATIC	../../../../../../usr/include/_ansi.h	/^#define _NOINLINE_STATIC	/;"	d
_NOINLINE_STATIC	../../../../../../usr/include/_ansi.h	/^#define _NOINLINE_STATIC$/;"	d
_NOTHROW	../../../../../../usr/include/_ansi.h	/^#define _NOTHROW /;"	d
_NOTHROW	../../../../../../usr/include/_ansi.h	/^#define _NOTHROW$/;"	d
_NULL	../../../../../../usr/include/sys/reent.h	/^#define _NULL /;"	d
_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^      explicit _Nested_exception(_Except&& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(_Except && __ex)
_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^      explicit _Nested_exception(const _Except& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(const _Except & __ex)
_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    struct _Nested_exception : public _Except, public nested_exception$/;"	s	namespace:std	inherits:_Except,nested_exception
_Never_valueless_alt	d:/include/c++/14/bits/basic_string.h	/^      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>$/;"	s	namespace:std::__detail::__variant	inherits:__and_<is_nothrow_move_constructible<std::basic_string<_Tp,_Traits,_Alloc>>,is_nothrow_move_assignable<std::basic_string<_Tp,_Traits,_Alloc>>>::type
_Never_valueless_alt	d:/include/c++/14/bits/shared_ptr.h	/^      struct _Never_valueless_alt<std::shared_ptr<_Tp>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
_Never_valueless_alt	d:/include/c++/14/bits/shared_ptr.h	/^      struct _Never_valueless_alt<std::weak_ptr<_Tp>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
_Never_valueless_alt	d:/include/c++/14/bits/unique_ptr.h	/^      struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
_NonArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NonArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
_NonArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NonArray = __enable_if_t<!is_array<_Tp>::value, _Tp>;$/;"	t	namespace:std	typeref:typename:__enable_if_t<!is_array<_Tp>::value,_Tp>
_Noreturn	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define _Noreturn /;"	d
_Noreturn	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define _Noreturn$/;"	d
_NotUnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NotUnboundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
_NotUnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NotUnboundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<!__is_array_unknown_bounds<_Tp>::value,_Tp>
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<0, _Tp0, _Rest...>$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<0, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<1, _Tp0, _Tp1, _Rest...>$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<1, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<2, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<_Np, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std	inherits:_Nth_type<_Np-3,_Rest...>
_OSTREAM_INSERT_H	d:/include/c++/14/bits/ostream_insert.h	/^#define _OSTREAM_INSERT_H /;"	d
_PCC	d:/include/c++/14/bits/stl_pair.h	/^    struct _PCC$/;"	s	namespace:std
_PCC	d:/include/c++/14/bits/stl_pair.h	/^    struct _PCC<false, _T1, _T2>$/;"	s	namespace:std
_POINTER_INT	../../../../../../usr/include/sys/config.h	/^#define _POINTER_INT /;"	d
_POSIX2_CHAR_TERM	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_CHAR_TERM	/;"	d
_POSIX2_C_BIND	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_C_BIND	/;"	d
_POSIX2_C_DEV	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_C_DEV	/;"	d
_POSIX2_C_VERSION	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_C_VERSION	/;"	d
_POSIX2_SW_DEV	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_SW_DEV	/;"	d
_POSIX2_UPE	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_UPE	/;"	d
_POSIX2_VERSION	../../../../../../usr/include/sys/features.h	/^#define _POSIX2_VERSION	/;"	d
_POSIX_26_VERSION	../../../../../../usr/include/sys/features.h	/^#define _POSIX_26_VERSION	/;"	d
_POSIX_ADVISORY_INFO	../../../../../../usr/include/sys/features.h	/^#define _POSIX_ADVISORY_INFO	/;"	d
_POSIX_ASYNCHRONOUS_IO	../../../../../../usr/include/sys/features.h	/^#define _POSIX_ASYNCHRONOUS_IO	/;"	d
_POSIX_BARRIERS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_BARRIERS	/;"	d
_POSIX_BARRIERS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_BARRIERS /;"	d
_POSIX_CHOWN_RESTRICTED	../../../../../../usr/include/sys/features.h	/^#define _POSIX_CHOWN_RESTRICTED	/;"	d
_POSIX_CLOCK_SELECTION	../../../../../../usr/include/sys/features.h	/^#define _POSIX_CLOCK_SELECTION	/;"	d
_POSIX_CPUTIME	../../../../../../usr/include/sys/features.h	/^#define _POSIX_CPUTIME	/;"	d
_POSIX_C_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_POSIX_C_SOURCE	/;"	d
_POSIX_C_SOURCE	d:/include/features.h	/^#  define _POSIX_C_SOURCE	/;"	d
_POSIX_C_SOURCE	d:/include/features.h	/^# define _POSIX_C_SOURCE	/;"	d
_POSIX_C_SOURCE	d:/include/features.h	/^# define _POSIX_C_SOURCE /;"	d
_POSIX_DEVCTL_DIRECTION	../../../../../../usr/include/sys/features.h	/^#define _POSIX_DEVCTL_DIRECTION	/;"	d
_POSIX_DEVICE_CONTROL	../../../../../../usr/include/sys/features.h	/^#define _POSIX_DEVICE_CONTROL	/;"	d
_POSIX_FSYNC	../../../../../../usr/include/sys/features.h	/^#define _POSIX_FSYNC	/;"	d
_POSIX_INTERRUPT_CONTROL	../../../../../../usr/include/sys/features.h	/^#define _POSIX_INTERRUPT_CONTROL	/;"	d
_POSIX_IPV6	../../../../../../usr/include/sys/features.h	/^#define _POSIX_IPV6	/;"	d
_POSIX_JOB_CONTROL	../../../../../../usr/include/sys/features.h	/^# define _POSIX_JOB_CONTROL /;"	d
_POSIX_JOB_CONTROL	../../../../../../usr/include/sys/features.h	/^#define _POSIX_JOB_CONTROL	/;"	d
_POSIX_MAPPED_FILES	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MAPPED_FILES	/;"	d
_POSIX_MEMLOCK	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MEMLOCK	/;"	d
_POSIX_MEMLOCK_RANGE	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MEMLOCK_RANGE	/;"	d
_POSIX_MEMORY_PROTECTION	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MEMORY_PROTECTION	/;"	d
_POSIX_MESSAGE_PASSING	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MESSAGE_PASSING	/;"	d
_POSIX_MONOTONIC_CLOCK	../../../../../../usr/include/sys/features.h	/^#define _POSIX_MONOTONIC_CLOCK	/;"	d
_POSIX_NO_TRUNC	../../../../../../usr/include/sys/features.h	/^#define _POSIX_NO_TRUNC	/;"	d
_POSIX_PRIORITIZED_IO	../../../../../../usr/include/sys/features.h	/^#define _POSIX_PRIORITIZED_IO	/;"	d
_POSIX_PRIORITY_SCHEDULING	../../../../../../usr/include/sys/features.h	/^#define _POSIX_PRIORITY_SCHEDULING	/;"	d
_POSIX_RAW_SOCKETS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_RAW_SOCKETS	/;"	d
_POSIX_READER_WRITER_LOCKS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_READER_WRITER_LOCKS	/;"	d
_POSIX_READER_WRITER_LOCKS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_READER_WRITER_LOCKS /;"	d
_POSIX_REALTIME_SIGNALS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_REALTIME_SIGNALS	/;"	d
_POSIX_REGEXP	../../../../../../usr/include/sys/features.h	/^#define _POSIX_REGEXP	/;"	d
_POSIX_SAVED_IDS	../../../../../../usr/include/sys/features.h	/^# define _POSIX_SAVED_IDS /;"	d
_POSIX_SAVED_IDS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SAVED_IDS	/;"	d
_POSIX_SEMAPHORES	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SEMAPHORES	/;"	d
_POSIX_SHARED_MEMORY_OBJECTS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SHARED_MEMORY_OBJECTS	/;"	d
_POSIX_SHELL	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SHELL	/;"	d
_POSIX_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_POSIX_SOURCE	/;"	d
_POSIX_SOURCE	d:/include/features.h	/^# define _POSIX_SOURCE	/;"	d
_POSIX_SOURCE	d:/include/features.h	/^# define _POSIX_SOURCE /;"	d
_POSIX_SPAWN	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SPAWN	/;"	d
_POSIX_SPIN_LOCKS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SPIN_LOCKS	/;"	d
_POSIX_SPIN_LOCKS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SPIN_LOCKS /;"	d
_POSIX_SPORADIC_SERVER	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SPORADIC_SERVER	/;"	d
_POSIX_SYNCHRONIZED_IO	../../../../../../usr/include/sys/features.h	/^#define _POSIX_SYNCHRONIZED_IO	/;"	d
_POSIX_THREADS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREADS	/;"	d
_POSIX_THREAD_ATTR_STACKADDR	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_ATTR_STACKADDR	/;"	d
_POSIX_THREAD_ATTR_STACKSIZE	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_ATTR_STACKSIZE	/;"	d
_POSIX_THREAD_CPUTIME	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_CPUTIME	/;"	d
_POSIX_THREAD_PRIORITY_SCHEDULING	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_PRIORITY_SCHEDULING	/;"	d
_POSIX_THREAD_PRIO_INHERIT	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_PRIO_INHERIT	/;"	d
_POSIX_THREAD_PRIO_PROTECT	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_PRIO_PROTECT	/;"	d
_POSIX_THREAD_PROCESS_SHARED	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_PROCESS_SHARED	/;"	d
_POSIX_THREAD_SAFE_FUNCTIONS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_SAFE_FUNCTIONS	/;"	d
_POSIX_THREAD_SPORADIC_SERVER	../../../../../../usr/include/sys/features.h	/^#define _POSIX_THREAD_SPORADIC_SERVER	/;"	d
_POSIX_TIMEOUTS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_TIMEOUTS	/;"	d
_POSIX_TIMERS	../../../../../../usr/include/sys/features.h	/^#define _POSIX_TIMERS	/;"	d
_POSIX_V6_ILP32_OFF32	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V6_ILP32_OFF32	/;"	d
_POSIX_V6_ILP32_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V6_ILP32_OFFBIG	/;"	d
_POSIX_V6_LP64_OFF64	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V6_LP64_OFF64	/;"	d
_POSIX_V6_LPBIG_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V6_LPBIG_OFFBIG	/;"	d
_POSIX_V7_ILP32_OFF32	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V7_ILP32_OFF32	/;"	d
_POSIX_V7_ILP32_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V7_ILP32_OFFBIG	/;"	d
_POSIX_V7_LP64_OFF64	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V7_LP64_OFF64	/;"	d
_POSIX_V7_LPBIG_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _POSIX_V7_LPBIG_OFFBIG	/;"	d
_POSIX_VDISABLE	../../../../../../usr/include/sys/features.h	/^#define _POSIX_VDISABLE	/;"	d
_POSIX_VERSION	../../../../../../usr/include/sys/features.h	/^# define _POSIX_VERSION /;"	d
_POSIX_VERSION	../../../../../../usr/include/sys/features.h	/^#define _POSIX_VERSION	/;"	d
_PRINTF_NAN_LEN_MAX	d:/include/stdio.h	/^# define _PRINTF_NAN_LEN_MAX /;"	d
_PSTL_CLANG_VERSION	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_CLANG_VERSION /;"	d
_PSTL_CONFIG_H	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_CONFIG_H$/;"	d
_PSTL_CPP11_STD_ROTATE_BROKEN	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_CPP11_STD_ROTATE_BROKEN$/;"	d
_PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_CPP14_2RANGE_MISMATCH_EQUAL_PRESENT$/;"	d
_PSTL_CPP14_INTEGER_SEQUENCE_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_CPP14_INTEGER_SEQUENCE_PRESENT$/;"	d
_PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_CPP14_MAKE_REVERSE_ITERATOR_PRESENT$/;"	d
_PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_CPP14_VARIABLE_TEMPLATES_PRESENT$/;"	d
_PSTL_CPP17_EXECUTION_POLICIES_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_CPP17_EXECUTION_POLICIES_PRESENT /;"	d
_PSTL_EARLYEXIT_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_EARLYEXIT_PRESENT$/;"	d
_PSTL_EXECUTION_POLICY_DEFS_H	d:/include/c++/14/pstl/execution_defs.h	/^#define _PSTL_EXECUTION_POLICY_DEFS_H$/;"	d
_PSTL_GCC_VERSION	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_GCC_VERSION /;"	d
_PSTL_GLUE_MEMORY_DEFS_H	d:/include/c++/14/pstl/glue_memory_defs.h	/^#define _PSTL_GLUE_MEMORY_DEFS_H$/;"	d
_PSTL_HIDE_FROM_ABI_POP	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_HIDE_FROM_ABI_POP /;"	d
_PSTL_HIDE_FROM_ABI_PUSH	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_HIDE_FROM_ABI_PUSH /;"	d
_PSTL_ICC_18_OMP_SIMD_BROKEN	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_ICC_18_OMP_SIMD_BROKEN$/;"	d
_PSTL_MONOTONIC_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_MONOTONIC_PRESENT$/;"	d
_PSTL_PRAGMA	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA(/;"	d	signature:(x)
_PSTL_PRAGMA_DECLARE_REDUCTION	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_PRAGMA_DECLARE_REDUCTION(/;"	d	signature:(NAME,OP)
_PSTL_PRAGMA_DECLARE_SIMD	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_DECLARE_SIMD /;"	d
_PSTL_PRAGMA_DECLARE_SIMD	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_DECLARE_SIMD$/;"	d
_PSTL_PRAGMA_FORCEINLINE	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_FORCEINLINE /;"	d
_PSTL_PRAGMA_FORCEINLINE	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_FORCEINLINE$/;"	d
_PSTL_PRAGMA_LOCATION	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_LOCATION /;"	d
_PSTL_PRAGMA_MESSAGE	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_MESSAGE(/;"	d	signature:(x)
_PSTL_PRAGMA_MESSAGE	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_MESSAGE(x) _PSTL_PRAGMA_MESSAGE_/;"	d	signature:(x)
_PSTL_PRAGMA_MESSAGE_IMPL	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_PRAGMA_MESSAGE_IMPL(/;"	d	signature:(x)
_PSTL_PRAGMA_MESSAGE_POLICIES	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_MESSAGE_POLICIES(/;"	d	signature:(x)
_PSTL_PRAGMA_SIMD	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD /;"	d
_PSTL_PRAGMA_SIMD	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD$/;"	d
_PSTL_PRAGMA_SIMD_EARLYEXIT	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_EARLYEXIT /;"	d
_PSTL_PRAGMA_SIMD_EARLYEXIT	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_EARLYEXIT$/;"	d
_PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_EXCLUSIVE_SCAN(/;"	d	signature:(PRM)
_PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_INCLUSIVE_SCAN(/;"	d	signature:(PRM)
_PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC(/;"	d	signature:(PRM)
_PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_ORDERED_MONOTONIC_2ARGS(/;"	d	signature:(PRM1,PRM2)
_PSTL_PRAGMA_SIMD_REDUCTION	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_REDUCTION(/;"	d	signature:(PRM)
_PSTL_PRAGMA_SIMD_SCAN	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_SIMD_SCAN(/;"	d	signature:(PRM)
_PSTL_PRAGMA_VECTOR_UNALIGNED	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_VECTOR_UNALIGNED /;"	d
_PSTL_PRAGMA_VECTOR_UNALIGNED	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_PRAGMA_VECTOR_UNALIGNED$/;"	d
_PSTL_STRING	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_STRING(x) _PSTL_STRING_/;"	d	signature:(x)
_PSTL_STRING_AUX	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_STRING_AUX(/;"	d	signature:(x)
_PSTL_STRING_CONCAT	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_STRING_CONCAT(/;"	d	signature:(x,y)
_PSTL_UDR_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_UDR_PRESENT$/;"	d
_PSTL_UDS_PRESENT	d:/include/c++/14/pstl/pstl_config.h	/^#   define _PSTL_UDS_PRESENT$/;"	d
_PSTL_USAGE_WARNINGS	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_USAGE_WARNINGS /;"	d
_PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED /;"	d
_PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED	d:/include/c++/14/pstl/pstl_config.h	/^#    define _PSTL_USE_NONTEMPORAL_STORES_IF_ALLOWED$/;"	d
_PSTL_VERSION	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_VERSION /;"	d
_PSTL_VERSION_MAJOR	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_VERSION_MAJOR /;"	d
_PSTL_VERSION_MINOR	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_VERSION_MINOR /;"	d
_PSTL_VERSION_PATCH	d:/include/c++/14/pstl/pstl_config.h	/^#define _PSTL_VERSION_PATCH /;"	d
_PTHREAD_H	d:/include/pthread.h	/^#define _PTHREAD_H	/;"	d
_PTR_TRAITS_H	d:/include/c++/14/bits/ptr_traits.h	/^#define _PTR_TRAITS_H /;"	d
_Ptr	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Ptr$/;"	s	struct:std::allocator_traits	access:private
_Ptr	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>$/;"	s	struct:std::allocator_traits	access:private
_Ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Ptr = typename unique_ptr<_Tp, _Del>::pointer;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:unique_ptr<_Tp,_Del>::pointer
_Ptr	d:/include/c++/14/bits/unique_ptr.h	/^	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>$/;"	s	class:std::__uniq_ptr_impl	access:private
_Ptr	d:/include/c++/14/bits/unique_ptr.h	/^	struct _Ptr$/;"	s	class:std::__uniq_ptr_impl	access:private
_RAIters	d:/include/c++/14/bits/stl_algobase.h	/^      using _RAIters = __and_<is_same<_Cat1, _RATag>, is_same<_Cat2, _RATag>>;$/;"	t	function:std::__equal4	typeref:typename:__and_<is_same<_Cat1,_RATag>,is_same<_Cat2,_RATag>>
_RAND48_ADD	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_ADD /;"	d
_RAND48_MULT_0	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_MULT_0 /;"	d
_RAND48_MULT_1	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_MULT_1 /;"	d
_RAND48_MULT_2	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_MULT_2 /;"	d
_RAND48_SEED_0	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_SEED_0 /;"	d
_RAND48_SEED_1	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_SEED_1 /;"	d
_RAND48_SEED_2	../../../../../../usr/include/sys/reent.h	/^#define        _RAND48_SEED_2 /;"	d
_RATag	d:/include/c++/14/bits/stl_algobase.h	/^      using _RATag = random_access_iterator_tag;$/;"	t	function:std::__equal4	typeref:typename:random_access_iterator_tag
_READ_WRITE_BUFSIZE_TYPE	../../../../../../usr/include/cygwin/config.h	/^#define _READ_WRITE_BUFSIZE_TYPE /;"	d
_READ_WRITE_BUFSIZE_TYPE	../../../../../../usr/include/sys/config.h	/^#define _READ_WRITE_BUFSIZE_TYPE /;"	d
_READ_WRITE_RETURN_TYPE	../../../../../../usr/include/cygwin/config.h	/^#define _READ_WRITE_RETURN_TYPE /;"	d
_READ_WRITE_RETURN_TYPE	../../../../../../usr/include/sys/config.h	/^#define _READ_WRITE_RETURN_TYPE /;"	d
_REENT	../../../../../../usr/include/sys/reent.h	/^# define _REENT /;"	d
_REENT	../../../../../../usr/include/sys/reent.h	/^#define _REENT /;"	d
_REENT_ASCTIME_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_ASCTIME_BUF(/;"	d	signature:(_ptr)
_REENT_ASCTIME_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_ASCTIME_BUF(/;"	d	signature:(ptr)
_REENT_ASCTIME_SIZE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_ASCTIME_SIZE /;"	d
_REENT_BACKWARD_BINARY_COMPAT	../../../../../../usr/include/cygwin/config.h	/^#define _REENT_BACKWARD_BINARY_COMPAT /;"	d
_REENT_BACKWARD_BINARY_COMPAT	../../../../../../usr/include/sys/config.h	/^#define _REENT_BACKWARD_BINARY_COMPAT$/;"	d
_REENT_C16RTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_C16RTOMB_STATE(/;"	d	signature:(ptr)
_REENT_C32RTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_C32RTOMB_STATE(/;"	d	signature:(ptr)
_REENT_C8RTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_C8RTOMB_STATE(/;"	d	signature:(ptr)
_REENT_CHECK	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK(/;"	d	signature:(var,what,type,size,init)
_REENT_CHECK_ASCTIME_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_ASCTIME_BUF(/;"	d	signature:(ptr)
_REENT_CHECK_ASCTIME_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_ASCTIME_BUF(/;"	d	signature:(var)
_REENT_CHECK_EMERGENCY	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_EMERGENCY(/;"	d	signature:(ptr)
_REENT_CHECK_EMERGENCY	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_EMERGENCY(/;"	d	signature:(var)
_REENT_CHECK_MISC	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_MISC(/;"	d	signature:(ptr)
_REENT_CHECK_MISC	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_MISC(/;"	d	signature:(var)
_REENT_CHECK_MP	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_MP(/;"	d	signature:(ptr)
_REENT_CHECK_MP	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_MP(/;"	d	signature:(var)
_REENT_CHECK_RAND48	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_RAND48(/;"	d	signature:(ptr)
_REENT_CHECK_RAND48	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_RAND48(/;"	d	signature:(var)
_REENT_CHECK_SIGNAL_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_SIGNAL_BUF(/;"	d	signature:(ptr)
_REENT_CHECK_SIGNAL_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_SIGNAL_BUF(/;"	d	signature:(var)
_REENT_CHECK_TM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_TM(/;"	d	signature:(ptr)
_REENT_CHECK_TM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CHECK_TM(/;"	d	signature:(var)
_REENT_CHECK_VERIFY	../../../../../../usr/include/newlib.h	/^#define _REENT_CHECK_VERIFY /;"	d
_REENT_CLEANUP	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CLEANUP(/;"	d	signature:(_ptr)
_REENT_CVTBUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CVTBUF(/;"	d	signature:(_ptr)
_REENT_CVTLEN	../../../../../../usr/include/sys/reent.h	/^#define _REENT_CVTLEN(/;"	d	signature:(_ptr)
_REENT_EMERGENCY	../../../../../../usr/include/sys/reent.h	/^#define _REENT_EMERGENCY(/;"	d	signature:(_ptr)
_REENT_EMERGENCY_SIZE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_EMERGENCY_SIZE /;"	d
_REENT_ERRNO	../../../../../../usr/include/sys/reent.h	/^#define _REENT_ERRNO(/;"	d	signature:(_ptr)
_REENT_GETDATE_ERR_P	../../../../../../usr/include/sys/reent.h	/^#define _REENT_GETDATE_ERR_P(/;"	d	signature:(_ptr)
_REENT_GETDATE_ERR_P	../../../../../../usr/include/sys/reent.h	/^#define _REENT_GETDATE_ERR_P(/;"	d	signature:(ptr)
_REENT_GETLOCALENAME_L_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_GETLOCALENAME_L_BUF(/;"	d	signature:(ptr)
_REENT_INC	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INC(/;"	d	signature:(_ptr)
_REENT_INIT	../../../../../../usr/include/sys/reent.h	/^# define _REENT_INIT(/;"	d	signature:(var)
_REENT_INIT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT(/;"	d	signature:(var)
_REENT_INIT_MISC	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_MISC(/;"	d	signature:(var)
_REENT_INIT_MP	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_MP(/;"	d	signature:(var)
_REENT_INIT_PTR	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_PTR(/;"	d	signature:(var)
_REENT_INIT_PTR_ZEROED	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_PTR_ZEROED(/;"	d	signature:(var)
_REENT_INIT_RAND48	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RAND48(/;"	d	signature:(var)
_REENT_INIT_RESERVED_0	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RESERVED_0 /;"	d
_REENT_INIT_RESERVED_1	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RESERVED_1 /;"	d
_REENT_INIT_RESERVED_2	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RESERVED_2 /;"	d
_REENT_INIT_RESERVED_6_7	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RESERVED_6_7 /;"	d
_REENT_INIT_RESERVED_8	../../../../../../usr/include/sys/reent.h	/^#define _REENT_INIT_RESERVED_8 /;"	d
_REENT_IS_NULL	../../../../../../usr/include/sys/reent.h	/^#define _REENT_IS_NULL(/;"	d	signature:(_ptr)
_REENT_L64A_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_L64A_BUF(/;"	d	signature:(_ptr)
_REENT_L64A_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_L64A_BUF(/;"	d	signature:(ptr)
_REENT_LOCALE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_LOCALE(/;"	d	signature:(_ptr)
_REENT_MBLEN_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBLEN_STATE(/;"	d	signature:(_ptr)
_REENT_MBLEN_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBLEN_STATE(/;"	d	signature:(ptr)
_REENT_MBRLEN_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBRLEN_STATE(/;"	d	signature:(_ptr)
_REENT_MBRLEN_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBRLEN_STATE(/;"	d	signature:(ptr)
_REENT_MBRTOC16_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_MBRTOC16_STATE(/;"	d	signature:(ptr)
_REENT_MBRTOC32_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_MBRTOC32_STATE(/;"	d	signature:(ptr)
_REENT_MBRTOC8_STATE	../../../../../../usr/include/sys/reent.h	/^#  define _REENT_MBRTOC8_STATE(/;"	d	signature:(ptr)
_REENT_MBRTOWC_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBRTOWC_STATE(/;"	d	signature:(_ptr)
_REENT_MBRTOWC_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBRTOWC_STATE(/;"	d	signature:(ptr)
_REENT_MBSRTOWCS_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBSRTOWCS_STATE(/;"	d	signature:(_ptr)
_REENT_MBSRTOWCS_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBSRTOWCS_STATE(/;"	d	signature:(ptr)
_REENT_MBTOWC_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBTOWC_STATE(/;"	d	signature:(_ptr)
_REENT_MBTOWC_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MBTOWC_STATE(/;"	d	signature:(ptr)
_REENT_MP_FREELIST	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_FREELIST(/;"	d	signature:(_ptr)
_REENT_MP_FREELIST	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_FREELIST(/;"	d	signature:(ptr)
_REENT_MP_P5S	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_P5S(/;"	d	signature:(_ptr)
_REENT_MP_P5S	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_P5S(/;"	d	signature:(ptr)
_REENT_MP_RESULT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_RESULT(/;"	d	signature:(_ptr)
_REENT_MP_RESULT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_RESULT(/;"	d	signature:(ptr)
_REENT_MP_RESULT_K	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_RESULT_K(/;"	d	signature:(_ptr)
_REENT_MP_RESULT_K	../../../../../../usr/include/sys/reent.h	/^#define _REENT_MP_RESULT_K(/;"	d	signature:(ptr)
_REENT_RAND48_ADD	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_ADD(/;"	d	signature:(_ptr)
_REENT_RAND48_ADD	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_ADD(/;"	d	signature:(ptr)
_REENT_RAND48_MULT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_MULT(/;"	d	signature:(_ptr)
_REENT_RAND48_MULT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_MULT(/;"	d	signature:(ptr)
_REENT_RAND48_SEED	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_SEED(/;"	d	signature:(_ptr)
_REENT_RAND48_SEED	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND48_SEED(/;"	d	signature:(ptr)
_REENT_RAND_NEXT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND_NEXT(/;"	d	signature:(_ptr)
_REENT_RAND_NEXT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_RAND_NEXT(/;"	d	signature:(ptr)
_REENT_SIGNAL_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIGNAL_BUF(/;"	d	signature:(_ptr)
_REENT_SIGNAL_BUF	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIGNAL_BUF(/;"	d	signature:(ptr)
_REENT_SIGNAL_SIZE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIGNAL_SIZE /;"	d
_REENT_SIGNGAM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIGNGAM(/;"	d	signature:(_ptr)
_REENT_SIGNGAM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIGNGAM(/;"	d	signature:(ptr)
_REENT_SIG_FUNC	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SIG_FUNC(/;"	d	signature:(_ptr)
_REENT_SMALL	../../../../../../usr/include/sys/config.h	/^#define _REENT_SMALL$/;"	d
_REENT_SMALL_CHECK_INIT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_SMALL_CHECK_INIT(/;"	d	signature:(ptr)
_REENT_STDERR	../../../../../../usr/include/sys/reent.h	/^#define _REENT_STDERR(/;"	d	signature:(_ptr)
_REENT_STDIN	../../../../../../usr/include/sys/reent.h	/^#define _REENT_STDIN(/;"	d	signature:(_ptr)
_REENT_STDOUT	../../../../../../usr/include/sys/reent.h	/^#define _REENT_STDOUT(/;"	d	signature:(_ptr)
_REENT_STRTOK_LAST	../../../../../../usr/include/sys/reent.h	/^#define _REENT_STRTOK_LAST(/;"	d	signature:(_ptr)
_REENT_STRTOK_LAST	../../../../../../usr/include/sys/reent.h	/^#define _REENT_STRTOK_LAST(/;"	d	signature:(ptr)
_REENT_THREAD_LOCAL	../../../../../../usr/include/sys/config.h	/^#define _REENT_THREAD_LOCAL$/;"	d
_REENT_TM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_TM(/;"	d	signature:(_ptr)
_REENT_TM	../../../../../../usr/include/sys/reent.h	/^#define _REENT_TM(/;"	d	signature:(ptr)
_REENT_WCRTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCRTOMB_STATE(/;"	d	signature:(_ptr)
_REENT_WCRTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCRTOMB_STATE(/;"	d	signature:(ptr)
_REENT_WCSRTOMBS_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCSRTOMBS_STATE(/;"	d	signature:(_ptr)
_REENT_WCSRTOMBS_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCSRTOMBS_STATE(/;"	d	signature:(ptr)
_REENT_WCTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCTOMB_STATE(/;"	d	signature:(_ptr)
_REENT_WCTOMB_STATE	../../../../../../usr/include/sys/reent.h	/^#define _REENT_WCTOMB_STATE(/;"	d	signature:(ptr)
_REQUIRES_FREESTANDING_H	d:/include/c++/14/bits/requires_hosted.h	/^#define _REQUIRES_FREESTANDING_H /;"	d
_RWLOCK_INTERNAL_H	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^#define _RWLOCK_INTERNAL_H$/;"	d
_Range_chk	d:/include/c++/14/ext/string_conversions.h	/^      struct _Range_chk {$/;"	s	function:__gnu_cxx::__stoa
_Raw_bytes_alloc	d:/include/c++/14/bits/cow_string.h	/^	  rebind<char>::other _Raw_bytes_alloc;$/;"	t	struct:std::basic_string::_Rep	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<char>::other	access:public
_ReferenceType1	d:/include/c++/14/bits/stl_algobase.h	/^	_ReferenceType1;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::reference
_ReferenceType2	d:/include/c++/14/bits/stl_algobase.h	/^	_ReferenceType2;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::reference
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base$/;"	s	namespace:std	inherits:_Weak_result_type<_Tp>,_Refwrap_base_arg1<_Tp>,_Refwrap_base_arg2<_Tp>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(*)(_T1) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) const volatile>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) const>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) volatile>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) const>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
_Reference_wrapper_base_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base_memfun$/;"	s	namespace:std	inherits:_Reference_wrapper_base<_Tp>
_Reference_wrapper_base_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>$/;"	s	namespace:std	inherits:_Mem_fn_traits<_MemFunPtr>::__maybe_type
_Refwrap_base_arg1	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg1$/;"	s	namespace:std
_Refwrap_base_arg1	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg1<_Tp,$/;"	s	namespace:std
_Refwrap_base_arg2	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg2$/;"	s	namespace:std
_Refwrap_base_arg2	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg2<_Tp,$/;"	s	namespace:std
_Rep	d:/include/c++/14/bits/cow_string.h	/^      struct _Rep : _Rep_base$/;"	s	class:std::basic_string	inherits:_Rep_base	access:private
_Rep_base	d:/include/c++/14/bits/cow_string.h	/^      struct _Rep_base$/;"	s	class:std::basic_string	access:private
_RequireAllocator	d:/include/c++/14/bits/alloc_traits.h	/^    using _RequireAllocator$/;"	t	namespace:std	typeref:typename:enable_if<__is_allocator<_Alloc>::value,_Alloc>::type
_RequireInputIter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    using _RequireInputIter =$/;"	t	namespace:std	typeref:typename:__enable_if_t<is_convertible<__iter_category_t<_InIter>,input_iterator_tag>::value>
_RequireNotAllocator	d:/include/c++/14/bits/alloc_traits.h	/^    using _RequireNotAllocator$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc>::value,_Alloc>::type
_Res	d:/include/c++/14/bits/stl_algobase.h	/^      struct _Res {$/;"	s	function:std::__min_cmp
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
_SCHED_H	d:/include/sched.h	/^#define	_SCHED_H	/;"	d
_SHARED_PTR_ATOMIC_H	d:/include/c++/14/bits/shared_ptr_atomic.h	/^#define _SHARED_PTR_ATOMIC_H /;"	d
_SHARED_PTR_BASE_H	d:/include/c++/14/bits/shared_ptr_base.h	/^#define _SHARED_PTR_BASE_H /;"	d
_SHARED_PTR_H	d:/include/c++/14/bits/shared_ptr.h	/^#define _SHARED_PTR_H /;"	d
_SIGSET_NWORDS	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^#define _SIGSET_NWORDS /;"	d
_STDC_PREDEF_H	d:/include/stdc-predef.h	/^#define	_STDC_PREDEF_H	/;"	d
_STDINT_H	d:/include/stdint.h	/^#define _STDINT_H	/;"	d
_STDIO_BSD_SEMANTICS	../../../../../../usr/include/cygwin/config.h	/^#define _STDIO_BSD_SEMANTICS /;"	d
_STDIO_H	d:/include/stdio.h	/^#define _STDIO_H	/;"	d
_STDLIB_H_	../../../../../../usr/include/stdlib.h	/^#define _STDLIB_H_$/;"	d
_STD_NEW_ALLOCATOR_H	d:/include/c++/14/bits/new_allocator.h	/^#define _STD_NEW_ALLOCATOR_H /;"	d
_STL_ALGOBASE_H	d:/include/c++/14/bits/stl_algobase.h	/^#define _STL_ALGOBASE_H /;"	d
_STL_CONSTRUCT_H	d:/include/c++/14/bits/stl_construct.h	/^#define _STL_CONSTRUCT_H /;"	d
_STL_FUNCTION_H	d:/include/c++/14/bits/stl_function.h	/^#define _STL_FUNCTION_H /;"	d
_STL_ITERATOR_BASE_FUNCS_H	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^#define _STL_ITERATOR_BASE_FUNCS_H /;"	d
_STL_ITERATOR_BASE_TYPES_H	d:/include/c++/14/bits/stl_iterator_base_types.h	/^#define _STL_ITERATOR_BASE_TYPES_H /;"	d
_STL_ITERATOR_H	d:/include/c++/14/bits/stl_iterator.h	/^#define _STL_ITERATOR_H /;"	d
_STL_PAIR_H	d:/include/c++/14/bits/stl_pair.h	/^#define _STL_PAIR_H /;"	d
_STL_RAW_STORAGE_ITERATOR_H	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^#define _STL_RAW_STORAGE_ITERATOR_H /;"	d
_STL_TEMPBUF_H	d:/include/c++/14/bits/stl_tempbuf.h	/^#define _STL_TEMPBUF_H /;"	d
_STL_UNINITIALIZED_H	d:/include/c++/14/bits/stl_uninitialized.h	/^#define _STL_UNINITIALIZED_H /;"	d
_STREAMBUF_ITERATOR_H	d:/include/c++/14/bits/streambuf_iterator.h	/^#define _STREAMBUF_ITERATOR_H /;"	d
_STRINGFWD_H	d:/include/c++/14/bits/stringfwd.h	/^#define _STRINGFWD_H /;"	d
_STRING_CONVERSIONS_H	d:/include/c++/14/ext/string_conversions.h	/^#define _STRING_CONVERSIONS_H /;"	d
_STRUCT_TIMESPEC	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^#define _STRUCT_TIMESPEC /;"	d
_SUPPORTS_ERREXCEPT	../../../../../../usr/include/machine/ieeefp.h	/^# define _SUPPORTS_ERREXCEPT$/;"	d
_SYMSTR	../../../../../../usr/include/cygwin/config.h	/^#define _SYMSTR(/;"	d	signature:(x)
_SYS_CDEFS_H	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define	_SYS_CDEFS_H	/;"	d
_SYS_FEATURES_H	../../../../../../usr/include/sys/features.h	/^#define _SYS_FEATURES_H$/;"	d
_SYS_LOCK_H_	../../../../../../usr/include/sys/lock.h	/^#define _SYS_LOCK_H_$/;"	d
_SYS_REENT_H_	../../../../../../usr/include/sys/reent.h	/^#define _SYS_REENT_H_$/;"	d
_SYS_SINGLE_THREADED_H	d:/include/x86_64-linux-gnu/sys/single_threaded.h	/^#define _SYS_SINGLE_THREADED_H$/;"	d
_SYS__TYPES_H	../../../../../../usr/include/sys/_types.h	/^#define _SYS__TYPES_H$/;"	d
_S_add_ref	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _S_add_ref(typename _Atomic_count::pointer __p)$/;"	f	class:std::_Sp_atomic	typeref:typename:_Atomic_count::pointer	access:private	signature:(typename _Atomic_count::pointer __p)
_S_adjustfield	d:/include/c++/14/bits/ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr int _S_alignment =$/;"	m	struct:std::__atomic_base	typeref:typename:int	access:private
_S_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t _S_alignment = __alignof__(_Fp);$/;"	m	struct:std::__atomic_float	typeref:typename:size_t	access:public
_S_allocate	d:/include/c++/14/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.allocate (__n,__hint))	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer __hint,int)
_S_allocate	d:/include/c++/14/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:pointer	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer,...)
_S_allocate	d:/include/c++/14/bits/basic_string.h	/^      _S_allocate(_Char_alloc_type& __a, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:(_Char_alloc_type & __a,size_type __n)
_S_always_equal	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_always_equal()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_app	d:/include/c++/14/bits/ios_base.h	/^      _S_app 		= 1L << 0,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_assign	d:/include/c++/14/bits/basic_string.h	/^      _S_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
_S_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_assignable_from_tuple_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_assignable_from_tuple_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_ate	d:/include/c++/14/bits/ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_atomic	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
_S_atoms_in	d:/include/c++/14/bits/locale_facets.h	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
_S_atoms_out	d:/include/c++/14/bits/locale_facets.h	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
_S_badbit	d:/include/c++/14/bits/ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_basefield	d:/include/c++/14/bits/ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_beg	d:/include/c++/14/bits/ios_base.h	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_bin	d:/include/c++/14/bits/ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_boolalpha	d:/include/c++/14/bits/ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	m	class:std::locale::facet	typeref:typename:__c_locale	access:private
_S_c_name	d:/include/c++/14/bits/locale_classes.h	/^    static const char			_S_c_name[2];$/;"	m	class:std::locale::facet	typeref:typename:const char[2]	access:private
_S_categories	d:/include/c++/14/bits/locale_classes.h	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	typeref:typename:const char * const * const	access:private
_S_categories_size	d:/include/c++/14/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	e	enum:std::locale::__anonf3d5def50103	access:public
_S_chk	d:/include/c++/14/ext/string_conversions.h	/^	  _S_chk(_TRet __val, std::true_type) \/\/ only called when _Ret is int$/;"	f	struct:__gnu_cxx::__stoa::_Range_chk	typeref:typename:bool	access:public	signature:(_TRet __val,std::true_type)
_S_chk	d:/include/c++/14/ext/string_conversions.h	/^	  _S_chk(_TRet, std::false_type) { return false; }$/;"	f	struct:__gnu_cxx::__stoa::_Range_chk	typeref:typename:bool	access:public	signature:(_TRet,std::false_type)
_S_classic	d:/include/c++/14/bits/locale_classes.h	/^    static _Impl*       _S_classic;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_S_clone_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc) throw();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater_equal	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less_equal	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
_S_compare	d:/include/c++/14/bits/basic_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR int	access:private	signature:(size_type __n1,size_type __n2)
_S_compare	d:/include/c++/14/bits/cow_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:private	signature:(size_type __n1,size_type __n2)
_S_const_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_const_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_const_assignable_from_tuple_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_const_assignable_from_tuple_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_construct	d:/include/c++/14/bits/cow_string.h	/^	 _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^	_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,const _Alloc & __a,forward_iterator_tag)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^	_S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,forward_iterator_tag)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
_S_construct	d:/include/c++/14/bits/cow_string.h	/^    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(size_type __n,_CharT __c,const _Alloc & __a)
_S_construct_aux	d:/include/c++/14/bits/cow_string.h	/^	_S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__false_type)
_S_construct_aux	d:/include/c++/14/bits/cow_string.h	/^	_S_construct_aux(_Integer __beg, _Integer __end,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_Integer __beg,_Integer __end,const _Alloc & __a,__true_type)
_S_construct_aux_2	d:/include/c++/14/bits/cow_string.h	/^      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
_S_constructible	d:/include/c++/14/bits/stl_pair.h	/^	_S_constructible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_constructible_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_constructible_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_convertible	d:/include/c++/14/bits/stl_pair.h	/^	_S_convertible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_convertible_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_convertible_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_copy	d:/include/c++/14/bits/basic_string.h	/^      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^	_S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
_S_create	d:/include/c++/14/bits/cow_string.h	/^	_S_create(size_type, size_type, const _Alloc&);$/;"	p	struct:std::basic_string::_Rep	typeref:typename:_Rep *	access:public	signature:(size_type,size_type,const _Alloc &)
_S_create	d:/include/c++/14/bits/cow_string.h	/^    _S_create(size_type __capacity, size_type __old_capacity,$/;"	f	class:std::basic_string::_Rep	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::_Rep *	signature:(size_type __capacity,size_type __old_capacity,const _Alloc & __alloc)
_S_create_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
_S_cur	d:/include/c++/14/bits/ios_base.h	/^      _S_cur = _GLIBCXX_STDIO_SEEK_CUR,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_dangles	d:/include/c++/14/bits/stl_pair.h	/^	_S_dangles()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_dangles_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_dangles_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_dec	d:/include/c++/14/bits/ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_destroy	d:/include/c++/14/bits/alloc_traits.h	/^	_S_destroy(_Alloc2& __a, _Tp* __p, int)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:private	signature:(_Alloc2 & __a,_Tp * __p,int)
_S_destroy	d:/include/c++/14/bits/alloc_traits.h	/^	_S_destroy(_Alloc2&, _Tp* __p, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:(_Alloc2 &,_Tp * __p,...)
_S_destroy_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^      _S_do_it(_Tp& __c) noexcept$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Tp & __c)
_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^    { static bool _S_do_it(_Tp&) noexcept { return false; } };$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp &)
_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
_S_empty_rep	d:/include/c++/14/bits/cow_string.h	/^	_S_empty_rep() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_Rep &	access:public	signature:()
_S_empty_rep	d:/include/c++/14/bits/cow_string.h	/^      _S_empty_rep() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_Rep &	access:private	signature:()
_S_empty_rep_storage	d:/include/c++/14/bits/cow_string.h	/^	static size_type _S_empty_rep_storage[];$/;"	m	struct:std::basic_string::_Rep	typeref:typename:size_type[]	access:public
_S_empty_rep_storage	d:/include/c++/14/bits/cow_string.h	/^    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::size_type[]
_S_end	d:/include/c++/14/bits/ios_base.h	/^      _S_end = _GLIBCXX_STDIO_SEEK_END,$/;"	e	enum:std::_Ios_Seekdir	access:public
_S_eofbit	d:/include/c++/14/bits/ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_eq	d:/include/c++/14/bits/shared_ptr_base.h	/^    static bool _S_eq(const type_info&) noexcept;$/;"	p	struct:std::_Sp_make_shared_tag	typeref:typename:bool	access:private	signature:(const type_info &)
_S_facet_categories	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
_S_failbit	d:/include/c++/14/bits/ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_first_elem	d:/include/c++/14/bits/shared_ptr_base.h	/^	_S_first_elem(_Tp (*__p)[_Nm]) { return _S_first_elem(*__p); }$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:auto	access:private	signature:(_Tp (* __p)[_Nm])
_S_first_elem	d:/include/c++/14/bits/shared_ptr_base.h	/^	_S_first_elem(_Tp* __p) { return __p; }$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:_Tp *	access:private	signature:(_Tp * __p)
_S_fixed	d:/include/c++/14/bits/ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_floatfield	d:/include/c++/14/bits/ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_format_float	d:/include/c++/14/bits/locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();$/;"	p	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
_S_fun	d:/include/c++/14/bits/refwrap.h	/^      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:private	signature:(_Tp & __r)
_S_fun	d:/include/c++/14/bits/refwrap.h	/^      static void _S_fun(_Tp&&) = delete;$/;"	p	class:std::reference_wrapper	typeref:typename:void	access:private	signature:(_Tp &&)
_S_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }$/;"	f	struct:std::_Sp_ebo_helper	typeref:typename:_Tp &	access:public	signature:(_Sp_ebo_helper & __eboh)
_S_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_get(_Sp_ebo_helper& __eboh)$/;"	f	struct:std::_Sp_ebo_helper	typeref:typename:_Tp &	access:public	signature:(_Sp_ebo_helper & __eboh)
_S_get_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
_S_get_c_name	d:/include/c++/14/bits/locale_classes.h	/^    _S_get_c_name() throw();$/;"	p	class:std::locale::facet	typeref:typename:_GLIBCXX_CONST const char *	access:protected	signature:()
_S_global	d:/include/c++/14/bits/locale_classes.h	/^    static _Impl*	_S_global;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
_S_goodbit	d:/include/c++/14/bits/ios_base.h	/^      _S_goodbit 		= 0,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_hex	d:/include/c++/14/bits/ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_iE	d:/include/c++/14/bits/locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_iX	d:/include/c++/14/bits/locale_facets.h	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_id_collate	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_ctype	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_messages	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_monetary	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_numeric	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_id_time	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
_S_ie	d:/include/c++/14/bits/locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_iend	d:/include/c++/14/bits/locale_facets.h	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_iminus	d:/include/c++/14/bits/locale_facets.h	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_in	d:/include/c++/14/bits/ios_base.h	/^      _S_in 		= 1L << 3,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_init	d:/include/c++/14/bits/atomic_base.h	/^    _S_init(bool __i)$/;"	f	struct:std::atomic_flag	typeref:typename:__atomic_flag_data_type	access:private	signature:(bool __i)
_S_initialize	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize_once() throw();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
_S_initialize_once	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	typeref:typename:void	access:private	signature:()
_S_internal	d:/include/c++/14/bits/ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_fmtflags_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_ios_iostate_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_end = 1L << 16,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_iostate_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_iostate_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Iostate	access:public
_S_ios_openmode_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_end = 1L << 16,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_openmode_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_openmode_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ios_seekdir_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	e	enum:std::_Ios_Seekdir	access:public
_S_iplus	d:/include/c++/14/bits/locale_facets.h	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_is_eof	d:/include/c++/14/bits/streambuf_iterator.h	/^      _S_is_eof(int_type __c)$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:(int_type __c)
_S_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      _S_iter_cat()$/;"	f	struct:std::iterator_traits	typeref:typename:auto	access:private	signature:()
_S_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      _S_iter_concept()$/;"	f	class:std::move_iterator	typeref:typename:auto	access:private	signature:()
_S_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^    _S_iter_concept()$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:private	signature:()
_S_ix	d:/include/c++/14/bits/locale_facets.h	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_izero	d:/include/c++/14/bits/locale_facets.h	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
_S_lc_ctype_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale __cloc,const char * __s)
_S_left	d:/include/c++/14/bits/ios_base.h	/^      _S_left 		= 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_local_capacity	d:/include/c++/14/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	e	enum:std::basic_string::__anon246589900103	access:public
_S_local_word_size	d:/include/c++/14/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon9dd0171d0103	access:public
_S_lock_bit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	static constexpr uintptr_t _S_lock_bit{1};$/;"	m	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:uintptr_t	access:private
_S_max_size	d:/include/c++/14/bits/alloc_traits.h	/^	_S_max_size(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.max_size ())	access:private	signature:(_Alloc2 & __a,int)
_S_max_size	d:/include/c++/14/bits/alloc_traits.h	/^	_S_max_size(_Alloc2&, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:size_type	access:private	signature:(_Alloc2 &,...)
_S_max_size	d:/include/c++/14/bits/cow_string.h	/^	static const size_type	_S_max_size;$/;"	m	struct:std::basic_string::_Rep	typeref:typename:const size_type	access:public
_S_max_size	d:/include/c++/14/bits/cow_string.h	/^    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))\/sizeof(_CharT)) - 1) \/ 4;$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:const typename basic_string<_CharT,_Traits,_Alloc>::size_type
_S_min_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr int _S_min_alignment$/;"	m	struct:std::__atomic_ref	typeref:typename:int	access:public
_S_move	d:/include/c++/14/bits/basic_string.h	/^      _S_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
_S_mutex	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
_S_need_barriers	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 0 };$/;"	e	enum:std::_Mutex_base::__anonc68b537e0103	access:public
_S_need_barriers	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 1 };$/;"	e	enum:std::_Mutex_base::__anonc68b537e0203	access:public
_S_noexcept	d:/include/c++/14/bits/stl_iterator.h	/^      _S_noexcept()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
_S_noexcept1	d:/include/c++/14/bits/stl_iterator.h	/^      _S_noexcept1()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
_S_noreplace	d:/include/c++/14/bits/ios_base.h	/^      _S_noreplace 	= 1L << 6,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_normalize_category	d:/include/c++/14/bits/locale_classes.h	/^    _S_normalize_category(category);$/;"	p	class:std::locale	typeref:typename:category	access:private	signature:(category)
_S_nothrow_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_nothrow_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_nothrow_construct	d:/include/c++/14/bits/alloc_traits.h	/^	_S_nothrow_construct(_Alloc* __a = nullptr, _Tp* __p = nullptr)$/;"	f	struct:std::allocator_traits	typeref:typename:bool	access:private	signature:(_Alloc * __a=nullptr,_Tp * __p=nullptr)
_S_nothrow_constructible	d:/include/c++/14/bits/stl_pair.h	/^	_S_nothrow_constructible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
_S_nothrow_move	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_nothrow_move()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_oE	d:/include/c++/14/bits/locale_facets.h	/^	_S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oX	d:/include/c++/14/bits/locale_facets.h	/^	_S_oX,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oct	d:/include/c++/14/bits/ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_odigits	d:/include/c++/14/bits/locale_facets.h	/^	_S_odigits,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_odigits_end	d:/include/c++/14/bits/locale_facets.h	/^	_S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oe	d:/include/c++/14/bits/locale_facets.h	/^	_S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oend	d:/include/c++/14/bits/locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_ominus	d:/include/c++/14/bits/locale_facets.h	/^	_S_ominus,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Alloc & __b)
_S_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,_Alloc & __b)
_S_once	d:/include/c++/14/bits/locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	m	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
_S_once	d:/include/c++/14/bits/locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	typeref:typename:__gthread_once_t	access:private
_S_oplus	d:/include/c++/14/bits/locale_facets.h	/^	_S_oplus,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oudigits	d:/include/c++/14/bits/locale_facets.h	/^	_S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_oudigits_end	d:/include/c++/14/bits/locale_facets.h	/^	_S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_out	d:/include/c++/14/bits/ios_base.h	/^      _S_out 		= 1L << 4,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_ox	d:/include/c++/14/bits/locale_facets.h	/^	_S_ox,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
_S_pad	d:/include/c++/14/bits/locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,streamsize __newlen,streamsize __oldlen)
_S_propagate_on_copy_assign	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_copy_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_propagate_on_move_assign	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_move_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_propagate_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_swap()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
_S_refcount	d:/include/c++/14/bits/ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	m	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
_S_refcount	d:/include/c++/14/bits/locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	m	class:std::locale::id	typeref:typename:_Atomic_word	access:private
_S_right	d:/include/c++/14/bits/ios_base.h	/^      _S_right 		= 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_scientific	d:/include/c++/14/bits/ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_select	d:/include/c++/14/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_Alloc2	access:private	signature:(_Alloc2 & __a,...)
_S_select	d:/include/c++/14/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.select_on_container_copy_construction ())	access:private	signature:(_Alloc2 & __a,int)
_S_select_on_copy	d:/include/c++/14/ext/alloc_traits.h	/^    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:const _Alloc &	access:public	signature:(const _Alloc & __a)
_S_select_on_copy	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public	signature:(const _Alloc & __a)
_S_showbase	d:/include/c++/14/bits/ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_showpoint	d:/include/c++/14/bits/ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_showpos	d:/include/c++/14/bits/ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_single	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
_S_skipws	d:/include/c++/14/bits/ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_synced_with_stdio	d:/include/c++/14/bits/ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	typeref:typename:bool	access:private
_S_tail	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_tail()$/;"	f	class:std::_Sp_counted_array	typeref:typename:size_t	access:public	signature:()
_S_terminal	d:/include/c++/14/bits/cow_string.h	/^	static const _CharT	_S_terminal;$/;"	m	struct:std::basic_string::_Rep	typeref:typename:const _CharT	access:public
_S_terminal	d:/include/c++/14/bits/cow_string.h	/^    _Rep::_S_terminal = _CharT();$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:const _CharT
_S_ti	d:/include/c++/14/bits/shared_ptr_base.h	/^    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)$/;"	f	struct:std::_Sp_make_shared_tag	typeref:typename:const type_info &	access:private	signature:()
_S_to_pointer	d:/include/c++/14/bits/stl_iterator.h	/^	_S_to_pointer(_Tp __t)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:private	signature:(_Tp __t)
_S_to_pointer	d:/include/c++/14/bits/stl_iterator.h	/^	_S_to_pointer(_Tp* __p)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	access:private	signature:(_Tp * __p)
_S_to_string_view	d:/include/c++/14/bits/basic_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR __sv_type	access:private	signature:(__sv_type __svt)
_S_to_string_view	d:/include/c++/14/bits/cow_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:__sv_type	access:private	signature:(__sv_type __svt)
_S_trunc	d:/include/c++/14/bits/ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	e	enum:std::_Ios_Openmode	access:public
_S_twinned_facets	d:/include/c++/14/bits/locale_classes.h	/^    static const id* const _S_twinned_facets[];$/;"	m	class:std::locale	typeref:typename:const id * const[]	access:private
_S_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _S_type_size(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d)
_S_unitbuf	d:/include/c++/14/bits/ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_uppercase	d:/include/c++/14/bits/ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	access:public
_S_valueless	d:/include/c++/14/bits/stl_iterator.h	/^    static constexpr unsigned char _S_valueless{2};$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
_SafeConv	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _SafeConv$/;"	t	class:std::__shared_ptr	typeref:typename:enable_if<__sp_is_constructible<_Tp,_Yp>::value>::type	access:private
_Save_errno	d:/include/c++/14/ext/string_conversions.h	/^	_Save_errno() : _M_errno(errno) { errno = 0; }$/;"	f	struct:__gnu_cxx::__stoa::_Save_errno	access:public	signature:()
_Save_errno	d:/include/c++/14/ext/string_conversions.h	/^      struct _Save_errno {$/;"	s	function:__gnu_cxx::__stoa
_Select1st	d:/include/c++/14/bits/stl_function.h	/^    struct _Select1st$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
_Select2nd	d:/include/c++/14/bits/stl_function.h	/^    struct _Select2nd$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
_Sink	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	s	struct:std::__uses_alloc0	access:public
_Size	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Size : make_unsigned<_DiffT> { };$/;"	s	struct:std::allocator_traits	inherits:make_unsigned<_DiffT>	access:private
_Size	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>$/;"	s	struct:std::allocator_traits	access:private
_Sp	d:/include/c++/14/bits/shared_ptr.h	/^      using _Sp = shared_ptr<_Tp>;$/;"	t	function:std::const_pointer_cast	typeref:typename:shared_ptr<_Tp>
_Sp	d:/include/c++/14/bits/shared_ptr.h	/^      using _Sp = shared_ptr<_Tp>;$/;"	t	function:std::dynamic_pointer_cast	typeref:typename:shared_ptr<_Tp>
_Sp	d:/include/c++/14/bits/shared_ptr.h	/^      using _Sp = shared_ptr<_Tp>;$/;"	t	function:std::reinterpret_pointer_cast	typeref:typename:shared_ptr<_Tp>
_Sp	d:/include/c++/14/bits/shared_ptr.h	/^      using _Sp = shared_ptr<_Tp>;$/;"	t	function:std::static_pointer_cast	typeref:typename:shared_ptr<_Tp>
_Sp	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Sp = __shared_ptr<_Tp, _Lp>;$/;"	t	function:std::const_pointer_cast	typeref:typename:__shared_ptr<_Tp,_Lp>
_Sp	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Sp = __shared_ptr<_Tp, _Lp>;$/;"	t	function:std::dynamic_pointer_cast	typeref:typename:__shared_ptr<_Tp,_Lp>
_Sp	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Sp = __shared_ptr<_Tp, _Lp>;$/;"	t	function:std::reinterpret_pointer_cast	typeref:typename:__shared_ptr<_Tp,_Lp>
_Sp	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Sp = __shared_ptr<_Tp, _Lp>;$/;"	t	function:std::static_pointer_cast	typeref:typename:__shared_ptr<_Tp,_Lp>
_Sp_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_alloc_shared_tag$/;"	s	namespace:std
_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic(const _Sp_atomic&) = delete;$/;"	p	class:std::_Sp_atomic	access:private	signature:(const _Sp_atomic &)
_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic(value_type __r) noexcept$/;"	f	class:std::_Sp_atomic	access:private	signature:(value_type __r)
_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr _Sp_atomic() noexcept = default;$/;"	p	class:std::_Sp_atomic	access:private	signature:()
_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    class _Sp_atomic$/;"	c	namespace:std
_Sp_ca_type	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Sp_ca_type = _Sp_counted_array<_Alloc, _Lp>;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:_Sp_counted_array<_Alloc,_Lp>
_Sp_cd_type	d:/include/c++/14/bits/shared_ptr_base.h	/^	  typedef _Sp_counted_deleter<_Ptr, _Deleter, _Alloc, _Lp> _Sp_cd_type;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:_Sp_counted_deleter<_Ptr,_Deleter,_Alloc,_Lp>
_Sp_cd_type	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Sp_cd_type$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:_Sp_counted_deleter<_Ptr,_Del2,allocator<void>,_Lp>
_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_array(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::_Sp_counted_array	access:public	signature:(const _Sp_counted_array_base<_Alloc> & __a,pointer __p)
_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_array final$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>,_Sp_counted_array_base<_Alloc>
_Sp_counted_array_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_counted_array_base$/;"	s	namespace:std
_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base() noexcept$/;"	f	class:std::_Sp_counted_base	access:public	signature:()
_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base(_Sp_counted_base const&) = delete;$/;"	p	class:std::_Sp_counted_base	access:private	signature:(_Sp_counted_base const &)
_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_base$/;"	c	namespace:std	inherits:_Mutex_base<_Lp>
_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:(_Ptr __p,_Deleter __d)
_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:(_Ptr __p,_Deleter __d,const _Alloc & __a)
_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr(_Ptr __p) noexcept$/;"	f	class:std::_Sp_counted_ptr	access:public	signature:(_Ptr __p)
_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;$/;"	p	class:std::_Sp_counted_ptr	access:public	signature:(const _Sp_counted_ptr &)
_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:(_Alloc __a,_Args &&...__args)
_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr_inplace(const _Alloc& __a)$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:(const _Alloc & __a)
_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> final$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
_Sp_cp_type	d:/include/c++/14/bits/shared_ptr_base.h	/^	  typedef _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> _Sp_cp_type;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:_Sp_counted_ptr_inplace<_Tp,_Alloc,_Lp>
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(_Tp && __tp)
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(_Tp && __tp)
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(const _Tp & __tp)
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(const _Tp & __tp)
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_ebo_helper<_Nm, _Tp, false>$/;"	s	namespace:std
_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp$/;"	s	namespace:std	inherits:_Tp
_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const _Sp_locker&) = delete;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const _Sp_locker &)
_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const void*) noexcept;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const void *)
_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const void*, const void*) noexcept;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const void *,const void *)
_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    explicit _Sp_locker(const void*, const void* = nullptr) { }$/;"	f	struct:std::_Sp_locker	access:private	signature:(const void *,const void * =nullptr)
_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^  struct _Sp_locker$/;"	s	namespace:std
_Sp_make_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct _Sp_make_shared_tag$/;"	s	namespace:std
_Sp_overwrite_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct _Sp_overwrite_tag { };$/;"	s	namespace:std
_Sp_owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
_Sp_owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_owner_less<void, void>$/;"	s	namespace:std
_Static_assert	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define _Static_assert(/;"	d	signature:(expr,diagnostic)
_Str	d:/include/c++/14/bits/basic_string.h	/^      typedef basic_string<_CharT, _Traits, _Alloc> _Str;$/;"	t	function:std::operator +	typeref:typename:basic_string<_CharT,_Traits,_Alloc>
_THREAD_MUTEX_INTERNAL_H	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^#define _THREAD_MUTEX_INTERNAL_H /;"	d
_THREAD_SHARED_TYPES_H	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^#define _THREAD_SHARED_TYPES_H /;"	d
_TIMER_T_	../../../../../../usr/include/sys/_types.h	/^#define	_TIMER_T_	/;"	d
_TIME_H	d:/include/time.h	/^#define _TIME_H	/;"	d
_TIME_T_	../../../../../../usr/include/sys/_types.h	/^#define	_TIME_T_ /;"	d
_Tag	d:/include/c++/14/bits/basic_string.h	/^          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;$/;"	t	function:std::basic_string::_M_construct_aux	typeref:typename:iterator_traits<_InIterator>::iterator_category
_Tag	d:/include/c++/14/bits/cow_string.h	/^	  typedef typename iterator_traits<_InIterator>::iterator_category _Tag;$/;"	t	function:std::basic_string::_S_construct_aux	typeref:typename:iterator_traits<_InIterator>::iterator_category
_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);$/;"	p	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __seed,size_type __original_len)
_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer &)
_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)$/;"	f	class:std::_Temporary_buffer	signature:(_ForwardIterator __seed,size_type __original_len)
_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    class _Temporary_buffer$/;"	c	namespace:std
_Terminator	d:/include/c++/14/bits/cow_string.h	/^      struct _Terminator {$/;"	s	function:std::basic_string::resize_and_overwrite
_Tp	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Tp = remove_pointer_t<_Init>;$/;"	t	function:std::_Sp_counted_array_base::_M_init	typeref:typename:remove_pointer_t<_Init>
_Tp	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Tp = typename allocator_traits<_Alloc>::value_type;$/;"	t	function:std::_Sp_counted_array::_S_tail	typeref:typename:allocator_traits<_Alloc>::value_type
_Tp2	d:/include/c++/14/ext/aligned_buffer.h	/^      struct _Tp2 { _Tp _M_t; };$/;"	s	struct:__gnu_cxx::__aligned_membuf	access:public
_Tp_elt	d:/include/c++/14/bits/shared_ptr.h	/^      using _Tp_elt = typename shared_ptr<_Tp>::element_type;$/;"	t	function:std::operator <	typeref:typename:shared_ptr<_Tp>::element_type
_Tp_elt	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Tp_elt = typename __shared_ptr<_Tp, _Lp>::element_type;$/;"	t	function:std::operator <	typeref:typename:__shared_ptr<_Tp,_Lp>::element_type
_Tp_nc	d:/include/c++/14/bits/shared_ptr_base.h	/^      typedef typename std::remove_const<_Tp>::type _Tp_nc;$/;"	t	function:std::__make_shared	typeref:typename:std::remove_const<_Tp>::type
_UNBUF_STREAM_OPT	../../../../../../usr/include/newlib.h	/^#define _UNBUF_STREAM_OPT /;"	d
_UNIQUE_PTR_H	d:/include/c++/14/bits/unique_ptr.h	/^#define _UNIQUE_PTR_H /;"	d
_UNIX98_THREAD_MUTEX_ATTRIBUTES	../../../../../../usr/include/sys/config.h	/^#define _UNIX98_THREAD_MUTEX_ATTRIBUTES$/;"	d
_UNIX98_THREAD_MUTEX_ATTRIBUTES	../../../../../../usr/include/sys/features.h	/^#define _UNIX98_THREAD_MUTEX_ATTRIBUTES /;"	d
_USES_ALLOCATOR_H	d:/include/c++/14/bits/uses_allocator.h	/^#define _USES_ALLOCATOR_H /;"	d
_USE_GDTOA	../../../../../../usr/include/sys/config.h	/^#define _USE_GDTOA$/;"	d
_USE_LONG_TIME_T	../../../../../../usr/include/cygwin/config.h	/^#define _USE_LONG_TIME_T /;"	d
_USE_LONG_TIME_T	../../../../../../usr/include/sys/config.h	/^#define _USE_LONG_TIME_T$/;"	d
_UnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _UnboundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
_UnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _UnboundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<__is_array_unknown_bounds<_Tp>::value,_Tp>
_UniqAssignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;$/;"	t	class:std::__shared_ptr	typeref:typename:_UniqCompatible<_Yp,_Del,__shared_ptr &>	access:private
_UniqCompatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _UniqCompatible = __enable_if_t<__and_<$/;"	t	class:std::__shared_ptr	access:private
_Up	d:/include/c++/14/bits/nested_exception.h	/^      using _Up = typename decay<_Tp>::type;$/;"	t	function:std::throw_with_nested	typeref:typename:decay<_Tp>::type
_Up	d:/include/c++/14/bits/shared_ptr.h	/^      using _Up = remove_all_extents_t<_Tp>;$/;"	t	function:std::__make_shared_arrN_tag	typeref:typename:remove_all_extents_t<_Tp>
_Up	d:/include/c++/14/bits/shared_ptr.h	/^      using _Up = remove_all_extents_t<_Tp>;$/;"	t	function:std::__make_shared_arr_tag	typeref:typename:remove_all_extents_t<_Tp>
_Up	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Up = remove_all_extents_t<_Tp>;$/;"	t	function:std::__shared_count::__shared_count	typeref:typename:remove_all_extents_t<_Tp>
_Up	d:/include/c++/14/bits/shared_ptr_base.h	/^	  using _Up = typename allocator_traits<_Alloc>::value_type;$/;"	t	function:std::_Sp_counted_array_base::_M_init	typeref:typename:allocator_traits<_Alloc>::value_type
_UpAlloc	d:/include/c++/14/bits/shared_ptr.h	/^      using _UpAlloc = __alloc_rebind<_Alloc, _Up>;$/;"	t	function:std::__make_shared_arrN_tag	typeref:typename:__alloc_rebind<_Alloc,_Up>
_UpAlloc	d:/include/c++/14/bits/shared_ptr.h	/^      using _UpAlloc = __alloc_rebind<_Alloc, _Up>;$/;"	t	function:std::__make_shared_arr_tag	typeref:typename:__alloc_rebind<_Alloc,_Up>
_Up_elt	d:/include/c++/14/bits/shared_ptr.h	/^      using _Up_elt = typename shared_ptr<_Up>::element_type;$/;"	t	function:std::operator <	typeref:typename:shared_ptr<_Up>::element_type
_Up_elt	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Up_elt = typename __shared_ptr<_Up, _Lp>::element_type;$/;"	t	function:std::operator <	typeref:typename:__shared_ptr<_Up,_Lp>::element_type
_VA_LIST_DEFINED	d:/include/stdio.h	/^#   define _VA_LIST_DEFINED$/;"	d
_VA_LIST_DEFINED	d:/include/wchar.h	/^#   define _VA_LIST_DEFINED$/;"	d
_Val	d:/include/c++/14/bits/atomic_base.h	/^      using _Val = typename remove_volatile<_Tp>::type;$/;"	t	namespace:std::__atomic_impl	typeref:typename:remove_volatile<_Tp>::type
_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Val_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^    _Val_less_iter(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^    constexpr _Val_less_iter() = default;$/;"	p	struct:__gnu_cxx::__ops::_Val_less_iter	access:public	signature:()
_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Val_less_iter$/;"	s	namespace:__gnu_cxx::__ops
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::__relocate_a_1	typeref:typename:iterator_traits<_InputIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::__uninitialized_default	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::__uninitialized_default_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::__uninitialized_default_novalue	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::__uninitialized_default_novalue_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::uninitialized_fill	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType;$/;"	t	function:std::uninitialized_fill_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType1	d:/include/c++/14/bits/stl_algobase.h	/^	    _ValueType1;$/;"	t	function:std::__iter_swap::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	d:/include/c++/14/bits/stl_algobase.h	/^	_ValueType1;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator1>::value_type
_ValueType1	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::__equal_aux1	typeref:typename:iterator_traits<_II1>::value_type
_ValueType1	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::__lexicographical_compare_aux1	typeref:typename:iterator_traits<_II1>::value_type
_ValueType1	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II1>::value_type _ValueType1;$/;"	t	function:std::lexicographical_compare	typeref:typename:iterator_traits<_II1>::value_type
_ValueType1	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType1;$/;"	t	function:std::uninitialized_copy	typeref:typename:iterator_traits<_InputIterator>::value_type
_ValueType2	d:/include/c++/14/bits/stl_algobase.h	/^	_ValueType2;$/;"	t	function:std::iter_swap	typeref:typename:iterator_traits<_ForwardIterator2>::value_type
_ValueType2	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::value_type _ValueType2;$/;"	t	function:std::__lexicographical_compare_aux1	typeref:typename:iterator_traits<_II2>::value_type
_ValueType2	d:/include/c++/14/bits/stl_algobase.h	/^      typedef typename iterator_traits<_II2>::value_type _ValueType2;$/;"	t	function:std::lexicographical_compare	typeref:typename:iterator_traits<_II2>::value_type
_ValueType2	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType2;$/;"	t	function:std::__relocate_a_1	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_ValueType2	d:/include/c++/14/bits/stl_uninitialized.h	/^	_ValueType2;$/;"	t	function:std::uninitialized_copy	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_Value_type	d:/include/c++/14/bits/stl_construct.h	/^                       _Value_type;$/;"	t	function:std::_Destroy	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_Value_type	d:/include/c++/14/bits/stl_construct.h	/^                       _Value_type;$/;"	t	function:std::_Destroy_n	typeref:typename:iterator_traits<_ForwardIterator>::value_type
_Vp	d:/include/c++/14/bits/atomic_base.h	/^	using _Vp = _Val<_Tp>;$/;"	t	function:std::__atomic_impl::__compare_exchange	typeref:typename:_Val<_Tp>
_Vp	d:/include/c++/14/bits/shared_ptr.h	/^      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;$/;"	t	function:std::operator <	typeref:typename:common_type<_Tp_elt *,_Up_elt * >::type
_Vp	d:/include/c++/14/bits/shared_ptr_base.h	/^      using _Vp = typename common_type<_Tp_elt*, _Up_elt*>::type;$/;"	t	function:std::operator <	typeref:typename:common_type<_Tp_elt *,_Up_elt * >::type
_WANT_C99_TIME_FORMATS	../../../../../../usr/include/cygwin/config.h	/^#define _WANT_C99_TIME_FORMATS /;"	d
_WANT_IO_C99_FORMATS	../../../../../../usr/include/newlib.h	/^#define _WANT_IO_C99_FORMATS /;"	d
_WANT_IO_LONG_DOUBLE	../../../../../../usr/include/newlib.h	/^#define _WANT_IO_LONG_DOUBLE /;"	d
_WANT_IO_LONG_LONG	../../../../../../usr/include/newlib.h	/^#define _WANT_IO_LONG_LONG /;"	d
_WANT_IO_POS_ARGS	../../../../../../usr/include/newlib.h	/^#define _WANT_IO_POS_ARGS /;"	d
_WANT_USE_GDTOA	../../../../../../usr/include/newlib.h	/^#define _WANT_USE_GDTOA /;"	d
_WCHAR_H	d:/include/wchar.h	/^#define _WCHAR_H /;"	d
_WCTYPE_H	d:/include/wctype.h	/^#define _WCTYPE_H /;"	d
_WIDE_ORIENT	../../../../../../usr/include/newlib.h	/^#define _WIDE_ORIENT /;"	d
_WINT_T	d:/include/x86_64-linux-gnu/bits/types/wint_t.h	/^#define _WINT_T /;"	d
_Weak_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type$/;"	s	namespace:std	inherits:_Weak_result_type_memfun<typenameremove_cv<_Functor>::type>
_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    _Weak_result_type_impl<_Res(*)(_ArgTypes......) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl$/;"	s	namespace:std	inherits:_Maybe_get_result_type<_Functor>
_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(_ArgTypes...) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(_ArgTypes......) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun$/;"	s	namespace:std	inherits:_Weak_result_type_impl<_Functor>
_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun<_Func _Class::*, false>$/;"	s	namespace:std
_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun<_MemFunPtr, true>$/;"	s	namespace:std
_Words	d:/include/c++/14/bits/ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words	access:public	signature:()
_Words	d:/include/c++/14/bits/ios_base.h	/^    struct _Words$/;"	s	class:std::ios_base	access:protected
_XBS5_ILP32_OFF32	../../../../../../usr/include/sys/features.h	/^#define _XBS5_ILP32_OFF32	/;"	d
_XBS5_ILP32_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _XBS5_ILP32_OFFBIG	/;"	d
_XBS5_LP64_OFF64	../../../../../../usr/include/sys/features.h	/^#define _XBS5_LP64_OFF64	/;"	d
_XBS5_LPBIG_OFFBIG	../../../../../../usr/include/sys/features.h	/^#define _XBS5_LPBIG_OFFBIG	/;"	d
_XOPEN_CRYPT	../../../../../../usr/include/sys/features.h	/^#define _XOPEN_CRYPT	/;"	d
_XOPEN_ENH_I18N	../../../../../../usr/include/sys/features.h	/^#define _XOPEN_ENH_I18N	/;"	d
_XOPEN_SHM	../../../../../../usr/include/sys/features.h	/^#define _XOPEN_SHM	/;"	d
_XOPEN_SOURCE	../../../../../../usr/include/sys/features.h	/^#define	_XOPEN_SOURCE	/;"	d
_XOPEN_SOURCE	d:/include/features.h	/^# define _XOPEN_SOURCE	/;"	d
_XOPEN_SOURCE_EXTENDED	../../../../../../usr/include/sys/features.h	/^#define	_XOPEN_SOURCE_EXTENDED	/;"	d
_XOPEN_SOURCE_EXTENDED	d:/include/features.h	/^# define _XOPEN_SOURCE_EXTENDED	/;"	d
_XOPEN_VERSION	../../../../../../usr/include/sys/features.h	/^#define _XOPEN_VERSION	/;"	d
__3way	d:/include/c++/14/bits/stl_algobase.h	/^	__3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR int	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__3way	d:/include/c++/14/bits/stl_algobase.h	/^	__3way(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR ptrdiff_t	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
__ASMNAME	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __ASMNAME(cname)  __ASMNAME2/;"	d	signature:(cname)
__ASMNAME2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __ASMNAME2(/;"	d	signature:(prefix,cname)
__ATFILE_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__ATFILE_VISIBLE	/;"	d
__ATTRIBUTE_IMPURE_DATA__	../../../../../../usr/include/sys/reent.h	/^#define __ATTRIBUTE_IMPURE_DATA__$/;"	d
__ATTRIBUTE_IMPURE_PTR__	../../../../../../usr/include/sys/config.h	/^#define __ATTRIBUTE_IMPURE_PTR__ /;"	d
__ATTRIBUTE_IMPURE_PTR__	../../../../../../usr/include/sys/reent.h	/^#define __ATTRIBUTE_IMPURE_PTR__$/;"	d
__BEGIN_DECLS	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __BEGIN_DECLS	/;"	d
__BEGIN_DECLS	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __BEGIN_DECLS$/;"	d
__BIG_ENDIAN	d:/include/x86_64-linux-gnu/bits/endian.h	/^#define	__BIG_ENDIAN	/;"	d
__BLKCNT64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKCNT64_T_TYPE	/;"	d
__BLKCNT_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKCNT_T_TYPE	/;"	d
__BLKSIZE_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __BLKSIZE_T_TYPE	/;"	d
__BSD_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__BSD_VISIBLE	/;"	d
__BUFSIZ__	../../../../../../usr/include/sys/config.h	/^#define __BUFSIZ__ /;"	d
__BYTE_ORDER	d:/include/x86_64-linux-gnu/bits/endianness.h	/^#define __BYTE_ORDER /;"	d
__CFLOAT128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __CFLOAT128 /;"	d
__CFLOAT128X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT128X /;"	d
__CFLOAT16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT16 /;"	d
__CFLOAT32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT32 /;"	d
__CFLOAT32X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT32X /;"	d
__CFLOAT64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __CFLOAT64 /;"	d
__CFLOAT64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT64 /;"	d
__CFLOAT64X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __CFLOAT64X /;"	d
__CFLOAT64X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __CFLOAT64X /;"	d
__CLOCKID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CLOCKID_T_TYPE	/;"	d
__CLOCK_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CLOCK_T_TYPE	/;"	d
__COLD	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __COLD	/;"	d
__COLD	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __COLD$/;"	d
__COLD	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __COLD$/;"	d
__CONCAT	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __CONCAT(/;"	d	signature:(x,y)
__CORRECT_ISO_CPP_WCHAR_H_PROTO	d:/include/wchar.h	/^# define __CORRECT_ISO_CPP_WCHAR_H_PROTO$/;"	d
__CPUELT	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPUELT(/;"	d	signature:(cpu)
__CPUMASK	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPUMASK(/;"	d	signature:(cpu)
__CPU_ALLOC	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ALLOC(/;"	d	signature:(count)
__CPU_ALLOC_SIZE	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ALLOC_SIZE(/;"	d	signature:(count)
__CPU_CLR_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_CLR_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_COUNT_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_COUNT_S(/;"	d	signature:(setsize,cpusetp)
__CPU_EQUAL_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^# define __CPU_EQUAL_S(/;"	d	signature:(setsize,cpusetp1,cpusetp2)
__CPU_FREE	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_FREE(/;"	d	signature:(cpuset)
__CPU_ISSET_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_ISSET_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_MASK_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __CPU_MASK_TYPE /;"	d
__CPU_OP_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_OP_S(/;"	d	signature:(setsize,destset,srcset1,srcset2,op)
__CPU_SETSIZE	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_SETSIZE	/;"	d
__CPU_SET_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __CPU_SET_S(/;"	d	signature:(cpu,setsize,cpusetp)
__CPU_ZERO_S	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^# define __CPU_ZERO_S(/;"	d	signature:(setsize,cpusetp)
__CUSTOM_FILE_IO__	../../../../../../usr/include/sys/config.h	/^#define __CUSTOM_FILE_IO__$/;"	d
__CYGTLS_PADSIZE__	../../../../../../usr/include/cygwin/config.h	/^#define __CYGTLS_PADSIZE__ /;"	d
__DADDR_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __DADDR_T_TYPE	/;"	d
__DEV_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __DEV_T_TYPE	/;"	d
__DOUBLE_TYPE	../../../../../../usr/include/machine/ieeefp.h	/^#define __DOUBLE_TYPE /;"	d
__DYNAMIC_REENT__	../../../../../../usr/include/cygwin/config.h	/^#define __DYNAMIC_REENT__$/;"	d
__DYNAMIC_REENT__	../../../../../../usr/include/sys/config.h	/^#define __DYNAMIC_REENT__$/;"	d
__END_DECLS	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __END_DECLS	/;"	d
__END_DECLS	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __END_DECLS$/;"	d
__EXCEPTION_H	d:/include/c++/14/bits/exception.h	/^#define __EXCEPTION_H /;"	d
__EXP	../../../../../../usr/include/machine/_default_types.h	/^#define __EXP(/;"	d	signature:(x)
__EXPORT	../../../../../../usr/include/cygwin/config.h	/^#define __EXPORT /;"	d
__EXPORT	../../../../../../usr/include/cygwin/config.h	/^#define __EXPORT$/;"	d
__EXPORT	../../../../../../usr/include/sys/config.h	/^#define __EXPORT$/;"	d
__FD_SETSIZE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FD_SETSIZE	/;"	d
__FILE	../../../../../../usr/include/sys/reent.h	/^typedef struct __sFILE   __FILE;$/;"	t	typeref:struct:__sFILE
__FILE	../../../../../../usr/include/sys/reent.h	/^typedef struct __sFILE64 __FILE;$/;"	t	typeref:struct:__sFILE64
__FILE	d:/include/x86_64-linux-gnu/bits/types/__FILE.h	/^typedef struct _IO_FILE __FILE;$/;"	t	typeref:struct:_IO_FILE
__FILENAME_MAX__	../../../../../../usr/include/cygwin/config.h	/^#define __FILENAME_MAX__ /;"	d
__FILENAME_MAX__	../../../../../../usr/include/sys/config.h	/^#define __FILENAME_MAX__ /;"	d
__FILE_defined	d:/include/x86_64-linux-gnu/bits/types/FILE.h	/^#define __FILE_defined /;"	d
__FLOAT_TYPE	../../../../../../usr/include/machine/ieeefp.h	/^#define __FLOAT_TYPE /;"	d
__FLOAT_WORD_ORDER	d:/include/x86_64-linux-gnu/bits/endian.h	/^# define __FLOAT_WORD_ORDER /;"	d
__FSBLKCNT64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSBLKCNT64_T_TYPE	/;"	d
__FSBLKCNT_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSBLKCNT_T_TYPE	/;"	d
__FSFILCNT64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSFILCNT64_T_TYPE	/;"	d
__FSFILCNT_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSFILCNT_T_TYPE	/;"	d
__FSID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __FSID_T_TYPE	/;"	d
__FSWORD_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __FSWORD_T_TYPE	/;"	d
__GID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __GID_T_TYPE	/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	d:/include/stdint.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	d:/include/stdio.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION	d:/include/wchar.h	/^#define __GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION$/;"	d
__GLIBC_MINOR__	d:/include/features.h	/^#define	__GLIBC_MINOR__	/;"	d
__GLIBC_PREREQ	d:/include/features.h	/^#define __GLIBC_PREREQ(/;"	d	signature:(maj,min)
__GLIBC_USE	d:/include/features.h	/^#define __GLIBC_USE(F)	__GLIBC_USE_/;"	d	signature:(F)
__GLIBC_USE_C23_STRTOL	d:/include/features.h	/^# define __GLIBC_USE_C23_STRTOL /;"	d
__GLIBC_USE_DEPRECATED_GETS	d:/include/features.h	/^# define __GLIBC_USE_DEPRECATED_GETS /;"	d
__GLIBC_USE_DEPRECATED_SCANF	d:/include/features.h	/^# define __GLIBC_USE_DEPRECATED_SCANF /;"	d
__GLIBC_USE_IEC_60559_BFP_EXT	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_BFP_EXT /;"	d
__GLIBC_USE_IEC_60559_BFP_EXT_C23	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_BFP_EXT_C23 /;"	d
__GLIBC_USE_IEC_60559_EXT	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_EXT /;"	d
__GLIBC_USE_IEC_60559_FUNCS_EXT	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_FUNCS_EXT /;"	d
__GLIBC_USE_IEC_60559_FUNCS_EXT_C23	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_FUNCS_EXT_C23 /;"	d
__GLIBC_USE_IEC_60559_TYPES_EXT	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_IEC_60559_TYPES_EXT /;"	d
__GLIBC_USE_ISOC23	d:/include/features.h	/^# define __GLIBC_USE_ISOC23	/;"	d
__GLIBC_USE_ISOC2Y	d:/include/features.h	/^# define __GLIBC_USE_ISOC2Y	/;"	d
__GLIBC_USE_LIB_EXT2	d:/include/x86_64-linux-gnu/bits/libc-header-start.h	/^# define __GLIBC_USE_LIB_EXT2 /;"	d
__GLIBC__	d:/include/features.h	/^#define	__GLIBC__	/;"	d
__GNUC_PREREQ	../../../../../../usr/include/sys/features.h	/^#  define __GNUC_PREREQ(/;"	d	signature:(maj,min)
__GNUC_PREREQ	d:/include/features.h	/^# define __GNUC_PREREQ(/;"	d	signature:(maj,min)
__GNUC_PREREQ__	../../../../../../usr/include/sys/features.h	/^#define	__GNUC_PREREQ__(/;"	d	signature:(ma,mi)
__GNU_LIBRARY__	d:/include/features.h	/^#define __GNU_LIBRARY__ /;"	d
__GNU_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__GNU_VISIBLE	/;"	d
__HAVE_DISTINCT_FLOAT128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^# define __HAVE_DISTINCT_FLOAT128 /;"	d
__HAVE_DISTINCT_FLOAT128X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT128X /;"	d
__HAVE_DISTINCT_FLOAT16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT16 /;"	d
__HAVE_DISTINCT_FLOAT32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT32 /;"	d
__HAVE_DISTINCT_FLOAT32X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT32X /;"	d
__HAVE_DISTINCT_FLOAT64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT64 /;"	d
__HAVE_DISTINCT_FLOAT64X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_DISTINCT_FLOAT64X /;"	d
__HAVE_FLOAT128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^# define __HAVE_FLOAT128 /;"	d
__HAVE_FLOAT128X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT128X /;"	d
__HAVE_FLOAT128_UNLIKE_LDBL	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT128_UNLIKE_LDBL /;"	d
__HAVE_FLOAT16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT16 /;"	d
__HAVE_FLOAT32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT32 /;"	d
__HAVE_FLOAT32X	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT32X /;"	d
__HAVE_FLOAT64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#define __HAVE_FLOAT64 /;"	d
__HAVE_FLOAT64X	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#define __HAVE_FLOAT64X /;"	d
__HAVE_FLOAT64X_LONG_DOUBLE	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#define __HAVE_FLOAT64X_LONG_DOUBLE /;"	d
__HAVE_FLOATN_NOT_TYPEDEF	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^# define __HAVE_FLOATN_NOT_TYPEDEF /;"	d
__HAVE_GENERIC_SELECTION	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __HAVE_GENERIC_SELECTION /;"	d
__HAVE_LOCALE_INFO_EXTENDED__	../../../../../../usr/include/cygwin/config.h	/^#define __HAVE_LOCALE_INFO_EXTENDED__ /;"	d
__HAVE_LOCALE_INFO__	../../../../../../usr/include/cygwin/config.h	/^#define __HAVE_LOCALE_INFO__ /;"	d
__ID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __ID_T_TYPE	/;"	d
__IEEE_BIG_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^#  define __IEEE_BIG_ENDIAN$/;"	d
__IEEE_BIG_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^# define __IEEE_BIG_ENDIAN$/;"	d
__IEEE_BIG_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^#define __IEEE_BIG_ENDIAN$/;"	d
__IEEE_BYTES_LITTLE_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^#  define __IEEE_BYTES_LITTLE_ENDIAN$/;"	d
__IEEE_LITTLE_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^#  define __IEEE_LITTLE_ENDIAN$/;"	d
__IEEE_LITTLE_ENDIAN	../../../../../../usr/include/machine/ieeefp.h	/^#define __IEEE_LITTLE_ENDIAN$/;"	d
__IMPORT	../../../../../../usr/include/cygwin/config.h	/^#define __IMPORT /;"	d
__IMPORT	../../../../../../usr/include/cygwin/config.h	/^#define __IMPORT$/;"	d
__IMPORT	../../../../../../usr/include/sys/config.h	/^#define __IMPORT$/;"	d
__INO64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __INO64_T_TYPE	/;"	d
__INO_T_MATCHES_INO64_T	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __INO_T_MATCHES_INO64_T	/;"	d
__INO_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __INO_T_TYPE	/;"	d
__INT64_C	d:/include/stdint.h	/^#  define __INT64_C(/;"	d	signature:(c)
__INT_MAX__	../../../../../../usr/include/sys/config.h	/^#  define __INT_MAX__ /;"	d
__INT_N	d:/include/c++/14/bits/cpp_type_traits.h	/^#define __INT_N(/;"	d	signature:(TYPE)
__ISO_C_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define __ISO_C_VISIBLE	/;"	d
__ISwalnum	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwalnum = 11,			\/* Alphanumeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwalpha	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwalpha = 2,			\/* Alphabetic.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwblank	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwblank = 8,			\/* Blank (usually SPC and TAB).  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwcntrl	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwcntrl = 9,			\/* Control character.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwdigit = 3,			\/* Numeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwgraph	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwgraph = 7,			\/* Graphical.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwlower	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwlower = 1,			\/* lowercase.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwprint	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwprint = 6,			\/* Printing.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwpunct	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwpunct = 10,			\/* Punctuation.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwspace	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwspace = 5,			\/* Whitespace.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwupper	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwupper = 0,			\/* UPPERCASE.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__ISwxdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^  __ISwxdigit = 4,			\/* Hexadecimal numeric.  *\/$/;"	e	enum:__anon798aacac0103	access:public
__KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 /;"	d
__KERNEL_STRICT_NAMES	d:/include/features.h	/^# define __KERNEL_STRICT_NAMES$/;"	d
__KEY_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __KEY_T_TYPE	/;"	d
__LARGE64_FILES	../../../../../../usr/include/sys/config.h	/^#define __LARGE64_FILES /;"	d
__LARGEFILE_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__LARGEFILE_VISIBLE	/;"	d
__LC_ADDRESS	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_ADDRESS	/;"	d
__LC_ALL	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_ALL	/;"	d
__LC_COLLATE	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_COLLATE	/;"	d
__LC_CTYPE	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_CTYPE	/;"	d
__LC_IDENTIFICATION	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_IDENTIFICATION	/;"	d
__LC_MEASUREMENT	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MEASUREMENT	/;"	d
__LC_MESSAGES	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MESSAGES	/;"	d
__LC_MONETARY	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_MONETARY	/;"	d
__LC_NAME	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_NAME	/;"	d
__LC_NUMERIC	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_NUMERIC	/;"	d
__LC_PAPER	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_PAPER	/;"	d
__LC_TELEPHONE	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_TELEPHONE	/;"	d
__LC_TIME	d:/include/x86_64-linux-gnu/bits/locale.h	/^#define __LC_TIME	/;"	d
__LDBL_COMPAT	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_COMPAT /;"	d
__LDBL_REDIR	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR(/;"	d	signature:(name,proto)
__LDBL_REDIR	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR(/;"	d	signature:(name,proto)
__LDBL_REDIR1	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR1(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1_DECL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1_DECL(/;"	d	signature:(name,alias)
__LDBL_REDIR1_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR1_NTH(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR1_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR1_NTH(/;"	d	signature:(name,proto,alias)
__LDBL_REDIR2_DECL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR2_DECL(/;"	d	signature:(name)
__LDBL_REDIR2_DECL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR2_DECL(/;"	d	signature:(name)
__LDBL_REDIR_DECL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR_DECL(/;"	d	signature:(name)
__LDBL_REDIR_DECL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR_DECL(/;"	d	signature:(name)
__LDBL_REDIR_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LDBL_REDIR_NTH(/;"	d	signature:(name,proto)
__LDBL_REDIR_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __LDBL_REDIR_NTH(/;"	d	signature:(name,proto)
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI	d:/include/x86_64-linux-gnu/bits/long-double.h	/^#define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI /;"	d
__LEAF	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF /;"	d
__LEAF	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF$/;"	d
__LEAF_ATTR	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF_ATTR /;"	d
__LEAF_ATTR	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __LEAF_ATTR$/;"	d
__LINUX_ERRNO_EXTENSIONS__	../../../../../../usr/include/cygwin/config.h	/^#define __LINUX_ERRNO_EXTENSIONS__ /;"	d
__LITTLE_ENDIAN	d:/include/x86_64-linux-gnu/bits/endian.h	/^#define	__LITTLE_ENDIAN	/;"	d
__LOCK_ALIGNMENT	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __LOCK_ALIGNMENT$/;"	d
__LOCK_INIT	../../../../../../usr/include/sys/lock.h	/^#define __LOCK_INIT(/;"	d	signature:(CLASS,NAME)
__LOCK_INIT_RECURSIVE	../../../../../../usr/include/sys/lock.h	/^#define __LOCK_INIT_RECURSIVE(/;"	d	signature:(CLASS,NAME)
__LONG_LONG_PAIR	d:/include/x86_64-linux-gnu/bits/endian.h	/^# define __LONG_LONG_PAIR(/;"	d	signature:(HI,LO)
__LONG_MAX__	../../../../../../usr/include/sys/config.h	/^#   define __LONG_MAX__ /;"	d
__LONG_MAX__	../../../../../../usr/include/sys/config.h	/^#  define __LONG_MAX__ /;"	d
__Long	../../../../../../usr/include/sys/reent.h	/^#define __Long /;"	d
__MISC_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__MISC_VISIBLE	/;"	d
__MODE_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __MODE_T_TYPE	/;"	d
__NCPUBITS	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^#define __NCPUBITS	/;"	d
__NEWLIB_H__	../../../../../../usr/include/newlib.h	/^#define __NEWLIB_H__ /;"	d
__NEWLIB_MINOR__	../../../../../../usr/include/_newlib_version.h	/^#define __NEWLIB_MINOR__ /;"	d
__NEWLIB_PATCHLEVEL__	../../../../../../usr/include/_newlib_version.h	/^#define __NEWLIB_PATCHLEVEL__ /;"	d
__NEWLIB__	../../../../../../usr/include/_newlib_version.h	/^#define __NEWLIB__ /;"	d
__NLINK_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __NLINK_T_TYPE	/;"	d
__NTH	d:/include/ctype.h	/^__NTH (toupper (int __c))$/;"	f	typeref:typename:__extern_inline int	signature:(toupper (int __c))
__NTH	d:/include/pthread.h	/^__NTH (pthread_equal (pthread_t __thread1, pthread_t __thread2))$/;"	f	typeref:typename:__extern_inline int	signature:(pthread_equal (pthread_t __thread1,pthread_t __thread2))
__NTH	d:/include/wchar.h	/^__NTH (btowc (int __c))$/;"	f	typeref:typename:__extern_inline wint_t	signature:(btowc (int __c))
__NTH	d:/include/wchar.h	/^__NTH (mbrlen (const char *__restrict __s, size_t __n,$/;"	f	typeref:typename:__extern_inline size_t	signature:(mbrlen (const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps))
__NTH	d:/include/wchar.h	/^__NTH (wctob (wint_t __wc))$/;"	f	typeref:typename:__extern_inline int	signature:(wctob (wint_t __wc))
__NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __NTH(/;"	d	signature:(fct)
__NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __NTH(/;"	d	signature:(fct)
__NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __NTH(/;"	d	signature:(fct)
__NTHNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __NTHNL(/;"	d	signature:(fct)
__NTHNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __NTHNL(/;"	d	signature:(fct)
__OBSOLETE_MATH	../../../../../../usr/include/machine/ieeefp.h	/^#define __OBSOLETE_MATH __OBSOLETE_MATH_/;"	d
__OBSOLETE_MATH_DEFAULT	../../../../../../usr/include/machine/ieeefp.h	/^#  define __OBSOLETE_MATH_DEFAULT /;"	d
__OBSOLETE_MATH_DEFAULT	../../../../../../usr/include/machine/ieeefp.h	/^# define __OBSOLETE_MATH_DEFAULT /;"	d
__OBSOLETE_MATH_DEFAULT	../../../../../../usr/include/machine/ieeefp.h	/^#define __OBSOLETE_MATH_DEFAULT /;"	d
__OFF64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __OFF64_T_TYPE	/;"	d
__OFF_T_MATCHES_OFF64_T	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __OFF_T_MATCHES_OFF64_T	/;"	d
__OFF_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __OFF_T_TYPE	/;"	d
__ONCE_ALIGNMENT	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __ONCE_ALIGNMENT$/;"	d
__ONCE_ALIGNMENT	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  int __data __ONCE_ALIGNMENT;$/;"	m	struct:__anon8b6d42ac0108	typeref:typename:int __data	access:public
__ONCE_FLAG_INIT	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^#define __ONCE_FLAG_INIT /;"	d
__P	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __P(/;"	d	signature:(args)
__PDP_ENDIAN	d:/include/x86_64-linux-gnu/bits/endian.h	/^#define	__PDP_ENDIAN	/;"	d
__PID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __PID_T_TYPE	/;"	d
__PMT	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __PMT(/;"	d	signature:(args)
__POSIX_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__POSIX_VISIBLE	/;"	d
__PTHREAD_MUTEX_HAVE_PREV	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __PTHREAD_MUTEX_HAVE_PREV /;"	d
__PTHREAD_MUTEX_INITIALIZER	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __PTHREAD_MUTEX_INITIALIZER(/;"	d	signature:(__kind)
__PTHREAD_RWLOCK_ELISION_EXTRA	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^#  define __PTHREAD_RWLOCK_ELISION_EXTRA /;"	d
__PTHREAD_RWLOCK_INITIALIZER	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^# define __PTHREAD_RWLOCK_INITIALIZER(/;"	d	signature:(__flags)
__RAND_MAX	../../../../../../usr/include/sys/config.h	/^#define __RAND_MAX /;"	d
__REDIRECT	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __REDIRECT(/;"	d	signature:(name,proto,alias)
__REDIRECT_FORTIFY	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __REDIRECT_FORTIFY /;"	d
__REDIRECT_FORTIFY_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __REDIRECT_FORTIFY_NTH /;"	d
__REDIRECT_LDBL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_LDBL(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTH	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTH(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTHNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTHNL(/;"	d	signature:(name,proto,alias)
__REDIRECT_NTH_LDBL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __REDIRECT_NTH_LDBL(/;"	d	signature:(name,proto,alias)
__REENT_INIT_MISC_GETLOCALENAME_L	../../../../../../usr/include/sys/reent.h	/^#define __REENT_INIT_MISC_GETLOCALENAME_L /;"	d
__REENT_INIT_MISC_GETLOCALENAME_L	../../../../../../usr/include/sys/reent.h	/^#define __REENT_INIT_MISC_GETLOCALENAME_L$/;"	d
__RLIM64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __RLIM64_T_TYPE	/;"	d
__RLIM_T_MATCHES_RLIM64_T	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __RLIM_T_MATCHES_RLIM64_T	/;"	d
__RLIM_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __RLIM_T_TYPE	/;"	d
__S16_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define	__S16_TYPE	/;"	d
__S32_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define	__S32_TYPE	/;"	d
__S64_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __S64_TYPE	/;"	d
__SC_THREAD_STACK_MIN_VALUE	d:/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h	/^#   define __SC_THREAD_STACK_MIN_VALUE /;"	d
__SIZEOF_PTHREAD_ATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_ATTR_T /;"	d
__SIZEOF_PTHREAD_ATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_ATTR_T /;"	d
__SIZEOF_PTHREAD_BARRIERATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_BARRIERATTR_T /;"	d
__SIZEOF_PTHREAD_BARRIER_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_BARRIER_T /;"	d
__SIZEOF_PTHREAD_BARRIER_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_BARRIER_T /;"	d
__SIZEOF_PTHREAD_CONDATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_CONDATTR_T /;"	d
__SIZEOF_PTHREAD_COND_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_COND_T /;"	d
__SIZEOF_PTHREAD_MUTEXATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_MUTEXATTR_T /;"	d
__SIZEOF_PTHREAD_MUTEX_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_MUTEX_T /;"	d
__SIZEOF_PTHREAD_MUTEX_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_MUTEX_T /;"	d
__SIZEOF_PTHREAD_RWLOCKATTR_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#define __SIZEOF_PTHREAD_RWLOCKATTR_T /;"	d
__SIZEOF_PTHREAD_RWLOCK_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^#  define __SIZEOF_PTHREAD_RWLOCK_T /;"	d
__SIZEOF_PTHREAD_RWLOCK_T	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __SIZEOF_PTHREAD_RWLOCK_T /;"	d
__SLONG32_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __SLONG32_TYPE	/;"	d
__SLONGWORD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define __SLONGWORD_TYPE	/;"	d
__SMALL_BITFIELDS	../../../../../../usr/include/machine/ieeefp.h	/^#define __SMALL_BITFIELDS	/;"	d
__SMALL_BITFIELDS	../../../../../../usr/include/machine/ieeefp.h	/^#define __SMALL_BITFIELDS$/;"	d
__SMALL_BITFIELDS	../../../../../../usr/include/sys/config.h	/^#define __SMALL_BITFIELDS /;"	d
__SMALL_BITFIELDS	../../../../../../usr/include/sys/config.h	/^#define __SMALL_BITFIELDS$/;"	d
__SQUAD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __SQUAD_TYPE	/;"	d
__SSIZE_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __SSIZE_T_TYPE	/;"	d
__SSP_FORTIFY_LEVEL	../../../../../../usr/include/sys/features.h	/^#      define __SSP_FORTIFY_LEVEL /;"	d
__STATFS_MATCHES_STATFS64	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __STATFS_MATCHES_STATFS64 /;"	d
__STDCPP_MATH_SPEC_FUNCS__	d:/include/c++/14/bits/version.h	/^#   define __STDCPP_MATH_SPEC_FUNCS__ /;"	d
__STDC_IEC_559_COMPLEX__	d:/include/stdc-predef.h	/^#  define __STDC_IEC_559_COMPLEX__	/;"	d
__STDC_IEC_559_COMPLEX__	d:/include/stdc-predef.h	/^# define __STDC_IEC_559_COMPLEX__	/;"	d
__STDC_IEC_559__	d:/include/stdc-predef.h	/^#  define __STDC_IEC_559__	/;"	d
__STDC_IEC_559__	d:/include/stdc-predef.h	/^# define __STDC_IEC_559__	/;"	d
__STDC_IEC_60559_BFP__	d:/include/stdc-predef.h	/^#  define __STDC_IEC_60559_BFP__ /;"	d
__STDC_IEC_60559_BFP__	d:/include/stdc-predef.h	/^# define __STDC_IEC_60559_BFP__ /;"	d
__STDC_IEC_60559_COMPLEX__	d:/include/stdc-predef.h	/^#  define __STDC_IEC_60559_COMPLEX__	/;"	d
__STDC_IEC_60559_COMPLEX__	d:/include/stdc-predef.h	/^# define __STDC_IEC_60559_COMPLEX__	/;"	d
__STDC_ISO_10646__	../../../../../../usr/include/sys/features.h	/^#define __STDC_ISO_10646__ /;"	d
__STDC_ISO_10646__	d:/include/stdc-predef.h	/^#define __STDC_ISO_10646__	/;"	d
__STD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __STD_TYPE	/;"	d
__STRING	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __STRING(/;"	d	signature:(x)
__SUSECONDS64_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __SUSECONDS64_T_TYPE	/;"	d
__SUSECONDS_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __SUSECONDS_T_TYPE	/;"	d
__SVID_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__SVID_VISIBLE	/;"	d
__SWORD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __SWORD_TYPE	/;"	d
__SYSCALL_SLONG_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __SYSCALL_SLONG_TYPE	/;"	d
__SYSCALL_ULONG_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^# define __SYSCALL_ULONG_TYPE	/;"	d
__SYSCALL_WORDSIZE	d:/include/x86_64-linux-gnu/bits/wordsize.h	/^# define __SYSCALL_WORDSIZE	/;"	d
__SYS_CONFIG_H__	../../../../../../usr/include/sys/config.h	/^#define __SYS_CONFIG_H__$/;"	d
__THROW	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#    define __THROW	/;"	d
__THROW	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROW$/;"	d
__THROW	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __THROW	/;"	d
__THROW	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __THROW$/;"	d
__THROWNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROWNL	/;"	d
__THROWNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __THROWNL$/;"	d
__THROWNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __THROWNL	/;"	d
__THROWNL	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __THROWNL$/;"	d
__TIME64_T_TYPE	d:/include/x86_64-linux-gnu/bits/time64.h	/^# define __TIME64_T_TYPE	/;"	d
__TIMER_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __TIMER_T_TYPE	/;"	d
__TIMESIZE	d:/include/x86_64-linux-gnu/bits/timesize.h	/^# define __TIMESIZE	/;"	d
__TIME_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __TIME_T_TYPE	/;"	d
__TM_GMTOFF	../../../../../../usr/include/cygwin/config.h	/^#define __TM_GMTOFF /;"	d
__TM_ZONE	../../../../../../usr/include/cygwin/config.h	/^#define __TM_ZONE /;"	d
__U16_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define __U16_TYPE	/;"	d
__U32_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define __U32_TYPE	/;"	d
__U64_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __U64_TYPE	/;"	d
__UID_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __UID_T_TYPE	/;"	d
__UINT64_C	d:/include/stdint.h	/^#  define __UINT64_C(/;"	d	signature:(c)
__ULONG32_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __ULONG32_TYPE	/;"	d
__ULONGWORD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^#define __ULONGWORD_TYPE	/;"	d
__ULong	../../../../../../usr/include/sys/reent.h	/^typedef __uint32_t __ULong;$/;"	t	typeref:typename:__uint32_t
__ULong	../../../../../../usr/include/sys/reent.h	/^typedef unsigned __Long __ULong;$/;"	t	typeref:typename:unsigned __Long
__UQUAD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __UQUAD_TYPE	/;"	d
__USECONDS_T_TYPE	d:/include/x86_64-linux-gnu/bits/typesizes.h	/^#define __USECONDS_T_TYPE	/;"	d
__USE_ATFILE	d:/include/features.h	/^# define __USE_ATFILE	/;"	d
__USE_DYNAMIC_STACK_SIZE	d:/include/features.h	/^# define __USE_DYNAMIC_STACK_SIZE	/;"	d
__USE_EXTERN_INLINES	d:/include/features.h	/^# define __USE_EXTERN_INLINES	/;"	d
__USE_FILE_OFFSET64	d:/include/features.h	/^# define __USE_FILE_OFFSET64	/;"	d
__USE_FORTIFY_LEVEL	d:/include/features.h	/^#  define __USE_FORTIFY_LEVEL /;"	d
__USE_FORTIFY_LEVEL	d:/include/features.h	/^# define __USE_FORTIFY_LEVEL /;"	d
__USE_GNU	d:/include/features.h	/^# define __USE_GNU	/;"	d
__USE_ISOC11	d:/include/features.h	/^#  define __USE_ISOC11	/;"	d
__USE_ISOC11	d:/include/features.h	/^# define __USE_ISOC11	/;"	d
__USE_ISOC95	d:/include/features.h	/^#   define __USE_ISOC95	/;"	d
__USE_ISOC95	d:/include/features.h	/^# define __USE_ISOC95	/;"	d
__USE_ISOC99	d:/include/features.h	/^#   define __USE_ISOC99	/;"	d
__USE_ISOC99	d:/include/features.h	/^#  define __USE_ISOC99	/;"	d
__USE_ISOC99	d:/include/features.h	/^# define __USE_ISOC99	/;"	d
__USE_ISOCXX11	d:/include/features.h	/^#  define __USE_ISOCXX11	/;"	d
__USE_LARGEFILE	d:/include/features.h	/^#  define __USE_LARGEFILE	/;"	d
__USE_LARGEFILE	d:/include/features.h	/^# define __USE_LARGEFILE	/;"	d
__USE_LARGEFILE64	d:/include/features.h	/^#  define __USE_LARGEFILE64	/;"	d
__USE_LARGEFILE64	d:/include/features.h	/^# define __USE_LARGEFILE64	/;"	d
__USE_MISC	d:/include/features.h	/^# define __USE_MISC	/;"	d
__USE_POSIX	d:/include/features.h	/^# define __USE_POSIX	/;"	d
__USE_POSIX199309	d:/include/features.h	/^# define __USE_POSIX199309	/;"	d
__USE_POSIX199506	d:/include/features.h	/^# define __USE_POSIX199506	/;"	d
__USE_POSIX2	d:/include/features.h	/^# define __USE_POSIX2	/;"	d
__USE_POSIX_IMPLICITLY	d:/include/features.h	/^#  define __USE_POSIX_IMPLICITLY	/;"	d
__USE_POSIX_IMPLICITLY	d:/include/features.h	/^# define __USE_POSIX_IMPLICITLY	/;"	d
__USE_TIME64_REDIRECTS	d:/include/features-time64.h	/^# define __USE_TIME64_REDIRECTS /;"	d
__USE_TIME_BITS64	d:/include/features-time64.h	/^#  define __USE_TIME_BITS64	/;"	d
__USE_TIME_BITS64	d:/include/features-time64.h	/^# define __USE_TIME_BITS64 /;"	d
__USE_UNIX98	d:/include/features.h	/^#  define __USE_UNIX98	/;"	d
__USE_XOPEN	d:/include/features.h	/^# define __USE_XOPEN	/;"	d
__USE_XOPEN2K	d:/include/features.h	/^#   define __USE_XOPEN2K	/;"	d
__USE_XOPEN2K	d:/include/features.h	/^# define __USE_XOPEN2K	/;"	d
__USE_XOPEN2K8	d:/include/features.h	/^#    define __USE_XOPEN2K8	/;"	d
__USE_XOPEN2K8	d:/include/features.h	/^# define __USE_XOPEN2K8	/;"	d
__USE_XOPEN2K8XSI	d:/include/features.h	/^#    define __USE_XOPEN2K8XSI	/;"	d
__USE_XOPEN2KXSI	d:/include/features.h	/^#   define __USE_XOPEN2KXSI	/;"	d
__USE_XOPEN_EXTENDED	d:/include/features.h	/^#   define __USE_XOPEN_EXTENDED	/;"	d
__USE_XOPEN_EXTENDED	d:/include/features.h	/^#  define __USE_XOPEN_EXTENDED	/;"	d
__UWORD_TYPE	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __UWORD_TYPE	/;"	d
__WCHAR_MAX	d:/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MAX	/;"	d
__WCHAR_MAX	d:/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MAX	__WCHAR_MAX_/;"	d
__WCHAR_MAX__	../../../../../../usr/include/cygwin/config.h	/^#define __WCHAR_MAX__ /;"	d
__WCHAR_MAX__	../../../../../../usr/include/sys/config.h	/^#define __WCHAR_MAX__ /;"	d
__WCHAR_MIN	d:/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MIN	/;"	d
__WCHAR_MIN	d:/include/x86_64-linux-gnu/bits/wchar.h	/^# define __WCHAR_MIN	__WCHAR_MIN_/;"	d
__WCOREFLAG	../../../../../../usr/include/cygwin/wait.h	/^#define __WCOREFLAG /;"	d
__WINT_TYPE__	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^# define __WINT_TYPE__ /;"	d
__WINT_TYPE__	d:/include/x86_64-linux-gnu/bits/types/wint_t.h	/^# define __WINT_TYPE__ /;"	d
__WORDSIZE	d:/include/x86_64-linux-gnu/bits/wordsize.h	/^# define __WORDSIZE	/;"	d
__WORDSIZE32_PTRDIFF_LONG	d:/include/x86_64-linux-gnu/bits/wordsize.h	/^#define __WORDSIZE32_PTRDIFF_LONG	/;"	d
__WORDSIZE32_SIZE_ULONG	d:/include/x86_64-linux-gnu/bits/wordsize.h	/^#define __WORDSIZE32_SIZE_ULONG	/;"	d
__WORDSIZE_TIME64_COMPAT32	d:/include/x86_64-linux-gnu/bits/wordsize.h	/^#define __WORDSIZE_TIME64_COMPAT32 /;"	d
__W_CONTINUED	../../../../../../usr/include/cygwin/wait.h	/^#define __W_CONTINUED	/;"	d
__XSI_VISIBLE	../../../../../../usr/include/sys/features.h	/^#define	__XSI_VISIBLE	/;"	d
____FILE_defined	d:/include/x86_64-linux-gnu/bits/types/__FILE.h	/^#define ____FILE_defined /;"	d
_____fpos64_t_defined	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^#define _____fpos64_t_defined /;"	d
_____fpos_t_defined	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^#define _____fpos_t_defined /;"	d
____mbstate_t_defined	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^#define ____mbstate_t_defined /;"	d
____sigset_t_defined	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^#define ____sigset_t_defined$/;"	d
___int16_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int16_t_defined /;"	d
___int32_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int32_t_defined /;"	d
___int64_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int64_t_defined /;"	d
___int8_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int8_t_defined /;"	d
___int_least16_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int_least16_t_defined /;"	d
___int_least32_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int_least32_t_defined /;"	d
___int_least64_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int_least64_t_defined /;"	d
___int_least8_t_defined	../../../../../../usr/include/machine/_default_types.h	/^#define ___int_least8_t_defined /;"	d
__add_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __add_fetch(_Tp* __ptr, _Diff<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i)
__add_fetch_flt	d:/include/c++/14/bits/atomic_base.h	/^      __add_fetch_flt(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
__add_grouping	d:/include/c++/14/bits/locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx
__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx
__addressof	d:/include/c++/14/bits/move.h	/^    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_CONSTEXPR _Tp *	signature:(_Tp & __r)
__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_OutputIterator&, _Distance, output_iterator_tag) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(_OutputIterator &,_Distance,output_iterator_tag)
__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  __extension__ long long int __align;$/;"	m	union:__anon3fdbe2cb040a	typeref:typename:__extension__ long long int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb010a	typeref:typename:int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb020a	typeref:typename:int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb080a	typeref:typename:int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb030a	typeref:typename:long int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb050a	typeref:typename:long int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb060a	typeref:typename:long int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb070a	typeref:typename:long int	access:public
__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:pthread_attr_t	typeref:typename:long int	access:public
__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_buffer() = default;$/;"	p	struct:__gnu_cxx::__aligned_buffer	access:public	signature:()
__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_buffer(std::nullptr_t) { }$/;"	f	struct:__gnu_cxx::__aligned_buffer	access:public	signature:(std::nullptr_t)
__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^    struct __aligned_buffer$/;"	s	namespace:__gnu_cxx	inherits:std::aligned_storage<sizeof(_Tp),__alignof__(_Tp)>
__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^    using __aligned_buffer = __aligned_membuf<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__aligned_membuf<_Tp>
__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_membuf() = default;$/;"	p	struct:__gnu_cxx::__aligned_membuf	access:public	signature:()
__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_membuf(std::nullptr_t) { }$/;"	f	struct:__gnu_cxx::__aligned_membuf	access:public	signature:(std::nullptr_t)
__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^    struct __aligned_membuf$/;"	s	namespace:__gnu_cxx
__alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,const _Alloc & __two)
__alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_copy(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_Alloc	signature:(const _Alloc & __a)
__alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_move(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
__alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_swap(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
__alloc_rebind	d:/include/c++/14/bits/alloc_traits.h	/^    using __alloc_rebind$/;"	t	namespace:std	typeref:typename:__allocator_traits_base::template __rebind<_Alloc,_Up>::type
__alloc_swap	d:/include/c++/14/bits/alloc_traits.h	/^    struct __alloc_swap$/;"	s	namespace:std
__alloc_swap	d:/include/c++/14/bits/alloc_traits.h	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std
__alloc_traits	d:/include/c++/14/ext/alloc_traits.h	/^  struct __alloc_traits$/;"	s	namespace:__gnu_cxx	inherits:std::allocator_traits<_Alloc>
__allocate_guarded	d:/include/c++/14/bits/allocated_ptr.h	/^    __allocate_guarded(_Alloc& __a)$/;"	f	namespace:std	typeref:typename:__allocated_ptr<_Alloc>	signature:(_Alloc & __a)
__allocate_shared	d:/include/c++/14/bits/shared_ptr_base.h	/^    __allocate_shared(const _Alloc& __a, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const _Alloc & __a,_Args &&...__args)
__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(_Alloc& __a, _Ptr __ptr)$/;"	f	struct:std::__allocated_ptr	access:public	signature:(_Alloc & __a,_Ptr __ptr)
__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept$/;"	f	struct:std::__allocated_ptr	access:public	signature:(_Alloc & __a,pointer __ptr)
__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(__allocated_ptr&& __gd) noexcept$/;"	f	struct:std::__allocated_ptr	access:public	signature:(__allocated_ptr && __gd)
__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^    struct __allocated_ptr$/;"	s	namespace:std
__allocator_traits_base	d:/include/c++/14/bits/alloc_traits.h	/^  struct __allocator_traits_base$/;"	s	namespace:std
__allocator_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;$/;"	t	class:std::_Sp_counted_deleter	typeref:typename:__alloc_rebind<_Alloc,_Sp_counted_deleter>	access:public
__allocator_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;$/;"	t	class:std::_Sp_counted_ptr_inplace	typeref:typename:__alloc_rebind<_Alloc,_Sp_counted_ptr_inplace>	access:public
__always_inline	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __always_inline /;"	d
__always_inline	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __always_inline __inline __attribute__ ((__always_inline_/;"	d
__and_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __and_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
__anon246589900103	d:/include/c++/14/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	g	class:std::basic_string	access:private
__anon24658990020a	d:/include/c++/14/bits/basic_string.h	/^      {$/;"	u	class:std::basic_string	access:private
__anon246589900302	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900402	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900502	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900602	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900702	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__neg + __len, [=](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900802	d:/include/c++/14/bits/basic_string.h	/^    __str.__resize_and_overwrite(__len, [__val](char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900902	d:/include/c++/14/bits/basic_string.h	/^				 [__val, &__len] (char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900a02	d:/include/c++/14/bits/basic_string.h	/^				 [__val, &__len] (char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900b02	d:/include/c++/14/bits/basic_string.h	/^				 [__val, &__len] (char* __p, size_t __n) {$/;"	f	function:std::to_string	file:	signature:(char* __p, size_t __n) 
__anon246589900c02	d:/include/c++/14/bits/basic_string.h	/^				    [__f] (wchar_t* __to, int __n) {$/;"	f	function:std::__to_wstring_numeric	file:	signature:(wchar_t* __to, int __n) 
__anon31cdb6c20103	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	g	struct:std::__is_random_access_iter	access:public
__anon31cdb6c20203	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	g	struct:std::__is_random_access_iter	access:public
__anon3667654f0102	d:/include/c++/14/bits/atomic_base.h	/^	  [__m, this] { return __atomic_load_n(&_M_i, int(__m)); });$/;"	f	function:std::atomic_flag::wait	file:
__anon3667654f0202	d:/include/c++/14/bits/atomic_base.h	/^			   [__m, this] { return this->load(__m); });$/;"	f	function:std::__atomic_base::wait	file:
__anon3667654f0302	d:/include/c++/14/bits/atomic_base.h	/^				     { return this->load(__m); });$/;"	f	function:std::__atomic_base::wait	file:
__anon3667654f0402	d:/include/c++/14/bits/atomic_base.h	/^	    [__ptr, __m]() { return __atomic_impl::load(__ptr, __m); });$/;"	f	function:std::__atomic_impl::wait	file:	signature:() 
__anon3fdbe2cb010a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb010a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb010a	typeref:typename:int	access:public
__anon3fdbe2cb010a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];$/;"	m	union:__anon3fdbe2cb010a	typeref:typename:char[]	access:public
__anon3fdbe2cb020a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb020a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb020a	typeref:typename:int	access:public
__anon3fdbe2cb020a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_CONDATTR_T];$/;"	m	union:__anon3fdbe2cb020a	typeref:typename:char[]	access:public
__anon3fdbe2cb030a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb030a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb030a	typeref:typename:long int	access:public
__anon3fdbe2cb030a::__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_mutex_s __data;$/;"	m	union:__anon3fdbe2cb030a	typeref:struct:__pthread_mutex_s	access:public
__anon3fdbe2cb030a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEX_T];$/;"	m	union:__anon3fdbe2cb030a	typeref:typename:char[]	access:public
__anon3fdbe2cb040a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb040a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  __extension__ long long int __align;$/;"	m	union:__anon3fdbe2cb040a	typeref:typename:__extension__ long long int	access:public
__anon3fdbe2cb040a::__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_cond_s __data;$/;"	m	union:__anon3fdbe2cb040a	typeref:struct:__pthread_cond_s	access:public
__anon3fdbe2cb040a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_COND_T];$/;"	m	union:__anon3fdbe2cb040a	typeref:typename:char[]	access:public
__anon3fdbe2cb050a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb050a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb050a	typeref:typename:long int	access:public
__anon3fdbe2cb050a::__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_rwlock_arch_t __data;$/;"	m	union:__anon3fdbe2cb050a	typeref:struct:__pthread_rwlock_arch_t	access:public
__anon3fdbe2cb050a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCK_T];$/;"	m	union:__anon3fdbe2cb050a	typeref:typename:char[]	access:public
__anon3fdbe2cb060a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb060a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb060a	typeref:typename:long int	access:public
__anon3fdbe2cb060a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];$/;"	m	union:__anon3fdbe2cb060a	typeref:typename:char[]	access:public
__anon3fdbe2cb070a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb070a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:__anon3fdbe2cb070a	typeref:typename:long int	access:public
__anon3fdbe2cb070a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIER_T];$/;"	m	union:__anon3fdbe2cb070a	typeref:typename:char[]	access:public
__anon3fdbe2cb080a	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^{$/;"	u
__anon3fdbe2cb080a::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  int __align;$/;"	m	union:__anon3fdbe2cb080a	typeref:typename:int	access:public
__anon3fdbe2cb080a::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];$/;"	m	union:__anon3fdbe2cb080a	typeref:typename:char[]	access:public
__anon472e9925010a	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  {$/;"	u	struct:__pthread_mutex_s	access:public
__anon472e99250208	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    {$/;"	s	union:__pthread_mutex_s::__anon472e9925010a	access:public
__anon54c891d20108	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^{$/;"	s
__anon54c891d20108::__val	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^  unsigned long int __val[_SIGSET_NWORDS];$/;"	m	struct:__anon54c891d20108	typeref:typename:unsigned long int[]	access:public
__anon619378200103	d:/include/ctype.h	/^{$/;"	g
__anon657713b4010a	d:/include/c++/14/bits/stl_iterator.h	/^    {$/;"	u	class:std::common_iterator	access:private
__anon657713b40203	d:/include/c++/14/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_move_iterator	access:public
__anon69d05cbd0103	d:/include/c++/14/bits/locale_facets.h	/^      {$/;"	g	class:std::__num_base	access:public
__anon69d05cbd0203	d:/include/c++/14/bits/locale_facets.h	/^    {$/;"	g	class:std::__num_base	access:public
__anon798aacac0103	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^{$/;"	g
__anon7e5ad8920103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	g	struct:std::__traitor	access:public
__anon7e5ad8920203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__are_same	access:public
__anon7e5ad8920303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__are_same	access:public
__anon7e5ad8920403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_void	access:public
__anon7e5ad8920503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_void	access:public
__anon7e5ad8920603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8920f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921003	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
__anon7e5ad8921703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8921f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
__anon7e5ad8922003	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_pointer	access:public
__anon7e5ad8922103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_pointer	access:public
__anon7e5ad8922203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_char	access:public
__anon7e5ad8922303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
__anon7e5ad8922403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
__anon7e5ad8922503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
__anon7e5ad8922b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
__anon7e5ad8922c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
__anon7e5ad8922d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcpyable	access:public
__anon7e5ad8922e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcmpable	access:public
__anon7e5ad8922f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_move_iterator	access:public
__anon7f57c972010a	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^{$/;"	u
__anon7f57c972010a::__anon7f57c9720208	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  {$/;"	s	union:__anon7f57c972010a	access:public
__anon7f57c972010a::__anon7f57c9720208::__high	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^    unsigned int __high;$/;"	m	struct:__anon7f57c972010a::__anon7f57c9720208	typeref:typename:unsigned int	access:public
__anon7f57c972010a::__anon7f57c9720208::__low	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^    unsigned int __low;$/;"	m	struct:__anon7f57c972010a::__anon7f57c9720208	typeref:typename:unsigned int	access:public
__anon7f57c972010a::__value32	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  } __value32;$/;"	m	union:__anon7f57c972010a	typeref:struct:__anon7f57c972010a::__anon7f57c9720208	access:public
__anon7f57c972010a::__value64	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  __extension__ unsigned long long int __value64;$/;"	m	union:__anon7f57c972010a	typeref:typename:__extension__ unsigned long long int	access:public
__anon7f57c9720208	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  {$/;"	s	union:__anon7f57c972010a	access:public
__anon88be1d72010a	../../../../../../usr/include/sys/reent.h	/^    {$/;"	u	struct:_reent	access:public
__anon88be1d720208	../../../../../../usr/include/sys/reent.h	/^        {$/;"	s	union:_reent::__anon88be1d72010a	access:public
__anon88be1d720308	../../../../../../usr/include/sys/reent.h	/^        {$/;"	s	union:_reent::__anon88be1d72010a	access:public
__anon8b6d42ac0108	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^{$/;"	s
__anon8b6d42ac0108::__ONCE_ALIGNMENT	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  int __data __ONCE_ALIGNMENT;$/;"	m	struct:__anon8b6d42ac0108	typeref:typename:int __data	access:public
__anon9dd0171d0103	d:/include/c++/14/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	g	class:std::ios_base	access:protected
__anonbbda5aa00103	d:/include/c++/14/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	g	struct:__gnu_cxx::__is_integer_nonstrict	access:public
__anonc68b537e0103	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 0 };$/;"	g	class:std::_Mutex_base	access:protected
__anonc68b537e0203	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 1 };$/;"	g	class:std::_Mutex_base	access:protected
__anonc68b537e030a	d:/include/c++/14/bits/shared_ptr_base.h	/^      union {$/;"	u	class:std::_Sp_counted_ptr_inplace	access:private
__anonc90cd0a80108	../../../../../../usr/include/sys/_types.h	/^{$/;"	s
__anonc90cd0a80108::__anonc90cd0a8020a	../../../../../../usr/include/sys/_types.h	/^  {$/;"	u	struct:__anonc90cd0a80108	access:public
__anonc90cd0a80108::__anonc90cd0a8020a::__wch	../../../../../../usr/include/sys/_types.h	/^    wint_t __wch;$/;"	m	union:__anonc90cd0a80108::__anonc90cd0a8020a	typeref:typename:wint_t	access:public
__anonc90cd0a80108::__anonc90cd0a8020a::__wchb	../../../../../../usr/include/sys/_types.h	/^    unsigned char __wchb[4];$/;"	m	union:__anonc90cd0a80108::__anonc90cd0a8020a	typeref:typename:unsigned char[4]	access:public
__anonc90cd0a80108::__count	../../../../../../usr/include/sys/_types.h	/^  int __count;$/;"	m	struct:__anonc90cd0a80108	typeref:typename:int	access:public
__anonc90cd0a80108::__value	../../../../../../usr/include/sys/_types.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anonc90cd0a80108	typeref:union:__anonc90cd0a80108::__anonc90cd0a8020a	access:public
__anonc90cd0a8020a	../../../../../../usr/include/sys/_types.h	/^  {$/;"	u	struct:__anonc90cd0a80108	access:public
__anondff4f4530108	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^{$/;"	s
__anondff4f4530108::__anondff4f453020a	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  {$/;"	u	struct:__anondff4f4530108	access:public
__anondff4f4530108::__anondff4f453020a::__wch	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    __WINT_TYPE__ __wch;$/;"	m	union:__anondff4f4530108::__anondff4f453020a	typeref:typename:__WINT_TYPE__	access:public
__anondff4f4530108::__anondff4f453020a::__wchb	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    char __wchb[4];$/;"	m	union:__anondff4f4530108::__anondff4f453020a	typeref:typename:char[4]	access:public
__anondff4f4530108::__count	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  int __count;$/;"	m	struct:__anondff4f4530108	typeref:typename:int	access:public
__anondff4f4530108::__value	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anondff4f4530108	typeref:union:__anondff4f4530108::__anondff4f453020a	access:public
__anondff4f453020a	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  {$/;"	u	struct:__anondff4f4530108	access:public
__anone6cbf2430103	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430203	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430303	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430403	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430503	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430603	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430703	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430803	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430903	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430a03	d:/include/pthread.h	/^{$/;"	g
__anone6cbf2430b08	d:/include/pthread.h	/^{$/;"	s
__anone6cbf2430b08::__cancel_jmp_buf	d:/include/pthread.h	/^  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];$/;"	m	struct:__anone6cbf2430b08	typeref:struct:__cancel_jmp_buf_tag[1]	access:public
__anone6cbf2430b08::__pad	d:/include/pthread.h	/^  void *__pad[4];$/;"	m	struct:__anone6cbf2430b08	typeref:typename:void * [4]	access:public
__anonf3b68ce80108	../../../../../../usr/include/stdlib.h	/^{$/;"	s
__anonf3b68ce80108::quot	../../../../../../usr/include/stdlib.h	/^  int quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
__anonf3b68ce80108::rem	../../../../../../usr/include/stdlib.h	/^  int rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
__anonf3b68ce80208	../../../../../../usr/include/stdlib.h	/^{$/;"	s
__anonf3b68ce80208::quot	../../../../../../usr/include/stdlib.h	/^  long quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long	access:public
__anonf3b68ce80208::rem	../../../../../../usr/include/stdlib.h	/^  long rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long	access:public
__anonf3b68ce80308	../../../../../../usr/include/stdlib.h	/^{$/;"	s
__anonf3b68ce80308::quot	../../../../../../usr/include/stdlib.h	/^  long long int quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
__anonf3b68ce80308::rem	../../../../../../usr/include/stdlib.h	/^  long long int rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
__anonf3d5def50103	d:/include/c++/14/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	g	class:std::locale	access:private
__anonf835e1cf0108	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^{$/;"	s
__anonf835e1cf0108::__bits	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^  __cpu_mask __bits[__CPU_SETSIZE \/ __NCPUBITS];$/;"	m	struct:__anonf835e1cf0108	typeref:typename:__cpu_mask[]	access:public
__are_same	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __are_same$/;"	s	namespace:std
__are_same	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __are_same<_Tp, _Tp>$/;"	s	namespace:std
__arg	d:/include/pthread.h	/^  void *__arg;                            \/* Its argument.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void *	access:public
__arity	d:/include/c++/14/bits/refwrap.h	/^      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;$/;"	t	struct:std::_Mem_fn_traits_base	access:public
__array	d:/include/c++/14/bits/unique_ptr.h	/^    { typedef unique_ptr<_Tp[]> __array; };$/;"	t	struct:std::__detail::_MakeUniq	typeref:typename:unique_ptr<_Tp[]>	access:public
__arrow_proxy	d:/include/c++/14/bits/stl_iterator.h	/^      __arrow_proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::__arrow_proxy	access:private	signature:(iter_reference_t<_It> && __x)
__arrow_proxy	d:/include/c++/14/bits/stl_iterator.h	/^    class __arrow_proxy$/;"	c	class:std::common_iterator	access:private
__asprintf	d:/include/stdio.h	/^extern int __asprintf (char **__restrict __ptr,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __fmt,...)
__assign_one	d:/include/c++/14/bits/stl_algobase.h	/^	__assign_one(_Tp* __to, _Up* __from)$/;"	f	struct:std::__copy_move	typeref:typename:void	access:public	signature:(_Tp * __to,_Up * __from)
__atomic_add	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word * __mem,int __val)
__atomic_add	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;$/;"	p	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word *,int)
__atomic_add_dispatch	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__atomic_add_single	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base() noexcept = default;$/;"	p	struct:std::__atomic_base	access:public	signature:()
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base(const __atomic_base&) = delete;$/;"	p	struct:std::__atomic_base	access:public	signature:(const __atomic_base &)
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }$/;"	f	struct:std::__atomic_base	access:public	signature:(__int_type __i)
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }$/;"	f	struct:std::__atomic_base	access:public	signature:(__pointer_type __p)
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_base$/;"	s	namespace:std
__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_base<_PTp*>$/;"	s	namespace:std
__atomic_flag_base	d:/include/c++/14/bits/atomic_base.h	/^  struct __atomic_flag_base$/;"	s	namespace:std
__atomic_flag_data_type	d:/include/c++/14/bits/atomic_base.h	/^    typedef bool __atomic_flag_data_type;$/;"	t	namespace:std	typeref:typename:bool
__atomic_flag_data_type	d:/include/c++/14/bits/atomic_base.h	/^    typedef unsigned char __atomic_flag_data_type;$/;"	t	namespace:std	typeref:typename:unsigned char
__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float() = default;$/;"	p	struct:std::__atomic_float	access:public	signature:()
__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float(_Fp __t) : _M_fp(__t)$/;"	f	struct:std::__atomic_float	access:public	signature:(_Fp __t)
__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float(const __atomic_float&) = delete;$/;"	p	struct:std::__atomic_float	access:public	signature:(const __atomic_float &)
__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_float$/;"	s	namespace:std
__atomic_impl	d:/include/c++/14/bits/atomic_base.h	/^  namespace __atomic_impl$/;"	n	namespace:std
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref() = delete;$/;"	p	struct:std::__atomic_ref	access:public	signature:()
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Fp& __t) : _M_ptr(&__t)$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Fp & __t)
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp& __t) : _M_ptr(&__t)$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp & __t)
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp& __t) : _M_ptr(std::__addressof(__t))$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp & __t)
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp*& __t) : _M_ptr(std::__addressof(__t))$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp * & __t)
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(const __atomic_ref&) noexcept = default;$/;"	p	struct:std::__atomic_ref	access:public	signature:(const __atomic_ref &)
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Fp, false, true>$/;"	s	namespace:std
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp*, false, false>$/;"	s	namespace:std
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp, false, false>$/;"	s	namespace:std
__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp, true, false>$/;"	s	namespace:std
__atomic_wide_counter	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^} __atomic_wide_counter;$/;"	t	typeref:union:__anon7f57c972010a
__attr_access	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __attr_access(/;"	d	signature:(x)
__attr_access_none	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#    define __attr_access_none(/;"	d	signature:(argno)
__attr_access_none	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __attr_access_none(/;"	d	signature:(argno)
__attr_dealloc	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attr_dealloc(/;"	d	signature:(dealloc,argno)
__attr_dealloc_fclose	d:/include/stdio.h	/^#define __attr_dealloc_fclose /;"	d
__attr_dealloc_fclose	d:/include/wchar.h	/^#      define __attr_dealloc_fclose /;"	d
__attr_dealloc_fclose	d:/include/wchar.h	/^#  define __attr_dealloc_fclose /;"	d
__attr_dealloc_free	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attr_dealloc_free /;"	d
__attr_dealloc_free	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attr_dealloc_free$/;"	d
__attribute__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute__(/;"	d	signature:(xyz)
__attribute_alloc_align__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_alloc_align__(/;"	d	signature:(param)
__attribute_alloc_size__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_alloc_size__(/;"	d	signature:(params)
__attribute_artificial__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_artificial__ /;"	d
__attribute_const__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_const__ /;"	d
__attribute_copy__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_copy__(/;"	d	signature:(arg)
__attribute_deprecated__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_deprecated__ /;"	d
__attribute_deprecated_msg__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_deprecated_msg__(/;"	d	signature:(msg)
__attribute_format_arg__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_format_arg__(/;"	d	signature:(x)
__attribute_format_strfmon__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_format_strfmon__(/;"	d	signature:(a,b)
__attribute_malloc__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_malloc__ /;"	d
__attribute_maybe_unused__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_maybe_unused__ /;"	d
__attribute_noinline__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_noinline__ /;"	d
__attribute_nonnull__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __attribute_nonnull__(/;"	d	signature:(params)
__attribute_nonstring__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_nonstring__ /;"	d
__attribute_nonstring__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_nonstring__$/;"	d
__attribute_overloadable__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_overloadable__ /;"	d
__attribute_overloadable__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_overloadable__$/;"	d
__attribute_pure__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_pure__ /;"	d
__attribute_returns_twice__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_returns_twice__ /;"	d
__attribute_struct_may_alias__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_struct_may_alias__ /;"	d
__attribute_struct_may_alias__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_struct_may_alias__$/;"	d
__attribute_used__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_used__ /;"	d
__attribute_warn_unused_result__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __attribute_warn_unused_result__ /;"	d
__base_ref	d:/include/c++/14/bits/stl_iterator.h	/^      using __base_ref = typename __traits_type::reference;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::reference	access:private
__basic_const_iterator_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __basic_const_iterator_iter_cat$/;"	s	namespace:std::__detail
__basic_const_iterator_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __basic_const_iterator_iter_cat<_It>$/;"	s	namespace:std::__detail
__bits	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^  __cpu_mask __bits[__CPU_SETSIZE \/ __NCPUBITS];$/;"	m	struct:__anonf835e1cf0108	typeref:typename:__cpu_mask[]	access:public
__blkcnt64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKCNT64_T_TYPE __blkcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __BLKCNT64_T_TYPE
__blkcnt_t	../../../../../../usr/include/machine/_types.h	/^typedef __int64_t __blkcnt_t;$/;"	t	typeref:typename:__int64_t
__blkcnt_t	../../../../../../usr/include/sys/_types.h	/^typedef long __blkcnt_t;$/;"	t	typeref:typename:long
__blkcnt_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKCNT_T_TYPE __blkcnt_t;$/;"	v	typeref:typename:__STD_TYPE __BLKCNT_T_TYPE
__blksize_t	../../../../../../usr/include/machine/_types.h	/^typedef __int32_t __blksize_t;$/;"	t	typeref:typename:__int32_t
__blksize_t	../../../../../../usr/include/sys/_types.h	/^typedef long __blksize_t;$/;"	t	typeref:typename:long
__blksize_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __BLKSIZE_T_TYPE __blksize_t;$/;"	v	typeref:typename:__STD_TYPE __BLKSIZE_T_TYPE
__bos	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __bos(/;"	d	signature:(ptr)
__bos0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __bos0(/;"	d	signature:(ptr)
__bsd_qsort_r	../../../../../../usr/include/stdlib.h	/^void	__bsd_qsort_r (void *__base, size_t __nmemb, size_t __size, void *__thunk, int (*_compar)(v/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,void * __thunk,int (* _compar)(void *,const void *,const void *))
__btowc_alias	d:/include/wchar.h	/^extern wint_t __btowc_alias (int __c) __asm ("btowc");$/;"	p	typeref:typename:wint_t	signature:(int __c)
__builtin_copysignf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_copysignf128 /;"	d
__builtin_fabsf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_fabsf128 /;"	d
__builtin_huge_valf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_huge_valf128(/;"	d	signature:()
__builtin_huge_valf128x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf128x(/;"	d	signature:()
__builtin_huge_valf16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf16(/;"	d	signature:()
__builtin_huge_valf32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf32(/;"	d	signature:()
__builtin_huge_valf32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_huge_valf32x(/;"	d	signature:()
__builtin_huge_valf64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_huge_valf64(/;"	d	signature:()
__builtin_huge_valf64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_huge_valf64x(/;"	d	signature:()
__builtin_inff128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_inff128(/;"	d	signature:()
__builtin_inff128x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff128x(/;"	d	signature:()
__builtin_inff16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff16(/;"	d	signature:()
__builtin_inff32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff32(/;"	d	signature:()
__builtin_inff32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_inff32x(/;"	d	signature:()
__builtin_inff64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_inff64(/;"	d	signature:()
__builtin_inff64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_inff64x(/;"	d	signature:()
__builtin_nanf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_nanf128(/;"	d	signature:(x)
__builtin_nanf128x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf128x(/;"	d	signature:(x)
__builtin_nanf16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf16(/;"	d	signature:(x)
__builtin_nanf32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf32(/;"	d	signature:(x)
__builtin_nanf32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nanf32x(/;"	d	signature:(x)
__builtin_nanf64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nanf64(/;"	d	signature:(x)
__builtin_nanf64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nanf64x(/;"	d	signature:(x)
__builtin_nansf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_nansf128(/;"	d	signature:(x)
__builtin_nansf128x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf128x(/;"	d	signature:(x)
__builtin_nansf16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf16(/;"	d	signature:(x)
__builtin_nansf32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf32(/;"	d	signature:(x)
__builtin_nansf32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __builtin_nansf32x(/;"	d	signature:(x)
__builtin_nansf64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nansf64(/;"	d	signature:(x)
__builtin_nansf64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __builtin_nansf64x(/;"	d	signature:(x)
__builtin_signbitf128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __builtin_signbitf128 /;"	d
__c_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __c_pointer = typename _Tp::const_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_pointer	access:protected
__cache_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	t	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
__caddr_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef char *__caddr_t;$/;"	t	typeref:typename:char *
__can_construct	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __can_construct$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__cancel_arg	d:/include/pthread.h	/^  void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	typeref:typename:void *	access:private
__cancel_arg	d:/include/pthread.h	/^  void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void *	access:public
__cancel_jmp_buf	d:/include/pthread.h	/^  __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__cancel_jmp_buf_tag	typeref:typename:__jmp_buf	access:public
__cancel_jmp_buf	d:/include/pthread.h	/^  struct __cancel_jmp_buf_tag __cancel_jmp_buf[1];$/;"	m	struct:__anone6cbf2430b08	typeref:struct:__cancel_jmp_buf_tag[1]	access:public
__cancel_jmp_buf_tag	d:/include/pthread.h	/^struct __cancel_jmp_buf_tag$/;"	s
__cancel_jmp_buf_tag::__cancel_jmp_buf	d:/include/pthread.h	/^  __jmp_buf __cancel_jmp_buf;$/;"	m	struct:__cancel_jmp_buf_tag	typeref:typename:__jmp_buf	access:public
__cancel_jmp_buf_tag::__mask_was_saved	d:/include/pthread.h	/^  int __mask_was_saved;$/;"	m	struct:__cancel_jmp_buf_tag	typeref:typename:int	access:public
__cancel_routine	d:/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	typeref:typename:void (*)(void *)	access:private
__cancel_routine	d:/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void (*)(void *)	access:public
__cancel_type	d:/include/pthread.h	/^  int __cancel_type;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__cancel_type	d:/include/pthread.h	/^  int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__canceltype	d:/include/pthread.h	/^  int __canceltype;                       \/* Saved cancellation type. *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:int	access:public
__cast	d:/include/c++/14/bits/nested_exception.h	/^      using __cast = __and_<is_polymorphic<_Ex>,$/;"	t	function:std::rethrow_if_nested	typeref:typename:__and_<is_polymorphic<_Ex>,__or_<__not_<is_base_of<nested_exception,_Ex>>,is_convertible<_Ex *,nested_exception * >>>
__cast	d:/include/c++/14/bits/nested_exception.h	/^      using __cast = __and_<is_polymorphic<_Ex>,$/;"	t	function:std::rethrow_if_nested	typeref:typename:__and_<is_polymorphic<_Ex>,is_base_of<nested_exception,_Ex>,is_convertible<_Ex *,nested_exception * >>
__catch	d:/include/c++/14/bits/exception_defines.h	/^# define __catch(/;"	d	signature:(X)
__cfloat128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));$/;"	t	typeref:typename:_Complex float
__cfloat16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^typedef _Complex float __cfloat16 __attribute__ ((__mode__ (__HC__)));$/;"	t	typeref:typename:_Complex float
__char_traits_cmp_cat	d:/include/c++/14/bits/char_traits.h	/^      __char_traits_cmp_cat(int __cmp) noexcept$/;"	f	namespace:std::__detail	typeref:typename:auto	signature:(int __cmp)
__check_constructible	d:/include/c++/14/bits/stl_uninitialized.h	/^    __check_constructible()$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:()
__check_facet	d:/include/c++/14/bits/basic_ios.h	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION const _Facet &	signature:(const _Facet * __f)
__clamp_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      using __clamp_iter_cat$/;"	t	namespace:std::__detail	typeref:typename:__conditional_t<derived_from<_Cat,_Limit>,_Limit,_Otherwise>
__cleanup	../../../../../../usr/include/sys/reent.h	/^  void (*__cleanup) (struct _reent *);$/;"	m	struct:_reent	typeref:typename:void (*)(struct _reent *)	access:public
__cleanup_fct_attribute	d:/include/pthread.h	/^# define __cleanup_fct_attribute$/;"	d
__cleanup_fct_attribute	d:/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h	/^# define __cleanup_fct_attribute /;"	d
__clear_padding	d:/include/c++/14/bits/atomic_base.h	/^      __clear_padding(_Tp& __val) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp & __val)
__clock_t	../../../../../../usr/include/sys/_types.h	/^typedef	_CLOCK_T_	__clock_t;$/;"	t	typeref:typename:_CLOCK_T_
__clock_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __CLOCK_T_TYPE __clock_t;	\/* Type of CPU usage counts.  *\/$/;"	v	typeref:typename:__STD_TYPE __CLOCK_T_TYPE
__clock_t_defined	d:/include/x86_64-linux-gnu/bits/types/clock_t.h	/^#define __clock_t_defined /;"	d
__clockid_t	../../../../../../usr/include/sys/_types.h	/^typedef	_CLOCKID_T_	__clockid_t;$/;"	t	typeref:typename:_CLOCKID_T_
__clockid_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __CLOCKID_T_TYPE __clockid_t;$/;"	v	typeref:typename:__STD_TYPE __CLOCKID_T_TYPE
__clockid_t_defined	d:/include/x86_64-linux-gnu/bits/types/clockid_t.h	/^#define __clockid_t_defined /;"	d
__cmpexch_failure_order	d:/include/c++/14/bits/atomic_base.h	/^  __cmpexch_failure_order(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m)
__cmpexch_failure_order2	d:/include/c++/14/bits/atomic_base.h	/^  __cmpexch_failure_order2(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m)
__cnd2	d:/include/c++/14/bits/stl_algobase.h	/^	__cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II __first,_II __last)
__cnd2	d:/include/c++/14/bits/stl_algobase.h	/^	__cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_RAI,_RAI)
__compar_fn_t	../../../../../../usr/include/stdlib.h	/^typedef int (*__compar_fn_t) (const void *, const void *);$/;"	t	typeref:typename:int (*)(const void *,const void *)
__compar_fn_t_defined	../../../../../../usr/include/stdlib.h	/^#define __compar_fn_t_defined$/;"	d
__compare_exchange	d:/include/c++/14/bits/atomic_base.h	/^      __compare_exchange(_Tp& __val, _Val<_Tp>& __e, _Val<_Tp>& __i,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp & __val,_Val<_Tp> & __e,_Val<_Tp> & __i,bool __is_weak,memory_order __s,memory_order __f)
__concurrence_broadcast_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_broadcast_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__concurrence_lock_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_lock_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__concurrence_unlock_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_unlock_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__concurrence_wait_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_wait_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__cond	d:/include/c++/14/ext/concurrence.h	/^    __cond() $/;"	f	class:__gnu_cxx::__cond	access:public	signature:()
__cond	d:/include/c++/14/ext/concurrence.h	/^    __cond(const __cond&);$/;"	p	class:__gnu_cxx::__cond	access:private	signature:(const __cond &)
__cond	d:/include/c++/14/ext/concurrence.h	/^  class __cond$/;"	c	namespace:__gnu_cxx
__conditional_type	d:/include/c++/14/ext/type_traits.h	/^    struct __conditional_type$/;"	s	namespace:__gnu_cxx
__conditional_type	d:/include/c++/14/ext/type_traits.h	/^    struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx
__const_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp1 &	access:public	signature:(const pair<_Tp1,_Tp2> & __pair)
__const_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp2 &	access:public	signature:(const pair<_Tp1,_Tp2> & __pair)
__const_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
__const_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
__const_move_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp1 &&	access:public	signature:(const pair<_Tp1,_Tp2> && __pair)
__const_move_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp2 &&	access:public	signature:(const pair<_Tp1,_Tp2> && __pair)
__const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      struct __const_sentinel$/;"	s	namespace:std::__detail
__const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      struct __const_sentinel<_Sent>$/;"	s	namespace:std::__detail
__construct_t	d:/include/c++/14/bits/alloc_traits.h	/^      using __construct_t$/;"	t	struct:std::__allocator_traits_base	access:protected
__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, _Tp&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(const char *,_Tp &,ios_base::iostate &,const __c_locale &)
__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
__convertible	d:/include/c++/14/bits/stl_iterator.h	/^	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>$/;"	m	class:std::reverse_iterator	typeref:typename:bool	access:private
__convertible	d:/include/c++/14/bits/stl_iterator.h	/^	static constexpr bool __convertible = !is_same_v<_Iter2, _Iterator>$/;"	m	class:std::move_iterator	typeref:typename:bool	access:private
__convertible_from	d:/include/c++/14/bits/stl_iterator.h	/^	using __convertible_from$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__enable_if_t<std::is_convertible<_Iter,_Iterator>::value>	access:protected
__cookie_io_functions_t_defined	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^#define __cookie_io_functions_t_defined /;"	d
__copy_m	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	access:public	signature:(_II __first,_II __last,_OI __result)
__copy_m	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _Up *	access:public	signature:(_Tp * __first,_Tp * __last,_Up * __result)
__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move$/;"	s	namespace:std
__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<true, false, _Category>$/;"	s	namespace:std
__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<true, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(_II, _II,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat>	signature:(const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat> &)
__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2($/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >>::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >)
__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(_CharT*, _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(const _CharT*, const _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_CharT *)
__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
__copy_move_b	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_move_b	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _Up *	access:public	signature:(_Tp * __first,_Tp * __last,_Up * __result)
__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward$/;"	s	namespace:std
__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, _Category>$/;"	s	namespace:std
__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, random_access_iterator_tag>$/;"	s	namespace:std
__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat>	signature:(const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat> &)
__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a(_II, _II,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1($/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
__copy_move_backward_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_InputIterator __first,_Size __n,_OutputIterator __result,bool)
__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >>::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,_Size,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >,bool)
__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,_Size,_CharT *,bool)
__copy_n_a	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __it,_Size __n,_CharT * __result,bool __strict)
__count	../../../../../../usr/include/sys/_types.h	/^  int __count;$/;"	m	struct:__anonc90cd0a80108	typeref:typename:int	access:public
__count	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __count;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__count	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  int __count;$/;"	m	struct:__anondff4f4530108	typeref:typename:int	access:public
__count_if	d:/include/c++/14/bits/stl_algobase.h	/^    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
__count_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	using __count_type = decltype(_Tp::_M_refcount);$/;"	t	struct:std::_Sp_atomic::_Atomic_count	access:public
__counted_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_cat$/;"	s	namespace:std::__detail
__counted_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_cat<_It>$/;"	s	namespace:std::__detail
__counted_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_concept$/;"	s	namespace:std::__detail
__counted_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_concept<_It>$/;"	s	namespace:std::__detail
__counted_iter_value_type	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_value_type$/;"	s	namespace:std::__detail
__counted_iter_value_type	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_value_type<_It>$/;"	s	namespace:std::__detail
__cpp_lib_adaptor_iterator_pair_constructor	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_adaptor_iterator_pair_constructor /;"	d
__cpp_lib_addressof_constexpr	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_addressof_constexpr /;"	d
__cpp_lib_allocator_traits_is_always_equal	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_allocator_traits_is_always_equal /;"	d
__cpp_lib_any	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_any /;"	d
__cpp_lib_apply	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_apply /;"	d
__cpp_lib_array_constexpr	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_array_constexpr /;"	d
__cpp_lib_as_const	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_as_const /;"	d
__cpp_lib_assume_aligned	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_assume_aligned /;"	d
__cpp_lib_atomic_flag_test	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_flag_test /;"	d
__cpp_lib_atomic_float	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_float /;"	d
__cpp_lib_atomic_is_always_lock_free	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_is_always_lock_free /;"	d
__cpp_lib_atomic_lock_free_type_aliases	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_lock_free_type_aliases /;"	d
__cpp_lib_atomic_ref	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_ref /;"	d
__cpp_lib_atomic_shared_ptr	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_shared_ptr /;"	d
__cpp_lib_atomic_value_initialization	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_value_initialization /;"	d
__cpp_lib_atomic_wait	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_atomic_wait /;"	d
__cpp_lib_barrier	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_barrier /;"	d
__cpp_lib_bind_back	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bind_back /;"	d
__cpp_lib_bind_front	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bind_front /;"	d
__cpp_lib_bit_cast	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bit_cast /;"	d
__cpp_lib_bitops	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bitops /;"	d
__cpp_lib_bool_constant	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bool_constant /;"	d
__cpp_lib_bounded_array_traits	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_bounded_array_traits /;"	d
__cpp_lib_boyer_moore_searcher	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_boyer_moore_searcher /;"	d
__cpp_lib_byte	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_byte /;"	d
__cpp_lib_byteswap	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_byteswap /;"	d
__cpp_lib_chrono	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_chrono /;"	d
__cpp_lib_chrono_udls	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_chrono_udls /;"	d
__cpp_lib_clamp	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_clamp /;"	d
__cpp_lib_complex_udls	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_complex_udls /;"	d
__cpp_lib_concepts	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_concepts /;"	d
__cpp_lib_constexpr_algorithms	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_algorithms /;"	d
__cpp_lib_constexpr_bitset	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_bitset /;"	d
__cpp_lib_constexpr_char_traits	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_char_traits /;"	d
__cpp_lib_constexpr_charconv	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_charconv /;"	d
__cpp_lib_constexpr_complex	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_complex /;"	d
__cpp_lib_constexpr_dynamic_alloc	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_dynamic_alloc /;"	d
__cpp_lib_constexpr_functional	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_functional /;"	d
__cpp_lib_constexpr_iterator	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_iterator /;"	d
__cpp_lib_constexpr_memory	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_memory /;"	d
__cpp_lib_constexpr_numeric	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_numeric /;"	d
__cpp_lib_constexpr_string	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_string /;"	d
__cpp_lib_constexpr_string_view	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_string_view /;"	d
__cpp_lib_constexpr_tuple	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_tuple /;"	d
__cpp_lib_constexpr_typeinfo	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_typeinfo /;"	d
__cpp_lib_constexpr_utility	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_utility /;"	d
__cpp_lib_constexpr_vector	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_constexpr_vector /;"	d
__cpp_lib_coroutine	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_coroutine /;"	d
__cpp_lib_destroying_delete	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_destroying_delete /;"	d
__cpp_lib_enable_shared_from_this	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_enable_shared_from_this /;"	d
__cpp_lib_endian	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_endian /;"	d
__cpp_lib_erase_if	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_erase_if /;"	d
__cpp_lib_exchange_function	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_exchange_function /;"	d
__cpp_lib_execution	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_execution /;"	d
__cpp_lib_expected	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_expected /;"	d
__cpp_lib_filesystem	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_filesystem /;"	d
__cpp_lib_format	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_format /;"	d
__cpp_lib_format_uchar	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_format_uchar /;"	d
__cpp_lib_formatters	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_formatters /;"	d
__cpp_lib_forward_like	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_forward_like /;"	d
__cpp_lib_freestanding_algorithm	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_algorithm /;"	d
__cpp_lib_freestanding_array	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_array /;"	d
__cpp_lib_freestanding_cstring	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_cstring /;"	d
__cpp_lib_freestanding_expected	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_expected /;"	d
__cpp_lib_freestanding_optional	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_optional /;"	d
__cpp_lib_freestanding_string_view	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_string_view /;"	d
__cpp_lib_freestanding_variant	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_freestanding_variant /;"	d
__cpp_lib_fstream_native_handle	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_fstream_native_handle /;"	d
__cpp_lib_gcd	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_gcd /;"	d
__cpp_lib_gcd_lcm	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_gcd_lcm /;"	d
__cpp_lib_generator	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_generator /;"	d
__cpp_lib_generic_associative_lookup	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_generic_associative_lookup /;"	d
__cpp_lib_generic_unordered_lookup	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_generic_unordered_lookup /;"	d
__cpp_lib_hardware_interference_size	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_hardware_interference_size /;"	d
__cpp_lib_has_unique_object_representations	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_has_unique_object_representations /;"	d
__cpp_lib_hypot	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_hypot /;"	d
__cpp_lib_incomplete_container_elements	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_incomplete_container_elements /;"	d
__cpp_lib_int_pow2	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_int_pow2 /;"	d
__cpp_lib_integer_comparison_functions	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_integer_comparison_functions /;"	d
__cpp_lib_integer_sequence	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_integer_sequence /;"	d
__cpp_lib_integral_constant_callable	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_integral_constant_callable /;"	d
__cpp_lib_interpolate	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_interpolate /;"	d
__cpp_lib_invoke	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_invoke /;"	d
__cpp_lib_invoke_r	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_invoke_r /;"	d
__cpp_lib_ios_noreplace	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ios_noreplace /;"	d
__cpp_lib_is_aggregate	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_aggregate /;"	d
__cpp_lib_is_constant_evaluated	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_constant_evaluated /;"	d
__cpp_lib_is_final	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_final /;"	d
__cpp_lib_is_invocable	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_invocable /;"	d
__cpp_lib_is_layout_compatible	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_layout_compatible /;"	d
__cpp_lib_is_nothrow_convertible	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_nothrow_convertible /;"	d
__cpp_lib_is_null_pointer	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_null_pointer /;"	d
__cpp_lib_is_pointer_interconvertible	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_pointer_interconvertible /;"	d
__cpp_lib_is_scoped_enum	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_scoped_enum /;"	d
__cpp_lib_is_swappable	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_is_swappable /;"	d
__cpp_lib_jthread	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_jthread /;"	d
__cpp_lib_latch	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_latch /;"	d
__cpp_lib_launder	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_launder /;"	d
__cpp_lib_lcm	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_lcm /;"	d
__cpp_lib_list_remove_return_type	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_list_remove_return_type /;"	d
__cpp_lib_logical_traits	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_logical_traits /;"	d
__cpp_lib_make_from_tuple	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_make_from_tuple /;"	d
__cpp_lib_make_obj_using_allocator	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_make_obj_using_allocator /;"	d
__cpp_lib_make_reverse_iterator	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_make_reverse_iterator /;"	d
__cpp_lib_make_unique	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_make_unique /;"	d
__cpp_lib_map_try_emplace	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_map_try_emplace /;"	d
__cpp_lib_math_constants	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_math_constants /;"	d
__cpp_lib_math_special_functions	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_math_special_functions /;"	d
__cpp_lib_memory_resource	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_memory_resource /;"	d
__cpp_lib_move_iterator_concept	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_move_iterator_concept /;"	d
__cpp_lib_move_only_function	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_move_only_function /;"	d
__cpp_lib_node_extract	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_node_extract /;"	d
__cpp_lib_nonmember_container_access	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_nonmember_container_access /;"	d
__cpp_lib_not_fn	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_not_fn /;"	d
__cpp_lib_null_iterators	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_null_iterators /;"	d
__cpp_lib_optional	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_optional /;"	d
__cpp_lib_out_ptr	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_out_ptr /;"	d
__cpp_lib_parallel_algorithm	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_parallel_algorithm /;"	d
__cpp_lib_polymorphic_allocator	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_polymorphic_allocator /;"	d
__cpp_lib_print	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_print /;"	d
__cpp_lib_quoted_string_io	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_quoted_string_io /;"	d
__cpp_lib_ranges	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges /;"	d
__cpp_lib_ranges_as_const	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_as_const /;"	d
__cpp_lib_ranges_as_rvalue	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_as_rvalue /;"	d
__cpp_lib_ranges_cartesian_product	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_cartesian_product /;"	d
__cpp_lib_ranges_chunk	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_chunk /;"	d
__cpp_lib_ranges_chunk_by	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_chunk_by /;"	d
__cpp_lib_ranges_contains	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_contains /;"	d
__cpp_lib_ranges_enumerate	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_enumerate /;"	d
__cpp_lib_ranges_find_last	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_find_last /;"	d
__cpp_lib_ranges_fold	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_fold /;"	d
__cpp_lib_ranges_iota	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_iota /;"	d
__cpp_lib_ranges_join_with	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_join_with /;"	d
__cpp_lib_ranges_repeat	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_repeat /;"	d
__cpp_lib_ranges_slide	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_slide /;"	d
__cpp_lib_ranges_stride	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_stride /;"	d
__cpp_lib_ranges_to_container	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_to_container /;"	d
__cpp_lib_ranges_zip	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ranges_zip /;"	d
__cpp_lib_ratio	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ratio /;"	d
__cpp_lib_raw_memory_algorithms	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_raw_memory_algorithms /;"	d
__cpp_lib_reference_from_temporary	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_reference_from_temporary /;"	d
__cpp_lib_reference_wrapper	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_reference_wrapper /;"	d
__cpp_lib_remove_cvref	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_remove_cvref /;"	d
__cpp_lib_result_of_sfinae	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_result_of_sfinae /;"	d
__cpp_lib_robust_nonmodifying_seq_ops	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_robust_nonmodifying_seq_ops /;"	d
__cpp_lib_sample	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_sample /;"	d
__cpp_lib_saturation_arithmetic	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_saturation_arithmetic /;"	d
__cpp_lib_scoped_lock	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_scoped_lock /;"	d
__cpp_lib_semaphore	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_semaphore /;"	d
__cpp_lib_shared_mutex	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_shared_mutex /;"	d
__cpp_lib_shared_ptr_arrays	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_shared_ptr_arrays /;"	d
__cpp_lib_shared_ptr_weak_type	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_shared_ptr_weak_type /;"	d
__cpp_lib_shared_timed_mutex	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_shared_timed_mutex /;"	d
__cpp_lib_shift	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_shift /;"	d
__cpp_lib_smart_ptr_for_overwrite	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_smart_ptr_for_overwrite /;"	d
__cpp_lib_source_location	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_source_location /;"	d
__cpp_lib_span	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_span /;"	d
__cpp_lib_spanstream	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_spanstream /;"	d
__cpp_lib_ssize	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_ssize /;"	d
__cpp_lib_stacktrace	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_stacktrace /;"	d
__cpp_lib_starts_ends_with	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_starts_ends_with /;"	d
__cpp_lib_stdatomic_h	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_stdatomic_h /;"	d
__cpp_lib_string_contains	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_string_contains /;"	d
__cpp_lib_string_resize_and_overwrite	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_string_resize_and_overwrite /;"	d
__cpp_lib_string_udls	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_string_udls /;"	d
__cpp_lib_string_view	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_string_view /;"	d
__cpp_lib_syncbuf	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_syncbuf /;"	d
__cpp_lib_text_encoding	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_text_encoding /;"	d
__cpp_lib_three_way_comparison	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_three_way_comparison /;"	d
__cpp_lib_to_address	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_to_address /;"	d
__cpp_lib_to_array	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_to_array /;"	d
__cpp_lib_to_chars	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_to_chars /;"	d
__cpp_lib_to_string	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_to_string /;"	d
__cpp_lib_to_underlying	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_to_underlying /;"	d
__cpp_lib_transformation_trait_aliases	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_transformation_trait_aliases /;"	d
__cpp_lib_transparent_operators	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_transparent_operators /;"	d
__cpp_lib_tuple_element_t	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_tuple_element_t /;"	d
__cpp_lib_tuple_like	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_tuple_like /;"	d
__cpp_lib_tuples_by_type	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_tuples_by_type /;"	d
__cpp_lib_type_identity	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_type_identity /;"	d
__cpp_lib_type_trait_variable_templates	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_type_trait_variable_templates /;"	d
__cpp_lib_uncaught_exceptions	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_uncaught_exceptions /;"	d
__cpp_lib_unordered_map_try_emplace	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_unordered_map_try_emplace /;"	d
__cpp_lib_unreachable	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_unreachable /;"	d
__cpp_lib_unwrap_ref	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_unwrap_ref /;"	d
__cpp_lib_variant	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_variant /;"	d
__cpp_lib_void_t	d:/include/c++/14/bits/version.h	/^#   define __cpp_lib_void_t /;"	d
__cpu_mask	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^typedef __CPU_MASK_TYPE __cpu_mask;$/;"	t	typeref:typename:__CPU_MASK_TYPE
__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
__ctype_b	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	typeref:typename:const unsigned short int *	access:public
__ctype_b_loc	d:/include/ctype.h	/^extern const unsigned short int **__ctype_b_loc (void)$/;"	p	typeref:typename:const unsigned short int **	signature:(void)
__ctype_tolower	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_tolower;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__ctype_tolower_loc	d:/include/ctype.h	/^extern const __int32_t **__ctype_tolower_loc (void)$/;"	p	typeref:typename:const __int32_t **	signature:(void)
__ctype_toupper	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_toupper;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__ctype_toupper_loc	d:/include/ctype.h	/^extern const __int32_t **__ctype_toupper_loc (void)$/;"	p	typeref:typename:const __int32_t **	signature:(void)
__ctype_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	t	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
__cur_writer	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __cur_writer;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__cv_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __cv_pointer = typename _Tp::const_void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_void_pointer	access:protected
__cxa_allocate_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void *	signature:(size_t)
__cxa_exception_type	d:/include/c++/14/bits/exception_ptr.h	/^      __cxa_exception_type() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:const class std::type_info *	access:public	signature:() const
__cxa_free_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_free_exception(void*) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void	signature:(void *)
__cxa_init_primary_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,$/;"	p	namespace:__cxxabiv1	typeref:typename:__cxa_refcounted_exception *	signature:(void * __object,std::type_info * __tinfo,void (_GLIBCXX_CDTOR_CALLABI * __dest)(void *))
__cxxabiv1	d:/include/c++/14/bits/cxxabi_forced.h	/^namespace __cxxabiv1$/;"	n
__cxxabiv1	d:/include/c++/14/bits/cxxabi_init_exception.h	/^namespace __cxxabiv1$/;"	n
__cxxabiv1::__cxa_allocate_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_allocate_exception(size_t) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void *	signature:(size_t)
__cxxabiv1::__cxa_free_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_free_exception(void*) _GLIBCXX_NOTHROW;$/;"	p	namespace:__cxxabiv1	typeref:typename:void	signature:(void *)
__cxxabiv1::__cxa_init_primary_exception	d:/include/c++/14/bits/cxxabi_init_exception.h	/^      __cxa_init_primary_exception(void *__object, std::type_info *__tinfo,$/;"	p	namespace:__cxxabiv1	typeref:typename:__cxa_refcounted_exception *	signature:(void * __object,std::type_info * __tinfo,void (_GLIBCXX_CDTOR_CALLABI * __dest)(void *))
__cxxabiv1::__forced_unwind	d:/include/c++/14/bits/cxxabi_forced.h	/^  class __forced_unwind$/;"	c	namespace:__cxxabiv1
__cxxabiv1::__forced_unwind::__pure_dummy	d:/include/c++/14/bits/cxxabi_forced.h	/^    virtual void __pure_dummy() = 0; $/;"	p	class:__cxxabiv1::__forced_unwind	typeref:typename:void	access:private	signature:()
__cxxabiv1::__forced_unwind::~__forced_unwind	d:/include/c++/14/bits/cxxabi_forced.h	/^    virtual ~__forced_unwind() throw();$/;"	p	class:__cxxabiv1::__forced_unwind	access:private	signature:()
__cygwin_lock_fini	../../../../../../usr/include/sys/lock.h	/^void __cygwin_lock_fini(_LOCK_T *);$/;"	p	typeref:typename:void	signature:(_LOCK_T *)
__cygwin_lock_init	../../../../../../usr/include/sys/lock.h	/^void __cygwin_lock_init(_LOCK_T *);$/;"	p	typeref:typename:void	signature:(_LOCK_T *)
__cygwin_lock_init_recursive	../../../../../../usr/include/sys/lock.h	/^void __cygwin_lock_init_recursive(_LOCK_T *);$/;"	p	typeref:typename:void	signature:(_LOCK_T *)
__cygwin_lock_lock	../../../../../../usr/include/sys/lock.h	/^void __cygwin_lock_lock(_LOCK_T *);$/;"	p	typeref:typename:void	signature:(_LOCK_T *)
__cygwin_lock_trylock	../../../../../../usr/include/sys/lock.h	/^int __cygwin_lock_trylock(_LOCK_T *);$/;"	p	typeref:typename:int	signature:(_LOCK_T *)
__cygwin_lock_unlock	../../../../../../usr/include/sys/lock.h	/^void __cygwin_lock_unlock(_LOCK_T *);$/;"	p	typeref:typename:void	signature:(_LOCK_T *)
__daddr_t	../../../../../../usr/include/sys/_types.h	/^typedef	long		__daddr_t;$/;"	t	typeref:typename:long
__daddr_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __DADDR_T_TYPE __daddr_t;	\/* The type of a disk address.  *\/$/;"	v	typeref:typename:__STD_TYPE __DADDR_T_TYPE
__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_cond_s __data;$/;"	m	union:__anon3fdbe2cb040a	typeref:struct:__pthread_cond_s	access:public
__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_mutex_s __data;$/;"	m	union:__anon3fdbe2cb030a	typeref:struct:__pthread_mutex_s	access:public
__data	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  struct __pthread_rwlock_arch_t __data;$/;"	m	union:__anon3fdbe2cb050a	typeref:struct:__pthread_rwlock_arch_t	access:public
__debug	d:/include/c++/14/debug/debug.h	/^  namespace __debug { } $/;"	n	namespace:std
__default_lock_policy	d:/include/c++/14/ext/concurrence.h	/^  _GLIBCXX17_INLINE const _Lock_policy __default_lock_policy =$/;"	v	namespace:__gnu_cxx	typeref:typename:_GLIBCXX17_INLINE const _Lock_policy
__defer	d:/include/pthread.h	/^  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:()
__dest_thunk	d:/include/c++/14/bits/exception_ptr.h	/^      __dest_thunk(void* __x)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_CDTOR_CALLABI void	signature:(void * __x)
__destroy	d:/include/c++/14/bits/stl_construct.h	/^	__destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::_Destroy_aux	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
__destroy	d:/include/c++/14/bits/stl_construct.h	/^        __destroy(_ForwardIterator, _ForwardIterator) { }$/;"	f	struct:std::_Destroy_aux	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
__destroy_n	d:/include/c++/14/bits/stl_construct.h	/^	__destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
__destroy_n	d:/include/c++/14/bits/stl_construct.h	/^        __destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
__detail	d:/include/c++/14/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/char_traits.h	/^  namespace __detail$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/charconv.h	/^namespace __detail$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/shared_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/stl_iterator.h	/^  namespace __detail$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/stl_tempbuf.h	/^  namespace __detail$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/unique_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/unique_ptr.h	/^namespace __detail$/;"	n	namespace:std
__detail	d:/include/c++/14/bits/utility.h	/^  namespace ranges::__detail$/;"	n	namespace:std::ranges
__dev_t	../../../../../../usr/include/machine/_types.h	/^typedef __uint32_t __dev_t;$/;"	t	typeref:typename:__uint32_t
__dev_t	../../../../../../usr/include/sys/_types.h	/^typedef short __dev_t;$/;"	t	typeref:typename:short
__dev_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __DEV_T_TYPE __dev_t;	\/* Type of device numbers.  *\/$/;"	v	typeref:typename:__STD_TYPE __DEV_T_TYPE
__diff_t	d:/include/c++/14/bits/ptr_traits.h	/^	using __diff_t = typename _Tp::difference_type;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Tp::difference_type	access:private
__digits	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const int	access:public
__digits	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const int
__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = 31;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = 33;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = __glibcxx_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__digits10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,_GLIBCXX_STD_C::_List_const_iterator<_Tp>,input_iterator_tag)
__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_iterator<_Tp>,_GLIBCXX_STD_C::_List_iterator<_Tp>,input_iterator_tag)
__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX14_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(_OutputIterator,_OutputIterator,output_iterator_tag)
__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR typename iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
__do_alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,const _Alloc & __two,true_type)
__do_alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,const _Alloc &,false_type)
__do_alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
__do_alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
__do_alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
__do_alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
__do_get	d:/include/c++/14/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,__ibm128 &) const
__do_get	d:/include/c++/14/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
__do_it	d:/include/pthread.h	/^  int __do_it;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__do_it	d:/include/pthread.h	/^  int __do_it;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__do_put	d:/include/c++/14/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, __ibm128) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,__ibm128) const
__do_put	d:/include/c++/14/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
__do_uninit_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
__do_uninit_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
__do_uninit_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
__ds_type1	d:/include/c++/14/bits/stl_pair.h	/^      typedef typename __decay_and_strip<_T1>::__type __ds_type1;$/;"	t	function:std::make_pair	typeref:typename:__decay_and_strip<_T1>::__type
__ds_type2	d:/include/c++/14/bits/stl_pair.h	/^      typedef typename __decay_and_strip<_T2>::__type __ds_type2;$/;"	t	function:std::make_pair	typeref:typename:__decay_and_strip<_T2>::__type
__eelision	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __eelision;$/;"	m	struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	typeref:typename:short	access:public
__elision	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __elision;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__elision	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __elision __elision_/;"	d
__elision_data	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    } __elision_data;$/;"	m	union:__pthread_mutex_s::__anon472e9925010a	typeref:struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	access:public
__enable_hash_call	d:/include/c++/14/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = false;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
__enable_hash_call	d:/include/c++/14/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = true;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
__enable_if	d:/include/c++/14/ext/type_traits.h	/^    struct __enable_if $/;"	s	namespace:__gnu_cxx
__enable_if	d:/include/c++/14/ext/type_traits.h	/^    struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx
__enable_if_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^using __enable_if_execution_policy =$/;"	t	namespace:__pstl::__internal	typeref:typename:std::enable_if<__pstl::execution::is_execution_policy<std::__remove_cvref_t<_ExecPolicy>>::value,_Tp>::type
__enable_if_has_tuple_size	d:/include/c++/14/bits/utility.h	/^    using __enable_if_has_tuple_size = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
__enable_if_not_native_iterator	d:/include/c++/14/bits/basic_string.h	/^	struct __enable_if_not_native_iterator$/;"	s	class:std::basic_string	access:private
__enable_if_not_native_iterator	d:/include/c++/14/bits/basic_string.h	/^	struct __enable_if_not_native_iterator<_Tp, false> { };$/;"	s	class:std::basic_string	access:private
__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:(const __enable_shared_from_this &)
__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __enable_shared_from_this() noexcept { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:()
__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __enable_shared_from_this$/;"	c	namespace:std
__enable_shared_from_this_base	d:/include/c++/14/bits/shared_ptr.h	/^      __enable_shared_from_this_base(const __shared_count<>&,$/;"	f	namespace:std	typeref:typename:const enable_shared_from_this *	signature:(const __shared_count<> &,const enable_shared_from_this * __p)
__enable_shared_from_this_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      __enable_shared_from_this_base(const __shared_count<_Lp>&,$/;"	f	namespace:std	typeref:typename:const __enable_shared_from_this *	signature:(const __shared_count<_Lp> &,const __enable_shared_from_this * __p)
__eprintf	../../../../../../usr/include/stdlib.h	/^void	__eprintf (const char *, const char *, unsigned int, const char *);$/;"	p	typeref:typename:void	signature:(const char *,const char *,unsigned int,const char *)
__equal	d:/include/c++/14/bits/alloc_traits.h	/^      using __equal = __type_identity<typename _Tp::is_always_equal>;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:__type_identity<typename _Tp::is_always_equal>	access:protected
__equal	d:/include/c++/14/bits/stl_algobase.h	/^    struct __equal$/;"	s	namespace:std
__equal	d:/include/c++/14/bits/stl_algobase.h	/^    struct __equal<true>$/;"	s	namespace:std
__equal4	d:/include/c++/14/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__equal4	d:/include/c++/14/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_BinaryPredicate __binary_pred)
__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(_II1, _II1,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,_II2)
__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_II)
__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,$/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>)
__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
__erased_type	d:/include/c++/14/bits/uses_allocator.h	/^  struct __erased_type { };$/;"	s	namespace:std
__errno_location	d:/include/errno.h	/^extern int *__errno_location (void) __THROW __attribute_const__;$/;"	p	typeref:typename:__BEGIN_DECLS int *	signature:(void)
__errordecl	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __errordecl(/;"	d	signature:(name,msg)
__esft_base_t	d:/include/c++/14/bits/shared_ptr_base.h	/^	using __esft_base_t = decltype(__enable_shared_from_this_base($/;"	t	class:std::__shared_ptr	access:private
__espins	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __espins;$/;"	m	struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	typeref:typename:short	access:public
__exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^  namespace __exception_ptr$/;"	n	namespace:std
__exchange	d:/include/c++/14/bits/move.h	/^    __exchange(_Tp& __obj, _Up&& __new_val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp	signature:(_Tp & __obj,_Up && __new_val)
__exchange_and_add	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(volatile _Atomic_word * __mem,int __val)
__exchange_and_add	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;$/;"	p	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(volatile _Atomic_word *,int)
__exchange_and_add_dispatch	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__exchange_and_add_single	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__exctype	d:/include/ctype.h	/^#define	__exctype(/;"	d	signature:(name)
__exctype	d:/include/ctype.h	/^__exctype (_tolower);$/;"	p	signature:(_tolower)
__exctype	d:/include/ctype.h	/^__exctype (_toupper);$/;"	p	signature:(_toupper)
__exctype	d:/include/ctype.h	/^__exctype (isalnum);$/;"	p	signature:(isalnum)
__exctype	d:/include/ctype.h	/^__exctype (isalpha);$/;"	p	signature:(isalpha)
__exctype	d:/include/ctype.h	/^__exctype (isblank);$/;"	p	signature:(isblank)
__exctype	d:/include/ctype.h	/^__exctype (iscntrl);$/;"	p	signature:(iscntrl)
__exctype	d:/include/ctype.h	/^__exctype (isdigit);$/;"	p	signature:(isdigit)
__exctype	d:/include/ctype.h	/^__exctype (isgraph);$/;"	p	signature:(isgraph)
__exctype	d:/include/ctype.h	/^__exctype (islower);$/;"	p	signature:(islower)
__exctype	d:/include/ctype.h	/^__exctype (isprint);$/;"	p	signature:(isprint)
__exctype	d:/include/ctype.h	/^__exctype (ispunct);$/;"	p	signature:(ispunct)
__exctype	d:/include/ctype.h	/^__exctype (isspace);$/;"	p	signature:(isspace)
__exctype	d:/include/ctype.h	/^__exctype (isupper);$/;"	p	signature:(isupper)
__exctype	d:/include/ctype.h	/^__exctype (isxdigit);$/;"	p	signature:(isxdigit)
__exctype_l	d:/include/ctype.h	/^# define __exctype_l(/;"	d	signature:(name)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isalnum_l);$/;"	p	signature:(isalnum_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isalpha_l);$/;"	p	signature:(isalpha_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isblank_l);$/;"	p	signature:(isblank_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (iscntrl_l);$/;"	p	signature:(iscntrl_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isdigit_l);$/;"	p	signature:(isdigit_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isgraph_l);$/;"	p	signature:(isgraph_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (islower_l);$/;"	p	signature:(islower_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isprint_l);$/;"	p	signature:(isprint_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (ispunct_l);$/;"	p	signature:(ispunct_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isspace_l);$/;"	p	signature:(isspace_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isupper_l);$/;"	p	signature:(isupper_l)
__exctype_l	d:/include/ctype.h	/^__exctype_l (isxdigit_l);$/;"	p	signature:(isxdigit_l)
__extension__	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __extension__	/;"	d
__extern_always_inline	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __extern_always_inline /;"	d
__extern_inline	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __extern_inline /;"	d
__f128	d:/include/x86_64-linux-gnu/bits/floatn.h	/^#   define __f128(/;"	d	signature:(x)
__f128x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f128x(/;"	d	signature:(x)
__f16	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f16(/;"	d	signature:(x)
__f32	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f32(/;"	d	signature:(x)
__f32x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f32x(/;"	d	signature:(x)
__f64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __f64(/;"	d	signature:(x)
__f64	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f64(/;"	d	signature:(x)
__f64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#    define __f64x(/;"	d	signature:(x)
__f64x	d:/include/x86_64-linux-gnu/bits/floatn-common.h	/^#   define __f64x(/;"	d	signature:(x)
__false_type	d:/include/c++/14/bits/cpp_type_traits.h	/^  struct __false_type { };$/;"	s	namespace:std
__feof_unlocked_body	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __feof_unlocked_body(/;"	d	signature:(_fp)
__ferror_unlocked_body	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __ferror_unlocked_body(/;"	d	signature:(_fp)
__fetch_add_flt	d:/include/c++/14/bits/atomic_base.h	/^      __fetch_add_flt(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
__fetch_sub_flt	d:/include/c++/14/bits/atomic_base.h	/^      __fetch_sub_flt(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
__fill_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_FIte __first,_FIte __last,const _Tp & __value)
__fill_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const _Tp &)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(::__gnu_cxx::__normal_iterator<_Ite,_Cont> __first,::__gnu_cxx::__normal_iterator<_Ite,_Cont> __last,const _Tp & __value)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value,void>::__type	signature:(_Tp * __first,_Tp * __last,const _Tp & __c)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _VTp &)
__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_GLIBCXX_STD_C::_Bit_iterator,_GLIBCXX_STD_C::_Bit_iterator,const bool &)
__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::output_iterator_tag)
__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::random_access_iterator_tag)
__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> & __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
__fill_n_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
__fill_n_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __first,_Iterator __last,_Predicate __pred)
__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
__find_uniq_type_in_pack	d:/include/c++/14/bits/utility.h	/^    __find_uniq_type_in_pack()$/;"	f	namespace:std	typeref:typename:size_t	signature:()
__flags	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__flags	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__flexarr	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __flexarr	/;"	d
__forced_unwind	d:/include/c++/14/bits/cxxabi_forced.h	/^  class __forced_unwind$/;"	c	namespace:__cxxabiv1
__fortified_attr_access	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#    define __fortified_attr_access(/;"	d	signature:(a,o,s)
__fortified_attr_access	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortified_attr_access(/;"	d	signature:(a,o,s)
__fortify_clang_bos0_static_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bos0_static_lt(/;"	d	signature:(__n,__e)
__fortify_clang_bos0_static_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bos0_static_lt2(/;"	d	signature:(__n,__e,__s)
__fortify_clang_bos_static_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bos_static_lt(/;"	d	signature:(__n,__e)
__fortify_clang_bos_static_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bos_static_lt2(/;"	d	signature:(__n,__e,__s)
__fortify_clang_bos_static_lt_impl	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bos_static_lt_impl(/;"	d	signature:(bos_val,n,s)
__fortify_clang_bosn_args	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_bosn_args(/;"	d	signature:(bos_fn,n,buf,div,complaint)
__fortify_clang_error	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_error(/;"	d	signature:(__c,__msg)
__fortify_clang_mul_may_overflow	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_mul_may_overflow(/;"	d	signature:(size,n)
__fortify_clang_overload_arg	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_overload_arg(/;"	d	signature:(__type,__attr,__name)
__fortify_clang_overload_arg	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_overload_arg(/;"	d	signature:(__type,__attr,__name)
__fortify_clang_overload_arg0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_overload_arg0(/;"	d	signature:(__type,__attr,__name)
__fortify_clang_overload_arg0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_overload_arg0(/;"	d	signature:(__type,__attr,__name)
__fortify_clang_pass_dynamic_object_size	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_pass_dynamic_object_size /;"	d
__fortify_clang_pass_dynamic_object_size	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_pass_dynamic_object_size$/;"	d
__fortify_clang_pass_dynamic_object_size0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_pass_dynamic_object_size0 /;"	d
__fortify_clang_pass_dynamic_object_size0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_pass_dynamic_object_size0$/;"	d
__fortify_clang_pass_dynamic_object_size_n	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_pass_dynamic_object_size_n(/;"	d	signature:(n)
__fortify_clang_pass_object_size	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_pass_object_size /;"	d
__fortify_clang_pass_object_size0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_pass_object_size0 /;"	d
__fortify_clang_pass_object_size_n	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_pass_object_size_n(/;"	d	signature:(n)
__fortify_clang_prefer_this_overload	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_prefer_this_overload /;"	d
__fortify_clang_size_too_small	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_size_too_small(/;"	d	signature:(__bos,__dest,__len)
__fortify_clang_unavailable	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_unavailable(/;"	d	signature:(__msg)
__fortify_clang_warn_if_dest_too_small	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warn_if_dest_too_small(/;"	d	signature:(__dest,__len)
__fortify_clang_warn_if_dest_too_small0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warn_if_dest_too_small0(/;"	d	signature:(__dest,__len)
__fortify_clang_warn_if_src_too_large	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warn_if_src_too_large(/;"	d	signature:(__dest,__src)
__fortify_clang_warning	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning(/;"	d	signature:(__c,__msg)
__fortify_clang_warning_only_if_bos0_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __fortify_clang_warning_only_if_bos0_lt(/;"	d	signature:(n,buf,complaint)
__fortify_clang_warning_only_if_bos0_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos0_lt(/;"	d	signature:(__n,__buf,__complaint)
__fortify_clang_warning_only_if_bos0_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos0_lt2(/;"	d	signature:(__n,__buf,__div,complaint)
__fortify_clang_warning_only_if_bos0_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos0_lt2(/;"	d	signature:(n,buf,div,complaint)
__fortify_clang_warning_only_if_bos_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos_lt(/;"	d	signature:(__n,__buf,__complaint)
__fortify_clang_warning_only_if_bos_lt	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos_lt(/;"	d	signature:(n,buf,complaint)
__fortify_clang_warning_only_if_bos_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos_lt2(/;"	d	signature:(__n,__buf,div,__complaint)
__fortify_clang_warning_only_if_bos_lt2	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_clang_warning_only_if_bos_lt2(/;"	d	signature:(n,buf,div,complaint)
__fortify_function	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_function /;"	d
__fortify_function_error_function	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_function_error_function /;"	d
__fortify_use_clang	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __fortify_use_clang /;"	d
__fpos64_t	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^} __fpos64_t;$/;"	t	typeref:struct:_G_fpos64_t
__fpos_t	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^} __fpos_t;$/;"	t	typeref:struct:_G_fpos_t
__fsblkcnt64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSBLKCNT64_T_TYPE __fsblkcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __FSBLKCNT64_T_TYPE
__fsblkcnt_t	../../../../../../usr/include/machine/_types.h	/^typedef unsigned long __fsblkcnt_t;$/;"	t	typeref:typename:unsigned long
__fsblkcnt_t	../../../../../../usr/include/sys/_types.h	/^typedef __uint64_t __fsblkcnt_t;$/;"	t	typeref:typename:__uint64_t
__fsblkcnt_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSBLKCNT_T_TYPE __fsblkcnt_t;$/;"	v	typeref:typename:__STD_TYPE __FSBLKCNT_T_TYPE
__fsfilcnt64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSFILCNT64_T_TYPE __fsfilcnt64_t;$/;"	v	typeref:typename:__STD_TYPE __FSFILCNT64_T_TYPE
__fsfilcnt_t	../../../../../../usr/include/machine/_types.h	/^typedef unsigned long __fsfilcnt_t;$/;"	t	typeref:typename:unsigned long
__fsfilcnt_t	../../../../../../usr/include/sys/_types.h	/^typedef __uint32_t __fsfilcnt_t;$/;"	t	typeref:typename:__uint32_t
__fsfilcnt_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSFILCNT_T_TYPE __fsfilcnt_t;$/;"	v	typeref:typename:__STD_TYPE __FSFILCNT_T_TYPE
__fsid_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSID_T_TYPE __fsid_t;	\/* Type of file system IDs.  *\/$/;"	v	typeref:typename:__STD_TYPE __FSID_T_TYPE
__fsword_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __FSWORD_T_TYPE __fsword_t;$/;"	v	typeref:typename:__STD_TYPE __FSWORD_T_TYPE
__g1_orig_size	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g1_orig_size;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__g1_start	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  __atomic_wide_counter __g1_start;$/;"	m	struct:__pthread_cond_s	typeref:typename:__atomic_wide_counter	access:public
__g_signals	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_signals[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__g_size	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_size[2] __LOCK_ALIGNMENT;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]__LOCK_ALIGNMENT	access:public
__get	d:/include/c++/14/bits/stl_pair.h	/^	__get(pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp1 &	access:public	signature:(pair<_Tp1,_Tp2> & __pair)
__get	d:/include/c++/14/bits/stl_pair.h	/^	__get(pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp2 &	access:public	signature:(pair<_Tp1,_Tp2> & __pair)
__get_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __get_first_arg$/;"	s	namespace:std
__get_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __get_first_arg<_SomeTemplate<_Tp, _Types...>>$/;"	s	namespace:std
__get_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      __get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOTHROW$/;"	f	namespace:std::__detail	typeref:typename:_Tp *	signature:(ptrdiff_t __len)
__getc_unlocked_body	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __getc_unlocked_body(/;"	d	signature:(_fp)
__getdelim	d:/include/stdio.h	/^extern __ssize_t __getdelim (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,int __delimiter,FILE * __restrict __stream)
__getreent	../../../../../../usr/include/cygwin/config.h	/^extern inline struct _reent *__getreent (void)$/;"	f	typeref:struct:_reent *	signature:(void)
__getreent	../../../../../../usr/include/sys/reent.h	/^  struct _reent * __getreent (void);$/;"	p	typeref:struct:_reent *	signature:(void)
__gid_t	../../../../../../usr/include/machine/_types.h	/^typedef __uint32_t __gid_t;$/;"	t	typeref:typename:__uint32_t
__gid_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned short __gid_t;$/;"	t	typeref:typename:unsigned short
__gid_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __GID_T_TYPE __gid_t;	\/* Type of group identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __GID_T_TYPE
__glibc_c99_flexarr_available	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_c99_flexarr_available /;"	d
__glibc_clang_prereq	d:/include/features.h	/^# define __glibc_clang_prereq(/;"	d	signature:(maj,min)
__glibc_fortify	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_fortify(/;"	d	signature:(f,__l,__s,__osz,...)
__glibc_fortify_n	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_fortify_n(/;"	d	signature:(f,__l,__s,__osz,...)
__glibc_has_attribute	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_has_attribute(/;"	d	signature:(attr)
__glibc_has_builtin	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_has_builtin(/;"	d	signature:(name)
__glibc_has_extension	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_has_extension(/;"	d	signature:(ext)
__glibc_likely	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_likely(/;"	d	signature:(cond)
__glibc_macro_warning	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning(/;"	d	signature:(message)
__glibc_macro_warning	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning(/;"	d	signature:(msg)
__glibc_macro_warning1	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_macro_warning1(/;"	d	signature:(message)
__glibc_objsize	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_objsize(/;"	d	signature:(__o)
__glibc_objsize0	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_objsize0(/;"	d	signature:(__o)
__glibc_safe_len_cond	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __glibc_safe_len_cond(/;"	d	signature:(__l,__s,__osz)
__glibc_safe_or_unknown_len	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __glibc_safe_or_unknown_len(/;"	d	signature:(__l,__s,__osz)
__glibc_unlikely	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __glibc_unlikely(/;"	d	signature:(cond)
__glibc_unsafe_len	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __glibc_unsafe_len(/;"	d	signature:(__l,__s,__osz)
__glibc_unsigned_or_positive	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __glibc_unsigned_or_positive(/;"	d	signature:(__l)
__glibcxx_adaptor_iterator_pair_constructor	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_adaptor_iterator_pair_constructor /;"	d
__glibcxx_addressof_constexpr	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_addressof_constexpr /;"	d
__glibcxx_allocator_traits_is_always_equal	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_allocator_traits_is_always_equal /;"	d
__glibcxx_any	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_any /;"	d
__glibcxx_apply	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_apply /;"	d
__glibcxx_array_constexpr	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_array_constexpr /;"	d
__glibcxx_as_const	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_as_const /;"	d
__glibcxx_assume_aligned	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_assume_aligned /;"	d
__glibcxx_atomic_flag_test	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_flag_test /;"	d
__glibcxx_atomic_float	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_float /;"	d
__glibcxx_atomic_is_always_lock_free	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_is_always_lock_free /;"	d
__glibcxx_atomic_lock_free_type_aliases	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_lock_free_type_aliases /;"	d
__glibcxx_atomic_ref	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_ref /;"	d
__glibcxx_atomic_shared_ptr	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_shared_ptr /;"	d
__glibcxx_atomic_value_initialization	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_value_initialization /;"	d
__glibcxx_atomic_wait	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_atomic_wait /;"	d
__glibcxx_barrier	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_barrier /;"	d
__glibcxx_bind_back	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bind_back /;"	d
__glibcxx_bind_front	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bind_front /;"	d
__glibcxx_bit_cast	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bit_cast /;"	d
__glibcxx_bitops	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bitops /;"	d
__glibcxx_bool_constant	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bool_constant /;"	d
__glibcxx_bounded_array_traits	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_bounded_array_traits /;"	d
__glibcxx_boyer_moore_searcher	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_boyer_moore_searcher /;"	d
__glibcxx_byte	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_byte /;"	d
__glibcxx_byteswap	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_byteswap /;"	d
__glibcxx_chrono	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_chrono /;"	d
__glibcxx_chrono_udls	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_chrono_udls /;"	d
__glibcxx_clamp	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_clamp /;"	d
__glibcxx_class_requires	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires(/;"	d	signature:(_a,_C)
__glibcxx_class_requires	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires(/;"	d	signature:(_a,_b)
__glibcxx_class_requires2	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires2(/;"	d	signature:(_a,_b,_C)
__glibcxx_class_requires2	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires2(/;"	d	signature:(_a,_b,_c)
__glibcxx_class_requires3	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires3(/;"	d	signature:(_a,_b,_c,_C)
__glibcxx_class_requires3	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires3(/;"	d	signature:(_a,_b,_c,_d)
__glibcxx_class_requires4	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires4(/;"	d	signature:(_a,_b,_c,_d,_C)
__glibcxx_class_requires4	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_class_requires4(/;"	d	signature:(_a,_b,_c,_d,_e)
__glibcxx_complex_udls	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_complex_udls /;"	d
__glibcxx_concepts	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_concepts /;"	d
__glibcxx_constexpr_algorithms	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_algorithms /;"	d
__glibcxx_constexpr_bitset	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_bitset /;"	d
__glibcxx_constexpr_char_traits	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_char_traits /;"	d
__glibcxx_constexpr_charconv	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_charconv /;"	d
__glibcxx_constexpr_complex	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_complex /;"	d
__glibcxx_constexpr_dynamic_alloc	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_dynamic_alloc /;"	d
__glibcxx_constexpr_functional	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_functional /;"	d
__glibcxx_constexpr_iterator	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_iterator /;"	d
__glibcxx_constexpr_memory	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_memory /;"	d
__glibcxx_constexpr_numeric	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_numeric /;"	d
__glibcxx_constexpr_string	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_string /;"	d
__glibcxx_constexpr_string_view	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_string_view /;"	d
__glibcxx_constexpr_tuple	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_tuple /;"	d
__glibcxx_constexpr_typeinfo	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_typeinfo /;"	d
__glibcxx_constexpr_utility	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_utility /;"	d
__glibcxx_constexpr_vector	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_constexpr_vector /;"	d
__glibcxx_coroutine	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_coroutine /;"	d
__glibcxx_destroying_delete	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_destroying_delete /;"	d
__glibcxx_digits10	d:/include/c++/14/ext/numeric_traits.h	/^#define __glibcxx_digits10(/;"	d	signature:(_Tp)
__glibcxx_enable_shared_from_this	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_enable_shared_from_this /;"	d
__glibcxx_endian	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_endian /;"	d
__glibcxx_erase_if	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_erase_if /;"	d
__glibcxx_exchange_function	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_exchange_function /;"	d
__glibcxx_execution	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_execution /;"	d
__glibcxx_expected	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_expected /;"	d
__glibcxx_filesystem	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_filesystem /;"	d
__glibcxx_floating	d:/include/c++/14/ext/numeric_traits.h	/^#define __glibcxx_floating(/;"	d	signature:(_Tp,_Fval,_Dval,_LDval)
__glibcxx_format	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_format /;"	d
__glibcxx_format_uchar	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_format_uchar /;"	d
__glibcxx_formatters	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_formatters /;"	d
__glibcxx_forward_like	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_forward_like /;"	d
__glibcxx_freestanding_algorithm	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_algorithm /;"	d
__glibcxx_freestanding_array	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_array /;"	d
__glibcxx_freestanding_cstring	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_cstring /;"	d
__glibcxx_freestanding_expected	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_expected /;"	d
__glibcxx_freestanding_optional	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_optional /;"	d
__glibcxx_freestanding_string_view	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_string_view /;"	d
__glibcxx_freestanding_variant	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_freestanding_variant /;"	d
__glibcxx_fstream_native_handle	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_fstream_native_handle /;"	d
__glibcxx_function_requires	d:/include/c++/14/bits/concept_check.h	/^#define __glibcxx_function_requires(/;"	d	signature:(...)
__glibcxx_gcd	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_gcd /;"	d
__glibcxx_gcd_lcm	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_gcd_lcm /;"	d
__glibcxx_generator	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_generator /;"	d
__glibcxx_generic_associative_lookup	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_generic_associative_lookup /;"	d
__glibcxx_generic_unordered_lookup	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_generic_unordered_lookup /;"	d
__glibcxx_hardware_interference_size	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_hardware_interference_size /;"	d
__glibcxx_has_unique_object_representations	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_has_unique_object_representations /;"	d
__glibcxx_hypot	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_hypot /;"	d
__glibcxx_incomplete_container_elements	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_incomplete_container_elements /;"	d
__glibcxx_int_pow2	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_int_pow2 /;"	d
__glibcxx_integer_comparison_functions	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_integer_comparison_functions /;"	d
__glibcxx_integer_sequence	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_integer_sequence /;"	d
__glibcxx_integral_constant_callable	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_integral_constant_callable /;"	d
__glibcxx_interpolate	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_interpolate /;"	d
__glibcxx_invoke	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_invoke /;"	d
__glibcxx_invoke_r	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_invoke_r /;"	d
__glibcxx_ios_noreplace	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ios_noreplace /;"	d
__glibcxx_is_aggregate	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_aggregate /;"	d
__glibcxx_is_constant_evaluated	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_constant_evaluated /;"	d
__glibcxx_is_final	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_final /;"	d
__glibcxx_is_invocable	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_invocable /;"	d
__glibcxx_is_layout_compatible	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_layout_compatible /;"	d
__glibcxx_is_nothrow_convertible	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_nothrow_convertible /;"	d
__glibcxx_is_null_pointer	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_null_pointer /;"	d
__glibcxx_is_pointer_interconvertible	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_pointer_interconvertible /;"	d
__glibcxx_is_scoped_enum	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_scoped_enum /;"	d
__glibcxx_is_swappable	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_is_swappable /;"	d
__glibcxx_jthread	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_jthread /;"	d
__glibcxx_latch	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_latch /;"	d
__glibcxx_launder	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_launder /;"	d
__glibcxx_lcm	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_lcm /;"	d
__glibcxx_list_remove_return_type	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_list_remove_return_type /;"	d
__glibcxx_logical_traits	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_logical_traits /;"	d
__glibcxx_make_from_tuple	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_make_from_tuple /;"	d
__glibcxx_make_obj_using_allocator	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_make_obj_using_allocator /;"	d
__glibcxx_make_reverse_iterator	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_make_reverse_iterator /;"	d
__glibcxx_make_unique	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_make_unique /;"	d
__glibcxx_map_try_emplace	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_map_try_emplace /;"	d
__glibcxx_math_constants	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_math_constants /;"	d
__glibcxx_math_spec_funcs	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_math_spec_funcs /;"	d
__glibcxx_math_special_functions	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_math_special_functions /;"	d
__glibcxx_max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^#define __glibcxx_max_digits10(/;"	d	signature:(_Tp)
__glibcxx_max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^#define __glibcxx_max_exponent10(/;"	d	signature:(_Tp)
__glibcxx_memory_resource	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_memory_resource /;"	d
__glibcxx_move_iterator_concept	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_move_iterator_concept /;"	d
__glibcxx_move_only_function	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_move_only_function /;"	d
__glibcxx_node_extract	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_node_extract /;"	d
__glibcxx_nonmember_container_access	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_nonmember_container_access /;"	d
__glibcxx_not_fn	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_not_fn /;"	d
__glibcxx_null_iterators	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_null_iterators /;"	d
__glibcxx_optional	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_optional /;"	d
__glibcxx_out_ptr	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_out_ptr /;"	d
__glibcxx_parallel_algorithm	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_parallel_algorithm /;"	d
__glibcxx_polymorphic_allocator	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_polymorphic_allocator /;"	d
__glibcxx_print	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_print /;"	d
__glibcxx_quoted_string_io	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_quoted_string_io /;"	d
__glibcxx_ranges	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges /;"	d
__glibcxx_ranges_as_const	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_as_const /;"	d
__glibcxx_ranges_as_rvalue	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_as_rvalue /;"	d
__glibcxx_ranges_cartesian_product	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_cartesian_product /;"	d
__glibcxx_ranges_chunk	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_chunk /;"	d
__glibcxx_ranges_chunk_by	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_chunk_by /;"	d
__glibcxx_ranges_contains	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_contains /;"	d
__glibcxx_ranges_enumerate	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_enumerate /;"	d
__glibcxx_ranges_find_last	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_find_last /;"	d
__glibcxx_ranges_fold	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_fold /;"	d
__glibcxx_ranges_iota	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_iota /;"	d
__glibcxx_ranges_join_with	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_join_with /;"	d
__glibcxx_ranges_repeat	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_repeat /;"	d
__glibcxx_ranges_slide	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_slide /;"	d
__glibcxx_ranges_stride	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_stride /;"	d
__glibcxx_ranges_to_container	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_to_container /;"	d
__glibcxx_ranges_zip	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ranges_zip /;"	d
__glibcxx_ratio	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ratio /;"	d
__glibcxx_raw_memory_algorithms	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_raw_memory_algorithms /;"	d
__glibcxx_reference_from_temporary	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_reference_from_temporary /;"	d
__glibcxx_reference_wrapper	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_reference_wrapper /;"	d
__glibcxx_remove_cvref	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_remove_cvref /;"	d
__glibcxx_requires_can_decrement_range	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_can_decrement_range(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_can_increment	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_can_increment(/;"	d	signature:(_First,_Size)
__glibcxx_requires_can_increment_range	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_can_increment_range(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_cond	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_cond(/;"	d	signature:(_Cond,_Msg)
__glibcxx_requires_heap	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_heap(/;"	d	signature:(_First,_Last)
__glibcxx_requires_heap_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_heap_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_irreflexive	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_irreflexive(/;"	d	signature:(_First,_Last)
__glibcxx_requires_irreflexive2	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_irreflexive2(/;"	d	signature:(_First,_Last)
__glibcxx_requires_irreflexive_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_irreflexive_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_irreflexive_pred2	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_irreflexive_pred2(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_non_empty_range	d:/include/c++/14/debug/assertions.h	/^# define __glibcxx_requires_non_empty_range(/;"	d	signature:(_First,_Last)
__glibcxx_requires_nonempty	d:/include/c++/14/debug/assertions.h	/^# define __glibcxx_requires_nonempty(/;"	d	signature:()
__glibcxx_requires_partitioned_lower	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_partitioned_lower(/;"	d	signature:(_First,_Last,_Value)
__glibcxx_requires_partitioned_lower_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_partitioned_lower_pred(/;"	d	signature:(_First,_Last,_Value,_Pred)
__glibcxx_requires_partitioned_upper	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_partitioned_upper(/;"	d	signature:(_First,_Last,_Value)
__glibcxx_requires_partitioned_upper_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_partitioned_upper_pred(/;"	d	signature:(_First,_Last,_Value,_Pred)
__glibcxx_requires_sorted	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_sorted(/;"	d	signature:(_First,_Last)
__glibcxx_requires_sorted_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_sorted_pred(/;"	d	signature:(_First,_Last,_Pred)
__glibcxx_requires_sorted_set	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_sorted_set(/;"	d	signature:(_First1,_Last1,_First2)
__glibcxx_requires_sorted_set_pred	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_sorted_set_pred(/;"	d	signature:(_First1,_Last1,_First2,_Pred)
__glibcxx_requires_string	d:/include/c++/14/debug/debug.h	/^#  define __glibcxx_requires_string(/;"	d	signature:(_String)
__glibcxx_requires_string	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_string(/;"	d	signature:(_String)
__glibcxx_requires_string_len	d:/include/c++/14/debug/debug.h	/^#  define __glibcxx_requires_string_len(/;"	d	signature:(_String,_Len)
__glibcxx_requires_string_len	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_string_len(/;"	d	signature:(_String,_Len)
__glibcxx_requires_subscript	d:/include/c++/14/debug/assertions.h	/^# define __glibcxx_requires_subscript(/;"	d	signature:(_N)
__glibcxx_requires_valid_range	d:/include/c++/14/debug/debug.h	/^# define __glibcxx_requires_valid_range(/;"	d	signature:(_First,_Last)
__glibcxx_result_of_sfinae	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_result_of_sfinae /;"	d
__glibcxx_robust_nonmodifying_seq_ops	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_robust_nonmodifying_seq_ops /;"	d
__glibcxx_sample	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_sample /;"	d
__glibcxx_saturation_arithmetic	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_saturation_arithmetic /;"	d
__glibcxx_scoped_lock	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_scoped_lock /;"	d
__glibcxx_semaphore	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_semaphore /;"	d
__glibcxx_shared_mutex	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_shared_mutex /;"	d
__glibcxx_shared_ptr_arrays	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_shared_ptr_arrays /;"	d
__glibcxx_shared_ptr_weak_type	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_shared_ptr_weak_type /;"	d
__glibcxx_shared_timed_mutex	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_shared_timed_mutex /;"	d
__glibcxx_shift	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_shift /;"	d
__glibcxx_smart_ptr_for_overwrite	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_smart_ptr_for_overwrite /;"	d
__glibcxx_source_location	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_source_location /;"	d
__glibcxx_span	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_span /;"	d
__glibcxx_spanstream	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_spanstream /;"	d
__glibcxx_ssize	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_ssize /;"	d
__glibcxx_stacktrace	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_stacktrace /;"	d
__glibcxx_starts_ends_with	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_starts_ends_with /;"	d
__glibcxx_stdatomic_h	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_stdatomic_h /;"	d
__glibcxx_string_contains	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_string_contains /;"	d
__glibcxx_string_resize_and_overwrite	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_string_resize_and_overwrite /;"	d
__glibcxx_string_udls	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_string_udls /;"	d
__glibcxx_string_view	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_string_view /;"	d
__glibcxx_syncbuf	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_syncbuf /;"	d
__glibcxx_text_encoding	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_text_encoding /;"	d
__glibcxx_three_way_comparison	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_three_way_comparison /;"	d
__glibcxx_to_address	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_to_address /;"	d
__glibcxx_to_array	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_to_array /;"	d
__glibcxx_to_chars	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_to_chars /;"	d
__glibcxx_to_string	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_to_string /;"	d
__glibcxx_to_underlying	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_to_underlying /;"	d
__glibcxx_transformation_trait_aliases	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_transformation_trait_aliases /;"	d
__glibcxx_transparent_operators	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_transparent_operators /;"	d
__glibcxx_tuple_element_t	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_tuple_element_t /;"	d
__glibcxx_tuple_like	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_tuple_like /;"	d
__glibcxx_tuples_by_type	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_tuples_by_type /;"	d
__glibcxx_type_identity	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_type_identity /;"	d
__glibcxx_type_trait_variable_templates	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_type_trait_variable_templates /;"	d
__glibcxx_uncaught_exceptions	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_uncaught_exceptions /;"	d
__glibcxx_unordered_map_try_emplace	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_unordered_map_try_emplace /;"	d
__glibcxx_unreachable	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_unreachable /;"	d
__glibcxx_unwrap_ref	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_unwrap_ref /;"	d
__glibcxx_variant	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_variant /;"	d
__glibcxx_void_t	d:/include/c++/14/bits/version.h	/^#  define __glibcxx_void_t /;"	d
__gnu_cxx	d:/include/c++/14/bits/char_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/bits/predefined_ops.h	/^namespace __gnu_cxx$/;"	n
__gnu_cxx	d:/include/c++/14/bits/stl_iterator.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/aligned_buffer.h	/^namespace __gnu_cxx$/;"	n
__gnu_cxx	d:/include/c++/14/ext/alloc_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/atomicity.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/concurrence.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/numeric_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/string_conversions.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx	d:/include/c++/14/ext/type_traits.h	/^namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)$/;"	n
__gnu_cxx::_Char_types	d:/include/c++/14/bits/char_traits.h	/^    struct _Char_types$/;"	s	namespace:__gnu_cxx
__gnu_cxx::_Char_types::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef unsigned long   int_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:unsigned long	access:public
__gnu_cxx::_Char_types::off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::streamoff  off_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streamoff	access:public
__gnu_cxx::_Char_types::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::streampos  pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streampos	access:public
__gnu_cxx::_Char_types::state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::mbstate_t	access:public
__gnu_cxx::_Lock_policy	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	g	namespace:__gnu_cxx
__gnu_cxx::_S_atomic	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
__gnu_cxx::_S_mutex	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
__gnu_cxx::_S_single	d:/include/c++/14/ext/concurrence.h	/^  enum _Lock_policy { _S_single, _S_mutex, _S_atomic }; $/;"	e	enum:__gnu_cxx::_Lock_policy	access:public
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<int>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<long long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<short>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __add_unsigned<signed char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__add_unsigned::__if_type	d:/include/c++/14/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__if_type::__type	access:public
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned char	access:public
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned int	access:public
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long	access:public
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long long	access:public
__gnu_cxx::__add_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned short	access:public
__gnu_cxx::__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^    struct __aligned_buffer$/;"	s	namespace:__gnu_cxx	inherits:std::aligned_storage<sizeof(_Tp),__alignof__(_Tp)>
__gnu_cxx::__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^    using __aligned_buffer = __aligned_membuf<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__aligned_membuf<_Tp>
__gnu_cxx::__aligned_buffer::_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:const void *	access:public	signature:() const
__gnu_cxx::__aligned_buffer::_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:void *	access:public	signature:()
__gnu_cxx::__aligned_buffer::_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:const _Tp *	access:public	signature:() const
__gnu_cxx::__aligned_buffer::_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_buffer	typeref:typename:_Tp *	access:public	signature:()
__gnu_cxx::__aligned_buffer::_M_storage	d:/include/c++/14/ext/aligned_buffer.h	/^	std::aligned_storage<sizeof(_Tp), __alignof__(_Tp)>::type _M_storage;$/;"	m	struct:__gnu_cxx::__aligned_buffer	typeref:typename:std::aligned_storage<sizeof (_Tp),__alignof__ (_Tp)>::type	access:public
__gnu_cxx::__aligned_buffer::__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_buffer() = default;$/;"	p	struct:__gnu_cxx::__aligned_buffer	access:public	signature:()
__gnu_cxx::__aligned_buffer::__aligned_buffer	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_buffer(std::nullptr_t) { }$/;"	f	struct:__gnu_cxx::__aligned_buffer	access:public	signature:(std::nullptr_t)
__gnu_cxx::__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^    struct __aligned_membuf$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__aligned_membuf::_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:const void *	access:public	signature:() const
__gnu_cxx::__aligned_membuf::_M_addr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_addr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:void *	access:public	signature:()
__gnu_cxx::__aligned_membuf::_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() const noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:const _Tp *	access:public	signature:() const
__gnu_cxx::__aligned_membuf::_M_ptr	d:/include/c++/14/ext/aligned_buffer.h	/^      _M_ptr() noexcept$/;"	f	struct:__gnu_cxx::__aligned_membuf	typeref:typename:_Tp *	access:public	signature:()
__gnu_cxx::__aligned_membuf::_M_storage	d:/include/c++/14/ext/aligned_buffer.h	/^      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];$/;"	m	struct:__gnu_cxx::__aligned_membuf	typeref:typename:unsigned char[]	access:public
__gnu_cxx::__aligned_membuf::_Tp2	d:/include/c++/14/ext/aligned_buffer.h	/^      struct _Tp2 { _Tp _M_t; };$/;"	s	struct:__gnu_cxx::__aligned_membuf	access:public
__gnu_cxx::__aligned_membuf::_Tp2::_M_t	d:/include/c++/14/ext/aligned_buffer.h	/^      struct _Tp2 { _Tp _M_t; };$/;"	m	struct:__gnu_cxx::__aligned_membuf::_Tp2	typeref:typename:_Tp	access:public
__gnu_cxx::__aligned_membuf::__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_membuf() = default;$/;"	p	struct:__gnu_cxx::__aligned_membuf	access:public	signature:()
__gnu_cxx::__aligned_membuf::__aligned_membuf	d:/include/c++/14/ext/aligned_buffer.h	/^      __aligned_membuf(std::nullptr_t) { }$/;"	f	struct:__gnu_cxx::__aligned_membuf	access:public	signature:(std::nullptr_t)
__gnu_cxx::__alloc_traits	d:/include/c++/14/ext/alloc_traits.h	/^  struct __alloc_traits$/;"	s	namespace:__gnu_cxx	inherits:std::allocator_traits<_Alloc>
__gnu_cxx::__alloc_traits::_Base_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef std::allocator_traits<_Alloc>           _Base_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::allocator_traits<_Alloc>	access:public
__gnu_cxx::__alloc_traits::_S_always_equal	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_always_equal()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_nothrow_move	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_nothrow_move()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static _GLIBCXX14_CONSTEXPR void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Alloc & __b)
__gnu_cxx::__alloc_traits::_S_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static void _S_on_swap(_Alloc& __a, _Alloc& __b)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,_Alloc & __b)
__gnu_cxx::__alloc_traits::_S_propagate_on_copy_assign	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_copy_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_propagate_on_move_assign	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_move_assign()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_propagate_on_swap	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr bool _S_propagate_on_swap()$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:bool	access:public	signature:()
__gnu_cxx::__alloc_traits::_S_select_on_copy	d:/include/c++/14/ext/alloc_traits.h	/^    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:const _Alloc &	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::_S_select_on_copy	d:/include/c++/14/ext/alloc_traits.h	/^    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::__is_custom_pointer	d:/include/c++/14/ext/alloc_traits.h	/^      using __is_custom_pointer$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::__and_<std::is_same<pointer,_Ptr>,std::__not_<std::is_pointer<_Ptr>>>	access:private
__gnu_cxx::__alloc_traits::allocate	d:/include/c++/14/ext/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, _Hint __hint)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n,_Hint __hint)
__gnu_cxx::__alloc_traits::allocate	d:/include/c++/14/ext/alloc_traits.h	/^    allocate(_Alloc& __a, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n)
__gnu_cxx::__alloc_traits::allocator_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef _Alloc allocator_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public
__gnu_cxx::__alloc_traits::const_pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::const_pointer          const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_pointer	access:public
__gnu_cxx::__alloc_traits::const_pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::const_pointer      const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::const_pointer	access:public
__gnu_cxx::__alloc_traits::const_reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef const value_type&                       const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:const value_type &	access:public
__gnu_cxx::__alloc_traits::const_reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::const_reference        const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_reference	access:public
__gnu_cxx::__alloc_traits::construct	d:/include/c++/14/ext/alloc_traits.h	/^      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p,_Args &&...__args)
__gnu_cxx::__alloc_traits::construct	d:/include/c++/14/ext/alloc_traits.h	/^      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,const _Tp & __arg)
__gnu_cxx::__alloc_traits::deallocate	d:/include/c++/14/ext/alloc_traits.h	/^    static void deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
__gnu_cxx::__alloc_traits::destroy	d:/include/c++/14/ext/alloc_traits.h	/^      destroy(_Alloc& __a, _Ptr __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p)
__gnu_cxx::__alloc_traits::destroy	d:/include/c++/14/ext/alloc_traits.h	/^    static void destroy(_Alloc& __a, pointer __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p)
__gnu_cxx::__alloc_traits::difference_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::difference_type        difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::difference_type	access:public
__gnu_cxx::__alloc_traits::difference_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::difference_type    difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::difference_type	access:public
__gnu_cxx::__alloc_traits::max_size	d:/include/c++/14/ext/alloc_traits.h	/^    static size_type max_size(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:size_type	access:public	signature:(const _Alloc & __a)
__gnu_cxx::__alloc_traits::pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::pointer                pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::pointer	access:public
__gnu_cxx::__alloc_traits::pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::pointer            pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::pointer	access:public
__gnu_cxx::__alloc_traits::rebind	d:/include/c++/14/ext/alloc_traits.h	/^      struct rebind$/;"	s	struct:__gnu_cxx::__alloc_traits	access:public
__gnu_cxx::__alloc_traits::rebind::other	d:/include/c++/14/ext/alloc_traits.h	/^      { typedef typename _Alloc::template rebind<_Tp>::other other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
__gnu_cxx::__alloc_traits::rebind::other	d:/include/c++/14/ext/alloc_traits.h	/^      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Base_type::template rebind_alloc<_Tp>	access:public
__gnu_cxx::__alloc_traits::reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::reference              reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::reference	access:public
__gnu_cxx::__alloc_traits::reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef value_type&                             reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:value_type &	access:public
__gnu_cxx::__alloc_traits::size_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::size_type              size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::size_type	access:public
__gnu_cxx::__alloc_traits::size_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::size_type          size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::size_type	access:public
__gnu_cxx::__alloc_traits::value_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::value_type             value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::value_type	access:public
__gnu_cxx::__alloc_traits::value_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::value_type         value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::value_type	access:public
__gnu_cxx::__atomic_add	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word * __mem,int __val)
__gnu_cxx::__atomic_add	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;$/;"	p	namespace:__gnu_cxx	typeref:typename:void	signature:(volatile _Atomic_word *,int)
__gnu_cxx::__atomic_add_dispatch	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__atomic_add_single	d:/include/c++/14/ext/atomicity.h	/^  __atomic_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__concurrence_broadcast_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_broadcast_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__gnu_cxx::__concurrence_broadcast_error::what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_broadcast_error	typeref:typename:char const *	access:public	signature:() const
__gnu_cxx::__concurrence_lock_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_lock_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__gnu_cxx::__concurrence_lock_error::what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_lock_error	typeref:typename:char const *	access:public	signature:() const
__gnu_cxx::__concurrence_unlock_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_unlock_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__gnu_cxx::__concurrence_unlock_error::what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_unlock_error	typeref:typename:char const *	access:public	signature:() const
__gnu_cxx::__concurrence_wait_error	d:/include/c++/14/ext/concurrence.h	/^  class __concurrence_wait_error : public std::exception$/;"	c	namespace:__gnu_cxx	inherits:std::exception
__gnu_cxx::__concurrence_wait_error::what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_wait_error	typeref:typename:char const *	access:public	signature:() const
__gnu_cxx::__cond	d:/include/c++/14/ext/concurrence.h	/^  class __cond$/;"	c	namespace:__gnu_cxx
__gnu_cxx::__cond::_M_cond	d:/include/c++/14/ext/concurrence.h	/^    __gthread_cond_t _M_cond = __GTHREAD_COND_INIT;$/;"	m	class:__gnu_cxx::__cond	typeref:typename:__gthread_cond_t	access:private
__gnu_cxx::__cond::__cond	d:/include/c++/14/ext/concurrence.h	/^    __cond() $/;"	f	class:__gnu_cxx::__cond	access:public	signature:()
__gnu_cxx::__cond::__cond	d:/include/c++/14/ext/concurrence.h	/^    __cond(const __cond&);$/;"	p	class:__gnu_cxx::__cond	access:private	signature:(const __cond &)
__gnu_cxx::__cond::broadcast	d:/include/c++/14/ext/concurrence.h	/^    void broadcast()$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:()
__gnu_cxx::__cond::operator =	d:/include/c++/14/ext/concurrence.h	/^    __cond& operator=(const __cond&);$/;"	p	class:__gnu_cxx::__cond	typeref:typename:__cond &	access:private	signature:(const __cond &)
__gnu_cxx::__cond::wait	d:/include/c++/14/ext/concurrence.h	/^    void wait(__mutex *mutex)$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:(__mutex * mutex)
__gnu_cxx::__cond::wait_recursive	d:/include/c++/14/ext/concurrence.h	/^    void wait_recursive(__recursive_mutex *mutex)$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:(__recursive_mutex * mutex)
__gnu_cxx::__cond::~__cond	d:/include/c++/14/ext/concurrence.h	/^    ~__cond() $/;"	f	class:__gnu_cxx::__cond	access:public	signature:()
__gnu_cxx::__conditional_type	d:/include/c++/14/ext/type_traits.h	/^    struct __conditional_type$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__conditional_type	d:/include/c++/14/ext/type_traits.h	/^    struct __conditional_type<false, _Iftrue, _Iffalse>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__conditional_type::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iffalse	access:public
__gnu_cxx::__conditional_type::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iftrue	access:public
__gnu_cxx::__default_lock_policy	d:/include/c++/14/ext/concurrence.h	/^  _GLIBCXX17_INLINE const _Lock_policy __default_lock_policy =$/;"	v	namespace:__gnu_cxx	typeref:typename:_GLIBCXX17_INLINE const _Lock_policy
__gnu_cxx::__enable_if	d:/include/c++/14/ext/type_traits.h	/^    struct __enable_if $/;"	s	namespace:__gnu_cxx
__gnu_cxx::__enable_if	d:/include/c++/14/ext/type_traits.h	/^    struct __enable_if<true, _Tp>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__enable_if::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	typeref:typename:_Tp	access:public
__gnu_cxx::__exchange_and_add	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(volatile _Atomic_word * __mem,int __val)
__gnu_cxx::__exchange_and_add	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add(volatile _Atomic_word*, int) _GLIBCXX_NOTHROW;$/;"	p	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(volatile _Atomic_word *,int)
__gnu_cxx::__exchange_and_add_dispatch	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__exchange_and_add_single	d:/include/c++/14/ext/atomicity.h	/^  __exchange_and_add_single(_Atomic_word* __mem, int __val)$/;"	f	namespace:__gnu_cxx	typeref:typename:_Atomic_word	signature:(_Atomic_word * __mem,int __val)
__gnu_cxx::__int_traits	d:/include/c++/14/ext/numeric_traits.h	/^    using __int_traits = __numeric_traits_integer<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__numeric_traits_integer<_Tp>
__gnu_cxx::__is_integer_nonstrict	d:/include/c++/14/ext/numeric_traits.h	/^    struct __is_integer_nonstrict$/;"	s	namespace:__gnu_cxx	inherits:std::__is_integer<_Tp>
__gnu_cxx::__is_integer_nonstrict::__anonbbda5aa00103	d:/include/c++/14/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	g	struct:__gnu_cxx::__is_integer_nonstrict	access:public
__gnu_cxx::__is_integer_nonstrict::__width	d:/include/c++/14/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	e	enum:__gnu_cxx::__is_integer_nonstrict::__anonbbda5aa00103	access:public
__gnu_cxx::__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^    __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(_Type)
__gnu_cxx::__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^    __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(_Type * __ptr)
__gnu_cxx::__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^  __is_null_pointer(std::nullptr_t)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(std::nullptr_t)
__gnu_cxx::__is_single_threaded	d:/include/c++/14/ext/atomicity.h	/^  __is_single_threaded() _GLIBCXX_NOTHROW$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:()
__gnu_cxx::__mutex	d:/include/c++/14/ext/concurrence.h	/^  class __mutex $/;"	c	namespace:__gnu_cxx
__gnu_cxx::__mutex::_M_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_mutex_t _M_mutex = __GTHREAD_MUTEX_INIT;$/;"	m	class:__gnu_cxx::__mutex	typeref:typename:__gthread_mutex_t	access:private
__gnu_cxx::__mutex::__mutex	d:/include/c++/14/ext/concurrence.h	/^    __mutex() $/;"	f	class:__gnu_cxx::__mutex	access:public	signature:()
__gnu_cxx::__mutex::__mutex	d:/include/c++/14/ext/concurrence.h	/^    __mutex(const __mutex&);$/;"	p	class:__gnu_cxx::__mutex	access:private	signature:(const __mutex &)
__gnu_cxx::__mutex::gthread_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_mutex_t* gthread_mutex(void)$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:__gthread_mutex_t *	access:public	signature:(void)
__gnu_cxx::__mutex::lock	d:/include/c++/14/ext/concurrence.h	/^    void lock()$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:void	access:public	signature:()
__gnu_cxx::__mutex::operator =	d:/include/c++/14/ext/concurrence.h	/^    __mutex& operator=(const __mutex&);$/;"	p	class:__gnu_cxx::__mutex	typeref:typename:__mutex &	access:private	signature:(const __mutex &)
__gnu_cxx::__mutex::unlock	d:/include/c++/14/ext/concurrence.h	/^    void unlock()$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:void	access:public	signature:()
__gnu_cxx::__mutex::~__mutex	d:/include/c++/14/ext/concurrence.h	/^    ~__mutex() $/;"	f	class:__gnu_cxx::__mutex	access:public	signature:()
__gnu_cxx::__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class __normal_iterator$/;"	c	namespace:__gnu_cxx
__gnu_cxx::__normal_iterator::_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:protected
__gnu_cxx::__normal_iterator::__convertible_from	d:/include/c++/14/bits/stl_iterator.h	/^	using __convertible_from$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__enable_if_t<std::is_convertible<_Iter,_Iterator>::value>	access:protected
__gnu_cxx::__normal_iterator::__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __normal_iterator<_Iter,_Container> & __i)
__gnu_cxx::__normal_iterator::__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
__gnu_cxx::__normal_iterator::__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iterator & __i)
__gnu_cxx::__normal_iterator::__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef std::iterator_traits<_Iterator>		__traits_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::iterator_traits<_Iterator>	access:protected
__gnu_cxx::__normal_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR const _Iterator &	access:public	signature:() const
__gnu_cxx::__normal_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type 	difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::difference_type	access:public
__gnu_cxx::__normal_iterator::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::iterator_category	access:public
__gnu_cxx::__normal_iterator::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = std::__detail::__iter_concept<_Iterator>;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__detail::__iter_concept<_Iterator>	access:public
__gnu_cxx::__normal_iterator::iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:public
__gnu_cxx::__normal_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:() const
__gnu_cxx::__normal_iterator::operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
__gnu_cxx::__normal_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
__gnu_cxx::__normal_iterator::operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
__gnu_cxx::__normal_iterator::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
__gnu_cxx::__normal_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
__gnu_cxx::__normal_iterator::operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
__gnu_cxx::__normal_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:() const
__gnu_cxx::__normal_iterator::operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:(difference_type __n) const
__gnu_cxx::__normal_iterator::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer   	pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::pointer	access:public
__gnu_cxx::__normal_iterator::reference	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::reference 	reference;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::reference	access:public
__gnu_cxx::__normal_iterator::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::value_type	access:public
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_integer<_Value>
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<__ibm128>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<__ibm128>
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<__ieee128>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<__ieee128>
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<double>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<double>
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<float>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<float>
__gnu_cxx::__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<long double>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<longdouble>
__gnu_cxx::__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating<__ibm128>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating<__ieee128>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_floating::__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = 31;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = 33;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits10 = __glibcxx_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^      static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const bool	access:public
__gnu_cxx::__numeric_traits_floating::__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = 33;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = 36;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = __glibcxx_max_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = 308;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = 4932;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating::__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_floating<_Value>::__digits10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_floating<_Value>::__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^    const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const bool
__gnu_cxx::__numeric_traits_floating<_Value>::__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_floating<_Value>::__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_integer	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__numeric_traits_integer::__digits	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __digits$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const int	access:public
__gnu_cxx::__numeric_traits_integer::__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^      static const bool __is_signed = (_Value)(-1) < 0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const bool	access:public
__gnu_cxx::__numeric_traits_integer::__max	d:/include/c++/14/ext/numeric_traits.h	/^      static const _Value __max = __is_signed$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__gnu_cxx::__numeric_traits_integer::__min	d:/include/c++/14/ext/numeric_traits.h	/^      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__gnu_cxx::__numeric_traits_integer<_Value>::__digits	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_integer<_Value>::__digits;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const int
__gnu_cxx::__numeric_traits_integer<_Value>::__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^    const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const bool
__gnu_cxx::__numeric_traits_integer<_Value>::__max	d:/include/c++/14/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__gnu_cxx::__numeric_traits_integer<_Value>::__min	d:/include/c++/14/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__gnu_cxx::__ops	d:/include/c++/14/bits/predefined_ops.h	/^namespace __ops$/;"	n	namespace:__gnu_cxx
__gnu_cxx::__ops::_Iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_iter::_Iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Iter_comp_iter::_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^        operator()(_Iterator1 __it1, _Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_comp_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_to_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_to_iter::_Iter_comp_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Iterator1 __it1)
__gnu_cxx::__ops::_Iter_comp_to_iter::_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_to_iter::_M_it1	d:/include/c++/14/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_Iterator1	access:public
__gnu_cxx::__ops::_Iter_comp_to_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_comp_to_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_to_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_to_val::_Iter_comp_to_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_to_val(_Compare __comp, _Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp,_Value & __value)
__gnu_cxx::__ops::_Iter_comp_to_val::_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_to_val::_M_value	d:/include/c++/14/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_Value &	access:public
__gnu_cxx::__ops::_Iter_comp_to_val::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_comp_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
__gnu_cxx::__ops::_Iter_comp_val::_Iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_comp_val(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
__gnu_cxx::__ops::_Iter_comp_val::_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Iter_comp_val::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it, _Value& __val)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val)
__gnu_cxx::__ops::_Iter_equal_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_equal_to_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equal_to_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
__gnu_cxx::__ops::_Iter_equal_to_val	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_equal_to_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equal_to_val::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
__gnu_cxx::__ops::_Iter_equals_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_equals_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equals_iter::_Iter_equals_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_equals_iter(_Iterator1 __it1)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iterator1 __it1)
__gnu_cxx::__ops::_Iter_equals_iter::_M_it1	d:/include/c++/14/bits/predefined_ops.h	/^      _Iterator1 _M_it1;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_Iterator1	access:public
__gnu_cxx::__ops::_Iter_equals_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
__gnu_cxx::__ops::_Iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_equals_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_equals_val::_Iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_equals_val(_Value& __value)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Value & __value)
__gnu_cxx::__ops::_Iter_equals_val::_M_value	d:/include/c++/14/bits/predefined_ops.h	/^      _Value& _M_value;$/;"	m	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_Value &	access:public
__gnu_cxx::__ops::_Iter_equals_val::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_less_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_less_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
__gnu_cxx::__ops::_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Iter_less_val$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_less_val::_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^    _Iter_less_val(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
__gnu_cxx::__ops::_Iter_less_val::_Iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^    constexpr _Iter_less_val() = default;$/;"	p	struct:__gnu_cxx::__ops::_Iter_less_val	access:public	signature:()
__gnu_cxx::__ops::_Iter_less_val::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
__gnu_cxx::__ops::_Iter_negate	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_negate$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_negate::_Iter_negate	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_negate(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
__gnu_cxx::__ops::_Iter_negate::_M_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_Predicate	access:public
__gnu_cxx::__ops::_Iter_negate::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Iter_pred	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Iter_pred$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Iter_pred::_Iter_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Iter_pred(_Predicate __pred)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Predicate __pred)
__gnu_cxx::__ops::_Iter_pred::_M_pred	d:/include/c++/14/bits/predefined_ops.h	/^      _Predicate _M_pred;$/;"	m	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_Predicate	access:public
__gnu_cxx::__ops::_Iter_pred::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
__gnu_cxx::__ops::_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    struct _Val_comp_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Val_comp_iter::_M_comp	d:/include/c++/14/bits/predefined_ops.h	/^      _Compare _M_comp;$/;"	m	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_Compare	access:public
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(_Compare __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Compare __comp)
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(_Iter_comp_iter<_Compare>&& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_comp_iter<_Compare> && __comp)
__gnu_cxx::__ops::_Val_comp_iter::_Val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^      _Val_comp_iter(const _Iter_comp_iter<_Compare>& __comp)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iter_comp_iter<_Compare> & __comp)
__gnu_cxx::__ops::_Val_comp_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Value& __val, _Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it)
__gnu_cxx::__ops::_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  struct _Val_less_iter$/;"	s	namespace:__gnu_cxx::__ops
__gnu_cxx::__ops::_Val_less_iter::_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^    _Val_less_iter(_Iter_less_iter) { }$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Iter_less_iter)
__gnu_cxx::__ops::_Val_less_iter::_Val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^    constexpr _Val_less_iter() = default;$/;"	p	struct:__gnu_cxx::__ops::_Val_less_iter	access:public	signature:()
__gnu_cxx::__ops::_Val_less_iter::operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Value& __val, _Iterator __it) const$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it) const
__gnu_cxx::__ops::__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_comp_iter<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_to_iter<_Compare,_Iterator>	signature:(_Iter_comp_iter<_Compare> __comp,_Iterator __it)
__gnu_cxx::__ops::__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_iter<_Iterator>	signature:(_Iter_equal_to_iter,_Iterator __it)
__gnu_cxx::__ops::__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp, _Value &__val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_Iter_comp_to_val<_Compare,_Value> _GLIBCXX20_CONSTEXPR	signature:(_Compare __comp,_Value & __val)
__gnu_cxx::__ops::__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__gnu_cxx::__ops::__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_equal_to_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:(_Iter_equal_to_iter)
__gnu_cxx::__ops::__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:(_Iter_less_iter)
__gnu_cxx::__ops::__iter_equal_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_equal_to_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_iter	signature:()
__gnu_cxx::__ops::__iter_equal_to_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_equal_to_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:()
__gnu_cxx::__ops::__iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_equals_val(_Value& __val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_val<_Value>	signature:(_Value & __val)
__gnu_cxx::__ops::__iter_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_less_iter	signature:()
__gnu_cxx::__ops::__iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_less_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:()
__gnu_cxx::__ops::__negate	d:/include/c++/14/bits/predefined_ops.h	/^    __negate(_Iter_pred<_Predicate> __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_negate<_Predicate>	signature:(_Iter_pred<_Predicate> __pred)
__gnu_cxx::__ops::__pred_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __pred_iter(_Predicate __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_pred<_Predicate>	signature:(_Predicate __pred)
__gnu_cxx::__ops::__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __val_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Compare __comp)
__gnu_cxx::__ops::__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__gnu_cxx::__ops::__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __val_comp_iter(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:(_Iter_less_iter)
__gnu_cxx::__ops::__val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __val_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:()
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float128>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float16>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float32>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float64>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<__gnu_cxx::__bfloat16_t>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<double>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<float>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<long double>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float128 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float128	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float16 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float16	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float32 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float32	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float64 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float64	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef __gnu_cxx::__bfloat16_t __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:__gnu_cxx::__bfloat16_t	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:double	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef float __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:float	access:public
__gnu_cxx::__promote::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:long double	access:public
__gnu_cxx::__promote_2	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_2$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_2	d:/include/c++/14/ext/type_traits.h	/^    using __promote_2 = __promote<__promoted_t<_Tp, _Up>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up>>
__gnu_cxx::__promote_2::__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	access:public
__gnu_cxx::__promote_3	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_3$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_3	d:/include/c++/14/ext/type_traits.h	/^    using __promote_3 = __promote<__promoted_t<_Tp, _Up, _Vp>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up,_Vp>>
__gnu_cxx::__promote_3::__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	access:public
__gnu_cxx::__promote_4	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_4$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__promote_4	d:/include/c++/14/ext/type_traits.h	/^    using __promote_4 = __promote<__promoted_t<_Tp, _Up, _Vp, _Wp>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up,_Vp,_Wp>>
__gnu_cxx::__promote_4::__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	access:public
__gnu_cxx::__promoted_t	d:/include/c++/14/ext/type_traits.h	/^    using __promoted_t = decltype((typename __promote<_Tp>::__type(0) + ...));$/;"	t	namespace:__gnu_cxx
__gnu_cxx::__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^  class __recursive_mutex $/;"	c	namespace:__gnu_cxx
__gnu_cxx::__recursive_mutex::_M_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_recursive_mutex_t _M_mutex = __GTHREAD_RECURSIVE_MUTEX_INIT;$/;"	m	class:__gnu_cxx::__recursive_mutex	typeref:typename:__gthread_recursive_mutex_t	access:private
__gnu_cxx::__recursive_mutex::__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex() $/;"	f	class:__gnu_cxx::__recursive_mutex	access:public	signature:()
__gnu_cxx::__recursive_mutex::__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex(const __recursive_mutex&);$/;"	p	class:__gnu_cxx::__recursive_mutex	access:private	signature:(const __recursive_mutex &)
__gnu_cxx::__recursive_mutex::gthread_recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:__gthread_recursive_mutex_t *	access:public	signature:(void)
__gnu_cxx::__recursive_mutex::lock	d:/include/c++/14/ext/concurrence.h	/^    void lock()$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:void	access:public	signature:()
__gnu_cxx::__recursive_mutex::operator =	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex& operator=(const __recursive_mutex&);$/;"	p	class:__gnu_cxx::__recursive_mutex	typeref:typename:__recursive_mutex &	access:private	signature:(const __recursive_mutex &)
__gnu_cxx::__recursive_mutex::unlock	d:/include/c++/14/ext/concurrence.h	/^    void unlock()$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:void	access:public	signature:()
__gnu_cxx::__recursive_mutex::~__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    ~__recursive_mutex()$/;"	f	class:__gnu_cxx::__recursive_mutex	access:public	signature:()
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx
__gnu_cxx::__remove_unsigned::__if_type	d:/include/c++/14/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__if_type::__type	access:public
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:int	access:public
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long	access:public
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long long	access:public
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:short	access:public
__gnu_cxx::__remove_unsigned::__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:signed char	access:public
__gnu_cxx::__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^  class __scoped_lock$/;"	c	namespace:__gnu_cxx
__gnu_cxx::__scoped_lock::_M_device	d:/include/c++/14/ext/concurrence.h	/^    __mutex_type& _M_device;$/;"	m	class:__gnu_cxx::__scoped_lock	typeref:typename:__mutex_type &	access:private
__gnu_cxx::__scoped_lock::__mutex_type	d:/include/c++/14/ext/concurrence.h	/^    typedef __mutex __mutex_type;$/;"	t	class:__gnu_cxx::__scoped_lock	typeref:typename:__mutex	access:public
__gnu_cxx::__scoped_lock::__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    __scoped_lock(const __scoped_lock&);$/;"	p	class:__gnu_cxx::__scoped_lock	access:private	signature:(const __scoped_lock &)
__gnu_cxx::__scoped_lock::__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)$/;"	f	class:__gnu_cxx::__scoped_lock	access:public	signature:(__mutex_type & __name)
__gnu_cxx::__scoped_lock::operator =	d:/include/c++/14/ext/concurrence.h	/^    __scoped_lock& operator=(const __scoped_lock&);$/;"	p	class:__gnu_cxx::__scoped_lock	typeref:typename:__scoped_lock &	access:private	signature:(const __scoped_lock &)
__gnu_cxx::__scoped_lock::~__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    ~__scoped_lock() throw()$/;"	f	class:__gnu_cxx::__scoped_lock	access:public	signature:()
__gnu_cxx::__stoa	d:/include/c++/14/ext/string_conversions.h	/^    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Ret	signature:(_TRet (* __convf)(const _CharT *,_CharT **,_Base...),const char * __name,const _CharT * __str,std::size_t * __idx,_Base...__base)
__gnu_cxx::__stoa::_Range_chk::_S_chk	d:/include/c++/14/ext/string_conversions.h	/^	  _S_chk(_TRet __val, std::true_type) \/\/ only called when _Ret is int$/;"	f	struct:__gnu_cxx::__stoa::_Range_chk	typeref:typename:bool	access:public	signature:(_TRet __val,std::true_type)
__gnu_cxx::__stoa::_Range_chk::_S_chk	d:/include/c++/14/ext/string_conversions.h	/^	  _S_chk(_TRet, std::false_type) { return false; }$/;"	f	struct:__gnu_cxx::__stoa::_Range_chk	typeref:typename:bool	access:public	signature:(_TRet,std::false_type)
__gnu_cxx::__stoa::_Save_errno::_M_errno	d:/include/c++/14/ext/string_conversions.h	/^	int _M_errno;$/;"	m	struct:__gnu_cxx::__stoa::_Save_errno	typeref:typename:int	access:public
__gnu_cxx::__stoa::_Save_errno::_Save_errno	d:/include/c++/14/ext/string_conversions.h	/^	_Save_errno() : _M_errno(errno) { errno = 0; }$/;"	f	struct:__gnu_cxx::__stoa::_Save_errno	access:public	signature:()
__gnu_cxx::__stoa::_Save_errno::~_Save_errno	d:/include/c++/14/ext/string_conversions.h	/^	~_Save_errno() { if (errno == 0) errno = _M_errno; }$/;"	f	struct:__gnu_cxx::__stoa::_Save_errno	access:public	signature:()
__gnu_cxx::__throw_concurrence_broadcast_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_broadcast_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__gnu_cxx::__throw_concurrence_lock_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_lock_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__gnu_cxx::__throw_concurrence_unlock_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_unlock_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__gnu_cxx::__throw_concurrence_wait_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_wait_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__gnu_cxx::__to_xstring	d:/include/c++/14/ext/string_conversions.h	/^    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,$/;"	f	namespace:__gnu_cxx	typeref:typename:_String	signature:(int (* __convf)(_CharT *,std::size_t,const _CharT *,__builtin_va_list),std::size_t __n,const _CharT * __fmt,...)
__gnu_cxx::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits$/;"	s	namespace:__gnu_cxx
__gnu_cxx::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
__gnu_cxx::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
__gnu_cxx::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef _CharT                                    char_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_CharT	access:public
__gnu_cxx::char_traits::compare	d:/include/c++/14/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::compare	d:/include/c++/14/bits/char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::comparison_category	d:/include/c++/14/bits/char_traits.h	/^      using comparison_category = std::strong_ordering;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:std::strong_ordering	access:public
__gnu_cxx::char_traits::copy	d:/include/c++/14/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::copy	d:/include/c++/14/bits/char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::eof	d:/include/c++/14/bits/char_traits.h	/^      eof()$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
__gnu_cxx::char_traits::eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
__gnu_cxx::char_traits::find	d:/include/c++/14/bits/char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
__gnu_cxx::char_traits::find	d:/include/c++/14/bits/char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
__gnu_cxx::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
__gnu_cxx::char_traits::length	d:/include/c++/14/bits/char_traits.h	/^      length(const char_type* __s);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	access:public	signature:(const char_type * __s)
__gnu_cxx::char_traits::length	d:/include/c++/14/bits/char_traits.h	/^    length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	signature:(const char_type * __p)
__gnu_cxx::char_traits::lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
__gnu_cxx::char_traits::move	d:/include/c++/14/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::move	d:/include/c++/14/bits/char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
__gnu_cxx::char_traits::not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
__gnu_cxx::char_traits::off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
__gnu_cxx::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
__gnu_cxx::char_traits::state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
__gnu_cxx::char_traits::to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
__gnu_cxx::char_traits::to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
__gnu_cxx::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR __normal_iterator<_Iterator,_Container>	signature:(typename __normal_iterator<_Iterator,_Container>::difference_type __n,const __normal_iterator<_Iterator,_Container> & __i)
__gnu_cxx::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR typename __normal_iterator<_Iterator,_Container>::difference_type	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR auto	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_Iterator>	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_IteratorR,_IteratorL>	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_cxx::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
__gnu_cxx::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
__gnu_debug	d:/include/c++/14/bits/ptr_traits.h	/^namespace __gnu_debug { struct _Safe_iterator_base; }$/;"	n
__gnu_debug	d:/include/c++/14/debug/debug.h	/^namespace __gnu_debug$/;"	n
__has_construct	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_construct$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__has_construct_impl	d:/include/c++/14/bits/alloc_traits.h	/^      __has_construct_impl<_Alloc, _Tp,$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__has_construct_impl	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_construct_impl = false;$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__has_esft_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __has_esft_base$/;"	s	class:std::__shared_ptr	inherits:false_type	access:private
__has_esft_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>$/;"	s	class:std::__shared_ptr	inherits:__not_<is_array<_Tp>>	access:private
__has_is_transparent	d:/include/c++/14/bits/stl_function.h	/^    struct __has_is_transparent$/;"	s	namespace:std
__has_is_transparent	d:/include/c++/14/bits/stl_function.h	/^    struct __has_is_transparent<_Func, _SfinaeType,$/;"	s	namespace:std
__has_is_transparent_t	d:/include/c++/14/bits/stl_function.h	/^    using __has_is_transparent_t$/;"	t	namespace:std	typeref:typename:__has_is_transparent<_Func,_SfinaeType>::type
__has_new_expr	d:/include/c++/14/bits/alloc_traits.h	/^      __has_new_expr<_Tp, __void_t<__new_expr_t<_Tp, _Args...>>, _Args...>$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__has_new_expr	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_new_expr = false;$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
__hash_base	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_base$/;"	s	namespace:std
__hash_combine	d:/include/c++/14/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
__hash_combine	d:/include/c++/14/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^      __hash_enum(__hash_enum&&);$/;"	p	struct:std::__hash_enum	access:private	signature:(__hash_enum &&)
__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_enum$/;"	s	namespace:std
__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp>
__have_long32	../../../../../../usr/include/machine/_default_types.h	/^#define __have_long32 /;"	d
__have_long64	../../../../../../usr/include/machine/_default_types.h	/^#define __have_long64 /;"	d
__have_longlong64	../../../../../../usr/include/machine/_default_types.h	/^#define __have_longlong64 /;"	d
__have_pthread_attr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^# define __have_pthread_attr_t /;"	d
__high	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^    unsigned int __high;$/;"	m	struct:__anon7f57c972010a::__anon7f57c9720208	typeref:typename:unsigned int	access:public
__id_t	../../../../../../usr/include/sys/_types.h	/^typedef __uint32_t __id_t;$/;"	t	typeref:typename:__uint32_t
__id_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __ID_T_TYPE __id_t;		\/* General type for IDs.  *\/$/;"	v	typeref:typename:__STD_TYPE __ID_T_TYPE
__ieeefp_finitef	../../../../../../usr/include/machine/ieeefp.h	/^#define __ieeefp_finitef(/;"	d	signature:(x)
__ieeefp_isinff	../../../../../../usr/include/machine/ieeefp.h	/^#define __ieeefp_isinff(/;"	d	signature:(x)
__ieeefp_isnanf	../../../../../../usr/include/machine/ieeefp.h	/^#define __ieeefp_isnanf(/;"	d	signature:(x)
__if_type	d:/include/c++/14/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__if_type	d:/include/c++/14/ext/type_traits.h	/^      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__enable_if<std::__is_integer<_Tp>::__value,_Tp>	access:private
__inline	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __inline	/;"	d
__ino64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __INO64_T_TYPE __ino64_t;	\/* Type of file serial numbers (LFS).*\/$/;"	v	typeref:typename:__STD_TYPE __INO64_T_TYPE
__ino_t	../../../../../../usr/include/machine/_types.h	/^typedef __uint64_t __ino_t;$/;"	t	typeref:typename:__uint64_t
__ino_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned long __ino_t;$/;"	t	typeref:typename:unsigned long
__ino_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned short __ino_t;$/;"	t	typeref:typename:unsigned short
__ino_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __INO_T_TYPE __ino_t;	\/* Type of file serial numbers.  *\/$/;"	v	typeref:typename:__STD_TYPE __INO_T_TYPE
__int16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT16_TYPE__ __int16_t;$/;"	t	typeref:typename:__INT16_TYPE__
__int16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed char __int16_t;$/;"	t	typeref:typename:signed char
__int16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed int __int16_t;$/;"	t	typeref:typename:signed int
__int16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed short __int16_t;$/;"	t	typeref:typename:signed short
__int16_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef signed short int __int16_t;$/;"	t	typeref:typename:signed short int
__int32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT32_TYPE__ __int32_t;$/;"	t	typeref:typename:__INT32_TYPE__
__int32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed char __int32_t;$/;"	t	typeref:typename:signed char
__int32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed int __int32_t;$/;"	t	typeref:typename:signed int
__int32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed long __int32_t;$/;"	t	typeref:typename:signed long
__int32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed short __int32_t;$/;"	t	typeref:typename:signed short
__int32_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef signed int __int32_t;$/;"	t	typeref:typename:signed int
__int64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT64_TYPE__ __int64_t;$/;"	t	typeref:typename:__INT64_TYPE__
__int64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed int __int64_t;$/;"	t	typeref:typename:signed int
__int64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed long __int64_t;$/;"	t	typeref:typename:signed long
__int64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed long long __int64_t;$/;"	t	typeref:typename:signed long long
__int64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef signed long long int __int64_t;$/;"	t	typeref:typename:signed long long int
__int64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef signed long int __int64_t;$/;"	t	typeref:typename:signed long int
__int8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT8_TYPE__ __int8_t;$/;"	t	typeref:typename:__INT8_TYPE__
__int8_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef signed char __int8_t;$/;"	t	typeref:typename:signed char
__int_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT_LEAST16_TYPE__ __int_least16_t;$/;"	t	typeref:typename:__INT_LEAST16_TYPE__
__int_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int16_t __int_least16_t;$/;"	t	typeref:typename:__int16_t
__int_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int32_t __int_least16_t;$/;"	t	typeref:typename:__int32_t
__int_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int64_t __int_least16_t;$/;"	t	typeref:typename:__int64_t
__int_least16_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __int16_t __int_least16_t;$/;"	t	typeref:typename:__int16_t
__int_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT_LEAST32_TYPE__ __int_least32_t;$/;"	t	typeref:typename:__INT_LEAST32_TYPE__
__int_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int32_t __int_least32_t;$/;"	t	typeref:typename:__int32_t
__int_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int64_t __int_least32_t;$/;"	t	typeref:typename:__int64_t
__int_least32_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __int32_t __int_least32_t;$/;"	t	typeref:typename:__int32_t
__int_least64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT_LEAST64_TYPE__ __int_least64_t;$/;"	t	typeref:typename:__INT_LEAST64_TYPE__
__int_least64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int64_t __int_least64_t;$/;"	t	typeref:typename:__int64_t
__int_least64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __int64_t __int_least64_t;$/;"	t	typeref:typename:__int64_t
__int_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INT_LEAST8_TYPE__ __int_least8_t;$/;"	t	typeref:typename:__INT_LEAST8_TYPE__
__int_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int16_t __int_least8_t;$/;"	t	typeref:typename:__int16_t
__int_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int32_t __int_least8_t;$/;"	t	typeref:typename:__int32_t
__int_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int64_t __int_least8_t;$/;"	t	typeref:typename:__int64_t
__int_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __int8_t __int_least8_t;$/;"	t	typeref:typename:__int8_t
__int_least8_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __int8_t __int_least8_t;$/;"	t	typeref:typename:__int8_t
__int_n_cs_precedes	d:/include/locale.h	/^  char __int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_n_sep_by_space	d:/include/locale.h	/^  char __int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_n_sign_posn	d:/include/locale.h	/^  char __int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_cs_precedes	d:/include/locale.h	/^  char __int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_sep_by_space	d:/include/locale.h	/^  char __int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_p_sign_posn	d:/include/locale.h	/^  char __int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
__int_traits	d:/include/c++/14/ext/numeric_traits.h	/^    using __int_traits = __numeric_traits_integer<_Tp>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__numeric_traits_integer<_Tp>
__int_type	d:/include/c++/14/bits/atomic_base.h	/^      typedef _ITp 	__int_type;$/;"	t	struct:std::__atomic_base	typeref:typename:_ITp	access:private
__integer_to_chars_is_unsigned	d:/include/c++/14/bits/charconv.h	/^    constexpr bool __integer_to_chars_is_unsigned$/;"	v	namespace:std::__detail	typeref:typename:bool
__internal	d:/include/c++/14/pstl/execution_defs.h	/^namespace __internal$/;"	n	namespace:__pstl
__intmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INTMAX_TYPE__ __intmax_t;$/;"	t	typeref:typename:__INTMAX_TYPE__
__intmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed long __intmax_t;$/;"	t	typeref:typename:signed long
__intmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef signed long long __intmax_t;$/;"	t	typeref:typename:signed long long
__intmax_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef long long int __intmax_t;$/;"	t	typeref:typename:long long int
__intmax_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef long int __intmax_t;$/;"	t	typeref:typename:long int
__intptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __INTPTR_TYPE__ __intptr_t;$/;"	t	typeref:typename:__INTPTR_TYPE__
__intptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __PTRDIFF_TYPE__ __intptr_t;$/;"	t	typeref:typename:__PTRDIFF_TYPE__
__intptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef long __intptr_t;$/;"	t	typeref:typename:long
__intptr_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SWORD_TYPE __intptr_t;$/;"	v	typeref:typename:__STD_TYPE __SWORD_TYPE
__intptr_t_defined	d:/include/stdint.h	/^#  define __intptr_t_defined$/;"	d
__invalid_make_unique_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__invalid_type
__invalid_type	d:/include/c++/14/bits/unique_ptr.h	/^    { struct __invalid_type { }; };$/;"	s	struct:std::__detail::_MakeUniq	access:public
__invfwd	d:/include/c++/14/bits/invoke.h	/^    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Up &&	signature:(typename remove_reference<_Tp>::type & __t)
__invoke	d:/include/c++/14/bits/invoke.h	/^    __invoke(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__invoke_result<_Callable,_Args...>::type	signature:(_Callable && __fn,_Args &&...__args)
__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memfun_deref,_MemFun && __f,_Tp && __t,_Args &&...__args)
__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memfun_ref,_MemFun && __f,_Tp && __t,_Args &&...__args)
__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memobj_deref,_MemPtr && __f,_Tp && __t)
__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memobj_ref,_MemPtr && __f,_Tp && __t)
__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_other,_Fn && __f,_Args &&...__args)
__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR __enable_if_t<is_void<_Res>::value,_Res>	signature:(_Callable && __fn,_Args &&...__args)
__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__enable_if_t<!is_void<_Res>::value,_Res>	signature:(_Callable && __fn,_Args &&...__args)
__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:enable_if_t<is_invocable_r_v<_Res,_Callable,_Args...>,_Res>	signature:(_Callable && __fn,_Args &&...__args)
__ios_base	d:/include/c++/14/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_fill	typeref:typename:__ostream_type::ios_base
__ios_base	d:/include/c++/14/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_insert	typeref:typename:__ostream_type::ios_base
__ios_base	d:/include/c++/14/bits/ostream_insert.h	/^      typedef typename __ostream_type::ios_base    __ios_base;$/;"	t	function:std::__ostream_write	typeref:typename:__ostream_type::ios_base
__is_alloc_insertable_impl	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl$/;"	s	namespace:std	inherits:false_type
__is_alloc_insertable_impl	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,$/;"	s	namespace:std	inherits:true_type
__is_allocator	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_allocator : false_type { };$/;"	s	namespace:std	inherits:false_type
__is_allocator	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_allocator<_Alloc,$/;"	s	namespace:std	inherits:true_type
__is_arithmetic	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_arithmetic$/;"	s	namespace:std	inherits:__traitor<__is_integer<_Tp>,__is_floating<_Tp>>
__is_bitwise_relocatable	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __is_bitwise_relocatable$/;"	s	namespace:std	inherits:is_trivial<_Tp>
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte$/;"	s	namespace:std
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<byte>$/;"	s	namespace:std
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<char8_t>$/;"	s	namespace:std
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<char>$/;"	s	namespace:std
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<signed char>$/;"	s	namespace:std
__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<unsigned char>$/;"	s	namespace:std
__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char$/;"	s	namespace:std
__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char<char>$/;"	s	namespace:std
__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char<wchar_t>$/;"	s	namespace:std
__is_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      inline constexpr bool __is_const_iterator = false;$/;"	v	namespace:std::__detail	typeref:typename:bool
__is_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      inline constexpr bool __is_const_iterator<basic_const_iterator<_It>> = true;$/;"	v	namespace:std::__detail	typeref:typename:bool
__is_copy_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_copy_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_typeconst&>::type
__is_copy_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_copy_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_copy_constructible<_Tp>
__is_custom_pointer	d:/include/c++/14/ext/alloc_traits.h	/^      using __is_custom_pointer$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:std::__and_<std::is_same<pointer,_Ptr>,std::__not_<std::is_pointer<_Ptr>>>	access:private
__is_derived_Tp	d:/include/c++/14/bits/unique_ptr.h	/^	using __is_derived_Tp$/;"	t	class:std::unique_ptr	typeref:typename:__and_<is_base_of<_Tp,_Up>,__not_<is_same<__remove_cv_t<_Tp>,__remove_cv_t<_Up>>>>	access:private
__is_erased_or_convertible	d:/include/c++/14/bits/uses_allocator.h	/^    using __is_erased_or_convertible$/;"	t	namespace:std	typeref:typename:__or_<is_convertible<_Alloc,_Tp>,is_same<_Tp,__erased_type>>
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^    struct __is_fast_hash<hash<basic_string<_CharT, _Traits, _Alloc>>>$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u8string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
__is_fast_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __is_fast_hash : public std::true_type$/;"	s	namespace:std	inherits:std::true_type
__is_fast_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __is_fast_hash<hash<long double>> : public std::false_type$/;"	s	namespace:std	inherits:std::false_type
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float128>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float16>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float32>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float64>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<__gnu_cxx::__bfloat16_t>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<double>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<float>$/;"	s	namespace:std
__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<long double>$/;"	s	namespace:std
__is_in_place_index_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_index_v = false;$/;"	v	namespace:std	typeref:typename:bool
__is_in_place_index_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_index_v<in_place_index_t<_Nm>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_in_place_type	d:/include/c++/14/bits/utility.h	/^    using __is_in_place_type = bool_constant<__is_in_place_type_v<_Tp>>;$/;"	t	namespace:std	typeref:typename:bool_constant<__is_in_place_type_v<_Tp>>
__is_in_place_type_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_type_v = false;$/;"	v	namespace:std	typeref:typename:bool
__is_in_place_type_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<bool>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char16_t>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char32_t>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char8_t>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<int>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<long long>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<long>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<short>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<signed char>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned char>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned int>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long long>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned short>$/;"	s	namespace:std
__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<wchar_t>$/;"	s	namespace:std
__is_integer_nonstrict	d:/include/c++/14/ext/numeric_traits.h	/^    struct __is_integer_nonstrict$/;"	s	namespace:__gnu_cxx	inherits:std::__is_integer<_Tp>
__is_iterator_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:istreambuf_iterator<_CharT>
__is_iterator_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::advance	typeref:typename:istreambuf_iterator<_CharT>
__is_iterator_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef istreambuf_iterator<_CharT>		   __is_iterator_type;$/;"	t	function:std::find	typeref:typename:istreambuf_iterator<_CharT>
__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered$/;"	s	namespace:std
__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<_Tp, false>$/;"	s	namespace:std
__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<std::byte, false>$/;"	s	namespace:std
__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with$/;"	s	namespace:std
__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, _Up, false>$/;"	s	namespace:std
__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>$/;"	s	namespace:std
__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>$/;"	s	namespace:std
__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, std::byte, true>$/;"	s	namespace:std
__is_move_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_move_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_type>::type
__is_move_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_move_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_move_constructible<_Tp>
__is_move_iterator	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_move_iterator$/;"	s	namespace:std
__is_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    struct __is_move_iterator<move_iterator<_Iterator> >$/;"	s	namespace:std
__is_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    struct __is_move_iterator<reverse_iterator<_Iterator> >$/;"	s	namespace:std	inherits:__is_move_iterator<_Iterator>
__is_nonvolatile_trivially_copyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable$/;"	s	namespace:std
__is_nonvolatile_trivially_copyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable<volatile _Tp>$/;"	s	namespace:std
__is_nothrow_uses_allocator_constructible	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_nothrow_uses_allocator_constructible$/;"	s	namespace:std	inherits:__is_uses_allocator_predicate<is_nothrow_constructible,_Tp,_Alloc,_Args...>
__is_nothrow_uses_allocator_constructible_v	d:/include/c++/14/bits/uses_allocator.h	/^    __is_nothrow_uses_allocator_constructible_v =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE bool
__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^    __is_null_pointer(_Type)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(_Type)
__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^    __is_null_pointer(_Type* __ptr)$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(_Type * __ptr)
__is_null_pointer	d:/include/c++/14/ext/type_traits.h	/^  __is_null_pointer(std::nullptr_t)$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(std::nullptr_t)
__is_pair	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_pair = false;$/;"	v	namespace:std	typeref:typename:bool
__is_pair	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_permutation	d:/include/c++/14/bits/stl_algobase.h	/^    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_BinaryPredicate __pred)
__is_pointer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_pointer$/;"	s	namespace:std
__is_pointer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_pointer<_Tp*>$/;"	s	namespace:std
__is_random_access_iter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std
__is_random_access_iter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std	inherits:is_base_of<random_access_iterator_tag,_Cat>
__is_scalar	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_scalar$/;"	s	namespace:std	inherits:__traitor<__is_arithmetic<_Tp>,__is_pointer<_Tp>>
__is_shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    static constexpr bool __is_shared_ptr = false;$/;"	v	namespace:std	typeref:typename:bool
__is_shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    static constexpr bool __is_shared_ptr<shared_ptr<_Tp>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^      static const bool __is_signed = (_Value)(-1) < 0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const bool	access:public
__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^      static const bool __is_signed = true;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const bool	access:public
__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^    const bool __numeric_traits_floating<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const bool
__is_signed	d:/include/c++/14/ext/numeric_traits.h	/^    const bool __numeric_traits_integer<_Value>::__is_signed;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const bool
__is_single_threaded	d:/include/c++/14/ext/atomicity.h	/^  __is_single_threaded() _GLIBCXX_NOTHROW$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:()
__is_subrange	d:/include/c++/14/bits/utility.h	/^      inline constexpr bool __is_subrange = false;$/;"	v	namespace:std::ranges::__detail	typeref:typename:bool
__is_tuple_like_impl	d:/include/c++/14/bits/stl_pair.h	/^    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type$/;"	s	namespace:std	inherits:true_type
__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v = false;$/;"	v	namespace:std	typeref:typename:bool
__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<array<_Tp, _Nm>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<pair<_T1, _T2>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<tuple<_Elements...>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_tuple_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_v = false;$/;"	v	namespace:std	typeref:typename:bool
__is_tuple_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_v<tuple<_Ts...>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    static constexpr bool __is_unique_ptr = false;$/;"	v	namespace:std	typeref:typename:bool
__is_unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    static constexpr bool __is_unique_ptr<unique_ptr<_Tp, _Del>> = true;$/;"	v	namespace:std	typeref:typename:bool
__is_uses_allocator_constructible	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_uses_allocator_constructible$/;"	s	namespace:std	inherits:__is_uses_allocator_predicate<is_constructible,_Tp,_Alloc,_Args...>
__is_uses_allocator_constructible_v	d:/include/c++/14/bits/uses_allocator.h	/^    _GLIBCXX17_INLINE constexpr bool __is_uses_allocator_constructible_v =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE bool
__is_uses_allocator_predicate	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_uses_allocator_predicate$/;"	s	namespace:std	inherits:__conditional_t<uses_allocator<_Tp,_Alloc>::value,__or_<_Predicate<_Tp,allocator_arg_t,_Alloc,_Args...>,_Predicate<_Tp,_Args...,_Alloc>>,_Predicate<_Tp,_Args...>>
__is_valid_cmpexch_failure_order	d:/include/c++/14/bits/atomic_base.h	/^  __is_valid_cmpexch_failure_order(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(memory_order __m)
__is_void	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_void$/;"	s	namespace:std
__is_void	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_void<void>$/;"	s	namespace:std
__isalnum_l	d:/include/ctype.h	/^#  define __isalnum_l(/;"	d	signature:(c,l)
__isalpha_l	d:/include/ctype.h	/^#  define __isalpha_l(/;"	d	signature:(c,l)
__isascii	d:/include/ctype.h	/^#define	__isascii(/;"	d	signature:(c)
__isascii_l	d:/include/ctype.h	/^#   define __isascii_l(/;"	d	signature:(c,l)
__isblank_l	d:/include/ctype.h	/^#  define __isblank_l(/;"	d	signature:(c,l)
__iscntrl_l	d:/include/ctype.h	/^#  define __iscntrl_l(/;"	d	signature:(c,l)
__isctype	d:/include/ctype.h	/^# define __isctype(/;"	d	signature:(c,type)
__isctype_f	d:/include/ctype.h	/^# define __isctype_f(/;"	d	signature:(type)
__isctype_f	d:/include/ctype.h	/^__isctype_f (alpha)$/;"	f	typeref:typename:alnum	signature:(alpha)
__isctype_l	d:/include/ctype.h	/^#  define __isctype_l(/;"	d	signature:(c,type,locale)
__isdigit_l	d:/include/ctype.h	/^#  define __isdigit_l(/;"	d	signature:(c,l)
__isgraph_l	d:/include/ctype.h	/^#  define __isgraph_l(/;"	d	signature:(c,l)
__isleap	d:/include/time.h	/^#define __isleap(/;"	d	signature:(year)
__islower_l	d:/include/ctype.h	/^#  define __islower_l(/;"	d	signature:(c,l)
__isoc23_fscanf	d:/include/stdio.h	/^extern int __isoc23_fscanf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
__isoc23_fwscanf	d:/include/wchar.h	/^extern int __isoc23_fwscanf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
__isoc23_scanf	d:/include/stdio.h	/^extern int __isoc23_scanf (const char *__restrict __format, ...) __wur;$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
__isoc23_sscanf	d:/include/stdio.h	/^extern int __isoc23_sscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,...)
__isoc23_swscanf	d:/include/wchar.h	/^extern int __isoc23_swscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,...)
__isoc23_vfscanf	d:/include/stdio.h	/^extern int __isoc23_vfscanf (FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc23_vfwscanf	d:/include/wchar.h	/^extern int __isoc23_vfwscanf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc23_vscanf	d:/include/stdio.h	/^extern int __isoc23_vscanf (const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
__isoc23_vsscanf	d:/include/stdio.h	/^extern int __isoc23_vsscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc23_vswscanf	d:/include/wchar.h	/^extern int __isoc23_vswscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc23_vwscanf	d:/include/wchar.h	/^extern int __isoc23_vwscanf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc23_wcstol	d:/include/wchar.h	/^extern long int __isoc23_wcstol (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
__isoc23_wcstol_l	d:/include/wchar.h	/^extern long int __isoc23_wcstol_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
__isoc23_wcstoll	d:/include/wchar.h	/^extern long long int __isoc23_wcstoll (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
__isoc23_wcstoll_l	d:/include/wchar.h	/^extern long long int __isoc23_wcstoll_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
__isoc23_wcstoul	d:/include/wchar.h	/^extern unsigned long int __isoc23_wcstoul (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
__isoc23_wcstoul_l	d:/include/wchar.h	/^extern unsigned long int __isoc23_wcstoul_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
__isoc23_wcstoull	d:/include/wchar.h	/^extern unsigned long long int __isoc23_wcstoull (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
__isoc23_wcstoull_l	d:/include/wchar.h	/^extern unsigned long long int __isoc23_wcstoull_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
__isoc23_wscanf	d:/include/wchar.h	/^extern int __isoc23_wscanf (const wchar_t *__restrict __format, ...);$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
__isoc99_fscanf	d:/include/stdio.h	/^extern int __isoc99_fscanf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
__isoc99_fwscanf	d:/include/wchar.h	/^extern int __isoc99_fwscanf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
__isoc99_scanf	d:/include/stdio.h	/^extern int __isoc99_scanf (const char *__restrict __format, ...) __wur;$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
__isoc99_sscanf	d:/include/stdio.h	/^extern int __isoc99_sscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,...)
__isoc99_swscanf	d:/include/wchar.h	/^extern int __isoc99_swscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,...)
__isoc99_vfscanf	d:/include/stdio.h	/^extern int __isoc99_vfscanf (FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vfwscanf	d:/include/wchar.h	/^extern int __isoc99_vfwscanf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_vscanf	d:/include/stdio.h	/^extern int __isoc99_vscanf (const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vsscanf	d:/include/stdio.h	/^extern int __isoc99_vsscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
__isoc99_vswscanf	d:/include/wchar.h	/^extern int __isoc99_vswscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_vwscanf	d:/include/wchar.h	/^extern int __isoc99_vwscanf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
__isoc99_wscanf	d:/include/wchar.h	/^extern int __isoc99_wscanf (const wchar_t *__restrict __format, ...);$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
__isprint_l	d:/include/ctype.h	/^#  define __isprint_l(/;"	d	signature:(c,l)
__ispunct_l	d:/include/ctype.h	/^#  define __ispunct_l(/;"	d	signature:(c,l)
__isspace_l	d:/include/ctype.h	/^#  define __isspace_l(/;"	d	signature:(c,l)
__isupper_l	d:/include/ctype.h	/^#  define __isupper_l(/;"	d	signature:(c,l)
__isxdigit_l	d:/include/ctype.h	/^#  define __isxdigit_l(/;"	d	signature:(c,l)
__iter_category_t	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename __iter_category_t<_Iterator>; }$/;"	v	namespace:std::__detail	typeref:meta:typename
__iter_category_t	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    using __iter_category_t$/;"	t	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category
__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_comp_iter<_Compare>	signature:(_Compare __comp)
__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_comp_iter<_Compare> __comp, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_to_iter<_Compare,_Iterator>	signature:(_Iter_comp_iter<_Compare> __comp,_Iterator __it)
__iter_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_iter(_Iter_equal_to_iter, _Iterator __it)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_iter<_Iterator>	signature:(_Iter_equal_to_iter,_Iterator __it)
__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Compare __comp)
__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Compare __comp, _Value &__val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_Iter_comp_to_val<_Compare,_Value> _GLIBCXX20_CONSTEXPR	signature:(_Compare __comp,_Value & __val)
__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_comp_val(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_comp_val<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_equal_to_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:(_Iter_equal_to_iter)
__iter_comp_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_comp_val(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:(_Iter_less_iter)
__iter_const_rvalue_reference_t	d:/include/c++/14/bits/stl_iterator.h	/^      using __iter_const_rvalue_reference_t$/;"	t	namespace:std::__detail	typeref:typename:common_reference_t<const iter_value_t<_It> &&,iter_rvalue_reference_t<_It>>
__iter_equal_to_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_equal_to_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_iter	signature:()
__iter_equal_to_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_equal_to_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equal_to_val	signature:()
__iter_equals_val	d:/include/c++/14/bits/predefined_ops.h	/^    __iter_equals_val(_Value& __val)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_equals_val<_Value>	signature:(_Value & __val)
__iter_key_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_key_t = remove_const_t<$/;"	t	namespace:std	typeref:typename:remove_const_t<tuple_element_t<0,typename iterator_traits<_InputIterator>::value_type>>
__iter_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX14_CONSTEXPR _Iter_less_iter	signature:()
__iter_less_val	d:/include/c++/14/bits/predefined_ops.h	/^  __iter_less_val()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_less_val	signature:()
__iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
__iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
__iter_to_alloc_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_to_alloc_t$/;"	t	namespace:std	typeref:typename:pair<const __iter_key_t<_InputIterator>,__iter_val_t<_InputIterator>>
__iter_val_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_val_t$/;"	t	namespace:std	typeref:typename:tuple_element_t<1,typename iterator_traits<_InputIterator>::value_type>
__iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR typename iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
__iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __iterator_traits { };$/;"	s	namespace:std
__iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __iterator_traits<_Iterator,$/;"	s	namespace:std
__itimerspec_defined	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^#define __itimerspec_defined /;"	d
__itoa	../../../../../../usr/include/stdlib.h	/^char *	__itoa (int, char *, int);$/;"	p	typeref:typename:char *	signature:(int,char *,int)
__jmp_buf	d:/include/x86_64-linux-gnu/bits/setjmp.h	/^__extension__ typedef long long int __jmp_buf[8];$/;"	t	typeref:typename:long long int[8]
__jmp_buf	d:/include/x86_64-linux-gnu/bits/setjmp.h	/^typedef int __jmp_buf[6];$/;"	t	typeref:typename:int[6]
__jmp_buf	d:/include/x86_64-linux-gnu/bits/setjmp.h	/^typedef long int __jmp_buf[8];$/;"	t	typeref:typename:long int[8]
__jmp_buf_tag	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^struct __jmp_buf_tag$/;"	s
__jmp_buf_tag::__jmpbuf	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    __jmp_buf __jmpbuf;		\/* Calling environment.  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:__jmp_buf	access:public
__jmp_buf_tag::__mask_was_saved	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    int __mask_was_saved;	\/* Saved the signal mask?  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:int	access:public
__jmp_buf_tag::__saved_mask	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    __sigset_t __saved_mask;	\/* Saved signal mask.  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:__sigset_t	access:public
__jmp_buf_tag_defined	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^#define	__jmp_buf_tag_defined /;"	d
__jmpbuf	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    __jmp_buf __jmpbuf;		\/* Calling environment.  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:__jmp_buf	access:public
__key_t	../../../../../../usr/include/machine/_types.h	/^typedef long long __key_t;$/;"	t	typeref:typename:long long
__key_t	../../../../../../usr/include/sys/_types.h	/^typedef long __key_t;$/;"	t	typeref:typename:long
__key_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __KEY_T_TYPE __key_t;	\/* Type of an IPC key.  *\/$/;"	v	typeref:typename:__STD_TYPE __KEY_T_TYPE
__kind	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __kind;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__lc	d:/include/c++/14/bits/stl_algobase.h	/^	__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__lc	d:/include/c++/14/bits/stl_algobase.h	/^	__lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
__lc_rai	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lc_rai$/;"	s	namespace:std
__lc_rai	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std
__lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lexicographical_compare$/;"	s	namespace:std
__lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lexicographical_compare<true>$/;"	s	namespace:std
__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &)
__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,_II2,_II2)
__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &)
__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1($/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1($/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_Tp2 *,_Tp2 *)
__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1(_Tp1*, _Tp1*,$/;"	p	namespace:std	typeref:typename:bool	signature:(_Tp1 *,_Tp1 *,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
__lexicographical_compare_impl	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
__lg	d:/include/c++/14/bits/stl_algobase.h	/^    __lg(_Tp __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Tp	signature:(_Tp __n)
__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<_Tp&&, _Up&>$/;"	s	namespace:std
__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<_Tp&, _Up&>$/;"	s	namespace:std
__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<const _Tp&&, _Up&>$/;"	s	namespace:std
__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<const _Tp&, _Up&>$/;"	s	namespace:std
__like_t	d:/include/c++/14/bits/move.h	/^    using __like_t = typename __like_impl<_Tp&&, _Up&>::type;$/;"	t	namespace:std	typeref:typename:__like_impl<_Tp &&,_Up &>::type
__list	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    __pthread_slist_t __list;$/;"	m	union:__pthread_mutex_s::__anon472e9925010a	typeref:typename:__pthread_slist_t	access:public
__list	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  __pthread_list_t __list;$/;"	m	struct:__pthread_mutex_s	typeref:typename:__pthread_list_t	access:public
__locale_mb_cur_max	../../../../../../usr/include/stdlib.h	/^int	__locale_mb_cur_max (void);$/;"	p	typeref:typename:int	signature:(void)
__locale_struct	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^struct __locale_struct$/;"	s
__locale_struct::__ctype_b	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const unsigned short int *__ctype_b;$/;"	m	struct:__locale_struct	typeref:typename:const unsigned short int *	access:public
__locale_struct::__ctype_tolower	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_tolower;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__locale_struct::__ctype_toupper	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const int *__ctype_toupper;$/;"	m	struct:__locale_struct	typeref:typename:const int *	access:public
__locale_struct::__locales	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  struct __locale_data *__locales[13]; \/* 13 = __LC_LAST. *\/$/;"	m	struct:__locale_struct	typeref:struct:__locale_data * [13]	access:public
__locale_struct::__names	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const char *__names[13];$/;"	m	struct:__locale_struct	typeref:typename:const char * [13]	access:public
__locale_t	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^typedef struct __locale_struct *__locale_t;$/;"	t	typeref:struct:__locale_struct *
__locales	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  struct __locale_data *__locales[13]; \/* 13 = __LC_LAST. *\/$/;"	m	struct:__locale_struct	typeref:struct:__locale_data * [13]	access:public
__lock	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __lock;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__lock_acquire	../../../../../../usr/include/sys/lock.h	/^#define __lock_acquire(/;"	d	signature:(__lock)
__lock_acquire_recursive	../../../../../../usr/include/sys/lock.h	/^#define __lock_acquire_recursive(/;"	d	signature:(__lock)
__lock_close	../../../../../../usr/include/sys/lock.h	/^#define __lock_close(/;"	d	signature:(__lock)
__lock_close_recursive	../../../../../../usr/include/sys/lock.h	/^#define __lock_close_recursive(/;"	d	signature:(__lock)
__lock_init	../../../../../../usr/include/sys/lock.h	/^#define __lock_init(/;"	d	signature:(__lock)
__lock_init_recursive	../../../../../../usr/include/sys/lock.h	/^#define __lock_init_recursive(/;"	d	signature:(__lock)
__lock_release	../../../../../../usr/include/sys/lock.h	/^#define __lock_release(/;"	d	signature:(__lock)
__lock_release_recursive	../../../../../../usr/include/sys/lock.h	/^#define __lock_release_recursive(/;"	d	signature:(__lock)
__lock_try_acquire	../../../../../../usr/include/sys/lock.h	/^#define __lock_try_acquire(/;"	d	signature:(lock)
__lock_try_acquire_recursive	../../../../../../usr/include/sys/lock.h	/^#define __lock_try_acquire_recursive(/;"	d	signature:(lock)
__loff_t	../../../../../../usr/include/sys/_types.h	/^typedef _off64_t __loff_t;$/;"	t	typeref:typename:_off64_t
__loff_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __off64_t __loff_t;	\/* Type of file sizes and offsets (LFS).  *\/$/;"	t	typeref:typename:__off64_t
__low	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^    unsigned int __low;$/;"	m	struct:__anon7f57c972010a::__anon7f57c9720208	typeref:typename:unsigned int	access:public
__lower_bound	d:/include/c++/14/bits/stl_algobase.h	/^    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
__machine_blkcnt_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_blkcnt_t_defined$/;"	d
__machine_blksize_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_blksize_t_defined$/;"	d
__machine_dev_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_dev_t_defined$/;"	d
__machine_fsblkcnt_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_fsblkcnt_t_defined$/;"	d
__machine_fsfilcnt_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_fsfilcnt_t_defined$/;"	d
__machine_gid_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_gid_t_defined$/;"	d
__machine_ino_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_ino_t_defined$/;"	d
__machine_key_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_key_t_defined$/;"	d
__machine_sa_family_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_sa_family_t_defined$/;"	d
__machine_socklen_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_socklen_t_defined$/;"	d
__machine_uid_t_defined	../../../../../../usr/include/machine/_types.h	/^#define __machine_uid_t_defined$/;"	d
__make_move_if_noexcept_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Iterator __i)
__make_move_if_noexcept_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Tp* __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Tp * __i)
__make_reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
__make_shared	d:/include/c++/14/bits/shared_ptr_base.h	/^    __make_shared(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(_Args &&...__args)
__make_shared_arrN_tag	d:/include/c++/14/bits/shared_ptr.h	/^    __make_shared_arrN_tag(const _Alloc& __a = _Alloc()) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Alloc & __a=_Alloc ())
__make_shared_arr_tag	d:/include/c++/14/bits/shared_ptr.h	/^    __make_shared_arr_tag(size_t __n, const _Alloc& __a = _Alloc()) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(size_t __n,const _Alloc & __a=_Alloc ())
__mask_was_saved	d:/include/pthread.h	/^  int __mask_was_saved;$/;"	m	struct:__cancel_jmp_buf_tag	typeref:typename:int	access:public
__mask_was_saved	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    int __mask_was_saved;	\/* Saved the signal mask?  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:int	access:public
__max	d:/include/c++/14/ext/numeric_traits.h	/^      static const _Value __max = __is_signed$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__max	d:/include/c++/14/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__max;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = 33;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = 36;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_digits10 = __glibcxx_max_digits10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_digits10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_digits10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = 308;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = 4932;$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^      static const int __max_exponent10 = __glibcxx_max_exponent10(_Value);$/;"	m	struct:__gnu_cxx::__numeric_traits_floating	typeref:typename:const int	access:public
__max_exponent10	d:/include/c++/14/ext/numeric_traits.h	/^    const int __numeric_traits_floating<_Value>::__max_exponent10;$/;"	m	class:__gnu_cxx::__numeric_traits_floating<_Value>	typeref:typename:const int
__maybe_has_padding	d:/include/c++/14/bits/atomic_base.h	/^      __maybe_has_padding()$/;"	f	namespace:std::__atomic_impl	typeref:typename:bool	signature:()
__maybe_type	d:/include/c++/14/bits/refwrap.h	/^      using __maybe_type$/;"	t	struct:std::_Mem_fn_traits_base	typeref:typename:_Maybe_unary_or_binary_function<_Res,_Class *,_ArgTypes...>	access:public
__mbrlen	d:/include/wchar.h	/^extern size_t __mbrlen (const char *__restrict __s, size_t __n,$/;"	p	typeref:typename:size_t	signature:(const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps)
__mbstate_t	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^} __mbstate_t;$/;"	t	typeref:struct:__anondff4f4530108
__mbstate_t_defined	d:/include/x86_64-linux-gnu/bits/types/mbstate_t.h	/^#define __mbstate_t_defined /;"	d
__memcmp	d:/include/c++/14/bits/stl_algobase.h	/^    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX14_CONSTEXPR int	signature:(const _Tp * __first1,const _Up * __first2,size_t __num)
__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable$/;"	s	namespace:std
__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<const _Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable$/;"	s	namespace:std
__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
__memory_order_hle_acquire	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_hle_acquire   = 0x10000,$/;"	e	enum:std::__memory_order_modifier	access:public
__memory_order_hle_release	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_hle_release   = 0x20000$/;"	e	enum:std::__memory_order_modifier	access:public
__memory_order_mask	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_mask          = 0x0ffff,$/;"	e	enum:std::__memory_order_modifier	access:public
__memory_order_modifier	d:/include/c++/14/bits/atomic_base.h	/^  enum __memory_order_modifier$/;"	g	namespace:std
__memory_order_modifier_mask	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_modifier_mask = 0xffff0000,$/;"	e	enum:std::__memory_order_modifier	access:public
__min	d:/include/c++/14/ext/numeric_traits.h	/^      static const _Value __min = __is_signed ? -__max - 1 : (_Value)0;$/;"	m	struct:__gnu_cxx::__numeric_traits_integer	typeref:typename:const _Value	access:public
__min	d:/include/c++/14/ext/numeric_traits.h	/^    const _Value __numeric_traits_integer<_Value>::__min;$/;"	m	class:__gnu_cxx::__numeric_traits_integer<_Value>	typeref:typename:const _Value
__min_cmp	d:/include/c++/14/bits/stl_algobase.h	/^    __min_cmp(_Tp __x, _Tp __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp __x,_Tp __y)
__mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
__mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
__miter_base	d:/include/c++/14/bits/cpp_type_traits.h	/^    __miter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
__miter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __miter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__miter_base (__it.base ()))	signature:(move_iterator<_Iterator> __it)
__miter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __miter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__make_reverse_iterator (__miter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
__mode_t	../../../../../../usr/include/sys/_types.h	/^typedef __uint32_t __mode_t;$/;"	t	typeref:typename:__uint32_t
__mode_t	../../../../../../usr/include/sys/_types.h	/^typedef int __mode_t;$/;"	t	typeref:typename:int
__mode_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned long __mode_t;$/;"	t	typeref:typename:unsigned long
__mode_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned short __mode_t;$/;"	t	typeref:typename:unsigned short
__mode_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __MODE_T_TYPE __mode_t;	\/* Type of file attribute bitmasks.  *\/$/;"	v	typeref:typename:__STD_TYPE __MODE_T_TYPE
__move_get	d:/include/c++/14/bits/stl_pair.h	/^	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp1 &&	access:public	signature:(pair<_Tp1,_Tp2> && __pair)
__move_get	d:/include/c++/14/bits/stl_pair.h	/^	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp2 &&	access:public	signature:(pair<_Tp1,_Tp2> && __pair)
__move_if_noexcept_cond	d:/include/c++/14/bits/move.h	/^    struct __move_if_noexcept_cond$/;"	s	namespace:std	inherits:__and_<__not_<is_nothrow_move_constructible<_Tp>>,is_copy_constructible<_Tp>>::type
__move_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __move_iter_cat$/;"	s	namespace:std::__detail
__move_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __move_iter_cat<_Iterator>$/;"	s	namespace:std::__detail
__mutex	d:/include/c++/14/ext/concurrence.h	/^    __mutex() $/;"	f	class:__gnu_cxx::__mutex	access:public	signature:()
__mutex	d:/include/c++/14/ext/concurrence.h	/^    __mutex(const __mutex&);$/;"	p	class:__gnu_cxx::__mutex	access:private	signature:(const __mutex &)
__mutex	d:/include/c++/14/ext/concurrence.h	/^  class __mutex $/;"	c	namespace:__gnu_cxx
__mutex_type	d:/include/c++/14/ext/concurrence.h	/^    typedef __mutex __mutex_type;$/;"	t	class:__gnu_cxx::__scoped_lock	typeref:typename:__mutex	access:public
__names	d:/include/x86_64-linux-gnu/bits/types/__locale_t.h	/^  const char *__names[13];$/;"	m	struct:__locale_struct	typeref:typename:const char * [13]	access:public
__need_NULL	../../../../../../usr/include/stdlib.h	/^#define __need_NULL$/;"	d
__need_NULL	d:/include/locale.h	/^#define __need_NULL$/;"	d
__need_NULL	d:/include/sched.h	/^#define __need_NULL$/;"	d
__need_NULL	d:/include/stdio.h	/^#define __need_NULL$/;"	d
__need_NULL	d:/include/time.h	/^#define __need_NULL$/;"	d
__need_NULL	d:/include/wchar.h	/^#define __need_NULL$/;"	d
__need___va_list	d:/include/stdio.h	/^#define __need___va_list$/;"	d
__need___va_list	d:/include/wchar.h	/^#define __need___va_list$/;"	d
__need_size_t	../../../../../../usr/include/stdlib.h	/^#define __need_size_t$/;"	d
__need_size_t	../../../../../../usr/include/sys/_types.h	/^#define __need_size_t$/;"	d
__need_size_t	d:/include/alloca.h	/^#define	__need_size_t$/;"	d
__need_size_t	d:/include/sched.h	/^#define __need_size_t$/;"	d
__need_size_t	d:/include/stdio.h	/^#define __need_size_t$/;"	d
__need_size_t	d:/include/time.h	/^#define __need_size_t$/;"	d
__need_size_t	d:/include/wchar.h	/^#define __need_size_t$/;"	d
__need_wchar_t	../../../../../../usr/include/stdlib.h	/^#define __need_wchar_t$/;"	d
__need_wchar_t	d:/include/wchar.h	/^#define __need_wchar_t$/;"	d
__need_wint_t	../../../../../../usr/include/sys/_types.h	/^#define __need_wint_t$/;"	d
__negate	d:/include/c++/14/bits/predefined_ops.h	/^    __negate(_Iter_pred<_Predicate> __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_negate<_Predicate>	signature:(_Iter_pred<_Predicate> __pred)
__nest	d:/include/c++/14/bits/nested_exception.h	/^      using __nest = __and_<is_class<_Up>, __bool_constant<!__is_final(_Up)>,$/;"	t	function:std::throw_with_nested
__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __new_allocator<_Tp1> &)
__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __new_allocator &)
__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^    class __new_allocator$/;"	c	namespace:std
__new_expr_t	d:/include/c++/14/bits/alloc_traits.h	/^      using __new_expr_t$/;"	t	struct:std::__allocator_traits_base	access:protected
__newlast1	d:/include/c++/14/bits/stl_algobase.h	/^	__newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _II1	access:public	signature:(_II1,_II1 __last1,_II2,_II2)
__newlast1	d:/include/c++/14/bits/stl_algobase.h	/^	__newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _RAI1	access:public	signature:(_RAI1 __first1,_RAI1 __last1,_RAI2 __first2,_RAI2 __last2)
__next	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__next	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_slist *__next;$/;"	m	struct:__pthread_internal_slist	typeref:struct:__pthread_internal_slist *	access:public
__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(const ::__gnu_debug::_Safe_iterator<$/;"	p	namespace:std	typeref:typename:_Ite	signature:(const::__gnu_debug::_Safe_iterator<::__gnu_cxx::__normal_iterator<_Ite,_Cont>,_Seq,std::random_access_iterator_tag> &)
__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,$/;"	p	namespace:std	typeref:typename:_Ite	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,std::random_access_iterator_tag> &)
__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    decltype(std::__niter_base(std::declval<_Ite>()))$/;"	p	class:std::std	typeref:typename:_GLIBCXX20_CONSTEXPR decltype() __niter_base (const::__gnu_debug::_Safe_iterator<_Ite,_Seq,std::random_access_iterator_tag> &)noexcept (std::is_nothrow_copy_constructible<_Ite>::value)	signature:(std::declval<_Ite> ())
__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR _Iterator	signature:(__gnu_cxx::__normal_iterator<_Iterator,_Container> __it)
__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(make_move_iterator (__niter_base (__it.base ())))	signature:(move_iterator<_Iterator> __it)
__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__make_reverse_iterator (__niter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
__niter_wrap	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_wrap(_From __from, _To __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _From	signature:(_From __from,_To __res)
__niter_wrap	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_wrap(const _Iterator&, _Iterator __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(const _Iterator &,_Iterator __res)
__nl_item	../../../../../../usr/include/sys/_types.h	/^typedef	int		__nl_item;$/;"	t	typeref:typename:int
__nlink_t	../../../../../../usr/include/sys/_types.h	/^typedef	unsigned short	__nlink_t;$/;"	t	typeref:typename:unsigned short
__nlink_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __NLINK_T_TYPE __nlink_t;	\/* Type of file link counts.  *\/$/;"	v	typeref:typename:__STD_TYPE __NLINK_T_TYPE
__nonnull	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __nonnull(/;"	d	signature:(params)
__noreplace	d:/include/c++/14/bits/ios_base.h	/^    static const openmode __noreplace =	_S_noreplace;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	__normal_iterator(const __normal_iterator<_Iter, _Container>& __i)$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __normal_iterator<_Iter,_Container> & __i)
__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Iterator & __i)
__normal_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class __normal_iterator$/;"	c	namespace:__gnu_cxx
__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag { using type = void; };$/;"	s	class:std::__shared_count	access:private
__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };$/;"	s	class:std::__shared_count	access:private
__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag<_Sp_counted_array_base<_Alloc>> { };$/;"	s	class:std::__shared_count	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater	inherits:true_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater_equal	inherits:true_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less	inherits:true_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less_equal	inherits:true_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
__not_same	d:/include/c++/14/bits/refwrap.h	/^	using __not_same$/;"	t	class:std::reference_wrapper	typeref:typename:enable_if<!is_same<reference_wrapper,_Up2>::value>::type	access:private
__num_base	d:/include/c++/14/bits/locale_facets.h	/^  class __num_base$/;"	c	namespace:std
__num_get_type	d:/include/c++/14/bits/basic_ios.h	/^						     __num_get_type;$/;"	t	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
__num_put_type	d:/include/c++/14/bits/basic_ios.h	/^						     __num_put_type;$/;"	t	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_integer<_Value>
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<__ibm128>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<__ibm128>
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<__ieee128>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<__ieee128>
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<double>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<double>
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<float>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<float>
__numeric_traits	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits<long double>$/;"	s	namespace:__gnu_cxx	inherits:__numeric_traits_floating<longdouble>
__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating$/;"	s	namespace:__gnu_cxx
__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating<__ibm128>$/;"	s	namespace:__gnu_cxx
__numeric_traits_floating	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_floating<__ieee128>$/;"	s	namespace:__gnu_cxx
__numeric_traits_integer	d:/include/c++/14/ext/numeric_traits.h	/^    struct __numeric_traits_integer$/;"	s	namespace:__gnu_cxx
__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      __numpunct_cache(size_t __refs = 0)$/;"	f	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
__nusers	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __nusers;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__off64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __OFF64_T_TYPE __off64_t;	\/* Type of file sizes and offsets (LFS).  *\/$/;"	v	typeref:typename:__STD_TYPE __OFF64_T_TYPE
__off64_t_defined	d:/include/stdio.h	/^# define __off64_t_defined$/;"	d
__off_t	../../../../../../usr/include/sys/_types.h	/^typedef _off64_t __off_t;$/;"	t	typeref:typename:_off64_t
__off_t	../../../../../../usr/include/sys/_types.h	/^typedef _off_t __off_t;$/;"	t	typeref:typename:_off_t
__off_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __OFF_T_TYPE __off_t;	\/* Type of file sizes and offsets.  *\/$/;"	v	typeref:typename:__STD_TYPE __OFF_T_TYPE
__off_t_defined	d:/include/stdio.h	/^# define __off_t_defined$/;"	d
__once_flag	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^} __once_flag;$/;"	t	typeref:struct:__anon8b6d42ac0108
__ops	d:/include/c++/14/bits/predefined_ops.h	/^namespace __ops$/;"	n	namespace:__gnu_cxx
__or_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __or_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
__ostream_fill	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
__ostream_insert	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__ostream_type	d:/include/c++/14/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	t	function:std::__ostream_fill	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	d:/include/c++/14/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;      $/;"	t	function:std::__ostream_write	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_type	d:/include/c++/14/bits/ostream_insert.h	/^      typedef basic_ostream<_CharT, _Traits>       __ostream_type;$/;"	t	function:std::__ostream_insert	typeref:typename:basic_ostream<_CharT,_Traits>
__ostream_write	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
__overflow	d:/include/stdio.h	/^extern int __overflow (FILE *, int);$/;"	p	typeref:typename:int	signature:(FILE *,int)
__owner	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __owner;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pad	d:/include/c++/14/bits/locale_facets.h	/^    struct __pad$/;"	s	namespace:std
__pad	d:/include/pthread.h	/^  void *__pad[4];$/;"	m	struct:__anone6cbf2430b08	typeref:typename:void * [4]	access:public
__pad1	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[3];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[3]	access:public
__pad1	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[7];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[7]	access:public
__pad2	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pad2	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned long int __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned long int	access:public
__pad3	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad3;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pad4	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad4;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base(const __pair_base&) = default;$/;"	p	class:std::__pair_base	access:private	signature:(const __pair_base &)
__pair_base	d:/include/c++/14/bits/stl_pair.h	/^  template<typename _U1, typename _U2> class __pair_base$/;"	c	namespace:std
__pair_get	d:/include/c++/14/bits/stl_pair.h	/^    struct __pair_get<0>$/;"	s	namespace:std
__pair_get	d:/include/c++/14/bits/stl_pair.h	/^    struct __pair_get<1>$/;"	s	namespace:std
__pair_type	d:/include/c++/14/bits/stl_pair.h	/^      typedef pair<__ds_type1, __ds_type2> 	      __pair_type;$/;"	t	function:std::make_pair	typeref:typename:pair<__ds_type1,__ds_type2>
__pid_t	../../../../../../usr/include/sys/_types.h	/^typedef int __pid_t;$/;"	t	typeref:typename:int
__pid_t	../../../../../../usr/include/sys/_types.h	/^typedef signed char __pid_t;$/;"	t	typeref:typename:signed char
__pid_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __PID_T_TYPE __pid_t;	\/* Type of process identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __PID_T_TYPE
__pid_t_defined	d:/include/sched.h	/^# define __pid_t_defined$/;"	d
__pid_t_defined	d:/include/time.h	/^#  define __pid_t_defined$/;"	d
__pocca	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocca = typename _Tp::propagate_on_container_copy_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_copy_assignment	access:protected
__pocca	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocca =$/;"	t	function:std::__alloc_on_copy	typeref:typename:__traits::propagate_on_container_copy_assignment::type
__pocma	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocma = typename _Tp::propagate_on_container_move_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_move_assignment	access:protected
__pocma	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocma$/;"	t	function:std::__alloc_on_move	typeref:typename:__traits::propagate_on_container_move_assignment::type
__pocs	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocs = typename _Tp::propagate_on_container_swap;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_swap	access:protected
__pocs	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocs = typename __traits::propagate_on_container_swap::type;$/;"	t	function:std::__alloc_on_swap	typeref:typename:__traits::propagate_on_container_swap::type
__pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __pointer = typename _Tp::pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::pointer	access:protected
__pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      typedef _PTp* 	__pointer_type;$/;"	t	struct:std::__atomic_base	typeref:typename:_PTp *	access:private
__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^      __poison_hash(__poison_hash&&);$/;"	p	struct:std::__poison_hash	access:private	signature:(__poison_hash &&)
__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __poison_hash$/;"	s	namespace:std
__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>$/;"	s	namespace:std
__pos	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __off64_t __pos;$/;"	m	struct:_G_fpos64_t	typeref:typename:__off64_t	access:public
__pos	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __off_t __pos;$/;"	m	struct:_G_fpos_t	typeref:typename:__off_t	access:public
__postfix_proxy	d:/include/c++/14/bits/stl_iterator.h	/^      __postfix_proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::__postfix_proxy	access:private	signature:(iter_reference_t<_It> && __x)
__postfix_proxy	d:/include/c++/14/bits/stl_iterator.h	/^    class __postfix_proxy$/;"	c	class:std::common_iterator	access:private
__pred_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __pred_iter(_Predicate __pred)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Iter_pred<_Predicate>	signature:(_Predicate __pred)
__prev	d:/include/pthread.h	/^  struct _pthread_cleanup_buffer *__prev; \/* Chaining of cleanup functions.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer *	access:public
__prev	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float128>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float16>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float32>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Float64>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<_Tp, false>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<__gnu_cxx::__bfloat16_t>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<double>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<float>$/;"	s	namespace:__gnu_cxx
__promote	d:/include/c++/14/ext/type_traits.h	/^    struct __promote<long double>$/;"	s	namespace:__gnu_cxx
__promote_2	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_2$/;"	s	namespace:__gnu_cxx
__promote_2	d:/include/c++/14/ext/type_traits.h	/^    using __promote_2 = __promote<__promoted_t<_Tp, _Up>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up>>
__promote_3	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_3$/;"	s	namespace:__gnu_cxx
__promote_3	d:/include/c++/14/ext/type_traits.h	/^    using __promote_3 = __promote<__promoted_t<_Tp, _Up, _Vp>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up,_Vp>>
__promote_4	d:/include/c++/14/ext/type_traits.h	/^    struct __promote_4$/;"	s	namespace:__gnu_cxx
__promote_4	d:/include/c++/14/ext/type_traits.h	/^    using __promote_4 = __promote<__promoted_t<_Tp, _Up, _Vp, _Wp>>;$/;"	t	namespace:__gnu_cxx	typeref:typename:__promote<__promoted_t<_Tp,_Up,_Vp,_Wp>>
__promoted_t	d:/include/c++/14/ext/type_traits.h	/^    using __promoted_t = decltype((typename __promote<_Tp>::__type(0) + ...));$/;"	t	namespace:__gnu_cxx
__pstl	d:/include/c++/14/pstl/execution_defs.h	/^namespace __pstl$/;"	n
__pstl::__internal	d:/include/c++/14/pstl/execution_defs.h	/^namespace __internal$/;"	n	namespace:__pstl
__pstl::__internal::__enable_if_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^using __enable_if_execution_policy =$/;"	t	namespace:__pstl::__internal	typeref:typename:std::enable_if<__pstl::execution::is_execution_policy<std::__remove_cvref_t<_ExecPolicy>>::value,_Tp>::type
__pstl::execution	d:/include/c++/14/pstl/execution_defs.h	/^namespace execution$/;"	n	namespace:__pstl
__pstl::execution::v1	d:/include/c++/14/pstl/execution_defs.h	/^inline namespace v1$/;"	n	namespace:__pstl::execution
__pstl::execution::v1::is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy : std::false_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::false_type
__pstl::execution::v1::is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::parallel_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
__pstl::execution::v1::is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::parallel_unsequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
__pstl::execution::v1::is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::sequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
__pstl::execution::v1::is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::unsequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
__pstl::execution::v1::is_execution_policy_v	d:/include/c++/14/pstl/execution_defs.h	/^constexpr bool is_execution_policy_v = __pstl::execution::is_execution_policy<_Tp>::value;$/;"	v	namespace:__pstl::execution::v1	typeref:typename:bool
__pstl::execution::v1::par	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr parallel_policy par{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE parallel_policy
__pstl::execution::v1::par_unseq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr parallel_unsequenced_policy par_unseq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE parallel_unsequenced_policy
__pstl::execution::v1::parallel_policy	d:/include/c++/14/pstl/execution_defs.h	/^class parallel_policy$/;"	c	namespace:__pstl::execution::v1
__pstl::execution::v1::parallel_unsequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class parallel_unsequenced_policy$/;"	c	namespace:__pstl::execution::v1
__pstl::execution::v1::seq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr sequenced_policy seq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE sequenced_policy
__pstl::execution::v1::sequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class sequenced_policy$/;"	c	namespace:__pstl::execution::v1
__pstl::execution::v1::unseq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr unsequenced_policy unseq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE unsequenced_policy
__pstl::execution::v1::unsequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class unsequenced_policy$/;"	c	namespace:__pstl::execution::v1
__pthread_cleanup_class	d:/include/pthread.h	/^  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class	access:public	signature:(void (* __fct)(void *),void * __arg)
__pthread_cleanup_class	d:/include/pthread.h	/^class __pthread_cleanup_class$/;"	c
__pthread_cleanup_class::__cancel_arg	d:/include/pthread.h	/^  void *__cancel_arg;$/;"	m	class:__pthread_cleanup_class	typeref:typename:void *	access:private
__pthread_cleanup_class::__cancel_routine	d:/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	class:__pthread_cleanup_class	typeref:typename:void (*)(void *)	access:private
__pthread_cleanup_class::__cancel_type	d:/include/pthread.h	/^  int __cancel_type;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__pthread_cleanup_class::__defer	d:/include/pthread.h	/^  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:()
__pthread_cleanup_class::__do_it	d:/include/pthread.h	/^  int __do_it;$/;"	m	class:__pthread_cleanup_class	typeref:typename:int	access:private
__pthread_cleanup_class::__pthread_cleanup_class	d:/include/pthread.h	/^  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)$/;"	f	class:__pthread_cleanup_class	access:public	signature:(void (* __fct)(void *),void * __arg)
__pthread_cleanup_class::__restore	d:/include/pthread.h	/^  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:() const
__pthread_cleanup_class::__setdoit	d:/include/pthread.h	/^  void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:(int __newval)
__pthread_cleanup_class::~__pthread_cleanup_class	d:/include/pthread.h	/^  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class	access:public	signature:()
__pthread_cleanup_frame	d:/include/pthread.h	/^struct __pthread_cleanup_frame$/;"	s
__pthread_cleanup_frame::__cancel_arg	d:/include/pthread.h	/^  void *__cancel_arg;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void *	access:public
__pthread_cleanup_frame::__cancel_routine	d:/include/pthread.h	/^  void (*__cancel_routine) (void *);$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:void (*)(void *)	access:public
__pthread_cleanup_frame::__cancel_type	d:/include/pthread.h	/^  int __cancel_type;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__pthread_cleanup_frame::__do_it	d:/include/pthread.h	/^  int __do_it;$/;"	m	struct:__pthread_cleanup_frame	typeref:typename:int	access:public
__pthread_cleanup_routine	d:/include/pthread.h	/^__pthread_cleanup_routine (struct __pthread_cleanup_frame *__frame)$/;"	f	typeref:typename:__extern_inline void	signature:(struct __pthread_cleanup_frame * __frame)
__pthread_cond_s	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^struct __pthread_cond_s$/;"	s
__pthread_cond_s::__g1_orig_size	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g1_orig_size;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_cond_s::__g1_start	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  __atomic_wide_counter __g1_start;$/;"	m	struct:__pthread_cond_s	typeref:typename:__atomic_wide_counter	access:public
__pthread_cond_s::__g_signals	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_signals[2];$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]	access:public
__pthread_cond_s::__g_size	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __g_size[2] __LOCK_ALIGNMENT;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int[2]__LOCK_ALIGNMENT	access:public
__pthread_cond_s::__unused_initialized_1	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __unused_initialized_1;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_cond_s::__unused_initialized_2	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __unused_initialized_2;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_cond_s::__wrefs	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __wrefs;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__pthread_cond_s::__wseq	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  __atomic_wide_counter __wseq;$/;"	m	struct:__pthread_cond_s	typeref:typename:__atomic_wide_counter	access:public
__pthread_internal_list	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef struct __pthread_internal_list$/;"	s
__pthread_internal_list::__next	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__next;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__pthread_internal_list::__prev	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_list *__prev;$/;"	m	struct:__pthread_internal_list	typeref:struct:__pthread_internal_list *	access:public
__pthread_internal_slist	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef struct __pthread_internal_slist$/;"	s
__pthread_internal_slist::__next	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  struct __pthread_internal_slist *__next;$/;"	m	struct:__pthread_internal_slist	typeref:struct:__pthread_internal_slist *	access:public
__pthread_list_t	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^} __pthread_list_t;$/;"	t	typeref:struct:__pthread_internal_list
__pthread_mutex_s	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^struct __pthread_mutex_s$/;"	s
__pthread_mutex_s::__anon472e9925010a	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  {$/;"	u	struct:__pthread_mutex_s	access:public
__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    {$/;"	s	union:__pthread_mutex_s::__anon472e9925010a	access:public
__pthread_mutex_s::__anon472e9925010a::__anon472e99250208::__eelision	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __eelision;$/;"	m	struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	typeref:typename:short	access:public
__pthread_mutex_s::__anon472e9925010a::__anon472e99250208::__espins	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^      short __espins;$/;"	m	struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	typeref:typename:short	access:public
__pthread_mutex_s::__anon472e9925010a::__elision_data	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    } __elision_data;$/;"	m	union:__pthread_mutex_s::__anon472e9925010a	typeref:struct:__pthread_mutex_s::__anon472e9925010a::__anon472e99250208	access:public
__pthread_mutex_s::__anon472e9925010a::__list	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^    __pthread_slist_t __list;$/;"	m	union:__pthread_mutex_s::__anon472e9925010a	typeref:typename:__pthread_slist_t	access:public
__pthread_mutex_s::__count	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __count;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__pthread_mutex_s::__elision	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __elision;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__pthread_mutex_s::__kind	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __kind;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__list	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  __pthread_list_t __list;$/;"	m	struct:__pthread_mutex_s	typeref:typename:__pthread_list_t	access:public
__pthread_mutex_s::__lock	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __lock;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__nusers	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  unsigned int __nusers;$/;"	m	struct:__pthread_mutex_s	typeref:typename:unsigned int	access:public
__pthread_mutex_s::__owner	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  int __owner;$/;"	m	struct:__pthread_mutex_s	typeref:typename:int	access:public
__pthread_mutex_s::__spins	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __spins;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__pthread_register_cancel	d:/include/pthread.h	/^extern void __pthread_register_cancel (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_register_cancel_defer	d:/include/pthread.h	/^extern void __pthread_register_cancel_defer (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_rwlock_arch_t	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^struct __pthread_rwlock_arch_t$/;"	s
__pthread_rwlock_arch_t::__cur_writer	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __cur_writer;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__pthread_rwlock_arch_t::__flags	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__flags	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __flags;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__pad1	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[3];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[3]	access:public
__pthread_rwlock_arch_t::__pad1	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad1[7];$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char[7]	access:public
__pthread_rwlock_arch_t::__pad2	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__pad2	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned long int __pad2;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned long int	access:public
__pthread_rwlock_arch_t::__pad3	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad3;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__pad4	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __pad4;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__readers	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __readers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__rwelision	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  signed char __rwelision;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:signed char	access:public
__pthread_rwlock_arch_t::__shared	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__pthread_rwlock_arch_t::__shared	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__pthread_rwlock_arch_t::__writers	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__writers_futex	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_rwlock_arch_t::__wrphase_futex	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __wrphase_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__pthread_slist_t	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^} __pthread_slist_t;$/;"	t	typeref:struct:__pthread_internal_slist
__pthread_unregister_cancel	d:/include/pthread.h	/^extern void __pthread_unregister_cancel (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_unregister_cancel_restore	d:/include/pthread.h	/^extern void __pthread_unregister_cancel_restore (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__pthread_unwind_buf_t	d:/include/pthread.h	/^} __pthread_unwind_buf_t __attribute__ ((__aligned__));$/;"	t	typeref:struct:__anone6cbf2430b08
__pthread_unwind_next	d:/include/pthread.h	/^extern void __pthread_unwind_next (__pthread_unwind_buf_t *__buf)$/;"	p	typeref:typename:void	signature:(__pthread_unwind_buf_t * __buf)
__ptr	d:/include/c++/14/bits/stl_iterator.h	/^	struct __ptr$/;"	s	struct:std::iterator_traits	access:private
__ptr	d:/include/c++/14/bits/stl_iterator.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::iterator_traits	access:private
__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
__ptr_rebind	d:/include/c++/14/bits/ptr_traits.h	/^    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;$/;"	t	namespace:std	typeref:typename:pointer_traits<_Ptr>::template rebind<_Tp>
__ptr_t	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#define __ptr_t /;"	d
__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem : __get_first_arg<_Ptr>$/;"	s	namespace:std	inherits:__get_first_arg<_Ptr>
__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>$/;"	s	namespace:std
__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem<_Ptr, void>$/;"	s	namespace:std
__ptr_traits_elem_t	d:/include/c++/14/bits/ptr_traits.h	/^    using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;$/;"	t	namespace:std	typeref:typename:__ptr_traits_elem<_Ptr>::type
__ptr_traits_impl	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>$/;"	s	namespace:std	inherits:__ptr_traits_ptr_to<_Ptr,_Elt>
__ptr_traits_impl	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_impl<_Ptr, __undefined>$/;"	s	namespace:std
__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to$/;"	s	namespace:std
__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to<_Ptr, _Elt, true>$/;"	s	namespace:std
__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to<_Tp*, _Tp, false>$/;"	s	namespace:std
__pure_dummy	d:/include/c++/14/bits/cxxabi_forced.h	/^    virtual void __pure_dummy() = 0; $/;"	p	class:__cxxabiv1::__forced_unwind	typeref:typename:void	access:private	signature:()
__putc_unlocked_body	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __putc_unlocked_body(/;"	d	signature:(_ch,_fp)
__quad_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef long long int __quad_t;$/;"	t	typeref:typename:long long int
__quad_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef long int __quad_t;$/;"	t	typeref:typename:long int
__rai_type	d:/include/c++/14/bits/stl_algobase.h	/^      typedef std::__lc_rai<_Category1, _Category2> __rai_type;$/;"	t	function:std::__lexicographical_compare_impl	typeref:typename:std::__lc_rai<_Category1,_Category2>
__readers	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __readers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__rebind	d:/include/c++/14/bits/alloc_traits.h	/^      struct __rebind : __replace_first_arg<_Tp, _Up>$/;"	s	struct:std::__allocator_traits_base	inherits:__replace_first_arg<_Tp,_Up>	access:public
__rebind	d:/include/c++/14/bits/alloc_traits.h	/^      struct __rebind<_Tp, _Up,$/;"	s	struct:std::__allocator_traits_base	access:public
__rebind	d:/include/c++/14/bits/ptr_traits.h	/^	using __rebind = __type_identity<typename _Tp::template rebind<_Up>>;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__type_identity<typename _Tp::template rebind<_Up>>	access:private
__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex() $/;"	f	class:__gnu_cxx::__recursive_mutex	access:public	signature:()
__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex(const __recursive_mutex&);$/;"	p	class:__gnu_cxx::__recursive_mutex	access:private	signature:(const __recursive_mutex &)
__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^  class __recursive_mutex $/;"	c	namespace:__gnu_cxx
__reent_assert	../../../../../../usr/include/sys/reent.h	/^#define __reent_assert(/;"	d	signature:(x)
__reference	d:/include/c++/14/bits/stl_iterator.h	/^    using __reference = iter_const_reference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_const_reference_t<_It>	access:private
__relocate_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
__relocate_a_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a_1(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
__relocate_a_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a_1(_Tp* __first, _Tp* __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value,_Tp * >	signature:(_Tp * __first,_Tp * __last,_Tp * __result,allocator<_Up> & __alloc)
__relocate_object_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_Tp * __restrict __dest,_Up * __restrict __orig,_Allocator & __alloc)
__remove_if	d:/include/c++/14/bits/stl_algobase.h	/^    __remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<char>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned char>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned int>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long long>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned long>$/;"	s	namespace:__gnu_cxx
__remove_unsigned	d:/include/c++/14/ext/type_traits.h	/^    struct __remove_unsigned<unsigned short>$/;"	s	namespace:__gnu_cxx
__replace_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __replace_first_arg$/;"	s	namespace:std
__replace_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>$/;"	s	namespace:std
__resize_and_overwrite	d:/include/c++/14/bits/basic_string.h	/^	__resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n,_Operation __op)
__resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^	__resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
__resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^    __resize_and_overwrite(const size_type __n, _Operation __op)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(const size_type __n,_Operation __op)
__restore	d:/include/pthread.h	/^  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:() const
__restrict	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __restrict	/;"	d
__restrict_arr	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#   define __restrict_arr	/;"	d
__restrict_arr	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __restrict_arr	/;"	d
__restrict_arr	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __restrict_arr	/;"	d
__result	d:/include/c++/14/bits/invoke.h	/^      using __result = __invoke_result<_Callable, _Args...>;$/;"	t	function:std::__invoke	typeref:typename:__invoke_result<_Callable,_Args...>
__result	d:/include/c++/14/bits/invoke.h	/^      using __result = __invoke_result<_Callable, _Args...>;$/;"	t	function:std::__invoke_r	typeref:typename:__invoke_result<_Callable,_Args...>
__result_type	d:/include/c++/14/bits/refwrap.h	/^      using __result_type = _Res;$/;"	t	struct:std::_Mem_fn_traits_base	typeref:typename:_Res	access:public
__rethrow_if_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __rethrow_if_nested_impl(const _Ex* __ptr, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex * __ptr,true_type)
__rethrow_if_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^  __rethrow_if_nested_impl(const void*, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(const void *,false_type)
__return_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      __return_temporary_buffer(_Tp* __p,$/;"	f	namespace:std::__detail	typeref:typename:void	signature:(_Tp * __p,size_t __len)
__returns_nonnull	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __returns_nonnull __attribute__ ((__returns_nonnull_/;"	d
__returns_nonnull	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __returns_nonnull$/;"	d
__rlim64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __RLIM64_T_TYPE __rlim64_t;	\/* Type for resource measurement (LFS).  *\/$/;"	v	typeref:typename:__STD_TYPE __RLIM64_T_TYPE
__rlim_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __RLIM_T_TYPE __rlim_t;	\/* Type for resource measurement.  *\/$/;"	v	typeref:typename:__STD_TYPE __RLIM_T_TYPE
__routine	d:/include/pthread.h	/^  void (*__routine) (void *);             \/* Function to call.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void (*)(void *)	access:public
__rvalue_reference	d:/include/c++/14/bits/stl_iterator.h	/^    using __rvalue_reference = __detail::__iter_const_rvalue_reference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:__detail::__iter_const_rvalue_reference_t<_It>	access:private
__rwelision	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  signed char __rwelision;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:signed char	access:public
__sFILE	../../../../../../usr/include/sys/reent.h	/^struct __sFILE {$/;"	s
__sFILE64	../../../../../../usr/include/sys/reent.h	/^struct __sFILE64 {$/;"	s
__sFILE64::_bf	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _bf;	\/* the buffer (at least 1 byte, if !NULL) *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
__sFILE64::_blksize	../../../../../../usr/include/sys/reent.h	/^  int	_blksize;	\/* stat.st_blksize (may be != _bf._size) *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_close	../../../../../../usr/include/sys/reent.h	/^  int (*_close) (struct _reent *, void *);$/;"	m	struct:__sFILE64	typeref:typename:int (*)(struct _reent *,void *)	access:public
__sFILE64::_cookie	../../../../../../usr/include/sys/reent.h	/^  void *	_cookie;	\/* cookie passed to io functions *\/$/;"	m	struct:__sFILE64	typeref:typename:void *	access:public
__sFILE64::_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;$/;"	m	struct:__sFILE64	typeref:struct:_reent *	access:public
__sFILE64::_file	../../../../../../usr/include/sys/reent.h	/^  short	_file;		\/* fileno, if Unix descriptor, else -1 *\/$/;"	m	struct:__sFILE64	typeref:typename:short	access:public
__sFILE64::_flags	../../../../../../usr/include/sys/reent.h	/^  short	_flags;		\/* flags, below; this FILE is free if 0 *\/$/;"	m	struct:__sFILE64	typeref:typename:short	access:public
__sFILE64::_flags2	../../../../../../usr/include/sys/reent.h	/^  int   _flags2;        \/* for future use *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_lb	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _lb;	\/* buffer for fgetline() *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
__sFILE64::_lbfsize	../../../../../../usr/include/sys/reent.h	/^  int	_lbfsize;	\/* 0 or -_bf._size, for inline putc *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_lock	../../../../../../usr/include/sys/reent.h	/^  _flock_t _lock;	\/* for thread-safety locking *\/$/;"	m	struct:__sFILE64	typeref:typename:_flock_t	access:public
__sFILE64::_mbstate	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbstate;	\/* for wide char stdio functions. *\/$/;"	m	struct:__sFILE64	typeref:typename:_mbstate_t	access:public
__sFILE64::_nbuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _nbuf[1];	\/* guarantee a getc() buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char[1]	access:public
__sFILE64::_offset	../../../../../../usr/include/sys/reent.h	/^  _off64_t _offset;     \/* current lseek offset *\/$/;"	m	struct:__sFILE64	typeref:typename:_off64_t	access:public
__sFILE64::_p	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_p;	\/* current position in (some) buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char *	access:public
__sFILE64::_r	../../../../../../usr/include/sys/reent.h	/^  int	_r;		\/* read space left for getc() *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_read	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_read) (struct _reent *, void *,$/;"	m	struct:__sFILE64	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
__sFILE64::_seek	../../../../../../usr/include/sys/reent.h	/^  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);$/;"	m	struct:__sFILE64	typeref:typename:_fpos_t (*)(struct _reent *,void *,_fpos_t,int)	access:public
__sFILE64::_seek64	../../../../../../usr/include/sys/reent.h	/^  _fpos64_t (*_seek64) (struct _reent *, void *, _fpos64_t, int);$/;"	m	struct:__sFILE64	typeref:typename:_fpos64_t (*)(struct _reent *,void *,_fpos64_t,int)	access:public
__sFILE64::_ub	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _ub;	\/* ungetc buffer *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
__sFILE64::_ubuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _ubuf[3];	\/* guarantee an ungetc() buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char[3]	access:public
__sFILE64::_up	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_up;	\/* saved _p when _p is doing ungetc data *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char *	access:public
__sFILE64::_ur	../../../../../../usr/include/sys/reent.h	/^  int	_ur;		\/* saved _r when _r is counting ungetc data *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_w	../../../../../../usr/include/sys/reent.h	/^  int	_w;		\/* write space left for putc() *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
__sFILE64::_write	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_write) (struct _reent *, void *,$/;"	m	struct:__sFILE64	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,const char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
__sFILE::_bf	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _bf;	\/* the buffer (at least 1 byte, if !NULL) *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
__sFILE::_blksize	../../../../../../usr/include/sys/reent.h	/^  int	_blksize;	\/* stat.st_blksize (may be != _bf._size) *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_close	../../../../../../usr/include/sys/reent.h	/^  int (*_close) (struct _reent *, void *);$/;"	m	struct:__sFILE	typeref:typename:int (*)(struct _reent *,void *)	access:public
__sFILE::_cookie	../../../../../../usr/include/sys/reent.h	/^  void *	_cookie;	\/* cookie passed to io functions *\/$/;"	m	struct:__sFILE	typeref:typename:void *	access:public
__sFILE::_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;	\/* Here for binary compatibility? Remove? *\/$/;"	m	struct:__sFILE	typeref:struct:_reent *	access:public
__sFILE::_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;$/;"	m	struct:__sFILE	typeref:struct:_reent *	access:public
__sFILE::_file	../../../../../../usr/include/sys/reent.h	/^  short	_file;		\/* fileno, if Unix descriptor, else -1 *\/$/;"	m	struct:__sFILE	typeref:typename:short	access:public
__sFILE::_flags	../../../../../../usr/include/sys/reent.h	/^  short	_flags;		\/* flags, below; this FILE is free if 0 *\/$/;"	m	struct:__sFILE	typeref:typename:short	access:public
__sFILE::_flags2	../../../../../../usr/include/sys/reent.h	/^  int   _flags2;        \/* for future use *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_lb	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _lb;	\/* buffer for fgetline() *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
__sFILE::_lbfsize	../../../../../../usr/include/sys/reent.h	/^  int	_lbfsize;	\/* 0 or -_bf._size, for inline putc *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_lock	../../../../../../usr/include/sys/reent.h	/^  _flock_t _lock;	\/* for thread-safety locking *\/$/;"	m	struct:__sFILE	typeref:typename:_flock_t	access:public
__sFILE::_mbstate	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbstate;	\/* for wide char stdio functions. *\/$/;"	m	struct:__sFILE	typeref:typename:_mbstate_t	access:public
__sFILE::_nbuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _nbuf[1];	\/* guarantee a getc() buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char[1]	access:public
__sFILE::_offset	../../../../../../usr/include/sys/reent.h	/^  _off_t _offset;	\/* current lseek offset *\/$/;"	m	struct:__sFILE	typeref:typename:_off_t	access:public
__sFILE::_p	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_p;	\/* current position in (some) buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char *	access:public
__sFILE::_r	../../../../../../usr/include/sys/reent.h	/^  int	_r;		\/* read space left for getc() *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_read	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_read) (struct _reent *, void *,$/;"	m	struct:__sFILE	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
__sFILE::_seek	../../../../../../usr/include/sys/reent.h	/^  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);$/;"	m	struct:__sFILE	typeref:typename:_fpos_t (*)(struct _reent *,void *,_fpos_t,int)	access:public
__sFILE::_ub	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _ub;	\/* ungetc buffer *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
__sFILE::_ubuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _ubuf[3];	\/* guarantee an ungetc() buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char[3]	access:public
__sFILE::_up	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_up;	\/* saved _p when _p is doing ungetc data *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char *	access:public
__sFILE::_ur	../../../../../../usr/include/sys/reent.h	/^  int	_ur;		\/* saved _r when _r is counting ungetc data *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_w	../../../../../../usr/include/sys/reent.h	/^  int	_w;		\/* write space left for putc() *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
__sFILE::_write	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_write) (struct _reent *, void *,$/;"	m	struct:__sFILE	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,const char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
__sa_family_t	../../../../../../usr/include/machine/_types.h	/^typedef __uint16_t __sa_family_t;$/;"	t	typeref:typename:__uint16_t
__sa_family_t	../../../../../../usr/include/sys/_types.h	/^typedef	__uint8_t	__sa_family_t;$/;"	t	typeref:typename:__uint8_t
__safe_bool	d:/include/c++/14/bits/exception_ptr.h	/^      typedef void (exception_ptr::*__safe_bool)();$/;"	t	class:std::__exception_ptr::exception_ptr	typeref:typename:void (exception_ptr::*)()	access:public
__safe_conversion_raw	d:/include/c++/14/bits/unique_ptr.h	/^        using __safe_conversion_raw = __and_<$/;"	t	class:std::unique_ptr	access:public
__safe_conversion_up	d:/include/c++/14/bits/unique_ptr.h	/^	using __safe_conversion_up = __and_<$/;"	t	class:std::unique_ptr	access:public
__safe_conversion_up	d:/include/c++/14/bits/unique_ptr.h	/^	using __safe_conversion_up = __and_<$/;"	t	class:std::unique_ptr	typeref:typename:__and_<is_convertible<typename unique_ptr<_Up,_Ep>::pointer,pointer>,__not_<is_array<_Up>>>	access:private
__saved_mask	d:/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h	/^    __sigset_t __saved_mask;	\/* Saved signal mask.  *\/$/;"	m	struct:__jmp_buf_tag	typeref:typename:__sigset_t	access:public
__sbuf	../../../../../../usr/include/sys/reent.h	/^struct __sbuf {$/;"	s
__sbuf::_base	../../../../../../usr/include/sys/reent.h	/^	unsigned char *_base;$/;"	m	struct:__sbuf	typeref:typename:unsigned char *	access:public
__sbuf::_size	../../../../../../usr/include/sys/reent.h	/^	int	_size;$/;"	m	struct:__sbuf	typeref:typename:int	access:public
__sched_cpualloc	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern cpu_set_t *__sched_cpualloc (size_t __count) __THROW __wur;$/;"	p	typeref:typename:cpu_set_t *	signature:(size_t __count)
__sched_cpucount	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(size_t __setsize,const cpu_set_t * __setp)
__sched_cpufree	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^extern void __sched_cpufree (cpu_set_t *__set) __THROW;$/;"	p	typeref:typename:void	signature:(cpu_set_t * __set)
__sched_priority	d:/include/sched.h	/^#define __sched_priority /;"	d
__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    __scoped_lock(const __scoped_lock&);$/;"	p	class:__gnu_cxx::__scoped_lock	access:private	signature:(const __scoped_lock &)
__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    explicit __scoped_lock(__mutex_type& __name) : _M_device(__name)$/;"	f	class:__gnu_cxx::__scoped_lock	access:public	signature:(__mutex_type & __name)
__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^  class __scoped_lock$/;"	c	namespace:__gnu_cxx
__search	d:/include/c++/14/bits/stl_algobase.h	/^    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
__setdoit	d:/include/pthread.h	/^  void __setdoit (int __newval) { __do_it = __newval; }$/;"	f	class:__pthread_cleanup_class	typeref:typename:void	access:public	signature:(int __newval)
__sf	../../../../../../usr/include/sys/reent.h	/^  __FILE *__sf;			        \/* file descriptors *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
__shared	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  int __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:int	access:public
__shared	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned char __shared;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned char	access:public
__shared_count	d:/include/c++/14/backward/auto_ptr.h	/^    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)$/;"	f	class:std::__shared_count	signature:(std::auto_ptr<_Tp> && __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, \/* is_array = *\/ false_type)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,false_type)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, \/* is_array = *\/ true_type)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,true_type)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, _Deleter __d)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,_Deleter __d)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,_Deleter __d,_Alloc __a)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,$/;"	f	class:std::__shared_count	access:public	signature:(_Tp * & __p,_Sp_alloc_shared_tag<_Alloc> __a,_Args &&...__args)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Tp*& __p, const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::__shared_count	access:public	signature:(_Tp * & __p,const _Sp_counted_array_base<_Alloc> & __a,_Init __init)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(std::auto_ptr<_Tp>&& __r);$/;"	p	class:std::__shared_count	access:public	signature:(std::auto_ptr<_Tp> && __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(std::unique_ptr<_Tp,_Del> && __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count(const __shared_count& __r) noexcept$/;"	f	class:std::__shared_count	access:public	signature:(const __shared_count & __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;$/;"	p	class:std::__shared_count	access:public	signature:(const __weak_count<_Lp> & __r,std::nothrow_t)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_count() noexcept : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:()
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit __shared_count(const __weak_count<_Lp>& __r);$/;"	p	class:std::__shared_count	access:public	signature:(const __weak_count<_Lp> & __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::__shared_count	signature:(const __weak_count<_Lp> & __r,std::nothrow_t)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)$/;"	f	class:std::__shared_count	signature:(const __weak_count<_Lp> & __r)
__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_count$/;"	c	namespace:std
__shared_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)$/;"	f	class:std::__shared_ptr	signature:(std::auto_ptr<_Tp1> && __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)$/;"	f	class:std::__shared_ptr	access:protected	signature:(_Sp_alloc_shared_tag<_Alloc> __tag,_Args &&...__args)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r,element_type * __p)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(auto_ptr<_Yp>&& __r);$/;"	p	class:std::__shared_ptr	access:public	signature:(auto_ptr<_Yp> && __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::__shared_ptr	access:protected	signature:(const _Sp_counted_array_base<_Alloc> & __a,_Init __init=nullptr)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,$/;"	f	class:std::__shared_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r,element_type * __p)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(nullptr_t __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)$/;"	f	class:std::__shared_ptr	access:protected	signature:(unique_ptr<_Tp1,_Del> && __r,__sp_array_delete)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::__shared_ptr	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)$/;"	f	class:std::__shared_ptr	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d,_Alloc __a)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(__shared_ptr&& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr && __r)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(const __shared_ptr&) noexcept = default;$/;"	p	class:std::__shared_ptr	access:public	signature:(const __shared_ptr &)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::__shared_ptr	access:protected	signature:(const __weak_ptr<_Tp,_Lp> & __r,std::nothrow_t)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_ptr() noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:()
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t)
__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr$/;"	c	namespace:std	inherits:__shared_ptr_access<_Tp,_Lp>
__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access$/;"	c	namespace:std
__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access<_Tp, _Lp, false, true>$/;"	c	namespace:std
__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access<_Tp, _Lp, true, false>$/;"	c	namespace:std
__shrink_to_fit_aux	d:/include/c++/14/bits/alloc_traits.h	/^    struct __shrink_to_fit_aux$/;"	s	namespace:std
__shrink_to_fit_aux	d:/include/c++/14/bits/alloc_traits.h	/^    struct __shrink_to_fit_aux<_Tp, true>$/;"	s	namespace:std
__sig_atomic_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef int __sig_atomic_t;$/;"	t	typeref:typename:int
__sigset_t	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^} __sigset_t;$/;"	t	typeref:struct:__anon54c891d20108
__sigsetjmp	d:/include/pthread.h	/^extern int __sigsetjmp (struct __jmp_buf_tag __env[1],$/;"	p	typeref:typename:int	signature:(struct __jmp_buf_tag __env[1],int __savemask)
__sigsetjmp_cancel	d:/include/pthread.h	/^# define __sigsetjmp_cancel(/;"	d	signature:(env,savemask)
__single_object	d:/include/c++/14/bits/unique_ptr.h	/^    { typedef unique_ptr<_Tp> __single_object; };$/;"	t	struct:std::__detail::_MakeUniq	typeref:typename:unique_ptr<_Tp>	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_ATTR_T];$/;"	m	union:pthread_attr_t	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIERATTR_T];$/;"	m	union:__anon3fdbe2cb080a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_BARRIER_T];$/;"	m	union:__anon3fdbe2cb070a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_CONDATTR_T];$/;"	m	union:__anon3fdbe2cb020a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_COND_T];$/;"	m	union:__anon3fdbe2cb040a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEXATTR_T];$/;"	m	union:__anon3fdbe2cb010a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_MUTEX_T];$/;"	m	union:__anon3fdbe2cb030a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCKATTR_T];$/;"	m	union:__anon3fdbe2cb060a	typeref:typename:char[]	access:public
__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_RWLOCK_T];$/;"	m	union:__anon3fdbe2cb050a	typeref:typename:char[]	access:public
__size_t	../../../../../../usr/include/sys/_types.h	/^typedef __SIZE_TYPE__ __size_t;$/;"	t	typeref:typename:__SIZE_TYPE__
__size_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned int __size_t;$/;"	t	typeref:typename:unsigned int
__size_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned long __size_t;$/;"	t	typeref:typename:unsigned long
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__float128 __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR long long	signature:(__float128 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(double __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(double __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(float __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(float __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(int __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long double __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long double __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0	signature:(unsigned __GLIBCXX_TYPE_INT_N_0 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1	signature:(unsigned __GLIBCXX_TYPE_INT_N_1 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2	signature:(unsigned __GLIBCXX_TYPE_INT_N_2 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(unsigned __GLIBCXX_TYPE_INT_N_3 __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
__socklen_t	../../../../../../usr/include/machine/_types.h	/^typedef int __socklen_t;$/;"	t	typeref:typename:int
__socklen_t	../../../../../../usr/include/sys/_types.h	/^typedef	__uint32_t	__socklen_t;$/;"	t	typeref:typename:__uint32_t
__socklen_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __U32_TYPE __socklen_t;$/;"	v	typeref:typename:__STD_TYPE __U32_TYPE
__sp_array_delete	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct __sp_array_delete$/;"	s	namespace:std
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with$/;"	s	namespace:std	inherits:false_type
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Yp*, _Tp*>$/;"	s	namespace:std	inherits:is_convertible<_Yp*,_Tp*>::type
__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible$/;"	s	namespace:std	inherits:is_convertible<_Yp*,_Tp*>::type
__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible<_Up[], _Yp>$/;"	s	namespace:std	inherits:__sp_is_constructible_arr<_Up,_Yp>::type
__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible<_Up[_Nm], _Yp>$/;"	s	namespace:std	inherits:__sp_is_constructible_arrN<_Up,_Nm,_Yp>::type
__sp_is_constructible_arr	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arr$/;"	s	namespace:std	inherits:false_type
__sp_is_constructible_arr	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>$/;"	s	namespace:std	inherits:is_convertible<_Yp(*)[],_Up(*)[]>::type
__sp_is_constructible_arrN	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arrN$/;"	s	namespace:std	inherits:false_type
__sp_is_constructible_arrN	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>$/;"	s	namespace:std	inherits:is_convertible<_Yp(*)[_Nm],_Up(*)[_Nm]>::type
__spins	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^  short __spins;$/;"	m	struct:__pthread_mutex_s	typeref:typename:short	access:public
__spins	d:/include/x86_64-linux-gnu/bits/struct_mutex.h	/^# define __spins /;"	d
__ssize_t	../../../../../../usr/include/sys/_types.h	/^typedef _ssize_t __ssize_t;$/;"	t	typeref:typename:_ssize_t
__ssize_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SSIZE_T_TYPE __ssize_t; \/* Type of a byte count, or error.  *\/$/;"	v	typeref:typename:__STD_TYPE __SSIZE_T_TYPE
__ssize_t_defined	d:/include/stdio.h	/^# define __ssize_t_defined$/;"	d
__state	d:/include/x86_64-linux-gnu/bits/types/__fpos64_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos64_t	typeref:typename:__mbstate_t	access:public
__state	d:/include/x86_64-linux-gnu/bits/types/__fpos_t.h	/^  __mbstate_t __state;$/;"	m	struct:_G_fpos_t	typeref:typename:__mbstate_t	access:public
__stoa	d:/include/c++/14/ext/string_conversions.h	/^    __stoa(_TRet (*__convf) (const _CharT*, _CharT**, _Base...),$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Ret	signature:(_TRet (* __convf)(const _CharT *,_CharT **,_Base...),const char * __name,const _CharT * __str,std::size_t * __idx,_Base...__base)
__str_concat	d:/include/c++/14/bits/basic_string.h	/^    __str_concat(typename _Str::value_type const* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 _GLIBCXX20_CONSTEXPR _Str	signature:(typename _Str::value_type const * __lhs,typename _Str::size_type __lhs_len,typename _Str::value_type const * __rhs,typename _Str::size_type __rhs_len,typename _Str::allocator_type const & __a)
__str_hash_base	d:/include/c++/14/bits/basic_string.h	/^    struct __str_hash_base$/;"	s	namespace:std	inherits:__hash_base<size_t,_StrT>
__struct_FILE_defined	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^#define __struct_FILE_defined /;"	d
__struct_tm_defined	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^#define __struct_tm_defined /;"	d
__stub___compat_bdflush	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub___compat_bdflush$/;"	d
__stub_chflags	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_chflags$/;"	d
__stub_fchflags	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_fchflags$/;"	d
__stub_gtty	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_gtty$/;"	d
__stub_revoke	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_revoke$/;"	d
__stub_setlogin	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_setlogin$/;"	d
__stub_sigreturn	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_sigreturn$/;"	d
__stub_stty	d:/include/x86_64-linux-gnu/gnu/stubs-64.h	/^#define __stub_stty$/;"	d
__sub_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __sub_fetch(_Tp* __ptr, _Diff<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i)
__sub_fetch_flt	d:/include/c++/14/bits/atomic_base.h	/^      __sub_fetch_flt(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
__suseconds64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SUSECONDS64_T_TYPE __suseconds64_t;$/;"	v	typeref:typename:__STD_TYPE __SUSECONDS64_T_TYPE
__suseconds_t	../../../../../../usr/include/sys/_types.h	/^typedef	long		__suseconds_t;	\/* microseconds (signed) *\/$/;"	t	typeref:typename:long
__suseconds_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SUSECONDS_T_TYPE __suseconds_t; \/* Signed count of microseconds.  *\/$/;"	v	typeref:typename:__STD_TYPE __SUSECONDS_T_TYPE
__sv_type	d:/include/c++/14/bits/basic_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
__sv_type	d:/include/c++/14/bits/cow_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
__sv_wrapper	d:/include/c++/14/bits/basic_string.h	/^	__sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(__sv_type __sv)
__sv_wrapper	d:/include/c++/14/bits/basic_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
__sv_wrapper	d:/include/c++/14/bits/cow_string.h	/^	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	access:public	signature:(__sv_type __sv)
__sv_wrapper	d:/include/c++/14/bits/cow_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
__syscall_slong_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SYSCALL_SLONG_TYPE __syscall_slong_t;$/;"	v	typeref:typename:__STD_TYPE __SYSCALL_SLONG_TYPE
__syscall_ulong_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __SYSCALL_ULONG_TYPE __syscall_ulong_t;$/;"	v	typeref:typename:__STD_TYPE __SYSCALL_ULONG_TYPE
__sysconf	d:/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h	/^extern long int __sysconf (int __name) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS long int	signature:(int __name)
__sysconf	d:/include/x86_64-linux-gnu/bits/time.h	/^extern long int __sysconf (int);$/;"	p	typeref:typename:long int	signature:(int)
__tag	d:/include/c++/14/bits/invoke.h	/^      using __tag = typename __result::__invoke_type;$/;"	t	function:std::__invoke	typeref:typename:__result::__invoke_type
__tag	d:/include/c++/14/bits/invoke.h	/^      using __tag = typename __result::__invoke_type;$/;"	t	function:std::__invoke_r	typeref:typename:__result::__invoke_type
__thrd_t	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef unsigned long int __thrd_t;$/;"	t	typeref:typename:unsigned long int
__throw_bad_alloc	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_array_new_length	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_array_new_length(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_cast	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_exception	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(void)
__throw_bad_function_call	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_function_call() __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:()
__throw_bad_typeid	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
__throw_bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^  __throw_bad_weak_ptr()$/;"	f	namespace:std	typeref:typename:void	signature:()
__throw_concurrence_broadcast_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_broadcast_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__throw_concurrence_lock_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_lock_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__throw_concurrence_unlock_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_unlock_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__throw_concurrence_wait_error	d:/include/c++/14/ext/concurrence.h	/^  __throw_concurrence_wait_error()$/;"	f	namespace:__gnu_cxx	typeref:typename:void	signature:()
__throw_domain_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_exception_again	d:/include/c++/14/bits/exception_defines.h	/^# define __throw_exception_again /;"	d
__throw_exception_again	d:/include/c++/14/bits/exception_defines.h	/^# define __throw_exception_again$/;"	d
__throw_future_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_future_error(int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
__throw_invalid_argument	d:/include/c++/14/bits/functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_ios_failure	d:/include/c++/14/bits/functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_ios_failure	d:/include/c++/14/bits/functexcept.h	/^  __throw_ios_failure(const char*, int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,int)
__throw_length_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_logic_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_out_of_range	d:/include/c++/14/bits/functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_out_of_range_fmt	d:/include/c++/14/bits/functexcept.h	/^  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__,__cold__))$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,...)
__throw_overflow_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_range_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_runtime_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_system_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_system_error(int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
__throw_underflow_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
__throw_with_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,false_type)
__throw_with_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,true_type)
__time64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^# define __time64_t /;"	d
__time64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIME64_T_TYPE __time64_t;$/;"	v	typeref:typename:__STD_TYPE __TIME64_T_TYPE
__time_t	../../../../../../usr/include/sys/_types.h	/^typedef	_TIME_T_	__time_t;$/;"	t	typeref:typename:_TIME_T_
__time_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIME_T_TYPE __time_t;	\/* Seconds since the Epoch.  *\/$/;"	v	typeref:typename:__STD_TYPE __TIME_T_TYPE
__time_t_defined	d:/include/x86_64-linux-gnu/bits/types/time_t.h	/^#define __time_t_defined /;"	d
__timer_t	../../../../../../usr/include/sys/_types.h	/^typedef	_TIMER_T_	__timer_t;$/;"	t	typeref:typename:_TIMER_T_
__timer_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __TIMER_T_TYPE __timer_t;$/;"	v	typeref:typename:__STD_TYPE __TIMER_T_TYPE
__timer_t_defined	d:/include/x86_64-linux-gnu/bits/types/timer_t.h	/^#define __timer_t_defined /;"	d
__tm	../../../../../../usr/include/sys/reent.h	/^struct __tm$/;"	s
__tm::__tm_hour	../../../../../../usr/include/sys/reent.h	/^  int   __tm_hour;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_isdst	../../../../../../usr/include/sys/reent.h	/^  int   __tm_isdst;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_mday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_mday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_min	../../../../../../usr/include/sys/reent.h	/^  int   __tm_min;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_mon	../../../../../../usr/include/sys/reent.h	/^  int   __tm_mon;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_sec	../../../../../../usr/include/sys/reent.h	/^  int   __tm_sec;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_wday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_wday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_yday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_yday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm::__tm_year	../../../../../../usr/include/sys/reent.h	/^  int   __tm_year;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_gmtoff	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int __tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
__tm_hour	../../../../../../usr/include/sys/reent.h	/^  int   __tm_hour;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_isdst	../../../../../../usr/include/sys/reent.h	/^  int   __tm_isdst;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_mday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_mday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_min	../../../../../../usr/include/sys/reent.h	/^  int   __tm_min;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_mon	../../../../../../usr/include/sys/reent.h	/^  int   __tm_mon;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_sec	../../../../../../usr/include/sys/reent.h	/^  int   __tm_sec;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_wday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_wday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_yday	../../../../../../usr/include/sys/reent.h	/^  int   __tm_yday;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_year	../../../../../../usr/include/sys/reent.h	/^  int   __tm_year;$/;"	m	struct:__tm	typeref:typename:int	access:public
__tm_zone	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *__tm_zone;	\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
__tmp	d:/include/c++/14/bits/stl_iterator.h	/^	_Iterator __tmp = current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr)$/;"	f	namespace:std	typeref:typename:std::pointer_traits<_Ptr>::element_type *	signature:(const _Ptr & __ptr)
__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr, _None...) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr,_None...)
__to_address	d:/include/c++/14/bits/stl_iterator.h	/^    __to_address(const __gnu_cxx::__normal_iterator<_Iterator,$/;"	f	namespace:std	typeref:typename:auto	signature:(const __gnu_cxx::__normal_iterator<_Iterator,_Container> & __it)
__to_chars_10_impl	d:/include/c++/14/bits/charconv.h	/^    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX23_CONSTEXPR void	signature:(char * __first,unsigned __len,_Tp __val)
__to_chars_len	d:/include/c++/14/bits/charconv.h	/^    __to_chars_len(_Tp __value, int __base = 10) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX14_CONSTEXPR unsigned	signature:(_Tp __value,int __base=10)
__to_wstring_numeric	d:/include/c++/14/bits/basic_string.h	/^  __to_wstring_numeric(const char* __s, int __len, wchar_t* __wout)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(const char * __s,int __len,wchar_t * __wout)
__to_wstring_numeric	d:/include/c++/14/bits/basic_string.h	/^  __to_wstring_numeric(string_view __s)$/;"	f	namespace:std	typeref:typename:wstring	signature:(string_view __s)
__to_xstring	d:/include/c++/14/ext/string_conversions.h	/^    __to_xstring(int (*__convf) (_CharT*, std::size_t, const _CharT*,$/;"	f	namespace:__gnu_cxx	typeref:typename:_String	signature:(int (* __convf)(_CharT *,std::size_t,const _CharT *,__builtin_va_list),std::size_t __n,const _CharT * __fmt,...)
__toascii	d:/include/ctype.h	/^#define	__toascii(/;"	d	signature:(c)
__toascii_l	d:/include/ctype.h	/^#   define __toascii_l(/;"	d	signature:(c,l)
__tobody	d:/include/ctype.h	/^#define __tobody(/;"	d	signature:(c,f,a,args)
__tolower_l	d:/include/ctype.h	/^#  define __tolower_l(/;"	d	signature:(c,locale)
__tolower_l	d:/include/ctype.h	/^extern int __tolower_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
__toupper_l	d:/include/ctype.h	/^#  define __toupper_l(/;"	d	signature:(c,locale)
__toupper_l	d:/include/ctype.h	/^extern int __toupper_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
__traitor	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __traitor$/;"	s	namespace:std
__traits	d:/include/c++/14/bits/alloc_traits.h	/^      typedef allocator_traits<_Alloc> __traits;$/;"	t	function:std::__alloc_on_copy	typeref:typename:allocator_traits<_Alloc>
__traits	d:/include/c++/14/bits/alloc_traits.h	/^      using __traits = allocator_traits<_Alloc>;$/;"	t	function:std::__alloc_on_copy	typeref:typename:allocator_traits<_Alloc>
__traits	d:/include/c++/14/bits/alloc_traits.h	/^      using __traits = allocator_traits<_Alloc>;$/;"	t	function:std::__alloc_on_move	typeref:typename:allocator_traits<_Alloc>
__traits	d:/include/c++/14/bits/alloc_traits.h	/^      using __traits = allocator_traits<_Alloc>;$/;"	t	function:std::__alloc_on_swap	typeref:typename:allocator_traits<_Alloc>
__traits	d:/include/c++/14/bits/stl_uninitialized.h	/^      typedef std::allocator_traits<_Allocator> __traits;$/;"	t	function:std::__relocate_object_a	typeref:typename:std::allocator_traits<_Allocator>
__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef iterator_traits<_Iterator>		__traits_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>	access:protected
__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef std::iterator_traits<_Iterator>		__traits_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::iterator_traits<_Iterator>	access:protected
__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      using __traits_type = iterator_traits<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<_Iterator>	access:private
__true_type	d:/include/c++/14/bits/cpp_type_traits.h	/^  struct __true_type { };$/;"	s	namespace:std
__truth_type	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __truth_type$/;"	s	namespace:std
__truth_type	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __truth_type<true>$/;"	s	namespace:std
__try	d:/include/c++/14/bits/exception_defines.h	/^# define __try /;"	d
__tss_t	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^typedef unsigned int __tss_t;$/;"	t	typeref:typename:unsigned int
__tuple_element_t	d:/include/c++/14/bits/utility.h	/^    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;$/;"	t	namespace:std	typeref:typename:tuple_element<__i,_Tp>::type
__type	d:/include/c++/14/bits/basic_string.h	/^	{ typedef basic_string& __type; };$/;"	t	struct:std::basic_string::__enable_if_not_native_iterator	typeref:typename:basic_string &	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	typeref:typename:__truth_type<__value>::__type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^    { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__false_type	access:public
__type	d:/include/c++/14/bits/cpp_type_traits.h	/^    { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/functional_hash.h	/^       using __type = typename underlying_type<_Tp>::type;$/;"	t	function:std::__hash_enum::operator ()	typeref:typename:underlying_type<_Tp>::type
__type	d:/include/c++/14/bits/invoke.h	/^      using __type = typename __result::type;$/;"	t	function:std::__invoke	typeref:typename:__result::type
__type	d:/include/c++/14/bits/invoke.h	/^      using __type = typename __result::type;$/;"	t	function:std::__invoke_r	typeref:typename:__result::type
__type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__true_type	access:public
__type	d:/include/c++/14/bits/utility.h	/^      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;$/;"	t	struct:std::_Build_index_tuple	typeref:typename:__make_integer_seq<_IdxTuple,size_t,_Num>	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_4	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;$/;"	t	struct:__gnu_cxx::__promote_3	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^      typedef __typeof__(_Tp2() + _Up2()) __type;$/;"	t	struct:__gnu_cxx::__promote_2	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:__if_type::__type	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^      typedef typename __if_type::__type __type; $/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:__if_type::__type	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float128 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float128	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float16 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float16	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float32 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float32	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Float64 __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:_Float64	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Iffalse __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iffalse	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Iftrue __type; };$/;"	t	struct:__gnu_cxx::__conditional_type	typeref:typename:_Iftrue	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef _Tp __type; };$/;"	t	struct:__gnu_cxx::__enable_if	typeref:typename:_Tp	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef __gnu_cxx::__bfloat16_t __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:__gnu_cxx::__bfloat16_t	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:double	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef float __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:float	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef int __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:int	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long double __type; };$/;"	t	struct:__gnu_cxx::__promote	typeref:typename:long double	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef long long __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:long long	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef short __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:short	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef signed char __type; };$/;"	t	struct:__gnu_cxx::__remove_unsigned	typeref:typename:signed char	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned char __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned char	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned int __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned int	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned long long __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned long long	access:public
__type	d:/include/c++/14/ext/type_traits.h	/^    { typedef unsigned short __type; };$/;"	t	struct:__gnu_cxx::__add_unsigned	typeref:typename:unsigned short	access:public
__u_char	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned char __u_char;$/;"	t	typeref:typename:unsigned char
__u_int	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned int __u_int;$/;"	t	typeref:typename:unsigned int
__u_long	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __u_long;$/;"	t	typeref:typename:unsigned long int
__u_quad_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __u_quad_t;$/;"	t	typeref:typename:unsigned long long int
__u_quad_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __u_quad_t;$/;"	t	typeref:typename:unsigned long int
__u_short	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned short int __u_short;$/;"	t	typeref:typename:unsigned short int
__ucr	d:/include/c++/14/bits/stl_tempbuf.h	/^        __ucr(_Pointer __first, _Pointer __last,$/;"	f	struct:std::__uninitialized_construct_buf_dispatch	typeref:typename:void	access:public	signature:(_Pointer __first,_Pointer __last,_ForwardIterator __seed)
__ucr	d:/include/c++/14/bits/stl_tempbuf.h	/^        __ucr(_Pointer, _Pointer, _ForwardIterator) { }$/;"	f	struct:std::__uninitialized_construct_buf_dispatch	typeref:typename:void	access:public	signature:(_Pointer,_Pointer,_ForwardIterator)
__uflow	d:/include/stdio.h	/^extern int __uflow (FILE *);$/;"	p	typeref:typename:int	signature:(FILE *)
__uid_t	../../../../../../usr/include/machine/_types.h	/^typedef __uint32_t __uid_t;$/;"	t	typeref:typename:__uint32_t
__uid_t	../../../../../../usr/include/sys/_types.h	/^typedef unsigned short __uid_t;$/;"	t	typeref:typename:unsigned short
__uid_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __UID_T_TYPE __uid_t;	\/* Type of user identifications.  *\/$/;"	v	typeref:typename:__STD_TYPE __UID_T_TYPE
__uint16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT16_TYPE__ __uint16_t;$/;"	t	typeref:typename:__UINT16_TYPE__
__uint16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT16_TYPE__ __uint16_t;$/;"	t	typeref:typename:unsigned __INT16_TYPE__
__uint16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned char __uint16_t;$/;"	t	typeref:typename:unsigned char
__uint16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned int __uint16_t;$/;"	t	typeref:typename:unsigned int
__uint16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned short __uint16_t;$/;"	t	typeref:typename:unsigned short
__uint16_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned short int __uint16_t;$/;"	t	typeref:typename:unsigned short int
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT32_TYPE__ __uint32_t;$/;"	t	typeref:typename:__UINT32_TYPE__
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT32_TYPE__ __uint32_t;$/;"	t	typeref:typename:unsigned __INT32_TYPE__
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned char __uint32_t;$/;"	t	typeref:typename:unsigned char
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned int __uint32_t;$/;"	t	typeref:typename:unsigned int
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long __uint32_t;$/;"	t	typeref:typename:unsigned long
__uint32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned short __uint32_t;$/;"	t	typeref:typename:unsigned short
__uint32_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned int __uint32_t;$/;"	t	typeref:typename:unsigned int
__uint64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT64_TYPE__ __uint64_t;$/;"	t	typeref:typename:__UINT64_TYPE__
__uint64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT64_TYPE__ __uint64_t;$/;"	t	typeref:typename:unsigned __INT64_TYPE__
__uint64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned int __uint64_t;$/;"	t	typeref:typename:unsigned int
__uint64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long __uint64_t;$/;"	t	typeref:typename:unsigned long
__uint64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long long __uint64_t;$/;"	t	typeref:typename:unsigned long long
__uint64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __uint64_t;$/;"	t	typeref:typename:unsigned long long int
__uint64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __uint64_t;$/;"	t	typeref:typename:unsigned long int
__uint8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT8_TYPE__ __uint8_t;$/;"	t	typeref:typename:__UINT8_TYPE__
__uint8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT8_TYPE__ __uint8_t;$/;"	t	typeref:typename:unsigned __INT8_TYPE__
__uint8_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned char __uint8_t;$/;"	t	typeref:typename:unsigned char
__uint_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT_LEAST16_TYPE__ __uint_least16_t;$/;"	t	typeref:typename:__UINT_LEAST16_TYPE__
__uint_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint16_t __uint_least16_t;$/;"	t	typeref:typename:__uint16_t
__uint_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint32_t __uint_least16_t;$/;"	t	typeref:typename:__uint32_t
__uint_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint64_t __uint_least16_t;$/;"	t	typeref:typename:__uint64_t
__uint_least16_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT_LEAST16_TYPE__ __uint_least16_t;$/;"	t	typeref:typename:unsigned __INT_LEAST16_TYPE__
__uint_least16_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint16_t __uint_least16_t;$/;"	t	typeref:typename:__uint16_t
__uint_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT_LEAST32_TYPE__ __uint_least32_t;$/;"	t	typeref:typename:__UINT_LEAST32_TYPE__
__uint_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint32_t __uint_least32_t;$/;"	t	typeref:typename:__uint32_t
__uint_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint64_t __uint_least32_t;$/;"	t	typeref:typename:__uint64_t
__uint_least32_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT_LEAST32_TYPE__ __uint_least32_t;$/;"	t	typeref:typename:unsigned __INT_LEAST32_TYPE__
__uint_least32_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint32_t __uint_least32_t;$/;"	t	typeref:typename:__uint32_t
__uint_least64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT_LEAST64_TYPE__ __uint_least64_t;$/;"	t	typeref:typename:__UINT_LEAST64_TYPE__
__uint_least64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint64_t __uint_least64_t;$/;"	t	typeref:typename:__uint64_t
__uint_least64_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT_LEAST64_TYPE__ __uint_least64_t;$/;"	t	typeref:typename:unsigned __INT_LEAST64_TYPE__
__uint_least64_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint64_t __uint_least64_t;$/;"	t	typeref:typename:__uint64_t
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINT_LEAST8_TYPE__ __uint_least8_t;$/;"	t	typeref:typename:__UINT_LEAST8_TYPE__
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint16_t __uint_least8_t;$/;"	t	typeref:typename:__uint16_t
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint32_t __uint_least8_t;$/;"	t	typeref:typename:__uint32_t
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint64_t __uint_least8_t;$/;"	t	typeref:typename:__uint64_t
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __uint8_t __uint_least8_t;$/;"	t	typeref:typename:__uint8_t
__uint_least8_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INT_LEAST8_TYPE__ __uint_least8_t;$/;"	t	typeref:typename:unsigned __INT_LEAST8_TYPE__
__uint_least8_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef __uint8_t __uint_least8_t;$/;"	t	typeref:typename:__uint8_t
__uintmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINTMAX_TYPE__ __uintmax_t;$/;"	t	typeref:typename:__UINTMAX_TYPE__
__uintmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long __uintmax_t;$/;"	t	typeref:typename:unsigned long
__uintmax_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long long __uintmax_t;$/;"	t	typeref:typename:unsigned long long
__uintmax_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__extension__ typedef unsigned long long int __uintmax_t;$/;"	t	typeref:typename:unsigned long long int
__uintmax_t	d:/include/x86_64-linux-gnu/bits/types.h	/^typedef unsigned long int __uintmax_t;$/;"	t	typeref:typename:unsigned long int
__uintptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef __UINTPTR_TYPE__ __uintptr_t;$/;"	t	typeref:typename:__UINTPTR_TYPE__
__uintptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __INTPTR_TYPE__ __uintptr_t;$/;"	t	typeref:typename:unsigned __INTPTR_TYPE__
__uintptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned __PTRDIFF_TYPE__ __uintptr_t;$/;"	t	typeref:typename:unsigned __PTRDIFF_TYPE__
__uintptr_t	../../../../../../usr/include/machine/_default_types.h	/^typedef unsigned long __uintptr_t;$/;"	t	typeref:typename:unsigned long
__uninit_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_copy(_InputIterator __first, _InputIterator __last,$/;"	f	struct:std::__uninitialized_copy	typeref:typename:_ForwardIterator	access:public	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
__uninit_default	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::__uninitialized_default_1	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
__uninit_default_n	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default_n(_ForwardIterator __first, _Size __n)$/;"	f	struct:std::__uninitialized_default_n_1	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n)
__uninit_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^	__uninit_default_novalue(_ForwardIterator __first,$/;"	f	struct:std::__uninitialized_default_novalue_1	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
__uninit_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default_novalue(_ForwardIterator, _ForwardIterator)$/;"	f	struct:std::__uninitialized_default_novalue_1	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
__uninit_default_novalue_n	d:/include/c++/14/bits/stl_uninitialized.h	/^	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)$/;"	f	struct:std::__uninitialized_default_novalue_n_1	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n)
__uninit_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__uninitialized_fill	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
__uninit_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_fill_n(_ForwardIterator __first, _Size __n,$/;"	f	struct:std::__uninitialized_fill_n	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
__uninitialized_construct_buf	d:/include/c++/14/bits/stl_tempbuf.h	/^    __uninitialized_construct_buf(_Tp* __first, _Tp* __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp * __first,_Tp * __last,_ForwardIterator __seed)
__uninitialized_construct_buf_dispatch	d:/include/c++/14/bits/stl_tempbuf.h	/^    struct __uninitialized_construct_buf_dispatch$/;"	s	namespace:std
__uninitialized_construct_buf_dispatch	d:/include/c++/14/bits/stl_tempbuf.h	/^    struct __uninitialized_construct_buf_dispatch<true>$/;"	s	namespace:std
__uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_copy$/;"	s	namespace:std
__uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_copy<true>$/;"	s	namespace:std
__uninitialized_copy_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
__uninitialized_copy_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,allocator<_Tp> &)
__uninitialized_copy_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_move(_InputIterator1 __first1,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator & __alloc)
__uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result,input_iterator_tag)
__uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_RandomAccessIterator __first,_Size __n,_ForwardIterator __result,random_access_iterator_tag)
__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result)
__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result,input_iterator_tag)
__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_RandomAccessIterator,_ForwardIterator>	signature:(_RandomAccessIterator __first,_Size __n,_ForwardIterator __result,random_access_iterator_tag)
__uninitialized_default	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
__uninitialized_default_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_1$/;"	s	namespace:std
__uninitialized_default_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_1<true>$/;"	s	namespace:std
__uninitialized_default_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_a(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
__uninitialized_default_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_a(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
__uninitialized_default_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n(_ForwardIterator __first, _Size __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n)
__uninitialized_default_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_n_1$/;"	s	namespace:std
__uninitialized_default_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_n_1<true>$/;"	s	namespace:std
__uninitialized_default_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,_Allocator & __alloc)
__uninitialized_default_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,allocator<_Tp> &)
__uninitialized_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_novalue(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
__uninitialized_default_novalue_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_1$/;"	s	namespace:std
__uninitialized_default_novalue_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_1<true>$/;"	s	namespace:std
__uninitialized_default_novalue_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __n)
__uninitialized_default_novalue_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_n_1$/;"	s	namespace:std
__uninitialized_default_novalue_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_n_1<true>$/;"	s	namespace:std
__uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill$/;"	s	namespace:std
__uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill<true>$/;"	s	namespace:std
__uninitialized_fill_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,_Allocator & __alloc)
__uninitialized_fill_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,allocator<_Tp2> &)
__uninitialized_fill_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __result,_ForwardIterator __mid,const _Tp & __x,_InputIterator __first,_InputIterator __last,_Allocator & __alloc)
__uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill_n$/;"	s	namespace:std
__uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill_n<true>$/;"	s	namespace:std
__uninitialized_fill_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,_Allocator & __alloc)
__uninitialized_fill_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,allocator<_Tp2> &)
__uninitialized_move_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
__uninitialized_move_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_copy(_InputIterator1 __first1,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator & __alloc)
__uninitialized_move_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	typeref:typename:void	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,const _Tp & __x,_Allocator & __alloc)
__uninitialized_move_if_noexcept_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_if_noexcept_a(_InputIterator __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data(__uniq_ptr_data&&) = default;$/;"	p	struct:std::__uniq_ptr_data	access:public	signature:(__uniq_ptr_data &&)
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data(__uniq_ptr_data&&) = delete;$/;"	p	struct:std::__uniq_ptr_data	access:public	signature:(__uniq_ptr_data &&)
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
__uniq_ptr_hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_hash$/;"	s	namespace:std	inherits:__poison_hash<_Ptr>
__uniq_ptr_hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_hash<_Up, _Ptr, false>$/;"	s	namespace:std	inherits:__poison_hash<_Ptr>
__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^	__uniq_ptr_impl(pointer __p, _Del&& __d)$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,_Del && __d)
__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl() = default;$/;"	p	class:std::__uniq_ptr_impl	access:public	signature:()
__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(__uniq_ptr_impl && __u)
__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p)
__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^    class __uniq_ptr_impl$/;"	c	namespace:std
__unique_ptr_array_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__array
__unique_ptr_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__single_object
__unused_initialized_1	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __unused_initialized_1;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__unused_initialized_2	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __unused_initialized_2;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__use_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    __use_alloc(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __uses_alloc_t<_Tp,_Alloc,_Args...>	signature:(const _Alloc & __a)
__use_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    __use_alloc(const _Alloc&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Alloc &&)
__useconds_t	../../../../../../usr/include/sys/_types.h	/^typedef	unsigned long	__useconds_t;	\/* microseconds (unsigned) *\/$/;"	t	typeref:typename:unsigned long
__useconds_t	d:/include/x86_64-linux-gnu/bits/types.h	/^__STD_TYPE __USECONDS_T_TYPE __useconds_t; \/* Count of microseconds.  *\/$/;"	v	typeref:typename:__STD_TYPE __USECONDS_T_TYPE
__uses_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc<false, _Tp, _Alloc, _Args...>$/;"	s	namespace:std	inherits:__uses_alloc0
__uses_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc<true, _Tp, _Alloc, _Args...>$/;"	s	namespace:std	inherits:__conditional_t<is_constructible<_Tp,allocator_arg_t,const_Alloc&,_Args...>::value,__uses_alloc1<_Alloc>,__uses_alloc2<_Alloc>>
__uses_alloc0	d:/include/c++/14/bits/uses_allocator.h	/^  struct __uses_alloc0 : __uses_alloc_base$/;"	s	namespace:std	inherits:__uses_alloc_base
__uses_alloc1	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	s	namespace:std	inherits:__uses_alloc_base
__uses_alloc2	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	s	namespace:std	inherits:__uses_alloc_base
__uses_alloc_base	d:/include/c++/14/bits/uses_allocator.h	/^  struct __uses_alloc_base { };$/;"	s	namespace:std
__uses_alloc_t	d:/include/c++/14/bits/uses_allocator.h	/^    using __uses_alloc_t =$/;"	t	namespace:std	typeref:typename:__uses_alloc<uses_allocator<_Tp,_Alloc>::value,_Tp,_Alloc,_Args...>
__uses_allocator_construct	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(const _Alloc & __a,_Tp * __ptr,_Args &&...__args)
__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc0, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc0,_Tp * __ptr,_Args &&...__args)
__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc1<_Alloc> __a,_Tp * __ptr,_Args &&...__args)
__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc2<_Alloc> __a,_Tp * __ptr,_Args &&...__args)
__uses_allocator_helper	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_allocator_helper$/;"	s	namespace:std	inherits:false_type
__uses_allocator_helper	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_allocator_helper<_Tp, _Alloc,$/;"	s	namespace:std	inherits:__is_erased_or_convertible<_Alloc,typename_Tp::allocator_type>::type
__utoa	../../../../../../usr/include/stdlib.h	/^char *	__utoa (unsigned, char *, int);$/;"	p	typeref:typename:char *	signature:(unsigned,char *,int)
__v_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __v_pointer = typename _Tp::void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::void_pointer	access:protected
__va_arg_pack	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __va_arg_pack(/;"	d	signature:()
__va_arg_pack_len	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __va_arg_pack_len(/;"	d	signature:()
__va_list	../../../../../../usr/include/sys/_types.h	/^typedef	__builtin_va_list	__va_list;$/;"	t	typeref:typename:__builtin_va_list
__va_list	../../../../../../usr/include/sys/_types.h	/^typedef	char *			__va_list;$/;"	t	typeref:typename:char *
__val	d:/include/x86_64-linux-gnu/bits/types/__sigset_t.h	/^  unsigned long int __val[_SIGSET_NWORDS];$/;"	m	struct:__anon54c891d20108	typeref:typename:unsigned long int[]	access:public
__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __val_comp_iter(_Compare __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Compare __comp)
__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^    __val_comp_iter(_Iter_comp_iter<_Compare> __comp)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_comp_iter<_Compare>	signature:(_Iter_comp_iter<_Compare> __comp)
__val_comp_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __val_comp_iter(_Iter_less_iter)$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:(_Iter_less_iter)
__val_less_iter	d:/include/c++/14/bits/predefined_ops.h	/^  __val_less_iter()$/;"	f	namespace:__gnu_cxx::__ops	typeref:typename:_GLIBCXX20_CONSTEXPR _Val_less_iter	signature:()
__value	../../../../../../usr/include/sys/_types.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anonc90cd0a80108	typeref:union:__anonc90cd0a80108::__anonc90cd0a8020a	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__are_same::__anon7e5ad8920203	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922503	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_char::__anon7e5ad8922203	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921703	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920603	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anon7e5ad8922f03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922c03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anon7e5ad8922003	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_void::__anon7e5ad8920403	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcmpable::__anon7e5ad8922e03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcpyable::__anon7e5ad8922d03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__are_same::__anon7e5ad8920303	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922603	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922703	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922803	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922903	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922a03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon7e5ad8922303	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon7e5ad8922403	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921803	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921903	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921a03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921b03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921c03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921d03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921e03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921f03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920703	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920803	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920903	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920a03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920b03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920c03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920d03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920e03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920f03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921003	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921103	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921203	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921303	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921403	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921503	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921603	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anon7e5ad8922103	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_void::__anon7e5ad8920503	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922b03	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anon7e5ad8920103	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = _Tp(-1) > _Tp(1); \/\/ is unsigned$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = __is_memcmp_ordered<_Tp>::__value$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = false; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:bool	access:public
__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
__value	d:/include/c++/14/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_move_iterator::__anon657713b40203	access:public
__value	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	e	enum:std::__is_random_access_iter::__anon31cdb6c20103	access:public
__value	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	e	enum:std::__is_random_access_iter::__anon31cdb6c20203	access:public
__value	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^  } __value;		\/* Value so far.  *\/$/;"	m	struct:__anondff4f4530108	typeref:union:__anondff4f4530108::__anondff4f453020a	access:public
__value32	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  } __value32;$/;"	m	union:__anon7f57c972010a	typeref:struct:__anon7f57c972010a::__anon7f57c9720208	access:public
__value64	d:/include/x86_64-linux-gnu/bits/atomic_wide_counter.h	/^  __extension__ unsigned long long int __value64;$/;"	m	union:__anon7f57c972010a	typeref:typename:__extension__ unsigned long long int	access:public
__variant	d:/include/c++/14/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
__variant	d:/include/c++/14/bits/shared_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
__variant	d:/include/c++/14/bits/unique_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
__warnattr	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __warnattr(/;"	d	signature:(msg)
__wch	../../../../../../usr/include/sys/_types.h	/^    wint_t __wch;$/;"	m	union:__anonc90cd0a80108::__anonc90cd0a8020a	typeref:typename:wint_t	access:public
__wch	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    __WINT_TYPE__ __wch;$/;"	m	union:__anondff4f4530108::__anondff4f453020a	typeref:typename:__WINT_TYPE__	access:public
__wchb	../../../../../../usr/include/sys/_types.h	/^    unsigned char __wchb[4];$/;"	m	union:__anonc90cd0a80108::__anonc90cd0a8020a	typeref:typename:unsigned char[4]	access:public
__wchb	d:/include/x86_64-linux-gnu/bits/types/__mbstate_t.h	/^    char __wchb[4];$/;"	m	union:__anondff4f4530108::__anondff4f453020a	typeref:typename:char[4]	access:public
__wctob_alias	d:/include/wchar.h	/^extern int __wctob_alias (wint_t __c) __asm ("wctob");$/;"	p	typeref:typename:int	signature:(wint_t __c)
__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(__weak_count&& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(__weak_count && __r)
__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(const __shared_count<_Lp>& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(const __shared_count<_Lp> & __r)
__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(const __weak_count& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(const __weak_count & __r)
__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __weak_count() noexcept : _M_pi(nullptr)$/;"	f	class:std::__weak_count	access:public	signature:()
__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __weak_count$/;"	c	namespace:std
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(__weak_ptr<_Yp,_Lp> && __r)
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_ptr(__weak_ptr&& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(__weak_ptr && __r)
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_ptr(const __weak_ptr&) noexcept = default;$/;"	p	class:std::__weak_ptr	access:public	signature:(const __weak_ptr &)
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __weak_ptr() noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:()
__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __weak_ptr$/;"	c	namespace:std
__width	d:/include/c++/14/ext/numeric_traits.h	/^      enum { __width = __value ? sizeof(_Tp) * __CHAR_BIT__ : 0 };$/;"	e	enum:__gnu_cxx::__is_integer_nonstrict::__anonbbda5aa00103	access:public
__wint_t_defined	d:/include/x86_64-linux-gnu/bits/types/wint_t.h	/^#define __wint_t_defined /;"	d
__wmask_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	t	class:std::ctype	typeref:typename:wctype_t	access:public
__wrefs	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  unsigned int __wrefs;$/;"	m	struct:__pthread_cond_s	typeref:typename:unsigned int	access:public
__write	d:/include/c++/14/bits/locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
__write	d:/include/c++/14/bits/locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
__writers	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__writers_futex	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __writers_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__wrphase_futex	d:/include/x86_64-linux-gnu/bits/struct_rwlock.h	/^  unsigned int __wrphase_futex;$/;"	m	struct:__pthread_rwlock_arch_t	typeref:typename:unsigned int	access:public
__wseq	d:/include/x86_64-linux-gnu/bits/thread-shared-types.h	/^  __atomic_wide_counter __wseq;$/;"	m	struct:__pthread_cond_s	typeref:typename:__atomic_wide_counter	access:public
__wur	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^#  define __wur /;"	d
__wur	d:/include/x86_64-linux-gnu/sys/cdefs.h	/^# define __wur /;"	d
__xor_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __xor_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
_add	../../../../../../usr/include/sys/reent.h	/^  unsigned short _add;$/;"	m	struct:_rand48	typeref:typename:unsigned short	access:public
_asctime_buf	../../../../../../usr/include/sys/reent.h	/^          char _asctime_buf[_REENT_ASCTIME_SIZE];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_asctime_buf	../../../../../../usr/include/sys/reent.h	/^  char *_asctime_buf;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_atexit	../../../../../../usr/include/sys/reent.h	/^struct _atexit {$/;"	s
_atexit::_fns	../../../../../../usr/include/sys/reent.h	/^	void	(*_fns[_ATEXIT_SIZE])(void);	\/* the table itself *\/$/;"	m	struct:_atexit	typeref:typename:void (* [_ATEXIT_SIZE])(void)	access:public
_atexit::_ind	../../../../../../usr/include/sys/reent.h	/^	int	_ind;				\/* next index in this table *\/$/;"	m	struct:_atexit	typeref:typename:int	access:public
_atexit::_next	../../../../../../usr/include/sys/reent.h	/^	struct	_atexit *_next;			\/* next in list *\/$/;"	m	struct:_atexit	typeref:struct:_atexit *	access:public
_atexit::_on_exit_args	../../../../../../usr/include/sys/reent.h	/^        struct _on_exit_args _on_exit_args;$/;"	m	struct:_atexit	typeref:struct:_on_exit_args	access:public
_atexit::_on_exit_args_ptr	../../../../../../usr/include/sys/reent.h	/^        struct _on_exit_args * _on_exit_args_ptr;$/;"	m	struct:_atexit	typeref:struct:_on_exit_args *	access:public
_atoi_r	../../../../../../usr/include/stdlib.h	/^int	_atoi_r (struct _reent *, const char *__nptr);$/;"	p	typeref:typename:int	signature:(struct _reent *,const char * __nptr)
_atol_r	../../../../../../usr/include/stdlib.h	/^long	_atol_r (struct _reent *, const char *__nptr);$/;"	p	typeref:typename:long	signature:(struct _reent *,const char * __nptr)
_atoll_r	../../../../../../usr/include/stdlib.h	/^long long _atoll_r (struct _reent *, const char *__nptr);$/;"	p	typeref:typename:long long	signature:(struct _reent *,const char * __nptr)
_base	../../../../../../usr/include/sys/reent.h	/^	unsigned char *_base;$/;"	m	struct:__sbuf	typeref:typename:unsigned char *	access:public
_bf	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _bf;	\/* the buffer (at least 1 byte, if !NULL) *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
_bf	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _bf;	\/* the buffer (at least 1 byte, if !NULL) *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
_blksize	../../../../../../usr/include/sys/reent.h	/^  int	_blksize;	\/* stat.st_blksize (may be != _bf._size) *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_blksize	../../../../../../usr/include/sys/reent.h	/^  int	_blksize;	\/* stat.st_blksize (may be != _bf._size) *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_c16rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c16rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_c32rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c32rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_c8rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c8rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_calloc_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _calloc_r(/;"	d	signature:(r,s1,s2)
_calloc_r	../../../../../../usr/include/stdlib.h	/^void *	_calloc_r (struct _reent *, size_t, size_t) _NOTHROW;$/;"	p	typeref:typename:void *	signature:(struct _reent *,size_t,size_t)
_chain	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_chain;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_FILE *	access:public
_close	../../../../../../usr/include/sys/reent.h	/^  int (*_close) (struct _reent *, void *);$/;"	m	struct:__sFILE	typeref:typename:int (*)(struct _reent *,void *)	access:public
_close	../../../../../../usr/include/sys/reent.h	/^  int (*_close) (struct _reent *, void *);$/;"	m	struct:__sFILE64	typeref:typename:int (*)(struct _reent *,void *)	access:public
_codecvt	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_codecvt *_codecvt;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_codecvt *	access:public
_cookie	../../../../../../usr/include/sys/reent.h	/^  void *	_cookie;	\/* cookie passed to io functions *\/$/;"	m	struct:__sFILE	typeref:typename:void *	access:public
_cookie	../../../../../../usr/include/sys/reent.h	/^  void *	_cookie;	\/* cookie passed to io functions *\/$/;"	m	struct:__sFILE64	typeref:typename:void *	access:public
_cur_column	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  unsigned short _cur_column;$/;"	m	struct:_IO_FILE	typeref:typename:unsigned short	access:public
_cvtbuf	../../../../../../usr/include/sys/reent.h	/^  char *_cvtbuf;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_cvtlen	../../../../../../usr/include/sys/reent.h	/^  int _cvtlen;			\/* should be size_t *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;	\/* Here for binary compatibility? Remove? *\/$/;"	m	struct:__sFILE	typeref:struct:_reent *	access:public
_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;$/;"	m	struct:__sFILE	typeref:struct:_reent *	access:public
_data	../../../../../../usr/include/sys/reent.h	/^  struct _reent *_data;$/;"	m	struct:__sFILE64	typeref:struct:_reent *	access:public
_drand48_r	../../../../../../usr/include/stdlib.h	/^double _drand48_r (struct _reent *);$/;"	p	typeref:typename:double	signature:(struct _reent *)
_dso_handle	../../../../../../usr/include/sys/reent.h	/^	void *	_dso_handle[_ATEXIT_SIZE];$/;"	m	struct:_on_exit_args	typeref:typename:void * []	access:public
_dtoa_r	../../../../../../usr/include/stdlib.h	/^char *	_dtoa_r (struct _reent *, double, int, int, int *, int*, char**);$/;"	p	typeref:typename:char *	signature:(struct _reent *,double,int,int,int *,int *,char **)
_emergency	../../../../../../usr/include/sys/reent.h	/^  char *_emergency;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_emergency	../../../../../../usr/include/sys/reent.h	/^  char _emergency[_REENT_EMERGENCY_SIZE];$/;"	m	struct:_reent	typeref:typename:char[]	access:public
_erand48_r	../../../../../../usr/include/stdlib.h	/^double _erand48_r (struct _reent *, unsigned short [3]);$/;"	p	typeref:typename:double	signature:(struct _reent *,unsigned short[3])
_errno	../../../../../../usr/include/sys/reent.h	/^  int _errno;			\/* local copy of errno *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_file	../../../../../../usr/include/sys/reent.h	/^  short	_file;		\/* fileno, if Unix descriptor, else -1 *\/$/;"	m	struct:__sFILE	typeref:typename:short	access:public
_file	../../../../../../usr/include/sys/reent.h	/^  short	_file;		\/* fileno, if Unix descriptor, else -1 *\/$/;"	m	struct:__sFILE64	typeref:typename:short	access:public
_file	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE _file;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE	access:public
_fileno	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _fileno;$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_findenv	../../../../../../usr/include/stdlib.h	/^char *	_findenv (const char *, int *);$/;"	p	typeref:typename:char *	signature:(const char *,int *)
_findenv_r	../../../../../../usr/include/stdlib.h	/^char *	_findenv_r (struct _reent *, const char *, int *);$/;"	p	typeref:typename:char *	signature:(struct _reent *,const char *,int *)
_flags	../../../../../../usr/include/sys/reent.h	/^  short	_flags;		\/* flags, below; this FILE is free if 0 *\/$/;"	m	struct:__sFILE	typeref:typename:short	access:public
_flags	../../../../../../usr/include/sys/reent.h	/^  short	_flags;		\/* flags, below; this FILE is free if 0 *\/$/;"	m	struct:__sFILE64	typeref:typename:short	access:public
_flags	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags;		\/* High-order word is _IO_MAGIC; rest is flags. *\/$/;"	m	struct:_IO_FILE	typeref:typename:int	access:public
_flags2	../../../../../../usr/include/sys/reent.h	/^  int   _flags2;        \/* for future use *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_flags2	../../../../../../usr/include/sys/reent.h	/^  int   _flags2;        \/* for future use *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_flags2	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _flags2:24;$/;"	m	struct:_IO_FILE	typeref:typename:int:24	access:public
_flock_t	../../../../../../usr/include/sys/reent.h	/^typedef _LOCK_RECURSIVE_T _flock_t;$/;"	t	typeref:typename:_LOCK_RECURSIVE_T
_fnargs	../../../../../../usr/include/sys/reent.h	/^	void *  _fnargs[_ATEXIT_SIZE];	        \/* user fn args *\/$/;"	m	struct:_on_exit_args	typeref:typename:void * []	access:public
_fns	../../../../../../usr/include/sys/reent.h	/^	void	(*_fns[_ATEXIT_SIZE])(void);	\/* the table itself *\/$/;"	m	struct:_atexit	typeref:typename:void (* [_ATEXIT_SIZE])(void)	access:public
_fntypes	../../../../../../usr/include/sys/reent.h	/^	__ULong _fntypes;           	        \/* type of exit routine -$/;"	m	struct:_on_exit_args	typeref:typename:__ULong	access:public
_fpos64_t	../../../../../../usr/include/sys/_types.h	/^typedef _off64_t _fpos64_t;$/;"	t	typeref:typename:_off64_t
_fpos64_t	../../../../../../usr/include/sys/reent.h	/^#define _fpos64_t /;"	d
_fpos_t	../../../../../../usr/include/sys/_types.h	/^typedef long _fpos_t;		\/* XXX must match off_t in <sys\/types.h> *\/$/;"	t	typeref:typename:long
_free_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _free_r(/;"	d	signature:(r,p)
_free_r	../../../../../../usr/include/stdlib.h	/^void	_free_r (struct _reent *, void *) _NOTHROW;$/;"	p	typeref:typename:void	signature:(struct _reent *,void *)
_freelist	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint **_freelist;$/;"	m	struct:_mprec	typeref:struct:_Bigint **	access:public
_freelist	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint **_freelist;$/;"	m	struct:_reent	typeref:struct:_Bigint **	access:public
_freeres_buf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  void *_freeres_buf;$/;"	m	struct:_IO_FILE_complete	typeref:typename:void *	access:public
_freeres_list	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE *_freeres_list;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE *	access:public
_fwalk_sglue	../../../../../../usr/include/sys/reent.h	/^extern int _fwalk_sglue (struct _reent *, int (*)(struct _reent *, __FILE *),$/;"	p	typeref:typename:int	signature:(struct _reent *,int (*)(struct _reent *,__FILE *),struct _glue *)
_gamma_signgam	../../../../../../usr/include/sys/reent.h	/^          int _gamma_signgam;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_gamma_signgam	../../../../../../usr/include/sys/reent.h	/^  int _gamma_signgam;$/;"	m	struct:_reent	typeref:typename:int	access:public
_getdate_err	../../../../../../usr/include/sys/reent.h	/^          int _getdate_err;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_getdate_err	../../../../../../usr/include/sys/reent.h	/^  int _getdate_err;$/;"	m	struct:_misc_reent	typeref:typename:int	access:public
_getenv_r	../../../../../../usr/include/stdlib.h	/^char *	_getenv_r (struct _reent *, const char *__string);$/;"	p	typeref:typename:char *	signature:(struct _reent *,const char * __string)
_getlocalename_l_buf	../../../../../../usr/include/sys/reent.h	/^	  char _getlocalename_l_buf[7 \/* _LC_LAST *\/$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_getlocalename_l_buf	../../../../../../usr/include/sys/reent.h	/^  char _getlocalename_l_buf[7 \/* _LC_LAST *\/ * 32 \/*ENCODING + 1*\/];$/;"	m	struct:_misc_reent	typeref:typename:char[]	access:public
_glue	../../../../../../usr/include/sys/reent.h	/^struct _glue$/;"	s
_glue::_iobs	../../../../../../usr/include/sys/reent.h	/^  __FILE *_iobs;$/;"	m	struct:_glue	typeref:typename:__FILE *	access:public
_glue::_next	../../../../../../usr/include/sys/reent.h	/^  struct _glue *_next;$/;"	m	struct:_glue	typeref:struct:_glue *	access:public
_glue::_niobs	../../../../../../usr/include/sys/reent.h	/^  int _niobs;$/;"	m	struct:_glue	typeref:typename:int	access:public
_h_errno	../../../../../../usr/include/sys/reent.h	/^	  int _h_errno;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_iconv_t	../../../../../../usr/include/sys/_types.h	/^typedef void *_iconv_t;$/;"	t	typeref:typename:void *
_inc	../../../../../../usr/include/sys/reent.h	/^  int  _inc;			\/* used by tmpnam *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_ind	../../../../../../usr/include/sys/reent.h	/^	int	_ind;				\/* next index in this table *\/$/;"	m	struct:_atexit	typeref:typename:int	access:public
_iobs	../../../../../../usr/include/sys/reent.h	/^  __FILE *_iobs;$/;"	m	struct:_glue	typeref:typename:__FILE *	access:public
_is_cxa	../../../../../../usr/include/sys/reent.h	/^	__ULong _is_cxa;$/;"	m	struct:_on_exit_args	typeref:typename:__ULong	access:public
_jrand48_r	../../../../../../usr/include/stdlib.h	/^long   _jrand48_r (struct _reent *, unsigned short [3]);$/;"	p	typeref:typename:long	signature:(struct _reent *,unsigned short[3])
_k	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_l64a_buf	../../../../../../usr/include/sys/reent.h	/^          char _l64a_buf[8];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[8]	access:public
_l64a_buf	../../../../../../usr/include/sys/reent.h	/^  char _l64a_buf[8];$/;"	m	struct:_misc_reent	typeref:typename:char[8]	access:public
_l64a_r	../../../../../../usr/include/stdlib.h	/^char *  _l64a_r (struct _reent *,long __input);$/;"	p	typeref:typename:char *	signature:(struct _reent *,long __input)
_lb	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _lb;	\/* buffer for fgetline() *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
_lb	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _lb;	\/* buffer for fgetline() *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
_lbfsize	../../../../../../usr/include/sys/reent.h	/^  int	_lbfsize;	\/* 0 or -_bf._size, for inline putc *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_lbfsize	../../../../../../usr/include/sys/reent.h	/^  int	_lbfsize;	\/* 0 or -_bf._size, for inline putc *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_lcong48_r	../../../../../../usr/include/stdlib.h	/^void  _lcong48_r (struct _reent *, unsigned short [7]);$/;"	p	typeref:typename:void	signature:(struct _reent *,unsigned short[7])
_locale	../../../../../../usr/include/sys/reent.h	/^  struct __locale_t *_locale;\/* per-thread locale *\/$/;"	m	struct:_reent	typeref:struct:__locale_t *	access:public
_localtime_buf	../../../../../../usr/include/sys/reent.h	/^          struct __tm _localtime_buf;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:struct:__tm	access:public
_localtime_buf	../../../../../../usr/include/sys/reent.h	/^  struct __tm *_localtime_buf;$/;"	m	struct:_reent	typeref:struct:__tm *	access:public
_lock	../../../../../../usr/include/sys/reent.h	/^  _flock_t _lock;	\/* for thread-safety locking *\/$/;"	m	struct:__sFILE	typeref:typename:_flock_t	access:public
_lock	../../../../../../usr/include/sys/reent.h	/^  _flock_t _lock;	\/* for thread-safety locking *\/$/;"	m	struct:__sFILE64	typeref:typename:_flock_t	access:public
_lock	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  _IO_lock_t *_lock;$/;"	m	struct:_IO_FILE	typeref:typename:_IO_lock_t *	access:public
_lrand48_r	../../../../../../usr/include/stdlib.h	/^long   _lrand48_r (struct _reent *);$/;"	p	typeref:typename:long	signature:(struct _reent *)
_mallinfo_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _mallinfo_r(/;"	d	signature:(r)
_malloc_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _malloc_r(/;"	d	signature:(r,s)
_malloc_r	../../../../../../usr/include/stdlib.h	/^void *	_malloc_r (struct _reent *, size_t) _NOTHROW;$/;"	p	typeref:typename:void *	signature:(struct _reent *,size_t)
_malloc_stats_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _malloc_stats_r(/;"	d	signature:(r)
_malloc_trim_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _malloc_trim_r(/;"	d	signature:(r,s)
_malloc_usable_size_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _malloc_usable_size_r(/;"	d	signature:(r,p)
_mallopt_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _mallopt_r(/;"	d	signature:(i1,i2)
_markers	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_marker *_markers;$/;"	m	struct:_IO_FILE	typeref:struct:_IO_marker *	access:public
_maxwds	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_mblen_r	../../../../../../usr/include/stdlib.h	/^int	_mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);$/;"	p	typeref:typename:int	signature:(struct _reent *,const char *,size_t,_mbstate_t *)
_mblen_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mblen_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mblen_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mblen_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_mbrlen_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrlen_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbrlen_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbrlen_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_mbrtoc16_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc16_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbrtoc32_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc32_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbrtoc8_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc8_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbrtowc_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtowc_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbrtowc_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbrtowc_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_mbsrtowcs_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbsrtowcs_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbsrtowcs_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbsrtowcs_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_mbstate	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbstate;	\/* for wide char stdio functions. *\/$/;"	m	struct:__sFILE	typeref:typename:_mbstate_t	access:public
_mbstate	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbstate;	\/* for wide char stdio functions. *\/$/;"	m	struct:__sFILE64	typeref:typename:_mbstate_t	access:public
_mbstate_t	../../../../../../usr/include/sys/_types.h	/^} _mbstate_t;$/;"	t	typeref:struct:__anonc90cd0a80108
_mbstowcs_r	../../../../../../usr/include/stdlib.h	/^size_t	_mbstowcs_r (struct _reent *, wchar_t *__restrict, const char *__restrict, size_t, _mbsta/;"	p	typeref:typename:size_t	signature:(struct _reent *,wchar_t * __restrict,const char * __restrict,size_t,_mbstate_t *)
_mbtowc_r	../../../../../../usr/include/stdlib.h	/^int	_mbtowc_r (struct _reent *, wchar_t *__restrict, const char *__restrict, size_t, _mbstate_t /;"	p	typeref:typename:int	signature:(struct _reent *,wchar_t * __restrict,const char * __restrict,size_t,_mbstate_t *)
_mbtowc_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbtowc_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_mbtowc_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbtowc_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_memalign_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _memalign_r(/;"	d	signature:(r,s1,s2)
_misc	../../../../../../usr/include/sys/reent.h	/^  struct _misc_reent *_misc;            \/* strtok, multibyte states *\/$/;"	m	struct:_reent	typeref:struct:_misc_reent *	access:public
_misc_reent	../../../../../../usr/include/sys/reent.h	/^struct _misc_reent$/;"	s
_misc_reent::_getdate_err	../../../../../../usr/include/sys/reent.h	/^  int _getdate_err;$/;"	m	struct:_misc_reent	typeref:typename:int	access:public
_misc_reent::_getlocalename_l_buf	../../../../../../usr/include/sys/reent.h	/^  char _getlocalename_l_buf[7 \/* _LC_LAST *\/ * 32 \/*ENCODING + 1*\/];$/;"	m	struct:_misc_reent	typeref:typename:char[]	access:public
_misc_reent::_l64a_buf	../../../../../../usr/include/sys/reent.h	/^  char _l64a_buf[8];$/;"	m	struct:_misc_reent	typeref:typename:char[8]	access:public
_misc_reent::_mblen_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mblen_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_mbrlen_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbrlen_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_mbrtowc_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbrtowc_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_mbsrtowcs_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbsrtowcs_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_mbtowc_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _mbtowc_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_strtok_last	../../../../../../usr/include/sys/reent.h	/^  char *_strtok_last;$/;"	m	struct:_misc_reent	typeref:typename:char *	access:public
_misc_reent::_wcrtomb_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wcrtomb_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_wcsrtombs_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wcsrtombs_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_misc_reent::_wctomb_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wctomb_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_mkdtemp_r	../../../../../../usr/include/stdlib.h	/^char *	_mkdtemp_r (struct _reent *, char *);$/;"	p	typeref:typename:char *	signature:(struct _reent *,char *)
_mkostemp_r	../../../../../../usr/include/stdlib.h	/^int	_mkostemp_r (struct _reent *, char *, int);$/;"	p	typeref:typename:int	signature:(struct _reent *,char *,int)
_mkostemps_r	../../../../../../usr/include/stdlib.h	/^int	_mkostemps_r (struct _reent *, char *, int, int);$/;"	p	typeref:typename:int	signature:(struct _reent *,char *,int,int)
_mkstemp_r	../../../../../../usr/include/stdlib.h	/^int	_mkstemp_r (struct _reent *, char *);$/;"	p	typeref:typename:int	signature:(struct _reent *,char *)
_mkstemps_r	../../../../../../usr/include/stdlib.h	/^int	_mkstemps_r (struct _reent *, char *, int);$/;"	p	typeref:typename:int	signature:(struct _reent *,char *,int)
_mktemp_r	../../../../../../usr/include/stdlib.h	/^char *	_mktemp_r (struct _reent *, char *) _ATTRIBUTE ((__deprecated__("the use of `mktemp' is d/;"	p	typeref:typename:char *	signature:(struct _reent *,char *)
_mode	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  int _mode;$/;"	m	struct:_IO_FILE_complete	typeref:typename:int	access:public
_mp	../../../../../../usr/include/sys/reent.h	/^  struct _mprec *_mp;$/;"	m	struct:_reent	typeref:struct:_mprec *	access:public
_mprec	../../../../../../usr/include/sys/reent.h	/^struct _mprec$/;"	s
_mprec::_freelist	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint **_freelist;$/;"	m	struct:_mprec	typeref:struct:_Bigint **	access:public
_mprec::_p5s	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_p5s;$/;"	m	struct:_mprec	typeref:struct:_Bigint *	access:public
_mprec::_result	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_result;$/;"	m	struct:_mprec	typeref:struct:_Bigint *	access:public
_mprec::_result_k	../../../../../../usr/include/sys/reent.h	/^  int _result_k;$/;"	m	struct:_mprec	typeref:typename:int	access:public
_mrand48_r	../../../../../../usr/include/stdlib.h	/^long   _mrand48_r (struct _reent *);$/;"	p	typeref:typename:long	signature:(struct _reent *)
_mstats_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _mstats_r(/;"	d	signature:(r,p)
_mstats_r	../../../../../../usr/include/stdlib.h	/^void	_mstats_r (struct _reent *, char *);$/;"	p	typeref:typename:void	signature:(struct _reent *,char *)
_mult	../../../../../../usr/include/sys/reent.h	/^  unsigned short _mult[3];$/;"	m	struct:_rand48	typeref:typename:unsigned short[3]	access:public
_nbuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _nbuf[1];	\/* guarantee a getc() buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char[1]	access:public
_nbuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _nbuf[1];	\/* guarantee a getc() buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char[1]	access:public
_new	../../../../../../usr/include/sys/reent.h	/^    } _new;$/;"	m	struct:_reent	typeref:union:_reent::__anon88be1d72010a	access:public
_next	../../../../../../usr/include/sys/reent.h	/^	struct	_atexit *_next;			\/* next in list *\/$/;"	m	struct:_atexit	typeref:struct:_atexit *	access:public
_next	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_next;$/;"	m	struct:_Bigint	typeref:struct:_Bigint *	access:public
_next	../../../../../../usr/include/sys/reent.h	/^  struct _glue *_next;$/;"	m	struct:_glue	typeref:struct:_glue *	access:public
_niobs	../../../../../../usr/include/sys/reent.h	/^  int _niobs;$/;"	m	struct:_glue	typeref:typename:int	access:public
_nrand48_r	../../../../../../usr/include/stdlib.h	/^long   _nrand48_r (struct _reent *, unsigned short [3]);$/;"	p	typeref:typename:long	signature:(struct _reent *,unsigned short[3])
_off64_t	../../../../../../usr/include/sys/_types.h	/^__extension__ typedef long long _off64_t;$/;"	t	typeref:typename:long long
_off_t	../../../../../../usr/include/sys/_types.h	/^typedef long _off_t;$/;"	t	typeref:typename:long
_offset	../../../../../../usr/include/sys/reent.h	/^  _off64_t _offset;     \/* current lseek offset *\/$/;"	m	struct:__sFILE64	typeref:typename:_off64_t	access:public
_offset	../../../../../../usr/include/sys/reent.h	/^  _off_t _offset;	\/* current lseek offset *\/$/;"	m	struct:__sFILE	typeref:typename:_off_t	access:public
_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off64_t _offset;$/;"	m	struct:_IO_FILE_complete	typeref:typename:__off64_t	access:public
_old_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  __off_t _old_offset; \/* This used to be _offset but it's too small.  *\/$/;"	m	struct:_IO_FILE	typeref:typename:__off_t	access:public
_on_exit_args	../../../../../../usr/include/sys/reent.h	/^        struct _on_exit_args _on_exit_args;$/;"	m	struct:_atexit	typeref:struct:_on_exit_args	access:public
_on_exit_args	../../../../../../usr/include/sys/reent.h	/^struct _on_exit_args {$/;"	s
_on_exit_args::_dso_handle	../../../../../../usr/include/sys/reent.h	/^	void *	_dso_handle[_ATEXIT_SIZE];$/;"	m	struct:_on_exit_args	typeref:typename:void * []	access:public
_on_exit_args::_fnargs	../../../../../../usr/include/sys/reent.h	/^	void *  _fnargs[_ATEXIT_SIZE];	        \/* user fn args *\/$/;"	m	struct:_on_exit_args	typeref:typename:void * []	access:public
_on_exit_args::_fntypes	../../../../../../usr/include/sys/reent.h	/^	__ULong _fntypes;           	        \/* type of exit routine -$/;"	m	struct:_on_exit_args	typeref:typename:__ULong	access:public
_on_exit_args::_is_cxa	../../../../../../usr/include/sys/reent.h	/^	__ULong _is_cxa;$/;"	m	struct:_on_exit_args	typeref:typename:__ULong	access:public
_on_exit_args_ptr	../../../../../../usr/include/sys/reent.h	/^        struct _on_exit_args * _on_exit_args_ptr;$/;"	m	struct:_atexit	typeref:struct:_on_exit_args *	access:public
_p	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_p;	\/* current position in (some) buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char *	access:public
_p	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_p;	\/* current position in (some) buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char *	access:public
_p5s	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_p5s;$/;"	m	struct:_mprec	typeref:struct:_Bigint *	access:public
_p5s	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_p5s;$/;"	m	struct:_reent	typeref:struct:_Bigint *	access:public
_prevchain	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_FILE **_prevchain;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_FILE **	access:public
_pthread_cleanup_buffer	d:/include/pthread.h	/^struct _pthread_cleanup_buffer$/;"	s
_pthread_cleanup_buffer::__arg	d:/include/pthread.h	/^  void *__arg;                            \/* Its argument.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void *	access:public
_pthread_cleanup_buffer::__canceltype	d:/include/pthread.h	/^  int __canceltype;                       \/* Saved cancellation type. *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:int	access:public
_pthread_cleanup_buffer::__prev	d:/include/pthread.h	/^  struct _pthread_cleanup_buffer *__prev; \/* Chaining of cleanup functions.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:struct:_pthread_cleanup_buffer *	access:public
_pthread_cleanup_buffer::__routine	d:/include/pthread.h	/^  void (*__routine) (void *);             \/* Function to call.  *\/$/;"	m	struct:_pthread_cleanup_buffer	typeref:typename:void (*)(void *)	access:public
_putenv_r	../../../../../../usr/include/stdlib.h	/^int	_putenv_r (struct _reent *, char *__string);$/;"	p	typeref:typename:int	signature:(struct _reent *,char * __string)
_pvalloc_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _pvalloc_r(/;"	d	signature:(r,s)
_r	../../../../../../usr/include/sys/reent.h	/^  int	_r;		\/* read space left for getc() *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_r	../../../../../../usr/include/sys/reent.h	/^  int	_r;		\/* read space left for getc() *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_r48	../../../../../../usr/include/sys/reent.h	/^          struct _rand48 _r48;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:struct:_rand48	access:public
_r48	../../../../../../usr/include/sys/reent.h	/^  struct _rand48 *_r48;$/;"	m	struct:_reent	typeref:struct:_rand48 *	access:public
_rand48	../../../../../../usr/include/sys/reent.h	/^struct _rand48 {$/;"	s
_rand48::_add	../../../../../../usr/include/sys/reent.h	/^  unsigned short _add;$/;"	m	struct:_rand48	typeref:typename:unsigned short	access:public
_rand48::_mult	../../../../../../usr/include/sys/reent.h	/^  unsigned short _mult[3];$/;"	m	struct:_rand48	typeref:typename:unsigned short[3]	access:public
_rand48::_rand_next	../../../../../../usr/include/sys/reent.h	/^  __extension__ unsigned long long _rand_next;$/;"	m	struct:_rand48	typeref:typename:__extension__ unsigned long long	access:public
_rand48::_seed	../../../../../../usr/include/sys/reent.h	/^  unsigned short _seed[3];$/;"	m	struct:_rand48	typeref:typename:unsigned short[3]	access:public
_rand_next	../../../../../../usr/include/sys/reent.h	/^          __extension__ unsigned long long _rand_next;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:__extension__ unsigned long long	access:public
_rand_next	../../../../../../usr/include/sys/reent.h	/^  __extension__ unsigned long long _rand_next;$/;"	m	struct:_rand48	typeref:typename:__extension__ unsigned long long	access:public
_read	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_read) (struct _reent *, void *,$/;"	m	struct:__sFILE	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
_read	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_read) (struct _reent *, void *,$/;"	m	struct:__sFILE64	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
_realloc_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _realloc_r(/;"	d	signature:(r,p,s)
_realloc_r	../../../../../../usr/include/stdlib.h	/^void *	_realloc_r (struct _reent *, void *, size_t) _NOTHROW;$/;"	p	typeref:typename:void *	signature:(struct _reent *,void *,size_t)
_reallocf_r	../../../../../../usr/include/stdlib.h	/^void *	_reallocf_r (struct _reent *, void *, size_t);$/;"	p	typeref:typename:void *	signature:(struct _reent *,void *,size_t)
_reclaim_reent	../../../../../../usr/include/sys/reent.h	/^void _reclaim_reent (struct _reent *);$/;"	p	typeref:typename:void	signature:(struct _reent *)
_reent	../../../../../../usr/include/sys/reent.h	/^        } _reent;$/;"	m	union:_reent::__anon88be1d72010a	typeref:struct:_reent::__anon88be1d72010a::__anon88be1d720208	access:public
_reent	../../../../../../usr/include/sys/reent.h	/^struct _reent$/;"	s
_reent::__anon88be1d72010a	../../../../../../usr/include/sys/reent.h	/^    {$/;"	u	struct:_reent	access:public
_reent::__anon88be1d72010a::__anon88be1d720208	../../../../../../usr/include/sys/reent.h	/^        {$/;"	s	union:_reent::__anon88be1d72010a	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_asctime_buf	../../../../../../usr/include/sys/reent.h	/^          char _asctime_buf[_REENT_ASCTIME_SIZE];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_c16rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c16rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_c32rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c32rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_c8rtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _c8rtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_gamma_signgam	../../../../../../usr/include/sys/reent.h	/^          int _gamma_signgam;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_getdate_err	../../../../../../usr/include/sys/reent.h	/^          int _getdate_err;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_getlocalename_l_buf	../../../../../../usr/include/sys/reent.h	/^	  char _getlocalename_l_buf[7 \/* _LC_LAST *\/$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_h_errno	../../../../../../usr/include/sys/reent.h	/^	  int _h_errno;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:int	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_l64a_buf	../../../../../../usr/include/sys/reent.h	/^          char _l64a_buf[8];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[8]	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_localtime_buf	../../../../../../usr/include/sys/reent.h	/^          struct __tm _localtime_buf;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:struct:__tm	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mblen_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mblen_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbrlen_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrlen_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbrtoc16_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc16_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbrtoc32_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc32_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbrtoc8_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtoc8_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbrtowc_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbrtowc_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbsrtowcs_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbsrtowcs_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_mbtowc_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _mbtowc_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_r48	../../../../../../usr/include/sys/reent.h	/^          struct _rand48 _r48;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:struct:_rand48	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_rand_next	../../../../../../usr/include/sys/reent.h	/^          __extension__ unsigned long long _rand_next;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:__extension__ unsigned long long	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_reserved_2	../../../../../../usr/include/sys/reent.h	/^          unsigned int _reserved_2;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:unsigned int	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_signal_buf	../../../../../../usr/include/sys/reent.h	/^          char _signal_buf[_REENT_SIGNAL_SIZE];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_strtok_last	../../../../../../usr/include/sys/reent.h	/^          char * _strtok_last;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char *	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_wcrtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wcrtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_wcsrtombs_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wcsrtombs_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720208::_wctomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wctomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_reent::__anon88be1d72010a::__anon88be1d720308	../../../../../../usr/include/sys/reent.h	/^        {$/;"	s	union:_reent::__anon88be1d72010a	access:public
_reent::__anon88be1d72010a::__anon88be1d720308::_reserved_3	../../../../../../usr/include/sys/reent.h	/^          unsigned char * _reserved_3[30];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720308	typeref:typename:unsigned char * [30]	access:public
_reent::__anon88be1d72010a::__anon88be1d720308::_reserved_4	../../../../../../usr/include/sys/reent.h	/^          unsigned int _reserved_4[30];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720308	typeref:typename:unsigned int[30]	access:public
_reent::__anon88be1d72010a::_reent	../../../../../../usr/include/sys/reent.h	/^        } _reent;$/;"	m	union:_reent::__anon88be1d72010a	typeref:struct:_reent::__anon88be1d72010a::__anon88be1d720208	access:public
_reent::__anon88be1d72010a::_reserved_5	../../../../../../usr/include/sys/reent.h	/^        } _reserved_5;$/;"	m	union:_reent::__anon88be1d72010a	typeref:struct:_reent::__anon88be1d72010a::__anon88be1d720308	access:public
_reent::__cleanup	../../../../../../usr/include/sys/reent.h	/^  void (*__cleanup) (struct _reent *);$/;"	m	struct:_reent	typeref:typename:void (*)(struct _reent *)	access:public
_reent::__sf	../../../../../../usr/include/sys/reent.h	/^  __FILE *__sf;			        \/* file descriptors *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_asctime_buf	../../../../../../usr/include/sys/reent.h	/^  char *_asctime_buf;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_reent::_cvtbuf	../../../../../../usr/include/sys/reent.h	/^  char *_cvtbuf;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_reent::_cvtlen	../../../../../../usr/include/sys/reent.h	/^  int _cvtlen;			\/* should be size_t *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_emergency	../../../../../../usr/include/sys/reent.h	/^  char *_emergency;$/;"	m	struct:_reent	typeref:typename:char *	access:public
_reent::_emergency	../../../../../../usr/include/sys/reent.h	/^  char _emergency[_REENT_EMERGENCY_SIZE];$/;"	m	struct:_reent	typeref:typename:char[]	access:public
_reent::_errno	../../../../../../usr/include/sys/reent.h	/^  int _errno;			\/* local copy of errno *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_freelist	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint **_freelist;$/;"	m	struct:_reent	typeref:struct:_Bigint **	access:public
_reent::_gamma_signgam	../../../../../../usr/include/sys/reent.h	/^  int _gamma_signgam;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_inc	../../../../../../usr/include/sys/reent.h	/^  int  _inc;			\/* used by tmpnam *\/$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_locale	../../../../../../usr/include/sys/reent.h	/^  struct __locale_t *_locale;\/* per-thread locale *\/$/;"	m	struct:_reent	typeref:struct:__locale_t *	access:public
_reent::_localtime_buf	../../../../../../usr/include/sys/reent.h	/^  struct __tm *_localtime_buf;$/;"	m	struct:_reent	typeref:struct:__tm *	access:public
_reent::_misc	../../../../../../usr/include/sys/reent.h	/^  struct _misc_reent *_misc;            \/* strtok, multibyte states *\/$/;"	m	struct:_reent	typeref:struct:_misc_reent *	access:public
_reent::_mp	../../../../../../usr/include/sys/reent.h	/^  struct _mprec *_mp;$/;"	m	struct:_reent	typeref:struct:_mprec *	access:public
_reent::_new	../../../../../../usr/include/sys/reent.h	/^    } _new;$/;"	m	struct:_reent	typeref:union:_reent::__anon88be1d72010a	access:public
_reent::_p5s	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_p5s;$/;"	m	struct:_reent	typeref:struct:_Bigint *	access:public
_reent::_r48	../../../../../../usr/include/sys/reent.h	/^  struct _rand48 *_r48;$/;"	m	struct:_reent	typeref:struct:_rand48 *	access:public
_reent::_reserved_0	../../../../../../usr/include/sys/reent.h	/^  int _reserved_0;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_reserved_1	../../../../../../usr/include/sys/reent.h	/^  int _reserved_1;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_reserved_6	../../../../../../usr/include/sys/reent.h	/^  struct _atexit *_reserved_6;$/;"	m	struct:_reent	typeref:struct:_atexit *	access:public
_reent::_reserved_7	../../../../../../usr/include/sys/reent.h	/^  struct _atexit _reserved_7;$/;"	m	struct:_reent	typeref:struct:_atexit	access:public
_reent::_reserved_8	../../../../../../usr/include/sys/reent.h	/^  struct _glue _reserved_8;$/;"	m	struct:_reent	typeref:struct:_glue	access:public
_reent::_result	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_result;$/;"	m	struct:_reent	typeref:struct:_Bigint *	access:public
_reent::_result_k	../../../../../../usr/include/sys/reent.h	/^  int _result_k;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reent::_sig_func	../../../../../../usr/include/sys/reent.h	/^  void (** _sig_func)(int);$/;"	m	struct:_reent	typeref:typename:void (**)(int)	access:public
_reent::_sig_func	../../../../../../usr/include/sys/reent.h	/^  void (**_sig_func)(int);$/;"	m	struct:_reent	typeref:typename:void (**)(int)	access:public
_reent::_signal_buf	../../../../../../usr/include/sys/reent.h	/^  char *_signal_buf;                    \/* strsignal *\/$/;"	m	struct:_reent	typeref:typename:char *	access:public
_reent::_stderr	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_stderr	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_stdin	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_stdin	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_stdout	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reent::_stdout	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_reserved_0	../../../../../../usr/include/sys/reent.h	/^  int _reserved_0;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reserved_1	../../../../../../usr/include/sys/reent.h	/^  int _reserved_1;$/;"	m	struct:_reent	typeref:typename:int	access:public
_reserved_2	../../../../../../usr/include/sys/reent.h	/^          unsigned int _reserved_2;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:unsigned int	access:public
_reserved_3	../../../../../../usr/include/sys/reent.h	/^          unsigned char * _reserved_3[30];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720308	typeref:typename:unsigned char * [30]	access:public
_reserved_4	../../../../../../usr/include/sys/reent.h	/^          unsigned int _reserved_4[30];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720308	typeref:typename:unsigned int[30]	access:public
_reserved_5	../../../../../../usr/include/sys/reent.h	/^        } _reserved_5;$/;"	m	union:_reent::__anon88be1d72010a	typeref:struct:_reent::__anon88be1d72010a::__anon88be1d720308	access:public
_reserved_6	../../../../../../usr/include/sys/reent.h	/^  struct _atexit *_reserved_6;$/;"	m	struct:_reent	typeref:struct:_atexit *	access:public
_reserved_7	../../../../../../usr/include/sys/reent.h	/^  struct _atexit _reserved_7;$/;"	m	struct:_reent	typeref:struct:_atexit	access:public
_reserved_8	../../../../../../usr/include/sys/reent.h	/^  struct _glue _reserved_8;$/;"	m	struct:_reent	typeref:struct:_glue	access:public
_result	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_result;$/;"	m	struct:_mprec	typeref:struct:_Bigint *	access:public
_result	../../../../../../usr/include/sys/reent.h	/^  struct _Bigint *_result;$/;"	m	struct:_reent	typeref:struct:_Bigint *	access:public
_result_k	../../../../../../usr/include/sys/reent.h	/^  int _result_k;$/;"	m	struct:_mprec	typeref:typename:int	access:public
_result_k	../../../../../../usr/include/sys/reent.h	/^  int _result_k;$/;"	m	struct:_reent	typeref:typename:int	access:public
_seed	../../../../../../usr/include/sys/reent.h	/^  unsigned short _seed[3];$/;"	m	struct:_rand48	typeref:typename:unsigned short[3]	access:public
_seed48_r	../../../../../../usr/include/stdlib.h	/^       _seed48_r (struct _reent *, unsigned short [3]);$/;"	p	typeref:typename:unsigned short *	signature:(struct _reent *,unsigned short[3])
_seek	../../../../../../usr/include/sys/reent.h	/^  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);$/;"	m	struct:__sFILE	typeref:typename:_fpos_t (*)(struct _reent *,void *,_fpos_t,int)	access:public
_seek	../../../../../../usr/include/sys/reent.h	/^  _fpos_t (*_seek) (struct _reent *, void *, _fpos_t, int);$/;"	m	struct:__sFILE64	typeref:typename:_fpos_t (*)(struct _reent *,void *,_fpos_t,int)	access:public
_seek64	../../../../../../usr/include/sys/reent.h	/^  _fpos64_t (*_seek64) (struct _reent *, void *, _fpos64_t, int);$/;"	m	struct:__sFILE64	typeref:typename:_fpos64_t (*)(struct _reent *,void *,_fpos64_t,int)	access:public
_setenv_r	../../../../../../usr/include/stdlib.h	/^int	_setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);$/;"	p	typeref:typename:int	signature:(struct _reent *,const char * __string,const char * __value,int __overwrite)
_short_backupbuf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _short_backupbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_shortbuf	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _shortbuf[1];$/;"	m	struct:_IO_FILE	typeref:typename:char[1]	access:public
_sig_func	../../../../../../usr/include/sys/reent.h	/^  void (** _sig_func)(int);$/;"	m	struct:_reent	typeref:typename:void (**)(int)	access:public
_sig_func	../../../../../../usr/include/sys/reent.h	/^  void (**_sig_func)(int);$/;"	m	struct:_reent	typeref:typename:void (**)(int)	access:public
_sign	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_signal_buf	../../../../../../usr/include/sys/reent.h	/^          char _signal_buf[_REENT_SIGNAL_SIZE];$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char[]	access:public
_signal_buf	../../../../../../usr/include/sys/reent.h	/^  char *_signal_buf;                    \/* strsignal *\/$/;"	m	struct:_reent	typeref:typename:char *	access:public
_size	../../../../../../usr/include/sys/reent.h	/^	int	_size;$/;"	m	struct:__sbuf	typeref:typename:int	access:public
_srand48_r	../../../../../../usr/include/stdlib.h	/^void  _srand48_r (struct _reent *, long);$/;"	p	typeref:typename:void	signature:(struct _reent *,long)
_ssize_t	../../../../../../usr/include/sys/_types.h	/^typedef __SIZE_TYPE__ _ssize_t;$/;"	t	typeref:typename:__SIZE_TYPE__
_ssize_t	../../../../../../usr/include/sys/_types.h	/^typedef int _ssize_t;$/;"	t	typeref:typename:int
_ssize_t	../../../../../../usr/include/sys/_types.h	/^typedef long _ssize_t;$/;"	t	typeref:typename:long
_stderr	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_stderr	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_stdin	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_stdin	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_stdout	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;	\/* XXX *\/$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_stdout	../../../../../../usr/include/sys/reent.h	/^  __FILE *_stdin, *_stdout, *_stderr;$/;"	m	struct:_reent	typeref:typename:__FILE *	access:public
_strtod_r	../../../../../../usr/include/stdlib.h	/^double	_strtod_r (struct _reent *,const char *__restrict __n, char **__restrict __end_PTR);$/;"	p	typeref:typename:double	signature:(struct _reent *,const char * __restrict __n,char ** __restrict __end_PTR)
_strtok_last	../../../../../../usr/include/sys/reent.h	/^          char * _strtok_last;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:char *	access:public
_strtok_last	../../../../../../usr/include/sys/reent.h	/^  char *_strtok_last;$/;"	m	struct:_misc_reent	typeref:typename:char *	access:public
_strtol_r	../../../../../../usr/include/stdlib.h	/^long	_strtol_r (struct _reent *,const char *__restrict __n, char **__restrict __end_PTR, int __b/;"	p	typeref:typename:long	signature:(struct _reent *,const char * __restrict __n,char ** __restrict __end_PTR,int __base)
_strtold_r	../../../../../../usr/include/stdlib.h	/^extern long double _strtold_r (struct _reent *, const char *__restrict, char **__restrict);$/;"	p	typeref:typename:long double	signature:(struct _reent *,const char * __restrict,char ** __restrict)
_strtoll_r	../../../../../../usr/include/stdlib.h	/^long long _strtoll_r (struct _reent *, const char *__restrict __n, char **__restrict __end_PTR, /;"	p	typeref:typename:long long	signature:(struct _reent *,const char * __restrict __n,char ** __restrict __end_PTR,int __base)
_strtoul_r	../../../../../../usr/include/stdlib.h	/^unsigned long _strtoul_r (struct _reent *,const char *__restrict __n, char **__restrict __end_PT/;"	p	typeref:typename:unsigned long	signature:(struct _reent *,const char * __restrict __n,char ** __restrict __end_PTR,int __base)
_strtoull_r	../../../../../../usr/include/stdlib.h	/^unsigned long long _strtoull_r (struct _reent *, const char *__restrict __n, char **__restrict _/;"	p	typeref:typename:unsigned long long	signature:(struct _reent *,const char * __restrict __n,char ** __restrict __end_PTR,int __base)
_system_r	../../../../../../usr/include/stdlib.h	/^int	_system_r (struct _reent *, const char *);$/;"	p	typeref:typename:int	signature:(struct _reent *,const char *)
_tolower	d:/include/ctype.h	/^#  define _tolower(c)	((int) (*__ctype_tolower_/;"	d	signature:(c)
_toupper	d:/include/ctype.h	/^#  define _toupper(c)	((int) (*__ctype_toupper_/;"	d	signature:(c)
_ub	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _ub;	\/* ungetc buffer *\/$/;"	m	struct:__sFILE	typeref:struct:__sbuf	access:public
_ub	../../../../../../usr/include/sys/reent.h	/^  struct __sbuf _ub;	\/* ungetc buffer *\/$/;"	m	struct:__sFILE64	typeref:struct:__sbuf	access:public
_ubuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _ubuf[3];	\/* guarantee an ungetc() buffer *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char[3]	access:public
_ubuf	../../../../../../usr/include/sys/reent.h	/^  unsigned char _ubuf[3];	\/* guarantee an ungetc() buffer *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char[3]	access:public
_unsetenv_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _unsetenv_r UNUSED__unsetenv_r$/;"	d
_unsetenv_r	../../../../../../usr/include/stdlib.h	/^int	_unsetenv_r (struct _reent *, const char *__string);$/;"	p	typeref:typename:int	signature:(struct _reent *,const char * __string)
_unused2	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  char _unused2[15 * sizeof (int) - 5 * sizeof (void *)];$/;"	m	struct:_IO_FILE_complete	typeref:typename:char[]	access:public
_up	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_up;	\/* saved _p when _p is doing ungetc data *\/$/;"	m	struct:__sFILE	typeref:typename:unsigned char *	access:public
_up	../../../../../../usr/include/sys/reent.h	/^  unsigned char *_up;	\/* saved _p when _p is doing ungetc data *\/$/;"	m	struct:__sFILE64	typeref:typename:unsigned char *	access:public
_ur	../../../../../../usr/include/sys/reent.h	/^  int	_ur;		\/* saved _r when _r is counting ungetc data *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_ur	../../../../../../usr/include/sys/reent.h	/^  int	_ur;		\/* saved _r when _r is counting ungetc data *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_valloc_r	../../../../../../usr/include/cygwin/stdlib.h	/^#define _valloc_r(/;"	d	signature:(r,s)
_vtable_offset	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  signed char _vtable_offset;$/;"	m	struct:_IO_FILE	typeref:typename:signed char	access:public
_w	../../../../../../usr/include/sys/reent.h	/^  int	_w;		\/* write space left for putc() *\/$/;"	m	struct:__sFILE	typeref:typename:int	access:public
_w	../../../../../../usr/include/sys/reent.h	/^  int	_w;		\/* write space left for putc() *\/$/;"	m	struct:__sFILE64	typeref:typename:int	access:public
_wcrtomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wcrtomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_wcrtomb_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wcrtomb_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_wcsrtombs_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wcsrtombs_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_wcsrtombs_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wcsrtombs_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_wcstombs_r	../../../../../../usr/include/stdlib.h	/^size_t	_wcstombs_r (struct _reent *, char *__restrict, const wchar_t *__restrict, size_t, _mbsta/;"	p	typeref:typename:size_t	signature:(struct _reent *,char * __restrict,const wchar_t * __restrict,size_t,_mbstate_t *)
_wctomb_r	../../../../../../usr/include/stdlib.h	/^int	_wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);$/;"	p	typeref:typename:int	signature:(struct _reent *,char *,wchar_t,_mbstate_t *)
_wctomb_state	../../../../../../usr/include/sys/reent.h	/^          _mbstate_t _wctomb_state;$/;"	m	struct:_reent::__anon88be1d72010a::__anon88be1d720208	typeref:typename:_mbstate_t	access:public
_wctomb_state	../../../../../../usr/include/sys/reent.h	/^  _mbstate_t _wctomb_state;$/;"	m	struct:_misc_reent	typeref:typename:_mbstate_t	access:public
_wds	../../../../../../usr/include/sys/reent.h	/^  int _k, _maxwds, _sign, _wds;$/;"	m	struct:_Bigint	typeref:typename:int	access:public
_wide_data	d:/include/x86_64-linux-gnu/bits/types/struct_FILE.h	/^  struct _IO_wide_data *_wide_data;$/;"	m	struct:_IO_FILE_complete	typeref:struct:_IO_wide_data *	access:public
_write	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_write) (struct _reent *, void *,$/;"	m	struct:__sFILE	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,const char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
_write	../../../../../../usr/include/sys/reent.h	/^  _READ_WRITE_RETURN_TYPE (*_write) (struct _reent *, void *,$/;"	m	struct:__sFILE64	typeref:typename:_READ_WRITE_RETURN_TYPE (*)(struct _reent *,void *,const char *,_READ_WRITE_BUFSIZE_TYPE)	access:public
_x	../../../../../../usr/include/sys/reent.h	/^  __ULong _x[1];$/;"	m	struct:_Bigint	typeref:typename:__ULong[1]	access:public
a64l	../../../../../../usr/include/stdlib.h	/^long    a64l (const char *__input);$/;"	p	typeref:typename:long	signature:(const char * __input)
abort	../../../../../../usr/include/stdlib.h	/^void	abort (void) _ATTRIBUTE ((__noreturn__));$/;"	p	typeref:typename:void	signature:(void)
abs	../../../../../../usr/include/stdlib.h	/^int	abs (int);$/;"	p	typeref:typename:int	signature:(int)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float128 __x)$/;"	f	namespace:std	typeref:typename:_Float128	signature:(_Float128 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float16 __x)$/;"	f	namespace:std	typeref:typename:_Float16	signature:(_Float16 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float32 __x)$/;"	f	namespace:std	typeref:typename:_Float32	signature:(_Float32 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float64 __x)$/;"	f	namespace:std	typeref:typename:_Float64	signature:(_Float64 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__float128 __x)$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __float128	signature:(__float128 __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__gnu_cxx::__bfloat16_t __x)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__bfloat16_t	signature:(__gnu_cxx::__bfloat16_t __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR double	signature:(double __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(float __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR float	signature:(float __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long __i) { return __builtin_labs(__i); }$/;"	f	namespace:std	typeref:typename:long	signature:(long __i)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long double	signature:(long double __x)
abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long long __x) { return __builtin_llabs (__x); }$/;"	f	namespace:std	typeref:typename:long long	signature:(long long __x)
acq_rel	d:/include/c++/14/bits/atomic_base.h	/^      acq_rel,$/;"	e	enum:std::memory_order	access:public
acquire	d:/include/c++/14/bits/atomic_base.h	/^      acquire,$/;"	e	enum:std::memory_order	access:public
address	d:/include/c++/14/bits/new_allocator.h	/^      address(const_reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:const_pointer	access:public	signature:(const_reference __x) const
address	d:/include/c++/14/bits/new_allocator.h	/^      address(reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:pointer	access:public	signature:(reference __x) const
addressof	d:/include/c++/14/bits/move.h	/^    addressof(_Tp& __r) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _Tp *	signature:(_Tp & __r)
addressof	d:/include/c++/14/bits/move.h	/^    const _Tp* addressof(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const _Tp &&)
adjustfield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n)
advance	d:/include/c++/14/bits/streambuf_iterator.h	/^    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,void>::__type	signature:(istreambuf_iterator<_CharT> & __i,_Distance __n)
align	d:/include/c++/14/bits/align.h	/^align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void *	signature:(size_t __align,size_t __size,void * & __ptr,size_t & __space)
aligned_alloc	../../../../../../usr/include/stdlib.h	/^void *	aligned_alloc(size_t, size_t) __malloc_like __alloc_align(1)$/;"	p	typeref:typename:void *	signature:(size_t,size_t)
all	d:/include/c++/14/bits/locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	m	class:std::locale	typeref:typename:const category	access:public
alloca	d:/include/alloca.h	/^# define alloca(size)	__builtin_alloca /;"	d	signature:(size)
alloca	d:/include/alloca.h	/^extern void *alloca (size_t __size) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS void *	signature:(size_t __size)
allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n)
allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n,const_void_pointer __hint)
allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n)
allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n,$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n,const_void_pointer __hint)
allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type&, size_type, const void* = nullptr) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:void *	access:public	signature:(allocator_type &,size_type,const void * =nullptr)
allocate	d:/include/c++/14/bits/allocator.h	/^      allocate(size_t __n)$/;"	f	class:std::allocator	typeref:typename:_Tp *	access:public	signature:(size_t __n)
allocate	d:/include/c++/14/bits/new_allocator.h	/^      allocate(size_type __n, const void* = static_cast<const void*>(0))$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX_NODISCARD _Tp *	access:public	signature:(size_type __n,const void * =static_cast<const void * > (0))
allocate	d:/include/c++/14/ext/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, _Hint __hint)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n,_Hint __hint)
allocate	d:/include/c++/14/ext/alloc_traits.h	/^    allocate(_Alloc& __a, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX_NODISCARD pointer	access:public	signature:(_Alloc & __a,size_type __n)
allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const _Alloc & __a)
allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NonArray<_Tp>>	signature:(const _Alloc & __a,_Args &&...__args)
allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const _Alloc & __a,const remove_extent_t<_Tp> & __u)
allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n)
allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, size_t __n,$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n,const remove_extent_t<_Tp> & __u)
allocate_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared_for_overwrite(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NotUnboundedArray<_Tp>>	signature:(const _Alloc & __a)
allocate_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared_for_overwrite(const _Alloc& __a, size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n)
allocator	d:/include/c++/14/bits/allocator.h	/^	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator<_Tp1> &)
allocator	d:/include/c++/14/bits/allocator.h	/^	allocator(const allocator<_Up>&) noexcept { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() { }$/;"	f	class:std::allocator	access:public	signature:()
allocator	d:/include/c++/14/bits/allocator.h	/^      allocator(const allocator& __a) _GLIBCXX_NOTHROW$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator & __a)
allocator	d:/include/c++/14/bits/allocator.h	/^      template<typename _Up> allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator : public __allocator_base<_Tp>$/;"	c	namespace:std	inherits:__allocator_base<_Tp>
allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<const _Tp>$/;"	c	namespace:std
allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<const volatile _Tp>$/;"	c	namespace:std
allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<void>$/;"	c	namespace:std
allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<volatile _Tp>$/;"	c	namespace:std
allocator_arg	d:/include/c++/14/bits/uses_allocator.h	/^  _GLIBCXX17_INLINE constexpr allocator_arg_t allocator_arg =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE allocator_arg_t
allocator_arg_t	d:/include/c++/14/bits/uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	p	struct:std::allocator_arg_t	access:public	signature:()
allocator_arg_t	d:/include/c++/14/bits/uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	s	namespace:std
allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits : __allocator_traits_base$/;"	s	namespace:std	inherits:__allocator_traits_base
allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits<allocator<_Tp>>$/;"	s	namespace:std
allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits<allocator<void>>$/;"	s	namespace:std
allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc	access:public
allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      using allocator_type = allocator<_Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Tp>	access:public
allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      using allocator_type = allocator<void>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<void>	access:public
allocator_type	d:/include/c++/14/bits/basic_string.h	/^      typedef _Char_alloc_type				allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Char_alloc_type	access:public
allocator_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Str::allocator_type allocator_type;$/;"	t	function:std::__str_concat	typeref:typename:_Str::allocator_type
allocator_type	d:/include/c++/14/bits/cow_string.h	/^      typedef _Alloc					    allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc	access:public
allocator_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef _Alloc allocator_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc	access:public
app	d:/include/c++/14/bits/ios_base.h	/^    static const openmode app =		_S_app;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
append	d:/include/c++/14/bits/basic_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
append	d:/include/c++/14/bits/basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
append	d:/include/c++/14/bits/basic_string.h	/^        append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
append	d:/include/c++/14/bits/basic_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
append	d:/include/c++/14/bits/basic_string.h	/^      append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
append	d:/include/c++/14/bits/basic_string.h	/^      append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
append	d:/include/c++/14/bits/basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
append	d:/include/c++/14/bits/basic_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
append	d:/include/c++/14/bits/basic_string.h	/^      append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __n,_CharT __c)
append	d:/include/c++/14/bits/cow_string.h	/^	append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
append	d:/include/c++/14/bits/cow_string.h	/^	append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
append	d:/include/c++/14/bits/cow_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
append	d:/include/c++/14/bits/cow_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
append	d:/include/c++/14/bits/cow_string.h	/^      append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
append	d:/include/c++/14/bits/cow_string.h	/^      append(const basic_string& __str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
append	d:/include/c++/14/bits/cow_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
append	d:/include/c++/14/bits/cow_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
append	d:/include/c++/14/bits/cow_string.h	/^      append(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
append	d:/include/c++/14/bits/cow_string.h	/^    append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const _CharT * __s,size_type __n)
append	d:/include/c++/14/bits/cow_string.h	/^    append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str)
append	d:/include/c++/14/bits/cow_string.h	/^    append(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str,size_type __pos,size_type __n)
append	d:/include/c++/14/bits/cow_string.h	/^    append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __n,_CharT __c)
arc4random	../../../../../../usr/include/stdlib.h	/^__uint32_t arc4random (void);$/;"	p	typeref:typename:__uint32_t	signature:(void)
arc4random_buf	../../../../../../usr/include/stdlib.h	/^void    arc4random_buf (void *, size_t);$/;"	p	typeref:typename:void	signature:(void *,size_t)
arc4random_uniform	../../../../../../usr/include/stdlib.h	/^__uint32_t arc4random_uniform (__uint32_t);$/;"	p	typeref:typename:__uint32_t	signature:(__uint32_t)
argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::argument_type argument_type;$/;"	t	struct:std::_Refwrap_base_arg1	typeref:typename:_Tp::argument_type	access:public
argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg 	argument_type;   $/;"	t	struct:std::unary_function	typeref:typename:_Arg	access:public
asString	move_shared_ptr.cpp	/^  std::string asString() const { return std::to_string(*sp) }$/;"	f	class:SharedInt	typeref:typename:std::string	file:	access:public	signature:() const
asctime	d:/include/time.h	/^extern char *asctime (const struct tm *__tp) __THROW;$/;"	p	typeref:typename:char *	signature:(const struct tm * __tp)
asctime_r	d:/include/time.h	/^extern char *asctime_r (const struct tm *__restrict __tp,$/;"	p	typeref:typename:char *	signature:(const struct tm * __restrict __tp,char * __restrict __buf)
asprintf	d:/include/stdio.h	/^extern int asprintf (char **__restrict __ptr,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __fmt,...)
assign	d:/include/c++/14/bits/basic_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	d:/include/c++/14/bits/basic_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	d:/include/c++/14/bits/basic_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
assign	d:/include/c++/14/bits/basic_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(basic_string && __str)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
assign	d:/include/c++/14/bits/basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __n,_CharT __c)
assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,size_t __n,char_type __a)
assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type* __s, std::size_t __n, char_type __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,std::size_t __n,char_type __a)
assign	d:/include/c++/14/bits/char_traits.h	/^    assign(char_type* __s, std::size_t __n, char_type __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s,std::size_t __n,char_type __a)
assign	d:/include/c++/14/bits/cow_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
assign	d:/include/c++/14/bits/cow_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
assign	d:/include/c++/14/bits/cow_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const basic_string& __str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
assign	d:/include/c++/14/bits/cow_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
assign	d:/include/c++/14/bits/cow_string.h	/^    assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const _CharT * __s,size_type __n)
assign	d:/include/c++/14/bits/cow_string.h	/^    assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str)
assume_aligned	d:/include/c++/14/bits/align.h	/^    assume_aligned(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
at	d:/include/c++/14/bits/basic_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:(size_type __n) const
at	d:/include/c++/14/bits/basic_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:(size_type __n)
at	d:/include/c++/14/bits/cow_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
at	d:/include/c++/14/bits/cow_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
at_quick_exit	../../../../../../usr/include/stdlib.h	/^int	at_quick_exit(void (*)(void));$/;"	p	typeref:typename:int	signature:(void (*)(void))
ate	d:/include/c++/14/bits/ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
atexit	../../../../../../usr/include/stdlib.h	/^int	atexit (void (*__func)(void));$/;"	p	typeref:typename:int	signature:(void (* __func)(void))
atof	../../../../../../usr/include/stdlib.h	/^double	atof (const char *__nptr);$/;"	p	typeref:typename:double	signature:(const char * __nptr)
atoff	../../../../../../usr/include/stdlib.h	/^float	atoff (const char *__nptr);$/;"	p	typeref:typename:float	signature:(const char * __nptr)
atoi	../../../../../../usr/include/stdlib.h	/^int	atoi (const char *__nptr);$/;"	p	typeref:typename:int	signature:(const char * __nptr)
atol	../../../../../../usr/include/stdlib.h	/^long	atol (const char *__nptr);$/;"	p	typeref:typename:long	signature:(const char * __nptr)
atoll	../../../../../../usr/include/stdlib.h	/^long long atoll (const char *__nptr);$/;"	p	typeref:typename:long long	signature:(const char * __nptr)
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(const atomic&) = delete;$/;"	p	struct:std::atomic	access:public	signature:(const atomic &)
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(shared_ptr<_Tp> __r) noexcept$/;"	f	struct:std::atomic	access:public	signature:(shared_ptr<_Tp> __r)
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(weak_ptr<_Tp> __r) noexcept$/;"	f	struct:std::atomic	access:public	signature:(weak_ptr<_Tp> __r)
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr atomic() noexcept = default;$/;"	p	struct:std::atomic	access:public	signature:()
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr atomic(nullptr_t) noexcept : atomic() { }$/;"	f	struct:std::atomic	access:public	signature:(nullptr_t)
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    struct atomic<shared_ptr<_Tp>>$/;"	s	namespace:std
atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    struct atomic<weak_ptr<_Tp>>$/;"	s	namespace:std
atomic_compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w)
atomic_compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w)
atomic_compare_exchange_strong_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w,memory_order,memory_order)
atomic_compare_exchange_strong_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w,memory_order,memory_order)
atomic_compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w)
atomic_compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w)
atomic_compare_exchange_weak_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w,memory_order __success,memory_order __failure)
atomic_compare_exchange_weak_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w,memory_order __success,memory_order __failure)
atomic_exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)$/;"	f	namespace:std	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r)
atomic_exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)$/;"	f	namespace:std	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r)
atomic_exchange_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r,memory_order)
atomic_exchange_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,$/;"	f	namespace:std	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r,memory_order)
atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag() noexcept = default;$/;"	p	struct:std::atomic_flag	access:public	signature:()
atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag(const atomic_flag&) = delete;$/;"	p	struct:std::atomic_flag	access:public	signature:(const atomic_flag &)
atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    constexpr atomic_flag(bool __i) noexcept$/;"	f	struct:std::atomic_flag	access:public	signature:(bool __i)
atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^  struct atomic_flag : public __atomic_flag_base$/;"	s	namespace:std	inherits:__atomic_flag_base
atomic_is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>*)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(const __shared_ptr<_Tp,_Lp> *)
atomic_is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_is_lock_free(const shared_ptr<_Tp>* __p)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(const shared_ptr<_Tp> * __p)
atomic_load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)$/;"	f	namespace:std	signature:(const __shared_ptr<_Tp,_Lp> * __p)
atomic_load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load(const shared_ptr<_Tp>* __p)$/;"	f	namespace:std	signature:(const shared_ptr<_Tp> * __p)
atomic_load_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)$/;"	f	namespace:std	signature:(const __shared_ptr<_Tp,_Lp> * __p,memory_order)
atomic_load_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)$/;"	f	namespace:std	signature:(const shared_ptr<_Tp> * __p,memory_order)
atomic_signal_fence	d:/include/c++/14/bits/atomic_base.h	/^  atomic_signal_fence(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(memory_order __m)
atomic_store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r)
atomic_store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r)
atomic_store_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r,memory_order)
atomic_store_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r,memory_order)
atomic_thread_fence	d:/include/c++/14/bits/atomic_base.h	/^  atomic_thread_fence(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(memory_order __m)
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr<_Tp1> & __a)
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr & __a)
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(auto_ptr_ref<element_type> __ref) throw()$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr_ref<element_type> __ref)
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }$/;"	f	class:std::auto_ptr	access:public	signature:(element_type * __p=0)
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    class auto_ptr$/;"	c	namespace:std
auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    class auto_ptr<void>$/;"	c	namespace:std
auto_ptr_ref	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }$/;"	f	struct:std::auto_ptr_ref	access:public	signature:(_Tp1 * __p)
auto_ptr_ref	d:/include/c++/14/backward/auto_ptr.h	/^    struct auto_ptr_ref$/;"	s	namespace:std
back	d:/include/c++/14/bits/basic_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:() const
back	d:/include/c++/14/bits/basic_string.h	/^      back() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:()
back	d:/include/c++/14/bits/cow_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
back	d:/include/c++/14/bits/cow_string.h	/^      back()$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
back_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      back_insert_iterator(_Container& __x)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
back_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
back_inserter	d:/include/c++/14/bits/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR back_insert_iterator<_Container>	signature:(_Container & __x)
bad	d:/include/c++/14/bits/basic_ios.h	/^      bad() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^  class bad_weak_ptr : public std::exception$/;"	c	namespace:std	inherits:std::exception
badbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:()
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:()
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const & noexcept$/;"	f	class:std::counted_iterator	typeref:typename:const _It &	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const & noexcept$/;"	f	class:std::move_iterator	typeref:typename:const iterator_type &	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR const _Iterator &	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_sentinel	typeref:typename:_Sent	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
base	d:/include/c++/14/bits/stl_iterator.h	/^    base() &&$/;"	f	class:std::basic_const_iterator	typeref:typename:_It	access:public	signature:()
base	d:/include/c++/14/bits/stl_iterator.h	/^    base() const & noexcept$/;"	f	class:std::basic_const_iterator	typeref:typename:const _It &	access:public	signature:() const
base	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      _OutputIterator base() const { return _M_iter; }$/;"	f	class:std::raw_storage_iterator	typeref:typename:_OutputIterator	access:public	signature:() const
basefield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
basic_common_reference	d:/include/c++/14/bits/stl_pair.h	/^  struct basic_common_reference<pair<_T1, _T2>, pair<_U1, _U2>, _TQual, _UQual>$/;"	s	namespace:std
basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      basic_const_iterator(_Tp&& __current)$/;"	f	class:std::basic_const_iterator	typeref:typename:requires convertible_to<_Tp,_It> 	access:public	signature:(_Tp && __current)
basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      basic_const_iterator(basic_const_iterator<_It2> __current)$/;"	f	class:std::basic_const_iterator	access:public	signature:(basic_const_iterator<_It2> __current)
basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    basic_const_iterator() requires default_initializable<_It> = default;$/;"	p	class:std::basic_const_iterator	access:public	signature:()
basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    basic_const_iterator(_It __current)$/;"	f	class:std::basic_const_iterator	access:public	signature:(_It __current)
basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^  class basic_const_iterator$/;"	c	namespace:std	inherits:__detail::__basic_const_iterator_iter_cat<_It>
basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios()$/;"	f	class:std::basic_ios	access:protected	signature:()
basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	access:protected	signature:(const basic_ios &)
basic_ios	d:/include/c++/14/bits/basic_ios.h	/^    class basic_ios : public ios_base$/;"	c	namespace:std	inherits:ios_base
basic_string	d:/include/c++/14/bits/basic_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(basic_string && __str)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(basic_string && __str,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Alloc & __a)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(nullptr_t) = delete;$/;"	p	class:std::basic_string	access:public	signature:(nullptr_t)
basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11	signature:(_InputIterator,_InputIterator,_Allocator=_Allocator ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,const _Allocator &=_Allocator ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>,$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,typename basic_string<_CharT,_Traits,_Allocator>::size_type,typename basic_string<_CharT,_Traits,_Allocator>::size_type,const _Allocator &=_Allocator ())
basic_string	d:/include/c++/14/bits/basic_string.h	/^    class basic_string$/;"	c	namespace:std
basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string()$/;"	f	class:std::basic_string	access:public	signature:()
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(nullptr_t) = delete;$/;"	p	class:std::basic_string	access:public	signature:(nullptr_t)
basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a)$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,size_type __n)
basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
basic_string	d:/include/c++/14/bits/cow_string.h	/^    class basic_string$/;"	c	namespace:std
beg	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
begin	d:/include/c++/14/bits/basic_string.h	/^      begin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR iterator	access:public	signature:()
begin	d:/include/c++/14/bits/basic_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
begin	d:/include/c++/14/bits/cow_string.h	/^      begin() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
begin	d:/include/c++/14/bits/cow_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
begin	d:/include/c++/14/bits/range_access.h	/^    begin(_Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.begin ())	signature:(_Container & __cont)
begin	d:/include/c++/14/bits/range_access.h	/^    begin(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
begin	d:/include/c++/14/bits/range_access.h	/^    begin(const _Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.begin ())	signature:(const _Container & __cont)
begin	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
begin	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
begin	d:/include/c++/14/bits/stl_tempbuf.h	/^      begin()$/;"	f	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
bidirectional_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	inherits:forward_iterator_tag
binary	d:/include/c++/14/bits/ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
binary_function	d:/include/c++/14/bits/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
binary_negate	d:/include/c++/14/bits/stl_function.h	/^      binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
binary_negate	d:/include/c++/14/bits/stl_function.h	/^    class _GLIBCXX17_DEPRECATED binary_negate$/;"	c	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
bind1st	d:/include/c++/14/backward/binders.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation & __fn,const _Tp & __x)
bind2nd	d:/include/c++/14/backward/binders.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation & __fn,const _Tp & __x)
binder1st	d:/include/c++/14/backward/binders.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
binder1st	d:/include/c++/14/backward/binders.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
binder2nd	d:/include/c++/14/backward/binders.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
binder2nd	d:/include/c++/14/backward/binders.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
bit_and	d:/include/c++/14/bits/stl_function.h	/^    struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_and	d:/include/c++/14/bits/stl_function.h	/^    struct bit_and<void>$/;"	s	namespace:std
bit_not	d:/include/c++/14/bits/stl_function.h	/^    struct bit_not : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
bit_not	d:/include/c++/14/bits/stl_function.h	/^    struct bit_not<void>$/;"	s	namespace:std
bit_or	d:/include/c++/14/bits/stl_function.h	/^    struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_or	d:/include/c++/14/bits/stl_function.h	/^    struct bit_or<void>$/;"	s	namespace:std
bit_xor	d:/include/c++/14/bits/stl_function.h	/^    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
bit_xor	d:/include/c++/14/bits/stl_function.h	/^    struct bit_xor<void>$/;"	s	namespace:std
boolalpha	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
boolalpha	d:/include/c++/14/bits/ios_base.h	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
broadcast	d:/include/c++/14/ext/concurrence.h	/^    void broadcast()$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:()
bsearch	../../../../../../usr/include/stdlib.h	/^void *	bsearch (const void *__key,$/;"	p	typeref:typename:void *	signature:(const void * __key,const void * __base,size_t __nmemb,size_t __size,__compar_fn_t _compar)
btowc	d:/include/wchar.h	/^extern wint_t btowc (int __c) __THROW;$/;"	p	typeref:typename:wint_t	signature:(int __c)
c_str	d:/include/c++/14/bits/basic_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const _CharT *	access:public	signature:() const
c_str	d:/include/c++/14/bits/cow_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
calloc	../../../../../../usr/include/stdlib.h	/^void	*calloc(size_t, size_t) __malloc_like __result_use_check$/;"	p	typeref:typename:void *	signature:(size_t,size_t)
canonicalize_file_name	../../../../../../usr/include/cygwin/stdlib.h	/^char *canonicalize_file_name (const char *);$/;"	p	typeref:typename:char *	signature:(const char *)
capacity	d:/include/c++/14/bits/basic_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
capacity	d:/include/c++/14/bits/cow_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
category	d:/include/c++/14/bits/locale_classes.h	/^    typedef int	category;$/;"	t	class:std::locale	typeref:typename:int	access:public
cbegin	d:/include/c++/14/bits/basic_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
cbegin	d:/include/c++/14/bits/cow_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
cbegin	d:/include/c++/14/bits/range_access.h	/^    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
cend	d:/include/c++/14/bits/basic_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
cend	d:/include/c++/14/bits/cow_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
cend	d:/include/c++/14/bits/range_access.h	/^    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
cfree	../../../../../../usr/include/stdlib.h	/^void	cfree (void *);$/;"	p	typeref:typename:void	signature:(void *)
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<_CharT>
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits$/;"	s	namespace:__gnu_cxx
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char16_t>$/;"	s	namespace:std
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char32_t>$/;"	s	namespace:std
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char8_t>$/;"	s	namespace:std
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char>$/;"	s	namespace:std
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<wchar_t> : public __gnu_cxx::char_traits<wchar_t>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<wchar_t>
char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<wchar_t>$/;"	s	namespace:std
char_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	t	class:std::basic_ios	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef _CharT                                    char_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char              char_type;$/;"	t	struct:std::char_traits	typeref:typename:char	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char16_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char16_t	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char32_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char32_t	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char8_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:char8_t	access:public
char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wchar_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:wchar_t	access:public
char_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef _CharT			char_type;$/;"	t	class:std::collate	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef _CharT               char_type;$/;"	t	class:std::collate_byname	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::ctype	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::num_get	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct_byname	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::num_put	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef char		char_type;$/;"	t	class:std::ctype	typeref:typename:char	access:public
char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef wchar_t		char_type;$/;"	t	class:std::ctype	typeref:typename:wchar_t	access:public
char_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
char_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT			       char_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
classic	d:/include/c++/14/bits/locale_classes.h	/^    classic();$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD const locale &	access:public	signature:()
classic_table	d:/include/c++/14/bits/locale_facets.h	/^      classic_table() throw();$/;"	p	class:std::ctype	typeref:typename:const mask *	access:public	signature:()
clear	d:/include/c++/14/bits/atomic_base.h	/^    clear(memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(memory_order __m=memory_order_seq_cst)
clear	d:/include/c++/14/bits/atomic_base.h	/^    clear(memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(memory_order __m=memory_order_seq_cst)
clear	d:/include/c++/14/bits/basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
clear	d:/include/c++/14/bits/basic_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
clear	d:/include/c++/14/bits/cow_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
clear	d:/include/c++/14/bits/cow_string.h	/^      clear()$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
clearenv	../../../../../../usr/include/cygwin/stdlib.h	/^int clearenv (void);$/;"	p	typeref:typename:int	signature:(void)
clearerr	d:/include/stdio.h	/^extern void clearerr (FILE *__stream) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
clearerr_unlocked	d:/include/stdio.h	/^extern void clearerr_unlocked (FILE *__stream) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
clock	d:/include/time.h	/^extern clock_t clock (void) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS clock_t	signature:(void)
clock_adjtime	d:/include/x86_64-linux-gnu/bits/time.h	/^# define clock_adjtime __clock_adjtime6/;"	d
clock_adjtime	d:/include/x86_64-linux-gnu/bits/time.h	/^extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __THROW __nonnull((2));$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(__clockid_t __clock_id,struct timex * __utx)
clock_getcpuclockid	d:/include/time.h	/^extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __THROW;$/;"	p	typeref:typename:int	signature:(pid_t __pid,clockid_t * __clock_id)
clock_getres	d:/include/time.h	/^#   define clock_getres __clock_getres6/;"	d
clock_getres	d:/include/time.h	/^extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __THROW;$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct timespec * __res)
clock_gettime	d:/include/time.h	/^#   define clock_gettime __clock_gettime6/;"	d
clock_gettime	d:/include/time.h	/^extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp)$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct timespec * __tp)
clock_nanosleep	d:/include/time.h	/^#    define clock_nanosleep __clock_nanosleep_/;"	d
clock_nanosleep	d:/include/time.h	/^extern int clock_nanosleep (clockid_t __clock_id, int __flags,$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,int __flags,const struct timespec * __req,struct timespec * __rem)
clock_settime	d:/include/time.h	/^#   define clock_settime __clock_settime6/;"	d
clock_settime	d:/include/time.h	/^extern int clock_settime (clockid_t __clock_id, const struct timespec *__tp)$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,const struct timespec * __tp)
clock_t	d:/include/x86_64-linux-gnu/bits/types/clock_t.h	/^typedef __clock_t clock_t;$/;"	t	typeref:typename:__clock_t
clockid_t	d:/include/x86_64-linux-gnu/bits/types/clockid_t.h	/^typedef __clockid_t clockid_t;$/;"	t	typeref:typename:__clockid_t
clone	d:/include/x86_64-linux-gnu/bits/sched.h	/^extern int clone (int (*__fn) (void *__arg), void *__child_stack,$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(int (* __fn)(void * __arg),void * __child_stack,int __flags,void * __arg,...)
close	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_close_function_t *close;	\/* Close file.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_close_function_t *	access:public
collate	d:/include/c++/14/bits/locale_classes.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
collate	d:/include/c++/14/bits/locale_classes.h	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(size_t __refs=0)
collate	d:/include/c++/14/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
collate	d:/include/c++/14/bits/locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	m	class:std::locale	typeref:typename:const category	access:public
collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      collate_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const string & __s,size_t __refs=0)
collate_byname	d:/include/c++/14/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>$/;"	c	namespace:std	inherits:collate<_CharT>
combine	d:/include/c++/14/bits/locale_classes.h	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD locale	access:public	signature:(const locale & __other) const
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      common_iterator(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> && convertible_to<const _Sent2 &,_Sent> 	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(_It __i)$/;"	f	class:std::common_iterator	access:public	signature:(_It __i)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(_Sent __s)$/;"	f	class:std::common_iterator	access:public	signature:(_Sent __s)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(common_iterator&& __x)$/;"	f	class:std::common_iterator	access:public	signature:(common_iterator && __x)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(common_iterator&&) = default;$/;"	p	class:std::common_iterator	access:public	signature:(common_iterator &&)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(const common_iterator& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator & __x)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(const common_iterator&) = default;$/;"	p	class:std::common_iterator	access:public	signature:(const common_iterator &)
common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^  class common_iterator$/;"	c	namespace:std
common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<_Up, basic_const_iterator<_Tp>>$/;"	s	namespace:std
common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<basic_const_iterator<_Tp>, _Up>$/;"	s	namespace:std
common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<basic_const_iterator<_Tp>, basic_const_iterator<_Up>>$/;"	s	namespace:std
common_type	d:/include/c++/14/bits/stl_pair.h	/^  struct common_type<pair<_T1, _T2>, pair<_U1, _U2>>$/;"	s	namespace:std
compare	d:/include/c++/14/bits/basic_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
compare	d:/include/c++/14/bits/basic_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
compare	d:/include/c++/14/bits/basic_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(const _CharT * __s) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(const basic_string & __str) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
compare	d:/include/c++/14/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,size_t __n)
compare	d:/include/c++/14/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	d:/include/c++/14/bits/char_traits.h	/^    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR int	signature:(const char_type * __s1,const char_type * __s2,std::size_t __n)
compare	d:/include/c++/14/bits/cow_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
compare	d:/include/c++/14/bits/cow_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
compare	d:/include/c++/14/bits/cow_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
compare	d:/include/c++/14/bits/locale_classes.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst)
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure)
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __success,memory_order __failure) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp* __ptr, _Val<_Tp>& __expected,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp * __ptr,_Val<_Tp> & __expected,_Val<_Tp> __desired,memory_order __success,memory_order __failure,bool __ignore_padding=false)
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __success,memory_order __failure) const
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m1,memory_order __m2)
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m=memory_order_seq_cst)
compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__pointer_type & __p1,__pointer_type __p2,memory_order __m1,memory_order __m2)
compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(shared_ptr<_Tp>& __expected,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(shared_ptr<_Tp> & __expected,shared_ptr<_Tp> __desired,memory_order __o,memory_order __o2)
compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(value_type& __expected, value_type __desired,$/;"	f	class:std::_Sp_atomic	typeref:typename:bool	access:private	signature:(value_type & __expected,value_type __desired,memory_order __o,memory_order __o2)
compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o=memory_order_seq_cst)
compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(weak_ptr<_Tp>& __expected,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(weak_ptr<_Tp> & __expected,weak_ptr<_Tp> __desired,memory_order __o,memory_order __o2)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __success,memory_order __failure) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp* __ptr, _Val<_Tp>& __expected,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp * __ptr,_Val<_Tp> & __expected,_Val<_Tp> __desired,memory_order __success,memory_order __failure,bool __check_padding=false)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __order=memory_order_seq_cst) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __success,memory_order __failure) const
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m1,memory_order __m2)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m=memory_order_seq_cst)
compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__pointer_type & __p1,__pointer_type __p2,memory_order __m1,memory_order __m2)
compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_weak(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o,memory_order __o2)
compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_weak(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o=memory_order_seq_cst)
comparison_category	d:/include/c++/14/bits/char_traits.h	/^      using comparison_category = std::strong_ordering;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:std::strong_ordering	access:public
comparison_category	d:/include/c++/14/bits/char_traits.h	/^      using comparison_category = strong_ordering;$/;"	t	struct:std::char_traits	typeref:typename:strong_ordering	access:public
const_iterator	d:/include/c++/14/bits/basic_string.h	/^							const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
const_iterator	d:/include/c++/14/bits/cow_string.h	/^							    const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    using const_iterator$/;"	t	namespace:std	typeref:typename:__conditional_t<__detail::__constant_iterator<_It>,_It,basic_const_iterator<_It>>
const_mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
const_mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
const_mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
const_mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
const_mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
const_mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<const_Tp*,_Ret>
const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = const _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:const _Tp *	access:public
const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__c_pointer,const value_type>::type	access:public
const_pointer	d:/include/c++/14/bits/allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const _Tp *	access:public
const_pointer	d:/include/c++/14/bits/allocator.h	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const void *	access:public
const_pointer	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_pointer	const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_pointer	access:public
const_pointer	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::const_pointer   const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::const_pointer	access:public
const_pointer	d:/include/c++/14/bits/new_allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::__new_allocator	typeref:typename:const _Tp *	access:public
const_pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::const_pointer          const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_pointer	access:public
const_pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::const_pointer      const_pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::const_pointer	access:public
const_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
const_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    const_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
const_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
const_reference	d:/include/c++/14/bits/allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	typeref:typename:const _Tp &	access:public
const_reference	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_reference	const_reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_reference	access:public
const_reference	d:/include/c++/14/bits/cow_string.h	/^      typedef const value_type&				    const_reference;$/;"	t	class:std::basic_string	typeref:typename:const value_type &	access:public
const_reference	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_type::const_reference   const_reference;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_reference	access:public
const_reference	d:/include/c++/14/bits/new_allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::__new_allocator	typeref:typename:const _Tp &	access:public
const_reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef const value_type&                       const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:const value_type &	access:public
const_reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::const_reference        const_reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::const_reference	access:public
const_reverse_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_reverse_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    using const_sentinel = typename __detail::__const_sentinel<_Sent>::type;$/;"	t	namespace:std	typeref:typename:__detail::__const_sentinel<_Sent>::type
const_void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_void_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
const_void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__cv_pointer,const void>::type	access:public
construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR __enable_if_t<__can_construct<_Alloc,_Tp,_Args...>>	access:public	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(allocator_type& __a __attribute__((__unused__)),$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p,_Args &&...__args)
construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(allocator_type&, _Up* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type &,_Up * __p,_Args &&...__args)
construct	d:/include/c++/14/bits/new_allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
construct	d:/include/c++/14/bits/new_allocator.h	/^      construct(pointer __p, const _Tp& __val)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(pointer __p,const _Tp & __val)
construct	d:/include/c++/14/ext/alloc_traits.h	/^      construct(_Alloc& __a, _Ptr __p, _Args&&... __args)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p,_Args &&...__args)
construct	d:/include/c++/14/ext/alloc_traits.h	/^      static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,const _Tp & __arg)
construct_at	d:/include/c++/14/bits/stl_construct.h	/^    construct_at(_Tp* __location, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp * __location,_Args &&...__args)
consume	d:/include/c++/14/bits/atomic_base.h	/^      consume,$/;"	e	enum:std::memory_order	access:public
container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::insert_iterator	typeref:typename:_Container *	access:protected
container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:_Container	access:public
container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:_Container	access:public
container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	typeref:typename:_Container	access:public
contains	d:/include/c++/14/bits/basic_string.h	/^      contains(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
contains	d:/include/c++/14/bits/basic_string.h	/^      contains(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
contains	d:/include/c++/14/bits/basic_string.h	/^      contains(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
contains	d:/include/c++/14/bits/cow_string.h	/^      contains(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
contains	d:/include/c++/14/bits/cow_string.h	/^      contains(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
contains	d:/include/c++/14/bits/cow_string.h	/^      contains(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
contiguous_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct contiguous_iterator_tag : public random_access_iterator_tag { };$/;"	s	namespace:std	inherits:random_access_iterator_tag
cookie_close_function_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef int cookie_close_function_t (void *__cookie);$/;"	t	typeref:typename:int ()(void * __cookie)
cookie_io_functions_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^} cookie_io_functions_t;$/;"	t	typeref:struct:_IO_cookie_io_functions_t
cookie_read_function_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,$/;"	t	typeref:typename:__ssize_t ()(void * __cookie,char * __buf,size_t __nbytes)
cookie_seek_function_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);$/;"	t	typeref:typename:int ()(void * __cookie,__off64_t * __pos,int __w)
cookie_write_function_t	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,$/;"	t	typeref:typename:__ssize_t ()(void * __cookie,const char * __buf,size_t __nbytes)
copy	d:/include/c++/14/bits/basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
copy	d:/include/c++/14/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
copy	d:/include/c++/14/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	d:/include/c++/14/bits/char_traits.h	/^    copy(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
copy	d:/include/c++/14/bits/cow_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
copy	d:/include/c++/14/bits/cow_string.h	/^    copy(_CharT* __s, size_type __n, size_type __pos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::size_type	signature:(_CharT * __s,size_type __n,size_type __pos) const
copy	d:/include/c++/14/bits/stl_algobase.h	/^    copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
copy	d:/include/c++/14/bits/streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
copy_backward	d:/include/c++/14/bits/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
copyfmt	d:/include/c++/14/bits/basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
copyfmt_event	d:/include/c++/14/bits/ios_base.h	/^      copyfmt_event$/;"	e	enum:std::ios_base::event	access:public
count	d:/include/c++/14/bits/stl_iterator.h	/^      count() const noexcept { return _M_length; }$/;"	f	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public	signature:() const
counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	counted_iterator(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> 	access:public	signature:(const counted_iterator<_It2> & __x)
counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      constexpr counted_iterator() requires default_initializable<_It> = default;$/;"	p	class:std::counted_iterator	access:public	signature:()
counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      counted_iterator(_It __i, iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	access:public	signature:(_It __i,iter_difference_t<_It> __n)
counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class counted_iterator$/;"	c	namespace:std	inherits:__detail::__counted_iter_value_type<_It>,__detail::__counted_iter_concept<_It>,__detail::__counted_iter_cat<_It>
cpu_set_t	d:/include/x86_64-linux-gnu/bits/cpu-set.h	/^} cpu_set_t;$/;"	t	typeref:struct:__anonf835e1cf0108
crbegin	d:/include/c++/14/bits/basic_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
crbegin	d:/include/c++/14/bits/cow_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
crbegin	d:/include/c++/14/bits/range_access.h	/^    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))$/;"	f	namespace:std	typeref:typename:decltype(std::rbegin (__cont))	signature:(const _Container & __cont)
cref	d:/include/c++/14/bits/refwrap.h	/^    cref(const _Tp& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<const _Tp>	signature:(const _Tp & __t)
cref	d:/include/c++/14/bits/refwrap.h	/^    cref(reference_wrapper<_Tp> __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<const _Tp>	signature:(reference_wrapper<_Tp> __t)
cref	d:/include/c++/14/bits/refwrap.h	/^    void cref(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Tp &&)
crend	d:/include/c++/14/bits/basic_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
crend	d:/include/c++/14/bits/cow_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
crend	d:/include/c++/14/bits/range_access.h	/^    crend(const _Container& __cont) -> decltype(std::rend(__cont))$/;"	f	namespace:std	typeref:typename:decltype(std::rend (__cont))	signature:(const _Container & __cont)
ctermid	d:/include/stdio.h	/^extern char *ctermid (char *__s) __THROW$/;"	p	typeref:typename:char *	signature:(char * __s)
ctime	d:/include/time.h	/^#  define ctime __ctime6/;"	d
ctime	d:/include/time.h	/^extern char *ctime (const time_t *__timer) __THROW;$/;"	p	typeref:typename:char *	signature:(const time_t * __timer)
ctime_r	d:/include/time.h	/^#  define ctime_r /;"	d
ctime_r	d:/include/time.h	/^extern char *ctime_r (const time_t *__restrict __timer,$/;"	p	typeref:typename:char *	signature:(const time_t * __restrict __timer,char * __restrict __buf)
ctype	d:/include/c++/14/bits/locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(size_t __refs=0)
ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	inherits:__ctype_abstract_base<_CharT>
ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	inherits:__ctype_abstract_base<wchar_t>
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	inherits:ctype<_CharT>
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	inherits:ctype<char>
ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	inherits:ctype<wchar_t>
cur	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
currency_symbol	d:/include/locale.h	/^  char *currency_symbol;	\/* Local currency symbol.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
current_exception	d:/include/c++/14/bits/exception_ptr.h	/^  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:()
cuserid	d:/include/stdio.h	/^extern char *cuserid (char *__s)$/;"	p	typeref:typename:char *	signature:(char * __s)
data	d:/include/c++/14/bits/basic_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const _CharT *	access:public	signature:() const
data	d:/include/c++/14/bits/basic_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _CharT *	access:public	signature:()
data	d:/include/c++/14/bits/cow_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
data	d:/include/c++/14/bits/cow_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:public	signature:()
data	d:/include/c++/14/bits/range_access.h	/^    data(_Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(_Container & __cont)
data	d:/include/c++/14/bits/range_access.h	/^    data(_Tp (&__array)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp (& __array)[_Nm])
data	d:/include/c++/14/bits/range_access.h	/^    data(const _Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
data	d:/include/c++/14/bits/range_access.h	/^    data(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp *	signature:(initializer_list<_Tp> __il)
deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(allocator_type& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,pointer __p,size_type __n)
deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(allocator_type&, void*, size_type) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:void	access:public	signature:(allocator_type &,void *,size_type)
deallocate	d:/include/c++/14/bits/allocator.h	/^      deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
deallocate	d:/include/c++/14/bits/new_allocator.h	/^      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_type __n)
deallocate	d:/include/c++/14/ext/alloc_traits.h	/^    static void deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
dec	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
dec	d:/include/c++/14/bits/ios_base.h	/^  dec(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
decimal_point	d:/include/locale.h	/^  char *decimal_point;		\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
default_delete	d:/include/c++/14/bits/unique_ptr.h	/^        default_delete(const default_delete<_Up>&) noexcept { }$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(const default_delete<_Up> &)
default_delete	d:/include/c++/14/bits/unique_ptr.h	/^        default_delete(const default_delete<_Up[]>&) noexcept { }$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(const default_delete<_Up[]> &)
default_delete	d:/include/c++/14/bits/unique_ptr.h	/^      constexpr default_delete() noexcept = default;$/;"	p	struct:std::default_delete	access:public	signature:()
default_delete	d:/include/c++/14/bits/unique_ptr.h	/^    struct default_delete$/;"	s	namespace:std
default_delete	d:/include/c++/14/bits/unique_ptr.h	/^    struct default_delete<_Tp[]>$/;"	s	namespace:std
defaultfloat	d:/include/c++/14/bits/ios_base.h	/^  defaultfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
deleter_type	d:/include/c++/14/bits/unique_ptr.h	/^      using deleter_type  = _Dp;$/;"	t	class:std::unique_ptr	typeref:typename:_Dp	access:public
destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(_Alloc& __a, _Tp* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Tp * __p)
destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p)
destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(allocator_type&, _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type &,_Up * __p)
destroy	d:/include/c++/14/bits/new_allocator.h	/^	destroy(_Up* __p)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Up * __p)
destroy	d:/include/c++/14/bits/new_allocator.h	/^      destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(pointer __p)
destroy	d:/include/c++/14/bits/stl_construct.h	/^    destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
destroy	d:/include/c++/14/ext/alloc_traits.h	/^      destroy(_Alloc& __a, _Ptr __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::__enable_if_t<__is_custom_pointer<_Ptr>::value>	access:public	signature:(_Alloc & __a,_Ptr __p)
destroy	d:/include/c++/14/ext/alloc_traits.h	/^    static void destroy(_Alloc& __a, pointer __p)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:void	access:public	signature:(_Alloc & __a,pointer __p)
destroy	d:/include/c++/14/pstl/glue_memory_defs.h	/^destroy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
destroy_at	d:/include/c++/14/bits/stl_construct.h	/^    destroy_at(_Tp* __location)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR void	signature:(_Tp * __location)
destroy_n	d:/include/c++/14/bits/stl_construct.h	/^    destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
destroy_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^destroy_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
difference_type	d:/include/c++/14/bits/alloc_traits.h	/^      using difference_type = std::ptrdiff_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/alloc_traits.h	/^      using difference_type = typename _Diff<_Alloc, pointer>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Diff<_Alloc,pointer>::type	access:public
difference_type	d:/include/c++/14/bits/allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = ptrdiff_t;$/;"	t	struct:std::__atomic_ref	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_base	typeref:typename:value_type	access:public
difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_float	typeref:typename:value_type	access:public
difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_ref	typeref:typename:value_type	access:public
difference_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::difference_type	difference_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::difference_type	access:public
difference_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::difference_type difference_type;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::difference_type	access:public
difference_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::ptrdiff_t  difference_type;$/;"	t	class:std::__new_allocator	typeref:typename:std::ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/ptr_traits.h	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/ptr_traits.h	/^      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__detected_or_t<ptrdiff_t,__diff_t,_Ptr>	access:public
difference_type	d:/include/c++/14/bits/shared_ptr_base.h	/^		using difference_type = ptrdiff_t;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type 	difference_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::difference_type	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_It>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_difference_t<_It>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::back_insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::front_insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::insert_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/stl_iterator.h	/^    using difference_type = iter_difference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_difference_t<_It>	access:public
difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	typeref:typename:_Distance	access:public
difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using difference_type   = ptrdiff_t;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:ptrdiff_t	access:public
difference_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::difference_type        difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::difference_type	access:public
difference_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::difference_type    difference_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::difference_type	access:public
difftime	d:/include/time.h	/^#  define difftime __difftime6/;"	d
difftime	d:/include/time.h	/^extern double difftime (time_t __time1, time_t __time0);$/;"	p	typeref:typename:double	signature:(time_t __time1,time_t __time0)
distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
div	../../../../../../usr/include/stdlib.h	/^div_t	div (int __numer, int __denom);$/;"	p	typeref:typename:div_t	signature:(int __numer,int __denom)
div_t	../../../../../../usr/include/stdlib.h	/^} div_t;$/;"	t	typeref:struct:__anonf3b68ce80108
divides	d:/include/c++/14/bits/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
divides	d:/include/c++/14/bits/stl_function.h	/^    struct divides<void>$/;"	s	namespace:std
do_compare	d:/include/c++/14/bits/locale_classes.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
do_decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_falsename	d:/include/c++/14/bits/locale_facets.h	/^      do_falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,float &) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,void * &) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long double &) const
do_grouping	d:/include/c++/14/bits/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
do_hash	d:/include/c++/14/bits/locale_classes.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const$/;"	f	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, const void*) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,const void *) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, long double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,long double) const
do_scan_is	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_is	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_scan_not	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
do_thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
do_transform	d:/include/c++/14/bits/locale_classes.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
do_truename	d:/include/c++/14/bits/locale_facets.h	/^      do_truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
dprintf	d:/include/stdio.h	/^extern int dprintf (int __fd, const char *__restrict __fmt, ...)$/;"	p	typeref:typename:int	signature:(int __fd,const char * __restrict __fmt,...)
drand48	../../../../../../usr/include/stdlib.h	/^double drand48 (void);$/;"	p	typeref:typename:double	signature:(void)
duplocale	d:/include/locale.h	/^extern locale_t duplocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:locale_t	signature:(locale_t __dataset)
dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    dynamic_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
dysize	d:/include/time.h	/^extern int dysize (int __year) __THROW  __attribute__ ((__const__));$/;"	p	typeref:typename:int	signature:(int __year)
ecvt	../../../../../../usr/include/stdlib.h	/^char *	ecvt (double,int,int *,int *);$/;"	p	typeref:typename:char *	signature:(double,int,int *,int *)
ecvtbuf	../../../../../../usr/include/stdlib.h	/^char *	ecvtbuf (double, int, int*, int*, char *);$/;"	p	typeref:typename:char *	signature:(double,int,int *,int *,char *)
ecvtf	../../../../../../usr/include/stdlib.h	/^char *	ecvtf (float,int,int *,int *);$/;"	p	typeref:typename:char *	signature:(float,int,int *,int *)
element_type	d:/include/c++/14/backward/auto_ptr.h	/^      typedef _Tp element_type;$/;"	t	class:std::auto_ptr	typeref:typename:_Tp	access:public
element_type	d:/include/c++/14/backward/auto_ptr.h	/^      typedef void element_type;$/;"	t	class:std::auto_ptr	typeref:typename:void	access:public
element_type	d:/include/c++/14/bits/ptr_traits.h	/^      typedef _Tp  element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp	access:public
element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Elt;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Elt	access:public
element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Elt;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Elt	access:public
element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Tp;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Tp	access:public
element_type	d:/include/c++/14/bits/ptr_traits.h	/^  template<typename _Ptr> requires requires { typename _Ptr::element_type; }$/;"	m	class:std::_Ptr	typeref:meta:typename
element_type	d:/include/c++/14/bits/shared_ptr.h	/^      using element_type = typename __shared_ptr<_Tp>::element_type;$/;"	t	class:std::shared_ptr	typeref:typename:__shared_ptr<_Tp>::element_type	access:public
element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = _Tp;$/;"	t	class:std::__shared_ptr_access	typeref:typename:_Tp	access:public
element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__shared_ptr	typeref:typename:remove_extent<_Tp>::type	access:public
element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__shared_ptr_access	typeref:typename:remove_extent<_Tp>::type	access:public
element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__weak_ptr	typeref:typename:remove_extent<_Tp>::type	access:public
element_type	d:/include/c++/14/bits/unique_ptr.h	/^      using element_type  = _Tp;$/;"	t	class:std::unique_ptr	typeref:typename:_Tp	access:public
empty	d:/include/c++/14/bits/basic_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	access:public	signature:() const
empty	d:/include/c++/14/bits/cow_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
empty	d:/include/c++/14/bits/range_access.h	/^    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
empty	d:/include/c++/14/bits/range_access.h	/^    empty(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const _Tp (&)[_Nm])
empty	d:/include/c++/14/bits/range_access.h	/^    empty(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(initializer_list<_Tp> __il)
enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr enable_shared_from_this() noexcept { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:()
enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      enable_shared_from_this(const enable_shared_from_this&) noexcept { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:(const enable_shared_from_this &)
enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^    class enable_shared_from_this$/;"	c	namespace:std
encoding	d:/include/c++/14/bits/locale_classes.h	/^    encoding() const = delete;$/;"	p	class:std::locale	typeref:typename:text_encoding	access:public	signature:() const
encoding	d:/include/c++/14/bits/locale_classes.h	/^    encoding() const;$/;"	p	class:std::locale	typeref:typename:text_encoding	access:public	signature:() const
end	d:/include/c++/14/bits/basic_string.h	/^      end() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR iterator	access:public	signature:()
end	d:/include/c++/14/bits/basic_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
end	d:/include/c++/14/bits/cow_string.h	/^      end() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
end	d:/include/c++/14/bits/cow_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
end	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir end =		_S_end;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
end	d:/include/c++/14/bits/range_access.h	/^    end(_Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype(__cont.end ())	signature:(_Container & __cont)
end	d:/include/c++/14/bits/range_access.h	/^    end(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
end	d:/include/c++/14/bits/range_access.h	/^    end(const _Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype(__cont.end ())	signature:(const _Container & __cont)
end	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
end	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
end	d:/include/c++/14/bits/stl_tempbuf.h	/^      end()$/;"	f	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
eof	d:/include/c++/14/bits/basic_ios.h	/^      eof() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
eof	d:/include/c++/14/bits/char_traits.h	/^      eof() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
eof	d:/include/c++/14/bits/char_traits.h	/^      eof() noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:()
eof	d:/include/c++/14/bits/char_traits.h	/^      eof()$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
eofbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
equal	d:/include/c++/14/bits/stl_algobase.h	/^	equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
equal	d:/include/c++/14/bits/stl_algobase.h	/^	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Tp * __first2)
equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_BinaryPredicate __binary_pred)
equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_IIter2 __last2,_BinaryPredicate __binary_pred)
equal	d:/include/c++/14/bits/streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const istreambuf_iterator & __b) const
equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct equal_to<void>$/;"	s	namespace:std
erand48	../../../../../../usr/include/stdlib.h	/^double erand48 (unsigned short [3]);$/;"	p	typeref:typename:double	signature:(unsigned short[3])
erase	d:/include/c++/14/bits/basic_string.h	/^      erase(__const_iterator __first, __const_iterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __first,__const_iterator __last)
erase	d:/include/c++/14/bits/basic_string.h	/^      erase(__const_iterator __position)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __position)
erase	d:/include/c++/14/bits/basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
erase	d:/include/c++/14/bits/cow_string.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
erase	d:/include/c++/14/bits/cow_string.h	/^      erase(iterator __position)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __position)
erase	d:/include/c++/14/bits/cow_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
erase	d:/include/c++/14/bits/cow_string.h	/^     erase(iterator __first, iterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::iterator	signature:(iterator __first,iterator __last)
erase_event	d:/include/c++/14/bits/ios_base.h	/^      erase_event,$/;"	e	enum:std::ios_base::event	access:public
errno	d:/include/errno.h	/^# define errno (*__errno_/;"	d
error_code	d:/include/c++/14/bits/ios_base.h	/^	error_code() { }$/;"	f	struct:std::ios_base::system_error::error_code	access:public	signature:()
error_code	d:/include/c++/14/bits/ios_base.h	/^      struct error_code$/;"	s	struct:std::ios_base::system_error	access:public
event	d:/include/c++/14/bits/ios_base.h	/^    enum event$/;"	g	class:std::ios_base	access:public
event_callback	d:/include/c++/14/bits/ios_base.h	/^    typedef void (*event_callback) (event __e, ios_base& __b, int __i);$/;"	t	class:std::ios_base	typeref:typename:void (*)(event __e,ios_base & __b,int __i)	access:public
exception	d:/include/c++/14/bits/exception.h	/^    exception() _GLIBCXX_NOTHROW { }$/;"	f	class:std::exception	access:public	signature:()
exception	d:/include/c++/14/bits/exception.h	/^    exception(const exception&) = default;$/;"	p	class:std::exception	access:public	signature:(const exception &)
exception	d:/include/c++/14/bits/exception.h	/^    exception(exception&&) = default;$/;"	p	class:std::exception	access:public	signature:(exception &&)
exception	d:/include/c++/14/bits/exception.h	/^  class exception$/;"	c	namespace:std
exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^      exception_ptr(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(exception_ptr && __o)
exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^      exception_ptr(nullptr_t) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(nullptr_t)
exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    class exception_ptr$/;"	c	namespace:std::__exception_ptr
exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:()
exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::exception_ptr(const exception_ptr& __other)$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:(const exception_ptr & __other)
exceptions	d:/include/c++/14/bits/basic_ios.h	/^      exceptions() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
exceptions	d:/include/c++/14/bits/basic_ios.h	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __desired,memory_order __m=memory_order_seq_cst)
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(_Fp __desired,memory_order __m=memory_order_seq_cst) const
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp __desired, memory_order __m = memory_order_seq_cst)$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __desired,memory_order __m=memory_order_seq_cst) const
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __desired,memory_order __m=memory_order_seq_cst) const
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(_Tp * __desired,memory_order __m=memory_order_seq_cst) const
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp* __ptr, _Val<_Tp> __desired, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Val<_Tp>	signature:(_Tp * __ptr,_Val<_Tp> __desired,memory_order __m)
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(__pointer_type __p,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(__pointer_type __p,memory_order __m=memory_order_seq_cst)
exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      exchange(shared_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public	signature:(shared_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      exchange(weak_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public	signature:(weak_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
execution	d:/include/c++/14/pstl/execution_defs.h	/^namespace execution$/;"	n	namespace:__pstl
exit	../../../../../../usr/include/stdlib.h	/^void	exit (int __status) _ATTRIBUTE ((__noreturn__));$/;"	p	typeref:typename:void	signature:(int __status)
expired	d:/include/c++/14/bits/shared_ptr_base.h	/^      expired() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:() const
facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(const facet&) = delete;$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
facet	d:/include/c++/14/bits/locale_classes.h	/^  class locale::facet$/;"	c	class:std::locale
fail	d:/include/c++/14/bits/basic_ios.h	/^      fail() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
failbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
failed	d:/include/c++/14/bits/streambuf_iterator.h	/^      failed() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const char*, const error_code& = io_errc::stream);$/;"	p	class:std::ios_base::failure	access:public	signature:(const char *,const error_code &=io_errc::stream)
failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const string& __str);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string & __str)
failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const string&, const error_code&);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string &,const error_code &)
failure	d:/include/c++/14/bits/ios_base.h	/^    class _GLIBCXX_ABI_TAG_CXX11 failure : public system_error$/;"	c	class:std::ios_base	inherits:system_error	access:public
falsename	d:/include/c++/14/bits/locale_facets.h	/^      falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
fclose	d:/include/stdio.h	/^extern int fclose (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fcloseall	d:/include/stdio.h	/^extern int fcloseall (void);$/;"	p	typeref:typename:int	signature:(void)
fcvt	../../../../../../usr/include/stdlib.h	/^char *	fcvt (double,int,int *,int *);$/;"	p	typeref:typename:char *	signature:(double,int,int *,int *)
fcvtbuf	../../../../../../usr/include/stdlib.h	/^char *	fcvtbuf (double, int, int*, int*, char *);$/;"	p	typeref:typename:char *	signature:(double,int,int *,int *,char *)
fcvtf	../../../../../../usr/include/stdlib.h	/^char *	fcvtf (float,int,int *,int *);$/;"	p	typeref:typename:char *	signature:(float,int,int *,int *)
fdopen	d:/include/stdio.h	/^extern FILE *fdopen (int __fd, const char *__modes) __THROW$/;"	p	typeref:typename:FILE *	signature:(int __fd,const char * __modes)
feof	d:/include/stdio.h	/^extern int feof (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
feof_unlocked	d:/include/stdio.h	/^extern int feof_unlocked (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
ferror	d:/include/stdio.h	/^extern int ferror (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
ferror_unlocked	d:/include/stdio.h	/^extern int ferror_unlocked (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(_Tp* __ptr, _Diff<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i,memory_order __m)
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(difference_type __d,$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(difference_type __d,memory_order __m=memory_order_seq_cst) const
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(ptrdiff_t __d,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(ptrdiff_t __d,memory_order __m=memory_order_seq_cst)
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(value_type __i,$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst)
fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(_Tp* __ptr, _Diff<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i,memory_order __m)
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(difference_type __d,$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(difference_type __d,memory_order __m=memory_order_seq_cst) const
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(ptrdiff_t __d,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(ptrdiff_t __d,memory_order __m=memory_order_seq_cst)
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(value_type __i,$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst)
fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
fflush	d:/include/stdio.h	/^extern int fflush (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fflush_unlocked	d:/include/stdio.h	/^extern int fflush_unlocked (FILE *__stream);$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetc	d:/include/stdio.h	/^extern int fgetc (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetc_unlocked	d:/include/stdio.h	/^extern int fgetc_unlocked (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fgetpos	d:/include/stdio.h	/^#  define fgetpos fgetpos6/;"	d
fgetpos	d:/include/stdio.h	/^extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos)$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,fpos_t * __restrict __pos)
fgetpos64	d:/include/stdio.h	/^extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos)$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,fpos64_t * __restrict __pos)
fgets	d:/include/stdio.h	/^extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)$/;"	p	typeref:typename:char *	signature:(char * __restrict __s,int __n,FILE * __restrict __stream)
fgets_unlocked	d:/include/stdio.h	/^extern char *fgets_unlocked (char *__restrict __s, int __n,$/;"	p	typeref:typename:char *	signature:(char * __restrict __s,int __n,FILE * __restrict __stream)
fgetwc	d:/include/wchar.h	/^extern wint_t fgetwc (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
fgetwc_unlocked	d:/include/wchar.h	/^extern wint_t fgetwc_unlocked (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
fgetws	d:/include/wchar.h	/^extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __ws,int __n,__FILE * __restrict __stream)
fgetws_unlocked	d:/include/wchar.h	/^extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __ws,int __n,__FILE * __restrict __stream)
fileno	d:/include/stdio.h	/^extern int fileno (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fileno_unlocked	d:/include/stdio.h	/^extern int fileno_unlocked (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
fill	d:/include/c++/14/bits/basic_ios.h	/^      fill() const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
fill	d:/include/c++/14/bits/basic_ios.h	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
fill	d:/include/c++/14/bits/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
fill_n	d:/include/c++/14/bits/stl_algobase.h	/^    fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_OI __first,_Size __n,const _Tp & __value)
find	d:/include/c++/14/bits/basic_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find	d:/include/c++/14/bits/basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find	d:/include/c++/14/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find	d:/include/c++/14/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find	d:/include/c++/14/bits/basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find	d:/include/c++/14/bits/char_traits.h	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,size_t __n,const char_type & __a)
find	d:/include/c++/14/bits/char_traits.h	/^      find(const char_type* __s, std::size_t __n, const char_type& __a);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	d:/include/c++/14/bits/char_traits.h	/^    find(const char_type* __s, std::size_t __n, const char_type& __a)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR const typename char_traits<_CharT>::char_type *	signature:(const char_type * __s,std::size_t __n,const char_type & __a)
find	d:/include/c++/14/bits/cow_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find	d:/include/c++/14/bits/cow_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find	d:/include/c++/14/bits/cow_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find	d:/include/c++/14/bits/cow_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find	d:/include/c++/14/bits/cow_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find	d:/include/c++/14/bits/streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/basic_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/cow_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/basic_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/cow_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
first	d:/include/c++/14/bits/stl_pair.h	/^      _T1 first;                 \/\/\/< The first member$/;"	m	struct:std::pair	typeref:typename:_T1	access:public
first_argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::first_argument_type first_argument_type;$/;"	t	struct:std::_Refwrap_base_arg2	typeref:typename:_Tp::first_argument_type	access:public
first_argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg1 	first_argument_type; $/;"	t	struct:std::binary_function	typeref:typename:_Arg1	access:public
first_type	d:/include/c++/14/bits/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/< The type of the `first` member$/;"	t	struct:std::pair	typeref:typename:_T1	access:public
fixed	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
fixed	d:/include/c++/14/bits/ios_base.h	/^  fixed(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
flags	d:/include/c++/14/bits/ios_base.h	/^    flags() const$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
flags	d:/include/c++/14/bits/ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
floatfield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
flockfile	d:/include/stdio.h	/^extern void flockfile (FILE *__stream) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
fmemopen	d:/include/stdio.h	/^extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)$/;"	p	typeref:typename:FILE *	signature:(void * __s,size_t __len,const char * __modes)
fmtflags	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
fopen	d:/include/stdio.h	/^#  define fopen fopen6/;"	d
fopen	d:/include/stdio.h	/^extern FILE *fopen (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes)
fopen64	d:/include/stdio.h	/^extern FILE *fopen64 (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes)
fopencookie	d:/include/stdio.h	/^extern FILE *fopencookie (void *__restrict __magic_cookie,$/;"	p	typeref:typename:FILE *	signature:(void * __restrict __magic_cookie,const char * __restrict __modes,cookie_io_functions_t __io_funcs)
forward	d:/include/c++/14/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _Tp &&	signature:(typename std::remove_reference<_Tp>::type & __t)
forward	d:/include/c++/14/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _Tp &&	signature:(typename std::remove_reference<_Tp>::type && __t)
forward_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	inherits:input_iterator_tag
forward_like	d:/include/c++/14/bits/move.h	/^  forward_like(_Up&& __x) noexcept$/;"	f	namespace:std	typeref:typename:__like_t<_Tp,_Up>	signature:(_Up && __x)
fpos	d:/include/c++/14/bits/postypes.h	/^      fpos()$/;"	f	class:std::fpos	access:public	signature:()
fpos	d:/include/c++/14/bits/postypes.h	/^      fpos(const fpos&) = default;$/;"	p	class:std::fpos	access:public	signature:(const fpos &)
fpos	d:/include/c++/14/bits/postypes.h	/^      fpos(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
fpos	d:/include/c++/14/bits/postypes.h	/^    class fpos$/;"	c	namespace:std
fpos64_t	d:/include/stdio.h	/^typedef __fpos64_t fpos64_t;$/;"	t	typeref:typename:__fpos64_t
fpos_t	d:/include/stdio.h	/^typedef __fpos64_t fpos_t;$/;"	t	typeref:typename:__fpos64_t
fpos_t	d:/include/stdio.h	/^typedef __fpos_t fpos_t;$/;"	t	typeref:typename:__fpos_t
fprintf	d:/include/stdio.h	/^extern int fprintf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
fputc	d:/include/stdio.h	/^extern int fputc (int __c, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
fputc_unlocked	d:/include/stdio.h	/^extern int fputc_unlocked (int __c, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
fputs	d:/include/stdio.h	/^extern int fputs (const char *__restrict __s, FILE *__restrict __stream)$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,FILE * __restrict __stream)
fputs_unlocked	d:/include/stdio.h	/^extern int fputs_unlocked (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,FILE * __restrict __stream)
fputwc	d:/include/wchar.h	/^extern wint_t fputwc (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
fputwc_unlocked	d:/include/wchar.h	/^extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
fputws	d:/include/wchar.h	/^extern int fputws (const wchar_t *__restrict __ws,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __ws,__FILE * __restrict __stream)
fputws_unlocked	d:/include/wchar.h	/^extern int fputws_unlocked (const wchar_t *__restrict __ws,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __ws,__FILE * __restrict __stream)
frac_digits	d:/include/locale.h	/^  char frac_digits;		\/* Local fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
fread	d:/include/stdio.h	/^extern size_t fread (void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
fread_unlocked	d:/include/stdio.h	/^extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
free	../../../../../../usr/include/stdlib.h	/^void	free (void *) _NOTHROW;$/;"	p	typeref:typename:void	signature:(void *)
freelocale	d:/include/locale.h	/^extern void freelocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:void	signature:(locale_t __dataset)
freopen	d:/include/stdio.h	/^#  define freopen freopen6/;"	d
freopen	d:/include/stdio.h	/^extern FILE *freopen (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes,FILE * __restrict __stream)
freopen64	d:/include/stdio.h	/^extern FILE *freopen64 (const char *__restrict __filename,$/;"	p	typeref:typename:FILE *	signature:(const char * __restrict __filename,const char * __restrict __modes,FILE * __restrict __stream)
front	d:/include/c++/14/bits/basic_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:() const
front	d:/include/c++/14/bits/basic_string.h	/^      front() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:()
front	d:/include/c++/14/bits/cow_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
front	d:/include/c++/14/bits/cow_string.h	/^      front()$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
front_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      front_insert_iterator(_Container& __x)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
front_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
front_inserter	d:/include/c++/14/bits/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR front_insert_iterator<_Container>	signature:(_Container & __x)
fscanf	d:/include/stdio.h	/^#   define fscanf __isoc23_fscanf$/;"	d
fscanf	d:/include/stdio.h	/^#   define fscanf __isoc99_fscanf$/;"	d
fscanf	d:/include/stdio.h	/^extern int fscanf (FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,const char * __restrict __format,...)
fseek	d:/include/stdio.h	/^extern int fseek (FILE *__stream, long int __off, int __whence)$/;"	p	typeref:typename:int	signature:(FILE * __stream,long int __off,int __whence)
fseeko	d:/include/stdio.h	/^#   define fseeko fseeko6/;"	d
fseeko	d:/include/stdio.h	/^extern int fseeko (FILE *__stream, __off_t __off, int __whence)$/;"	p	typeref:typename:int	signature:(FILE * __stream,__off_t __off,int __whence)
fseeko64	d:/include/stdio.h	/^extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence)$/;"	p	typeref:typename:int	signature:(FILE * __stream,__off64_t __off,int __whence)
fsetpos	d:/include/stdio.h	/^#  define fsetpos fsetpos6/;"	d
fsetpos	d:/include/stdio.h	/^extern int fsetpos (FILE *__stream, const fpos_t *__pos) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream,const fpos_t * __pos)
fsetpos64	d:/include/stdio.h	/^extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream,const fpos64_t * __pos)
ftell	d:/include/stdio.h	/^extern long int ftell (FILE *__stream) __wur __nonnull ((1));$/;"	p	typeref:typename:long int	signature:(FILE * __stream)
ftello	d:/include/stdio.h	/^#   define ftello ftello6/;"	d
ftello	d:/include/stdio.h	/^extern __off_t ftello (FILE *__stream) __wur __nonnull ((1));$/;"	p	typeref:typename:__off_t	signature:(FILE * __stream)
ftello64	d:/include/stdio.h	/^extern __off64_t ftello64 (FILE *__stream) __wur __nonnull ((1));$/;"	p	typeref:typename:__off64_t	signature:(FILE * __stream)
ftrylockfile	d:/include/stdio.h	/^extern int ftrylockfile (FILE *__stream) __THROW __wur __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
funlockfile	d:/include/stdio.h	/^extern void funlockfile (FILE *__stream) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
fwide	d:/include/wchar.h	/^extern int fwide (__FILE *__fp, int __mode) __THROW;$/;"	p	typeref:typename:int	signature:(__FILE * __fp,int __mode)
fwprintf	d:/include/wchar.h	/^extern int fwprintf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
fwrite	d:/include/stdio.h	/^extern size_t fwrite (const void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(const void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __s)
fwrite_unlocked	d:/include/stdio.h	/^extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,$/;"	p	typeref:typename:size_t	signature:(const void * __restrict __ptr,size_t __size,size_t __n,FILE * __restrict __stream)
fwscanf	d:/include/wchar.h	/^#    define fwscanf __isoc23_fwscanf$/;"	d
fwscanf	d:/include/wchar.h	/^#    define fwscanf __isoc99_fwscanf$/;"	d
fwscanf	d:/include/wchar.h	/^extern int fwscanf (__FILE *__restrict __stream,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __stream,const wchar_t * __restrict __format,...)
gcvt	../../../../../../usr/include/stdlib.h	/^char *	gcvt (double,int,char *);$/;"	p	typeref:typename:char *	signature:(double,int,char *)
gcvtf	../../../../../../usr/include/stdlib.h	/^char *	gcvtf (float,int,char *);$/;"	p	typeref:typename:char *	signature:(float,int,char *)
get	d:/include/c++/14/backward/auto_ptr.h	/^      get() const throw() { return _M_ptr; }$/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:() const
get	d:/include/c++/14/bits/allocated_ptr.h	/^      value_type* get() { return std::__to_address(_M_ptr); }$/;"	f	struct:std::__allocated_ptr	typeref:typename:value_type *	access:public	signature:()
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
get	d:/include/c++/14/bits/refwrap.h	/^      get() const noexcept$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp &	access:public	signature:() const
get	d:/include/c++/14/bits/shared_ptr_base.h	/^      get() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:element_type *	access:public	signature:() const
get	d:/include/c++/14/bits/stl_pair.h	/^    get(array<_Tp, _Nm>&&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp &&	signature:(array<_Tp,_Nm> &&)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(array<_Tp, _Nm>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp &	signature:(array<_Tp,_Nm> &)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const array<_Tp, _Nm>&&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp &&	signature:(const array<_Tp,_Nm> &&)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const array<_Tp, _Nm>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp &	signature:(const array<_Tp,_Nm> &)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp, _Up>& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &	signature:(const pair<_Tp,_Up> & __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp, _Up>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &&	signature:(const pair<_Tp,_Up> && __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>& __in) noexcept$/;"	f	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(const pair<_Tp1,_Tp2> & __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>& __in) noexcept;$/;"	p	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(const pair<_Tp1,_Tp2> & __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>&& __in) noexcept$/;"	f	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(const pair<_Tp1,_Tp2> && __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>&& __in) noexcept;$/;"	p	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(const pair<_Tp1,_Tp2> && __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Up, _Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &	signature:(const pair<_Up,_Tp> & __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Up, _Tp>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &&	signature:(const pair<_Up,_Tp> && __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const tuple<_Elements...>& __t) noexcept;$/;"	p	namespace:std	typeref:typename:const __tuple_element_t<__i,tuple<_Elements...>> &	signature:(const tuple<_Elements...> & __t)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(const tuple<_Elements...>&& __t) noexcept;$/;"	p	namespace:std	typeref:typename:const __tuple_element_t<__i,tuple<_Elements...>> &&	signature:(const tuple<_Elements...> && __t)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp, _Up>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &	signature:(pair<_Tp,_Up> & __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp, _Up>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(pair<_Tp,_Up> && __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>& __in) noexcept$/;"	f	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(pair<_Tp1,_Tp2> & __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>& __in) noexcept;$/;"	p	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(pair<_Tp1,_Tp2> & __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>&& __in) noexcept$/;"	f	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(pair<_Tp1,_Tp2> && __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>&& __in) noexcept;$/;"	p	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(pair<_Tp1,_Tp2> && __in)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Up, _Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &	signature:(pair<_Up,_Tp> & __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Up, _Tp>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(pair<_Up,_Tp> && __p)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(tuple<_Elements...>& __t) noexcept;$/;"	p	namespace:std	typeref:typename:__tuple_element_t<__i,tuple<_Elements...>> &	signature:(tuple<_Elements...> & __t)
get	d:/include/c++/14/bits/stl_pair.h	/^    get(tuple<_Elements...>&& __t) noexcept;$/;"	p	namespace:std	typeref:typename:__tuple_element_t<__i,tuple<_Elements...>> &&	signature:(tuple<_Elements...> && __t)
get	d:/include/c++/14/bits/unique_ptr.h	/^      get() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
get_allocator	d:/include/c++/14/bits/basic_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:() const
get_allocator	d:/include/c++/14/bits/cow_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
get_deleter	d:/include/c++/14/bits/shared_ptr.h	/^    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Del *	signature:(const __shared_ptr<_Tp,_Lp> & __p)
get_deleter	d:/include/c++/14/bits/shared_ptr.h	/^    get_deleter(const shared_ptr<_Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Del *	signature:(const shared_ptr<_Tp> & __p)
get_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      get_deleter() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR const deleter_type &	access:public	signature:() const
get_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      get_deleter() noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR deleter_type &	access:public	signature:()
get_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_DEPRECATED pair<_Tp *,ptrdiff_t>	signature:(ptrdiff_t __len)
getc	d:/include/stdio.h	/^extern int getc (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getc_unlocked	d:/include/stdio.h	/^extern int getc_unlocked (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getchar	d:/include/stdio.h	/^extern int getchar (void);$/;"	p	typeref:typename:int	signature:(void)
getchar_unlocked	d:/include/stdio.h	/^extern int getchar_unlocked (void);$/;"	p	typeref:typename:int	signature:(void)
getcpu	d:/include/x86_64-linux-gnu/bits/sched.h	/^extern int getcpu (unsigned int *, unsigned int *) __THROW;$/;"	p	typeref:typename:int	signature:(unsigned int *,unsigned int *)
getdate	d:/include/time.h	/^extern struct tm *getdate (const char *__string);$/;"	p	typeref:struct:tm *	signature:(const char * __string)
getdate_r	d:/include/time.h	/^extern int getdate_r (const char *__restrict __string,$/;"	p	typeref:typename:int	signature:(const char * __restrict __string,struct tm * __restrict __resbufp)
getdelim	d:/include/stdio.h	/^extern __ssize_t getdelim (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,int __delimiter,FILE * __restrict __stream)
getenv	../../../../../../usr/include/stdlib.h	/^char *  getenv (const char *__string);$/;"	p	typeref:typename:char *	signature:(const char * __string)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
getline	d:/include/stdio.h	/^extern __ssize_t getline (char **__restrict __lineptr,$/;"	p	typeref:typename:__ssize_t	signature:(char ** __restrict __lineptr,size_t * __restrict __n,FILE * __restrict __stream)
getloadavg	../../../../../../usr/include/cygwin/stdlib.h	/^int getloadavg(double loadavg[], int nelem);$/;"	p	typeref:typename:int	signature:(double loadavg[],int nelem)
getloc	d:/include/c++/14/bits/ios_base.h	/^    getloc() const$/;"	f	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
getprogname	../../../../../../usr/include/cygwin/stdlib.h	/^const char *getprogname (void);$/;"	p	typeref:typename:const char *	signature:(void)
getpt	../../../../../../usr/include/cygwin/stdlib.h	/^int getpt (void);$/;"	p	typeref:typename:int	signature:(void)
gets	d:/include/stdio.h	/^extern char *gets (char *__s) __wur __attribute_deprecated__;$/;"	p	typeref:typename:char *	signature:(char * __s)
getsubopt	../../../../../../usr/include/stdlib.h	/^int	getsubopt (char **, char * const *, char **);$/;"	p	typeref:typename:int	signature:(char **,char * const *,char **)
getw	d:/include/stdio.h	/^extern int getw (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
getwc	d:/include/wchar.h	/^extern wint_t getwc (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
getwc_unlocked	d:/include/wchar.h	/^extern wint_t getwc_unlocked (__FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(__FILE * __stream)
getwchar	d:/include/wchar.h	/^extern wint_t getwchar (void);$/;"	p	typeref:typename:wint_t	signature:(void)
getwchar_unlocked	d:/include/wchar.h	/^extern wint_t getwchar_unlocked (void);$/;"	p	typeref:typename:wint_t	signature:(void)
global	d:/include/c++/14/bits/locale_classes.h	/^    global(const locale& __loc);$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __loc)
gmtime	d:/include/time.h	/^#  define gmtime __gmtime6/;"	d
gmtime	d:/include/time.h	/^extern struct tm *gmtime (const time_t *__timer) __THROW;$/;"	p	typeref:struct:tm *	signature:(const time_t * __timer)
gmtime_r	d:/include/time.h	/^#   define gmtime_r /;"	d
gmtime_r	d:/include/time.h	/^extern struct tm *gmtime_r (const time_t *__restrict __timer,$/;"	p	typeref:struct:tm *	signature:(const time_t * __restrict __timer,struct tm * __restrict __tp)
good	d:/include/c++/14/bits/basic_ios.h	/^      good() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
goodbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
grantpt	../../../../../../usr/include/cygwin/stdlib.h	/^int grantpt (int);$/;"	p	typeref:typename:int	signature:(int)
greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater<void>$/;"	s	namespace:std
greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal<void>$/;"	s	namespace:std
grouping	d:/include/c++/14/bits/locale_facets.h	/^      grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:public	signature:() const
grouping	d:/include/locale.h	/^  char *grouping;$/;"	m	struct:lconv	typeref:typename:char *	access:public
gthread_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_mutex_t* gthread_mutex(void)$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:__gthread_mutex_t *	access:public	signature:(void)
gthread_recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    __gthread_recursive_mutex_t* gthread_recursive_mutex(void)$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:__gthread_recursive_mutex_t *	access:public	signature:(void)
has_facet	d:/include/c++/14/bits/localefwd.h	/^    has_facet(const locale&) throw();$/;"	p	namespace:std	typeref:typename:bool	signature:(const locale &)
hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char, char_traits<char>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char,_Alloc>
hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char16_t,_Alloc>
hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char32_t,_Alloc>
hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char8_t, char_traits<char8_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char8_t,_Alloc>
hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<wchar_t,_Alloc>
hash	d:/include/c++/14/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
hash	d:/include/c++/14/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
hash	d:/include/c++/14/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (2166136261UL))
hash	d:/include/c++/14/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (0xc70f6907UL))
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash : __hash_enum<_Tp>$/;"	s	namespace:std	inherits:__hash_enum<_Tp>
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp*>
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<double> : public __hash_base<size_t, double>$/;"	s	namespace:std	inherits:__hash_base<size_t,double>
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<float> : public __hash_base<size_t, float>$/;"	s	namespace:std	inherits:__hash_base<size_t,float>
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<long double>$/;"	s	namespace:std	inherits:__hash_base<size_t,longdouble>
hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>$/;"	s	namespace:std	inherits:__hash_base<size_t,nullptr_t>
hash	d:/include/c++/14/bits/locale_classes.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
hash	d:/include/c++/14/bits/shared_ptr.h	/^    struct hash<shared_ptr<_Tp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,shared_ptr<_Tp>>
hash	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct hash<__shared_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,__shared_ptr<_Tp,_Lp>>
hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct hash<unique_ptr<_Tp, _Dp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,unique_ptr<_Tp,_Dp>>,__uniq_ptr_hash<unique_ptr<_Tp,_Dp>>
hex	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
hex	d:/include/c++/14/bits/ios_base.h	/^  hex(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
hexfloat	d:/include/c++/14/bits/ios_base.h	/^  hexfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
id	d:/include/c++/14/bits/locale_classes.h	/^      static locale::id			id;$/;"	m	class:std::collate	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_classes.h	/^    id() { }$/;"	f	class:std::locale::id	access:public	signature:()
id	d:/include/c++/14/bits/locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id &)
id	d:/include/c++/14/bits/locale_classes.h	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate<_CharT>	typeref:typename:locale::id
id	d:/include/c++/14/bits/locale_classes.h	/^  class locale::id$/;"	c	class:std::locale
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::num_get	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::numpunct	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::num_put	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id        id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype<_CharT>	typeref:typename:locale::id
id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct<_CharT>	typeref:typename:locale::id
imbue	d:/include/c++/14/bits/basic_ios.h	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue	d:/include/c++/14/bits/ios_base.h	/^    imbue(const locale& __loc) throw();$/;"	p	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
imbue_event	d:/include/c++/14/bits/ios_base.h	/^      imbue_event,$/;"	e	enum:std::ios_base::event	access:public
in	d:/include/c++/14/bits/ios_base.h	/^    static const openmode in =		_S_in;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
in_place	d:/include/c++/14/bits/utility.h	/^  inline constexpr in_place_t in_place{};$/;"	v	namespace:std	typeref:typename:in_place_t
in_place_index	d:/include/c++/14/bits/utility.h	/^    inline constexpr in_place_index_t<_Idx> in_place_index{};$/;"	v	namespace:std	typeref:typename:in_place_index_t<_Idx>
in_place_index_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_index_t() = default;$/;"	p	struct:std::in_place_index_t	access:public	signature:()
in_place_index_t	d:/include/c++/14/bits/utility.h	/^  template<size_t _Idx> struct in_place_index_t$/;"	s	namespace:std
in_place_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_t() = default;$/;"	p	struct:std::in_place_t	access:public	signature:()
in_place_t	d:/include/c++/14/bits/utility.h	/^  struct in_place_t {$/;"	s	namespace:std
in_place_type	d:/include/c++/14/bits/utility.h	/^    inline constexpr in_place_type_t<_Tp> in_place_type{};$/;"	v	namespace:std	typeref:typename:in_place_type_t<_Tp>
in_place_type_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_type_t() = default;$/;"	p	struct:std::in_place_type_t	access:public	signature:()
in_place_type_t	d:/include/c++/14/bits/utility.h	/^  template<typename _Tp> struct in_place_type_t$/;"	s	namespace:std
incrementable_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct incrementable_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
index_sequence	d:/include/c++/14/bits/utility.h	/^    using index_sequence = integer_sequence<size_t, _Idx...>;$/;"	t	namespace:std	typeref:typename:integer_sequence<size_t,_Idx...>
index_sequence_for	d:/include/c++/14/bits/utility.h	/^    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;$/;"	t	namespace:std
init	d:/include/c++/14/bits/basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
initstate	../../../../../../usr/include/stdlib.h	/^char *	initstate (unsigned, char *, size_t);$/;"	p	typeref:typename:char *	signature:(unsigned,char *,size_t)
input_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct input_iterator_tag { };$/;"	s	namespace:std
insert	d:/include/c++/14/bits/basic_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
insert	d:/include/c++/14/bits/basic_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
insert	d:/include/c++/14/bits/basic_string.h	/^        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,_InputIterator __beg,_InputIterator __end)
insert	d:/include/c++/14/bits/basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(__const_iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __p,_CharT __c)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(const_iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,initializer_list<_CharT> __l)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(const_iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,size_type __n,_CharT __c)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
insert	d:/include/c++/14/bits/cow_string.h	/^	insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
insert	d:/include/c++/14/bits/cow_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
insert	d:/include/c++/14/bits/cow_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __p,_CharT __c)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
insert	d:/include/c++/14/bits/cow_string.h	/^     insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos,const _CharT * __s,size_type __n)
insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      insert_iterator(_Container& __x, _Iter __i)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x,_Iter __i)
insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
inserter	d:/include/c++/14/bits/stl_iterator.h	/^    inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,std::__detail::__range_iter_t<_Container> __i)
inserter	d:/include/c++/14/bits/stl_iterator.h	/^    inserter(_Container& __x, typename _Container::iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD insert_iterator<_Container>	signature:(_Container & __x,typename _Container::iterator __i)
int16_t	d:/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int16_t int16_t;$/;"	t	typeref:typename:__int16_t
int32_t	d:/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int32_t int32_t;$/;"	t	typeref:typename:__int32_t
int64_t	d:/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int64_t int64_t;$/;"	t	typeref:typename:__int64_t
int8_t	d:/include/x86_64-linux-gnu/bits/stdint-intn.h	/^typedef __int8_t int8_t;$/;"	t	typeref:typename:__int8_t
int_curr_symbol	d:/include/locale.h	/^  char *int_curr_symbol;$/;"	m	struct:lconv	typeref:typename:char *	access:public
int_fast16_t	d:/include/stdint.h	/^typedef int			int_fast16_t;$/;"	t	typeref:typename:int
int_fast16_t	d:/include/stdint.h	/^typedef long int		int_fast16_t;$/;"	t	typeref:typename:long int
int_fast32_t	d:/include/stdint.h	/^typedef int			int_fast32_t;$/;"	t	typeref:typename:int
int_fast32_t	d:/include/stdint.h	/^typedef long int		int_fast32_t;$/;"	t	typeref:typename:long int
int_fast64_t	d:/include/stdint.h	/^typedef long int		int_fast64_t;$/;"	t	typeref:typename:long int
int_fast64_t	d:/include/stdint.h	/^typedef long long int		int_fast64_t;$/;"	t	typeref:typename:long long int
int_fast8_t	d:/include/stdint.h	/^typedef signed char		int_fast8_t;$/;"	t	typeref:typename:signed char
int_frac_digits	d:/include/locale.h	/^  char int_frac_digits;		\/* Int'l fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
int_least16_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __int_least16_t int_least16_t;$/;"	t	typeref:typename:__int_least16_t
int_least32_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __int_least32_t int_least32_t;$/;"	t	typeref:typename:__int_least32_t
int_least64_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __int_least64_t int_least64_t;$/;"	t	typeref:typename:__int_least64_t
int_least8_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __int_least8_t int_least8_t;$/;"	t	typeref:typename:__int_least8_t
int_n_cs_precedes	d:/include/locale.h	/^  char int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_n_sep_by_space	d:/include/locale.h	/^  char int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_n_sign_posn	d:/include/locale.h	/^  char int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_cs_precedes	d:/include/locale.h	/^  char int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_sep_by_space	d:/include/locale.h	/^  char int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_p_sign_posn	d:/include/locale.h	/^  char int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
int_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef __UINT_LEAST16_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST16_TYPE__	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef __UINT_LEAST32_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST32_TYPE__	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef int               int_type;$/;"	t	struct:std::char_traits	typeref:typename:int	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::int_type    int_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::int_type	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef uint_least16_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least16_t	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef uint_least32_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least32_t	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef unsigned int      int_type;$/;"	t	struct:std::char_traits	typeref:typename:unsigned int	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef unsigned long   int_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:unsigned long	access:public
int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wint_t            int_type;$/;"	t	struct:std::char_traits	typeref:typename:wint_t	access:public
int_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
int_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:traits_type::int_type
int_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::advance	typeref:typename:traits_type::int_type
int_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename traits_type::int_type		   int_type;$/;"	t	function:std::find	typeref:typename:traits_type::int_type
integer_sequence	d:/include/c++/14/bits/utility.h	/^    struct integer_sequence$/;"	s	namespace:std
internal	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
internal	d:/include/c++/14/bits/ios_base.h	/^  internal(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
intmax_t	d:/include/stdint.h	/^typedef __intmax_t		intmax_t;$/;"	t	typeref:typename:__intmax_t
intptr_t	d:/include/stdint.h	/^typedef int			intptr_t;$/;"	t	typeref:typename:int
intptr_t	d:/include/stdint.h	/^typedef long int		intptr_t;$/;"	t	typeref:typename:long int
io_errc	d:/include/c++/14/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	g	namespace:std
ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base() throw ();$/;"	p	class:std::ios_base	access:protected	signature:()
ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base(const ios_base&) = delete;$/;"	p	class:std::ios_base	access:public	signature:(const ios_base &)
ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base &)
ios_base	d:/include/c++/14/bits/ios_base.h	/^  class ios_base$/;"	c	namespace:std
iostate	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
iostream_category	d:/include/c++/14/bits/ios_base.h	/^  iostream_category() noexcept;$/;"	p	namespace:std	typeref:typename:const error_category &	signature:()
is	d:/include/c++/14/bits/locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
is	d:/include/c++/14/bits/locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
is	d:/include/c++/14/bits/locale_facets.h	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
is	d:/include/c++/14/bits/locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
is_always_equal	d:/include/c++/14/bits/alloc_traits.h	/^      using is_always_equal = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
is_always_equal	d:/include/c++/14/bits/alloc_traits.h	/^      using is_always_equal$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<is_empty<_Alloc>,__equal,_Alloc>::type	access:public
is_always_equal	d:/include/c++/14/bits/allocator.h	/^      using is_always_equal$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
is_always_equal	d:/include/c++/14/bits/basic_string.h	/^      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})$/;"	m	class:std::operator +::_Alloc_traits	typeref:meta:typename	file:
is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free = ATOMIC_POINTER_LOCK_FREE == 2;$/;"	m	struct:std::__atomic_ref	typeref:typename:bool	access:public
is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free$/;"	m	struct:std::__atomic_float	typeref:typename:bool	access:public
is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free$/;"	m	struct:std::__atomic_ref	typeref:typename:bool	access:public
is_always_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      static constexpr bool is_always_lock_free = false;$/;"	m	struct:std::atomic	typeref:typename:bool	access:public
is_error_code_enum	d:/include/c++/14/bits/ios_base.h	/^  template <> struct is_error_code_enum<io_errc> : public true_type { };$/;"	s	namespace:std	inherits:true_type
is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy : std::false_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::false_type
is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::parallel_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::parallel_unsequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::sequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
is_execution_policy	d:/include/c++/14/pstl/execution_defs.h	/^struct is_execution_policy<__pstl::execution::unsequenced_policy> : std::true_type$/;"	s	namespace:__pstl::execution::v1	inherits:std::true_type
is_execution_policy_v	d:/include/c++/14/pstl/execution_defs.h	/^constexpr bool is_execution_policy_v = __pstl::execution::is_execution_policy<_Tp>::value;$/;"	v	namespace:__pstl::execution::v1	typeref:typename:bool
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:bool	access:public	signature:() const
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:() const
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:() const
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:bool	access:public	signature:() const
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:() const
is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:()
is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:() const
is_permutation	d:/include/c++/14/bits/stl_algobase.h	/^    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
is_transparent	d:/include/c++/14/bits/shared_ptr_base.h	/^      using is_transparent = void;$/;"	t	struct:std::_Sp_owner_less	typeref:typename:void	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_and	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_not	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_or	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_xor	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::divides	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::equal_to	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater_equal	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less_equal	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_and	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_not	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_or	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::minus	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::modulus	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::multiplies	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::negate	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::not_equal_to	typeref:typename:__is_transparent	access:public
is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::plus	typeref:typename:__is_transparent	access:public
isalnum	d:/include/c++/14/bits/locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalnum	d:/include/c++/14/bits/localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isalnum_l	d:/include/ctype.h	/^#  define isalnum_l(c,l)	__isalnum_l /;"	d	signature:(c,l)
isalpha	d:/include/c++/14/bits/locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isalpha	d:/include/c++/14/bits/localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isalpha_l	d:/include/ctype.h	/^#  define isalpha_l(c,l)	__isalpha_l /;"	d	signature:(c,l)
isascii	d:/include/ctype.h	/^#  define isascii(c)	__isascii /;"	d	signature:(c)
isascii	d:/include/ctype.h	/^extern int isascii (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
isascii_l	d:/include/ctype.h	/^#   define isascii_l(c,l)	__isascii_l /;"	d	signature:(c,l)
isblank	d:/include/c++/14/bits/locale_facets.h	/^    isblank(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isblank	d:/include/c++/14/bits/localefwd.h	/^    isblank(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isblank_l	d:/include/ctype.h	/^#  define isblank_l(c,l)	__isblank_l /;"	d	signature:(c,l)
iscntrl	d:/include/c++/14/bits/locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
iscntrl	d:/include/c++/14/bits/localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
iscntrl_l	d:/include/ctype.h	/^#  define iscntrl_l(c,l)	__iscntrl_l /;"	d	signature:(c,l)
isctype	d:/include/ctype.h	/^extern int isctype (int __c, int __mask) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,int __mask)
isdigit	d:/include/c++/14/bits/locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isdigit	d:/include/c++/14/bits/localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isdigit_l	d:/include/ctype.h	/^#  define isdigit_l(c,l)	__isdigit_l /;"	d	signature:(c,l)
isfinite	../../../../../../usr/include/machine/ieeefp.h	/^#define isfinite(/;"	d	signature:(__y)
isgraph	d:/include/c++/14/bits/locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isgraph	d:/include/c++/14/bits/localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isgraph_l	d:/include/ctype.h	/^#  define isgraph_l(c,l)	__isgraph_l /;"	d	signature:(c,l)
isinf	../../../../../../usr/include/machine/ieeefp.h	/^#define isinf(__x) ((sizeof (__x) == sizeof (float))  ?  (0) : __isinfd/;"	d	signature:(__x)
islower	d:/include/c++/14/bits/locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
islower	d:/include/c++/14/bits/localefwd.h	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
islower_l	d:/include/ctype.h	/^#  define islower_l(c,l)	__islower_l /;"	d	signature:(c,l)
isnan	../../../../../../usr/include/machine/ieeefp.h	/^#define isnan(__x) ((sizeof (__x) == sizeof (float))  ?  (0) : __isnand/;"	d	signature:(__x)
isprint	d:/include/c++/14/bits/locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isprint	d:/include/c++/14/bits/localefwd.h	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isprint_l	d:/include/ctype.h	/^#  define isprint_l(c,l)	__isprint_l /;"	d	signature:(c,l)
ispunct	d:/include/c++/14/bits/locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
ispunct	d:/include/c++/14/bits/localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
ispunct_l	d:/include/ctype.h	/^#  define ispunct_l(c,l)	__ispunct_l /;"	d	signature:(c,l)
isspace	d:/include/c++/14/bits/locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_LDBL bool	signature:(_CharT __c,const locale & __loc)
isspace	d:/include/c++/14/bits/localefwd.h	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isspace_l	d:/include/ctype.h	/^#  define isspace_l(c,l)	__isspace_l /;"	d	signature:(c,l)
istream_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      constexpr istreambuf_iterator(default_sentinel_t) noexcept$/;"	f	class:std::istreambuf_iterator	access:public	signature:(default_sentinel_t)
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator &)
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^    class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT>
isupper	d:/include/c++/14/bits/locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isupper	d:/include/c++/14/bits/localefwd.h	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isupper_l	d:/include/ctype.h	/^#  define isupper_l(c,l)	__isupper_l /;"	d	signature:(c,l)
iswalnum	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswalnum (wint_t __wc) __THROW;$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(wint_t __wc)
iswalnum_l	d:/include/wctype.h	/^extern int iswalnum_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswalpha	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswalpha (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswalpha_l	d:/include/wctype.h	/^extern int iswalpha_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswblank	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswblank (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswblank_l	d:/include/wctype.h	/^extern int iswblank_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswcntrl	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswcntrl (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswcntrl_l	d:/include/wctype.h	/^extern int iswcntrl_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswctype	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswctype (wint_t __wc, wctype_t __desc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,wctype_t __desc)
iswctype_l	d:/include/wctype.h	/^extern int iswctype_l (wint_t __wc, wctype_t __desc, locale_t __locale)$/;"	p	typeref:typename:int	signature:(wint_t __wc,wctype_t __desc,locale_t __locale)
iswdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswdigit (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswdigit_l	d:/include/wctype.h	/^extern int iswdigit_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswgraph	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswgraph (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswgraph_l	d:/include/wctype.h	/^extern int iswgraph_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswlower	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswlower (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswlower_l	d:/include/wctype.h	/^extern int iswlower_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswprint	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswprint (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswprint_l	d:/include/wctype.h	/^extern int iswprint_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswpunct	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswpunct (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswpunct_l	d:/include/wctype.h	/^extern int iswpunct_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswspace	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswspace (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswspace_l	d:/include/wctype.h	/^extern int iswspace_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswupper	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswupper (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswupper_l	d:/include/wctype.h	/^extern int iswupper_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
iswxdigit	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern int iswxdigit (wint_t __wc) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc)
iswxdigit_l	d:/include/wctype.h	/^extern int iswxdigit_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __wc,locale_t __locale)
isxdigit	d:/include/c++/14/bits/locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
isxdigit	d:/include/c++/14/bits/localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
isxdigit_l	d:/include/ctype.h	/^#  define isxdigit_l(c,l)	__isxdigit_l /;"	d	signature:(c,l)
it_interval	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
it_value	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
iter	d:/include/c++/14/bits/stl_iterator.h	/^      _Iter iter;$/;"	m	class:std::insert_iterator	typeref:typename:_Iter	access:protected
iter_const_reference_t	d:/include/c++/14/bits/stl_iterator.h	/^    using iter_const_reference_t$/;"	t	namespace:std	typeref:typename:common_reference_t<const iter_value_t<_It> &&,iter_reference_t<_It>>
iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const counted_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const counted_iterator & __i)
iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const move_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const move_iterator & __i)
iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const reverse_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const reverse_iterator & __i)
iter_move	d:/include/c++/14/bits/stl_iterator.h	/^    iter_move(const basic_const_iterator& __i)$/;"	f	namespace:std	typeref:typename:__rvalue_reference	signature:(const basic_const_iterator & __i)
iter_move	d:/include/c++/14/bits/stl_iterator.h	/^    iter_move(const common_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const common_iterator & __i)
iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const move_iterator& __x, const move_iterator<_Iter2>& __y)$/;"	f	namespace:std	typeref:typename:void	signature:(const move_iterator & __x,const move_iterator<_Iter2> & __y)
iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const reverse_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const reverse_iterator & __x,const reverse_iterator<_Iter2> & __y)
iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^      iter_swap(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
iter_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::num_get	typeref:typename:_InIter	access:public
iter_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	t	class:std::num_put	typeref:typename:_OutIter	access:public
iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
iterator	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct _GLIBCXX17_DEPRECATED iterator$/;"	s	namespace:std
iterator	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	t	class:std::_Temporary_buffer	typeref:typename:pointer	access:public
iterator_category	d:/include/c++/14/bits/shared_ptr_base.h	/^		using iterator_category = forward_iterator_tag;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:forward_iterator_tag	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^	using iterator_category$/;"	t	struct:std::__detail::__move_iter_cat	typeref:typename:__clamp_iter_cat<__iter_category_t<_Iterator>,random_access_iterator_tag>	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename _It::iterator_category; }$/;"	m	class:std::__detail::_It	typeref:meta:typename
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::iterator_category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_category = decltype(_S_iter_cat());$/;"	t	struct:std::iterator_traits	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::reverse_iterator	typeref:typename:__detail::__clamp_iter_cat<typename __traits_type::iterator_category,random_access_iterator_tag>	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_category = __iter_category_t<_It>; };$/;"	t	struct:std::__detail::__basic_const_iterator_iter_cat	typeref:typename:__iter_category_t<_It>	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_category = typename _It::iterator_category; };$/;"	t	struct:std::__detail::__counted_iter_cat	typeref:typename:_It::iterator_category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	typeref:typename:_Category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using iterator_category = random_access_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename _It::iterator_concept; }$/;"	m	class:std::__detail::_It	typeref:meta:typename
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = __conditional_t<forward_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:__conditional_t<forward_iterator<_It>,forward_iterator_tag,input_iterator_tag>	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = decltype(_S_iter_concept());$/;"	t	class:std::move_iterator	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = std::__detail::__iter_concept<_Iterator>;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:std::__detail::__iter_concept<_Iterator>	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept$/;"	t	class:std::reverse_iterator	typeref:typename:__conditional_t<random_access_iterator<_Iterator>,random_access_iterator_tag,bidirectional_iterator_tag>	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_concept = typename _It::iterator_concept; };$/;"	t	struct:std::__detail::__counted_iter_concept	typeref:typename:_It::iterator_concept	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^    using iterator_concept = decltype(_S_iter_concept());$/;"	t	class:std::basic_const_iterator	access:public
iterator_concept	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using iterator_concept  = contiguous_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:contiguous_iterator_tag	access:public
iterator_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct iterator_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
iterator_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct iterator_traits<counted_iterator<_It>> : iterator_traits<_It>$/;"	s	namespace:std	inherits:iterator_traits<_It>
iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std	inherits:__iterator_traits<_Iterator>
iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:_Iterator	access:public
iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_type = _It;$/;"	t	class:std::counted_iterator	typeref:typename:_It	access:public
iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_type = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
itimerspec	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^struct itimerspec$/;"	s
itimerspec::it_interval	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_interval;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
itimerspec::it_value	d:/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h	/^    struct timespec it_value;$/;"	m	struct:itimerspec	typeref:struct:timespec	access:public
itoa	../../../../../../usr/include/stdlib.h	/^char *	itoa (int, char *, int);$/;"	p	typeref:typename:char *	signature:(int,char *,int)
iword	d:/include/c++/14/bits/ios_base.h	/^    iword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
jrand48	../../../../../../usr/include/stdlib.h	/^long   jrand48 (unsigned short [3]);$/;"	p	typeref:typename:long	signature:(unsigned short[3])
kill_dependency	d:/include/c++/14/bits/atomic_base.h	/^    kill_dependency(_Tp __y) noexcept$/;"	f	namespace:std	typeref:typename:_Tp	signature:(_Tp __y)
l64a	../../../../../../usr/include/stdlib.h	/^char *  l64a (long __input);$/;"	p	typeref:typename:char *	signature:(long __input)
labs	../../../../../../usr/include/stdlib.h	/^long	labs (long);$/;"	p	typeref:typename:long	signature:(long)
lcong48	../../../../../../usr/include/stdlib.h	/^void  lcong48 (unsigned short [7]);$/;"	p	typeref:typename:void	signature:(unsigned short[7])
lconv	d:/include/locale.h	/^struct lconv$/;"	s
lconv::__int_n_cs_precedes	d:/include/locale.h	/^  char __int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_n_sep_by_space	d:/include/locale.h	/^  char __int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_n_sign_posn	d:/include/locale.h	/^  char __int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_cs_precedes	d:/include/locale.h	/^  char __int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_sep_by_space	d:/include/locale.h	/^  char __int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::__int_p_sign_posn	d:/include/locale.h	/^  char __int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::currency_symbol	d:/include/locale.h	/^  char *currency_symbol;	\/* Local currency symbol.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::decimal_point	d:/include/locale.h	/^  char *decimal_point;		\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::frac_digits	d:/include/locale.h	/^  char frac_digits;		\/* Local fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::grouping	d:/include/locale.h	/^  char *grouping;$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::int_curr_symbol	d:/include/locale.h	/^  char *int_curr_symbol;$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::int_frac_digits	d:/include/locale.h	/^  char int_frac_digits;		\/* Int'l fractional digits.  *\/$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_cs_precedes	d:/include/locale.h	/^  char int_n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_sep_by_space	d:/include/locale.h	/^  char int_n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_n_sign_posn	d:/include/locale.h	/^  char int_n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_cs_precedes	d:/include/locale.h	/^  char int_p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_sep_by_space	d:/include/locale.h	/^  char int_p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::int_p_sign_posn	d:/include/locale.h	/^  char int_p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::mon_decimal_point	d:/include/locale.h	/^  char *mon_decimal_point;	\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::mon_grouping	d:/include/locale.h	/^  char *mon_grouping;		\/* Like `grouping' element (above).  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::mon_thousands_sep	d:/include/locale.h	/^  char *mon_thousands_sep;	\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::n_cs_precedes	d:/include/locale.h	/^  char n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::n_sep_by_space	d:/include/locale.h	/^  char n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::n_sign_posn	d:/include/locale.h	/^  char n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::negative_sign	d:/include/locale.h	/^  char *negative_sign;		\/* Sign for negative values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::p_cs_precedes	d:/include/locale.h	/^  char p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::p_sep_by_space	d:/include/locale.h	/^  char p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::p_sign_posn	d:/include/locale.h	/^  char p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
lconv::positive_sign	d:/include/locale.h	/^  char *positive_sign;		\/* Sign for positive values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
lconv::thousands_sep	d:/include/locale.h	/^  char *thousands_sep;		\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
ldiv	../../../../../../usr/include/stdlib.h	/^ldiv_t	ldiv (long __numer, long __denom);$/;"	p	typeref:typename:ldiv_t	signature:(long __numer,long __denom)
ldiv_t	../../../../../../usr/include/stdlib.h	/^} ldiv_t;$/;"	t	typeref:struct:__anonf3b68ce80208
left	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
left	d:/include/c++/14/bits/ios_base.h	/^  left(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
length	d:/include/c++/14/bits/basic_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
length	d:/include/c++/14/bits/char_traits.h	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR size_t	access:public	signature:(const char_type * __s)
length	d:/include/c++/14/bits/char_traits.h	/^      length(const char_type* __s);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	access:public	signature:(const char_type * __s)
length	d:/include/c++/14/bits/char_traits.h	/^    length(const char_type* __p)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX14_CONSTEXPR std::size_t	signature:(const char_type * __p)
length	d:/include/c++/14/bits/cow_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
less	d:/include/c++/14/bits/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
less	d:/include/c++/14/bits/stl_function.h	/^    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
less	d:/include/c++/14/bits/stl_function.h	/^    struct less<void>$/;"	s	namespace:std
less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal<void>$/;"	s	namespace:std
lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
lexicographical_compare_three_way	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:auto	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2)
lexicographical_compare_three_way	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:decltype(__comp (* __first1,* __first2))	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2,_Comp __comp)
literals	d:/include/c++/14/bits/basic_string.h	/^  inline namespace literals$/;"	n	namespace:std
llabs	../../../../../../usr/include/stdlib.h	/^long long llabs (long long);$/;"	p	typeref:typename:long long	signature:(long long)
lldiv	../../../../../../usr/include/stdlib.h	/^lldiv_t	lldiv (long long __numer, long long __denom);$/;"	p	typeref:typename:lldiv_t	signature:(long long __numer,long long __denom)
lldiv_t	../../../../../../usr/include/stdlib.h	/^} lldiv_t;$/;"	t	typeref:struct:__anonf3b68ce80308
load	d:/include/c++/14/bits/atomic_base.h	/^      load(const _Tp* __ptr, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Val<_Tp>	signature:(const _Tp * __ptr,memory_order __m)
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public	signature:(memory_order __o=memory_order_seq_cst) const
load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public	signature:(memory_order __o=memory_order_seq_cst) const
load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o) const noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:value_type	access:private	signature:(memory_order __o) const
locale	d:/include/c++/14/bits/locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale() throw();$/;"	p	class:std::locale	access:public	signature:()
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	access:private	signature:(_Impl *)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const char* __s);$/;"	p	class:std::locale	access:public	signature:(const char * __s)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const std::string& __s, category __cat)$/;"	f	class:std::locale	access:public	signature:(const locale & __base,const std::string & __s,category __cat)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale & __other)
locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const std::string& __s) : locale(__s.c_str()) { }$/;"	f	class:std::locale	access:public	signature:(const std::string & __s)
locale	d:/include/c++/14/bits/locale_classes.h	/^  class locale$/;"	c	namespace:std
locale_t	d:/include/x86_64-linux-gnu/bits/types/locale_t.h	/^typedef __locale_t locale_t;$/;"	t	typeref:typename:__locale_t
localeconv	d:/include/locale.h	/^extern struct lconv *localeconv (void) __THROW;$/;"	p	typeref:struct:lconv *	signature:(void)
localtime	d:/include/time.h	/^#  define localtime __localtime6/;"	d
localtime	d:/include/time.h	/^extern struct tm *localtime (const time_t *__timer) __THROW;$/;"	p	typeref:struct:tm *	signature:(const time_t * __timer)
localtime_r	d:/include/time.h	/^#   define localtime_r __localtime_r$/;"	d
localtime_r	d:/include/time.h	/^extern struct tm *localtime_r (const time_t *__restrict __timer,$/;"	p	typeref:struct:tm *	signature:(const time_t * __restrict __timer,struct tm * __restrict __tp)
lock	d:/include/c++/14/bits/shared_ptr.h	/^      lock() const noexcept$/;"	f	class:std::weak_ptr	typeref:typename:shared_ptr<_Tp>	access:public	signature:() const
lock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	lock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:pointer	access:public	signature:(memory_order __o) const
lock	d:/include/c++/14/bits/shared_ptr_base.h	/^      lock() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:__shared_ptr<_Tp,_Lp>	access:public	signature:() const
lock	d:/include/c++/14/ext/concurrence.h	/^    void lock()$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:void	access:public	signature:()
lock	d:/include/c++/14/ext/concurrence.h	/^    void lock()$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:void	access:public	signature:()
logical_and	d:/include/c++/14/bits/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
logical_and	d:/include/c++/14/bits/stl_function.h	/^    struct logical_and<void>$/;"	s	namespace:std
logical_not	d:/include/c++/14/bits/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function<_Tp,bool>
logical_not	d:/include/c++/14/bits/stl_function.h	/^    struct logical_not<void>$/;"	s	namespace:std
logical_or	d:/include/c++/14/bits/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
logical_or	d:/include/c++/14/bits/stl_function.h	/^    struct logical_or<void>$/;"	s	namespace:std
lower_bound	d:/include/c++/14/bits/stl_algobase.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
lrand48	../../../../../../usr/include/stdlib.h	/^long   lrand48 (void);$/;"	p	typeref:typename:long	signature:(void)
lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
make_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_const_iterator(_It __it)$/;"	f	namespace:std	typeref:typename:const_iterator<_It>	signature:(_It __it)
make_const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    make_const_sentinel(_Sent __s)$/;"	f	namespace:std	typeref:typename:const_sentinel<_Sent>	signature:(_Sent __s)
make_error_code	d:/include/c++/14/bits/ios_base.h	/^  make_error_code(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_code	signature:(io_errc __e)
make_error_condition	d:/include/c++/14/bits/ios_base.h	/^  make_error_condition(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_condition	signature:(io_errc __e)
make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex __ex)
make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
make_index_sequence	d:/include/c++/14/bits/utility.h	/^    using make_index_sequence = make_integer_sequence<size_t, _Num>;$/;"	t	namespace:std	typeref:typename:make_integer_sequence<size_t,_Num>
make_integer_sequence	d:/include/c++/14/bits/utility.h	/^    using make_integer_sequence$/;"	t	namespace:std	typeref:typename:__make_integer_seq<integer_sequence,_Tp,_Num>
make_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_move_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(_Iterator __i)
make_pair	d:/include/c++/14/bits/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
make_pair	d:/include/c++/14/bits/stl_pair.h	/^    make_pair(_T1&& __x, _T2&& __y)$/;"	f	namespace:std	typeref:typename:pair<typename __decay_and_strip<_T1>::__type,typename __decay_and_strip<_T2>::__type>	signature:(_T1 && __x,_T2 && __y)
make_reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared()$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:()
make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NonArray<_Tp>>	signature:(_Args &&...__args)
make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const remove_extent_t<_Tp> & __u)
make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n)
make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(size_t __n, const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n,const remove_extent_t<_Tp> & __u)
make_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared_for_overwrite()$/;"	f	namespace:std	typeref:typename:shared_ptr<_NotUnboundedArray<_Tp>>	signature:()
make_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared_for_overwrite(size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n)
make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_t<_Tp>	signature:(_Args &&...__args)
make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(_Args&&...) = delete;$/;"	p	namespace:std	typeref:typename:__detail::__invalid_make_unique_t<_Tp>	signature:(_Args &&...)
make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_array_t<_Tp>	signature:(size_t __num)
make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite()$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_t<_Tp>	signature:()
make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite(_Args&&...) = delete;$/;"	p	namespace:std	typeref:typename:__detail::__invalid_make_unique_t<_Tp>	signature:(_Args &&...)
make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite(size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_array_t<_Tp>	signature:(size_t __num)
malloc	../../../../../../usr/include/stdlib.h	/^void	*malloc(size_t) __malloc_like __result_use_check __alloc_size(1) _NOTHROW;$/;"	p	typeref:typename:void *	signature:(size_t)
mask	d:/include/c++/14/bits/locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
mask	d:/include/c++/14/bits/locale_facets.h	/^      typedef typename ctype<_CharT>::mask  mask;$/;"	t	class:std::ctype_byname	typeref:typename:ctype<_CharT>::mask	access:public
max	d:/include/c++/14/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
max	d:/include/c++/14/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const _Alloc& __a) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _Alloc & __a)
max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const allocator_type & __a)
max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const allocator_type&) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:size_type	access:public	signature:(const allocator_type &)
max_size	d:/include/c++/14/bits/basic_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
max_size	d:/include/c++/14/bits/cow_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
max_size	d:/include/c++/14/bits/new_allocator.h	/^      max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:size_type	access:public	signature:() const
max_size	d:/include/c++/14/ext/alloc_traits.h	/^    static size_type max_size(const _Alloc& __a)$/;"	f	struct:__gnu_cxx::__alloc_traits	typeref:typename:size_type	access:public	signature:(const _Alloc & __a)
mblen	../../../../../../usr/include/stdlib.h	/^int	mblen (const char *, size_t);$/;"	p	typeref:typename:int	signature:(const char *,size_t)
mbrlen	d:/include/wchar.h	/^extern size_t mbrlen (const char *__restrict __s, size_t __n,$/;"	p	typeref:typename:size_t	signature:(const char * __restrict __s,size_t __n,mbstate_t * __restrict __ps)
mbrtowc	d:/include/wchar.h	/^extern size_t mbrtowc (wchar_t *__restrict __pwc,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __pwc,const char * __restrict __s,size_t __n,mbstate_t * __restrict __p)
mbsinit	d:/include/wchar.h	/^extern int mbsinit (const mbstate_t *__ps) __THROW __attribute_pure__;$/;"	p	typeref:typename:int	signature:(const mbstate_t * __ps)
mbsnrtowcs	d:/include/wchar.h	/^extern size_t mbsnrtowcs (wchar_t *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dst,const char ** __restrict __src,size_t __nmc,size_t __len,mbstate_t * __restrict __ps)
mbsrtowcs	d:/include/wchar.h	/^extern size_t mbsrtowcs (wchar_t *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dst,const char ** __restrict __src,size_t __len,mbstate_t * __restrict __ps)
mbstate_t	d:/include/x86_64-linux-gnu/bits/types/mbstate_t.h	/^typedef __mbstate_t mbstate_t;$/;"	t	typeref:typename:__mbstate_t
mbstowcs	../../../../../../usr/include/stdlib.h	/^size_t	mbstowcs (wchar_t *__restrict, const char *__restrict, size_t);$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict,const char * __restrict,size_t)
mbtowc	../../../../../../usr/include/stdlib.h	/^int	mbtowc (wchar_t *__restrict, const char *__restrict, size_t);$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict,const char * __restrict,size_t)
mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)()const)
mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)())
mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)()const)
mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)())
mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg)const)
mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg))
mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp*,_Ret>
memalign	../../../../../../usr/include/cygwin/stdlib.h	/^extern void *memalign (size_t, size_t);$/;"	p	typeref:typename:void *	signature:(size_t,size_t)
memory_order	d:/include/c++/14/bits/atomic_base.h	/^  enum class memory_order : int$/;"	g	namespace:std	typeref:typename:int
memory_order_acq_rel	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_acq_rel = memory_order::acq_rel;$/;"	v	namespace:std	typeref:typename:memory_order
memory_order_acquire	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_acquire = memory_order::acquire;$/;"	v	namespace:std	typeref:typename:memory_order
memory_order_consume	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_consume = memory_order::consume;$/;"	v	namespace:std	typeref:typename:memory_order
memory_order_relaxed	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_relaxed = memory_order::relaxed;$/;"	v	namespace:std	typeref:typename:memory_order
memory_order_release	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_release = memory_order::release;$/;"	v	namespace:std	typeref:typename:memory_order
memory_order_seq_cst	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_seq_cst = memory_order::seq_cst;$/;"	v	namespace:std	typeref:typename:memory_order
messages	d:/include/c++/14/bits/locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	m	class:std::locale	typeref:typename:const category	access:public
min	d:/include/c++/14/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
min	d:/include/c++/14/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
minus	d:/include/c++/14/bits/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
minus	d:/include/c++/14/bits/stl_function.h	/^    struct minus<void>$/;"	s	namespace:std
mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
mkdtemp	../../../../../../usr/include/machine/stdlib.h	/^char *mkdtemp (char *);$/;"	p	typeref:typename:char *	signature:(char *)
mkdtemp	../../../../../../usr/include/stdlib.h	/^char *	mkdtemp (char *);$/;"	p	typeref:typename:char *	signature:(char *)
mkostemp	../../../../../../usr/include/stdlib.h	/^int	mkostemp (char *, int);$/;"	p	typeref:typename:int	signature:(char *,int)
mkostemps	../../../../../../usr/include/stdlib.h	/^int	mkostemps (char *, int, int);$/;"	p	typeref:typename:int	signature:(char *,int,int)
mkstemp	../../../../../../usr/include/stdlib.h	/^int	mkstemp (char *);$/;"	p	typeref:typename:int	signature:(char *)
mkstemps	../../../../../../usr/include/stdlib.h	/^int	mkstemps (char *, int);$/;"	p	typeref:typename:int	signature:(char *,int)
mktemp	../../../../../../usr/include/stdlib.h	/^char *	mktemp (char *) _ATTRIBUTE ((__deprecated__("the use of `mktemp' is dangerous; use `mkste/;"	p	typeref:typename:char *	signature:(char *)
mktime	d:/include/time.h	/^#  define mktime __mktime6/;"	d
mktime	d:/include/time.h	/^extern time_t mktime (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
modulus	d:/include/c++/14/bits/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
modulus	d:/include/c++/14/bits/stl_function.h	/^    struct modulus<void>$/;"	s	namespace:std
mon_decimal_point	d:/include/locale.h	/^  char *mon_decimal_point;	\/* Decimal point character.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
mon_grouping	d:/include/locale.h	/^  char *mon_grouping;		\/* Like `grouping' element (above).  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
mon_thousands_sep	d:/include/locale.h	/^  char *mon_thousands_sep;	\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
monetary	d:/include/c++/14/bits/locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	m	class:std::locale	typeref:typename:const category	access:public
move	d:/include/c++/14/bits/basic_ios.h	/^      move(basic_ios& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
move	d:/include/c++/14/bits/basic_ios.h	/^      move(basic_ios&& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios && __rhs)
move	d:/include/c++/14/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
move	d:/include/c++/14/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, std::size_t __n);$/;"	p	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
move	d:/include/c++/14/bits/char_traits.h	/^    move(char_type* __s1, const char_type* __s2, std::size_t __n)$/;"	f	class:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR typename char_traits<_CharT>::char_type *	signature:(char_type * __s1,const char_type * __s2,std::size_t __n)
move	d:/include/c++/14/bits/move.h	/^    move(_Tp&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD typename std::remove_reference<_Tp>::type &&	signature:(_Tp && __t)
move	d:/include/c++/14/bits/stl_algobase.h	/^    move(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
move_if_noexcept	d:/include/c++/14/bits/move.h	/^    move_if_noexcept(_Tp& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD __conditional_t<__move_if_noexcept_cond<_Tp>::value,const _Tp &,_Tp &&>	signature:(_Tp & __x)
move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	move_iterator(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:requires __convertible<_Iter> _GLIBCXX17_CONSTEXPR	access:public	signature:(const move_iterator<_Iter> & __i)
move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      move_iterator()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      move_iterator(iterator_type __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __i)
move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class move_iterator$/;"	c	namespace:std	inherits:__detail::__move_iter_cat<_Iterator>
move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^	move_sentinel(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires convertible_to<const _S2 &,_Sent> 	access:public	signature:(const move_sentinel<_S2> & __s)
move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      move_sentinel()$/;"	f	class:std::move_sentinel	access:public	signature:()
move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      move_sentinel(_Sent __s)$/;"	f	class:std::move_sentinel	access:public	signature:(_Sent __s)
move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    class move_sentinel$/;"	c	namespace:std
mrand48	../../../../../../usr/include/stdlib.h	/^long   mrand48 (void);$/;"	p	typeref:typename:long	signature:(void)
multiplies	d:/include/c++/14/bits/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
multiplies	d:/include/c++/14/bits/stl_function.h	/^    struct multiplies<void>$/;"	s	namespace:std
n_cs_precedes	d:/include/locale.h	/^  char n_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
n_sep_by_space	d:/include/locale.h	/^  char n_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
n_sign_posn	d:/include/locale.h	/^  char n_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
name	d:/include/c++/14/bits/locale_classes.h	/^    name() const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_DEFAULT_ABI_TAG string	access:public	signature:() const
nanosleep	d:/include/time.h	/^#   define nanosleep __nanosleep6/;"	d
nanosleep	d:/include/time.h	/^extern int nanosleep (const struct timespec *__requested_time,$/;"	p	typeref:typename:int	signature:(const struct timespec * __requested_time,struct timespec * __remaining)
narrow	d:/include/c++/14/bits/basic_ios.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
negate	d:/include/c++/14/bits/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
negate	d:/include/c++/14/bits/stl_function.h	/^    struct negate<void>$/;"	s	namespace:std
negative_sign	d:/include/locale.h	/^  char *negative_sign;		\/* Sign for negative values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception() noexcept : _M_ptr(current_exception()) { }$/;"	f	class:std::nested_exception	access:public	signature:()
nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	access:public	signature:(const nested_exception &)
nested_exception	d:/include/c++/14/bits/nested_exception.h	/^  class nested_exception$/;"	c	namespace:std
nested_ptr	d:/include/c++/14/bits/nested_exception.h	/^    nested_ptr() const noexcept$/;"	f	class:std::nested_exception	typeref:typename:exception_ptr	access:public	signature:() const
newlocale	d:/include/locale.h	/^extern locale_t newlocale (int __category_mask, const char *__locale,$/;"	p	typeref:typename:locale_t	signature:(int __category_mask,const char * __locale,locale_t __base)
next	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    next(_InputIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _InputIterator	signature:(_InputIterator __x,typename iterator_traits<_InputIterator>::difference_type __n=1)
noboolalpha	d:/include/c++/14/bits/ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
none	d:/include/c++/14/bits/locale_classes.h	/^    static const category none		= 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
noreplace	d:/include/c++/14/bits/ios_base.h	/^    static const openmode noreplace =	_S_noreplace;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
noshowbase	d:/include/c++/14/bits/ios_base.h	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpoint	d:/include/c++/14/bits/ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noshowpos	d:/include/c++/14/bits/ios_base.h	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
noskipws	d:/include/c++/14/bits/ios_base.h	/^  noskipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
not1	d:/include/c++/14/bits/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate & __pred)
not2	d:/include/c++/14/bits/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate & __pred)
not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
not_equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
not_equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct not_equal_to<void>$/;"	s	namespace:std
notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all(const _Tp* __ptr) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr)
notify_all	d:/include/c++/14/bits/atomic_base.h	/^    notify_all() noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	notify_all() noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:()
notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_all() noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:()
notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_all() noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:()
notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one(const _Tp* __ptr) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr)
notify_one	d:/include/c++/14/bits/atomic_base.h	/^    notify_one() noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	notify_one() noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:()
notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_one() noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:()
notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_one() noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:()
nounitbuf	d:/include/c++/14/bits/ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
nouppercase	d:/include/c++/14/bits/ios_base.h	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
npos	d:/include/c++/14/bits/basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
npos	d:/include/c++/14/bits/cow_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
npos	d:/include/c++/14/bits/cow_string.h	/^    basic_string<_CharT, _Traits, _Alloc>::npos;$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>	typeref:typename:const typename basic_string<_CharT,_Traits,_Alloc>::size_type
nrand48	../../../../../../usr/include/stdlib.h	/^long   nrand48 (unsigned short [3]);$/;"	p	typeref:typename:long	signature:(unsigned short[3])
num_get	d:/include/c++/14/bits/locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get	access:public	signature:(size_t __refs=0)
num_get	d:/include/c++/14/bits/locale_facets.h	/^    class num_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
num_put	d:/include/c++/14/bits/locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put	access:public	signature:(size_t __refs=0)
num_put	d:/include/c++/14/bits/locale_facets.h	/^    class num_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
numeric	d:/include/c++/14/bits/locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	m	class:std::locale	typeref:typename:const category	access:public
numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(size_t __refs=0)
numpunct	d:/include/c++/14/bits/locale_facets.h	/^    class numpunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      numpunct_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const string & __s,size_t __refs=0)
numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	inherits:numpunct<_CharT>
obstack_printf	d:/include/stdio.h	/^extern int obstack_printf (struct obstack *__restrict __obstack,$/;"	p	typeref:typename:int	signature:(struct obstack * __restrict __obstack,const char * __restrict __format,...)
obstack_vprintf	d:/include/stdio.h	/^extern int obstack_vprintf (struct obstack *__restrict __obstack,$/;"	p	typeref:typename:int	signature:(struct obstack * __restrict __obstack,const char * __restrict __format,__gnuc_va_list __args)
oct	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
oct	d:/include/c++/14/bits/ios_base.h	/^  oct(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
off64_t	d:/include/stdio.h	/^typedef __off64_t off64_t;$/;"	t	typeref:typename:__off64_t
off_t	d:/include/stdio.h	/^typedef __off64_t off_t;$/;"	t	typeref:typename:__off64_t
off_t	d:/include/stdio.h	/^typedef __off_t off_t;$/;"	t	typeref:typename:__off_t
off_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::streamoff  off_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streamoff	access:public
off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef streamoff         off_type;$/;"	t	struct:std::char_traits	typeref:typename:streamoff	access:public
off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::off_type    off_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::off_type	access:public
on_exit	../../../../../../usr/include/stdlib.h	/^int	on_exit (void (*__func)(int, void *),void *__arg);$/;"	p	typeref:typename:int	signature:(void (* __func)(int,void *),void * __arg)
op	d:/include/c++/14/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder1st	typeref:typename:_Operation	access:protected
op	d:/include/c++/14/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder2nd	typeref:typename:_Operation	access:protected
open_memstream	d:/include/stdio.h	/^extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW$/;"	p	typeref:typename:FILE *	signature:(char ** __bufloc,size_t * __sizeloc)
open_wmemstream	d:/include/stdio.h	/^extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) __THROW$/;"	p	typeref:typename:__FILE *	signature:(wchar_t ** __bufloc,size_t * __sizeloc)
open_wmemstream	d:/include/wchar.h	/^extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) __THROW$/;"	p	typeref:typename:__FILE *	signature:(wchar_t ** __bufloc,size_t * __sizeloc)
openmode	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
operator !	d:/include/c++/14/bits/basic_ios.h	/^      operator!() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
operator !	d:/include/c++/14/bits/exception_ptr.h	/^      bool operator!() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:bool	access:public	signature:() const
operator !=	d:/include/c++/14/bits/allocator.h	/^      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
operator !=	d:/include/c++/14/bits/allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator !=	d:/include/c++/14/bits/exception_ptr.h	/^      operator!=(const exception_ptr& __x, const exception_ptr& __y)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED bool	signature:(const exception_ptr & __x,const exception_ptr & __y)
operator !=	d:/include/c++/14/bits/locale_classes.h	/^    operator!=(const locale& __other) const throw()$/;"	f	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const locale & __other) const
operator !=	d:/include/c++/14/bits/new_allocator.h	/^	operator!=(const __new_allocator&, const __new_allocator<_Up>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __new_allocator &,const __new_allocator<_Up> &)
operator !=	d:/include/c++/14/bits/postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator !=	d:/include/c++/14/bits/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator !=	d:/include/c++/14/bits/streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char>	signature:(const char * __str,size_t __len)
operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char16_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char16_t>	signature:(const char16_t * __str,size_t __len)
operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char32_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char32_t>	signature:(const char32_t * __str,size_t __len)
operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char8_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char8_t>	signature:(const char8_t * __str,size_t __len)
operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const wchar_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<wchar_t>	signature:(const wchar_t * __str,size_t __len)
operator &	d:/include/c++/14/bits/atomic_base.h	/^  operator&(memory_order __m, __memory_order_modifier __mod) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m,__memory_order_modifier __mod)
operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
operator ()	d:/include/c++/14/bits/basic_string.h	/^      operator()(const _StrT& __s) const noexcept$/;"	f	struct:std::__str_hash_base	typeref:typename:size_t	access:public	signature:(const _StrT & __s) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(_Tp __val) const noexcept$/;"	f	struct:std::__hash_enum	typeref:typename:size_t	access:public	signature:(_Tp __val) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(_Tp* __p) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(_Tp * __p) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(double __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(double __val) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(float __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(float __val) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(long double __val) const noexcept;$/;"	p	struct:std::hash	typeref:typename:_GLIBCXX_PURE size_t	access:public	signature:(long double __val) const
operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(nullptr_t) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(nullptr_t) const
operator ()	d:/include/c++/14/bits/locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_negate	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Iter_pred	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator __it, _Value& __val)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_equals_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator2 __it2)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^	operator()(_Value& __val, _Iterator __it)$/;"	f	struct:__gnu_cxx::__ops::_Val_comp_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^        operator()(_Iterator1 __it1, _Iterator2 __it2)$/;"	f	struct:__gnu_cxx::__ops::_Iter_comp_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2)
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator __it, _Value& __val) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_val	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator __it,_Value & __val) const
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_equal_to_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Iterator1 __it1, _Iterator2 __it2) const$/;"	f	struct:__gnu_cxx::__ops::_Iter_less_iter	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Iterator1 __it1,_Iterator2 __it2) const
operator ()	d:/include/c++/14/bits/predefined_ops.h	/^      operator()(_Value& __val, _Iterator __it) const$/;"	f	struct:__gnu_cxx::__ops::_Val_less_iter	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Value & __val,_Iterator __it) const
operator ()	d:/include/c++/14/bits/refwrap.h	/^	operator()(_Args&&... __args) const$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR typename __invoke_result<_Tp &,_Args...>::type	access:public	signature:(_Args &&...__args) const
operator ()	d:/include/c++/14/bits/shared_ptr.h	/^      operator()(const shared_ptr<_Tp>& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const shared_ptr<_Tp> & __s) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:auto	access:public	signature:(const _Tp & __lhs,const _Up & __rhs) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp & __lhs,const _Tp & __rhs) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp & __lhs,const _Tp1 & __rhs) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp1 & __lhs,const _Tp & __rhs) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const __shared_ptr<_Tp,_Lp> & __s) const
operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      void operator()(_Yp* __p) const { delete[] __p; }$/;"	f	struct:std::__sp_array_delete	typeref:typename:void	access:public	signature:(_Yp * __p) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::not_equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^        operator()(_Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair2::first_type &	access:public	signature:(_Pair2 & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^        operator()(const _Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair2::first_type &	access:public	signature:(const _Pair2 & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
operator ()	d:/include/c++/14/bits/unique_ptr.h	/^	operator()(_Up* __ptr) const$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<is_convertible<_Up (*)[],_Tp (*)[]>::value>::type	access:public	signature:(_Up * __ptr) const
operator ()	d:/include/c++/14/bits/unique_ptr.h	/^      operator()(_Tp* __ptr) const$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(_Tp * __ptr) const
operator ()	d:/include/c++/14/bits/unique_ptr.h	/^      operator()(const _Up& __u) const$/;"	f	struct:std::__uniq_ptr_hash	typeref:typename:size_t	access:public	signature:(const _Up & __u) const
operator *	d:/include/c++/14/backward/auto_ptr.h	/^      operator*() const throw() $/;"	f	class:std::auto_ptr	typeref:typename:element_type &	access:public	signature:() const
operator *	d:/include/c++/14/bits/shared_ptr_base.h	/^		reference operator*() const { return _M_p[_M_pos % _M_len]; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:reference	access:public	signature:() const
operator *	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator*() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type &	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const noexcept$/;"	f	class:std::common_iterator::__postfix_proxy	typeref:typename:const iter_value_t<_It> &	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:()
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*() const requires __detail::__dereferenceable<const _It>$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*() const$/;"	f	class:std::basic_const_iterator	typeref:typename:__reference	access:public	signature:() const
operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*()$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:()
operator *	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
operator *	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator*() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD char_type	access:public	signature:() const
operator *	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator*()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD ostreambuf_iterator &	access:public	signature:()
operator *	d:/include/c++/14/bits/unique_ptr.h	/^      operator*() const noexcept(noexcept(*std::declval<pointer>()))$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename add_lvalue_reference<element_type>::type	access:public	signature:() const
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(_CharT __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,_CharT __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const _CharT * __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator +	d:/include/c++/14/bits/postypes.h	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n, const counted_iterator& __x)$/;"	f	namespace:std	typeref:typename:counted_iterator	signature:(iter_difference_t<_It> __n,const counted_iterator & __x)
operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(const basic_const_iterator& __i, difference_type __n)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(const basic_const_iterator & __i,difference_type __n)
operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(difference_type __n, const basic_const_iterator& __i)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(difference_type __n,const basic_const_iterator & __i)
operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR __normal_iterator<_Iterator,_Container>	signature:(typename __normal_iterator<_Iterator,_Container>::difference_type __n,const __normal_iterator<_Iterator,_Container> & __i)
operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename move_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(typename move_iterator<_Iterator>::difference_type __n,const move_iterator<_Iterator> & __x)
operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:() const
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(int) const
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(int) const
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/shared_ptr_base.h	/^		_Iter operator++(int) { auto __i(*this); ++_M_pos; return __i; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Iter	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/shared_ptr_base.h	/^		_Iter& operator++() { ++_M_pos; return *this; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Iter &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) requires (!forward_iterator<_Iterator>)$/;"	f	class:std::move_iterator	typeref:typename:void	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) requires forward_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:void	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator++()$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator++(int)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(difference_type __d) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(difference_type __d) const
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(ptrdiff_t __d) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
operator +=	d:/include/c++/14/bits/basic_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_CharT __c)
operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator +=	d:/include/c++/14/bits/cow_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator +=	d:/include/c++/14/bits/postypes.h	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
operator +=	d:/include/c++/14/bits/stl_iterator.h	/^    operator+=(difference_type __n)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:(difference_type __n)
operator -	d:/include/c++/14/bits/postypes.h	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
operator -	d:/include/c++/14/bits/postypes.h	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It2>	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const move_sentinel<_Sent>& __x, const move_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_sentinel<_Sent> & __x,const move_iterator & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator- [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It2> iter_difference_t<_It2>	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const _Sent& __x, const basic_const_iterator& __y)$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It> difference_type	signature:(const _Sent & __x,const basic_const_iterator & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const _Sent& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:difference_type	access:public	signature:(const _Sent & __y) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(const counted_iterator & __x,default_sentinel_t)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(default_sentinel_t, const counted_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(default_sentinel_t,const counted_iterator & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(difference_type __n) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR typename __normal_iterator<_Iterator,_Container>::difference_type	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX20_CONSTEXPR auto	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const basic_const_iterator& __i, difference_type __n)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(const basic_const_iterator & __i,difference_type __n)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype(__x.base ()-__y.base ())	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype(__y.base ()-__x.base ())	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:() const
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(int) const
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(int) const
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--() _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:()
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--() requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator	access:public	signature:(int)
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int) requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
operator --	d:/include/c++/14/bits/stl_iterator.h	/^    operator--()$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:()
operator --	d:/include/c++/14/bits/stl_iterator.h	/^    operator--(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator	access:public	signature:(int)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(difference_type __d) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(difference_type __d) const
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(ptrdiff_t __d) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
operator -=	d:/include/c++/14/bits/postypes.h	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR __normal_iterator &	access:public	signature:(difference_type __n)
operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
operator -=	d:/include/c++/14/bits/stl_iterator.h	/^    operator-=(difference_type __n)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:(difference_type __n)
operator ->	d:/include/c++/14/backward/auto_ptr.h	/^      operator->() const throw() $/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:() const
operator ->	d:/include/c++/14/bits/shared_ptr_base.h	/^		pointer operator->() const { return _M_p + (_M_pos % _M_len); }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:pointer	access:public	signature:() const
operator ->	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator->() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type *	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^	|| requires(const _Iterator __i) { __i.operator->(); }$/;"	p	class:std::reverse_iterator	typeref:typename:__i.	access:public	signature:()
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const noexcept$/;"	f	class:std::common_iterator::__arrow_proxy	typeref:typename:const iter_value_t<_It> *	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const noexcept$/;"	f	class:std::counted_iterator	typeref:typename:auto	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^    operator->() const requires __detail::__common_iter_has_arrow<_It>$/;"	f	class:std::common_iterator	typeref:typename:auto	access:public	signature:() const
operator ->	d:/include/c++/14/bits/stl_iterator.h	/^    operator->() const$/;"	f	class:std::basic_const_iterator	typeref:typename:const auto *	access:public	signature:() const
operator ->	d:/include/c++/14/bits/unique_ptr.h	/^      operator->() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(const __shared_ptr<_Tp, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,const __shared_ptr<_Up,_Lp> & __b)
operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^      operator<(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^      operator<(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <	d:/include/c++/14/bits/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator <<	d:/include/c++/14/bits/basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
operator <<	d:/include/c++/14/bits/shared_ptr.h	/^    operator<<(std::basic_ostream<_Ch, _Tr>& __os,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION std::basic_ostream<_Ch,_Tr> &	signature:(std::basic_ostream<_Ch,_Tr> & __os,const __shared_ptr<_Tp,_Lp> & __p)
operator <<	d:/include/c++/14/bits/unique_ptr.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const unique_ptr<_Tp,_Dp> & __p)
operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=	d:/include/c++/14/bits/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator <=>	d:/include/c++/14/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator <=>	d:/include/c++/14/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, const _Tp& __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,const _Tp & __y)
operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, reference_wrapper __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,reference_wrapper __y)
operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, reference_wrapper<const _Tp> __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,reference_wrapper<const _Tp> __y)
operator <=>	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator <=>	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=>(const shared_ptr<_Tp>& __a,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator <=>	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator <=>	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=>(const __shared_ptr<_Tp, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const __shared_ptr<_Tp,_Lp> & __a,const __shared_ptr<_Up,_Lp> & __b)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^	operator<=>(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=>(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:public	signature:(const _It2 & __y) const
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_Iterator>	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:std::__detail::__synth3way_t<_IteratorR,_IteratorL>	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:public	signature:(const basic_const_iterator & __y) const
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_Iterator>	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_Iterator,_Iterator>	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator <=>	d:/include/c++/14/bits/stl_pair.h	/^    operator<=>(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y)$/;"	f	namespace:std	typeref:typename:common_comparison_category_t<__detail::__synth3way_t<_T1,_U1>,__detail::__synth3way_t<_T2,_U2>>	signature:(const pair<_T1,_T2> & __x,const pair<_U1,_U2> & __y)
operator <=>	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:requires three_way_comparable<typename unique_ptr<_Tp,_Dp>::pointer> _GLIBCXX23_CONSTEXPR compare_three_way_result_t<typename unique_ptr<_Tp,_Dp>::pointer>	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator <=>	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=>(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator =	d:/include/c++/14/backward/auto_ptr.h	/^        operator=(auto_ptr<_Tp1>& __a) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr<_Tp1> & __a)
operator =	d:/include/c++/14/backward/auto_ptr.h	/^      operator=(auto_ptr& __a) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr & __a)
operator =	d:/include/c++/14/backward/auto_ptr.h	/^      operator=(auto_ptr_ref<element_type> __ref) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr_ref<element_type> __ref)
operator =	d:/include/c++/14/bits/allocated_ptr.h	/^      operator=(std::nullptr_t) noexcept$/;"	f	struct:std::__allocated_ptr	typeref:typename:__allocated_ptr &	access:public	signature:(std::nullptr_t)
operator =	d:/include/c++/14/bits/allocator.h	/^      allocator& operator=(const allocator&) = default;$/;"	p	class:std::allocator	typeref:typename:allocator &	access:public	signature:(const allocator &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base& operator=(const __atomic_base&) = delete;$/;"	p	struct:std::__atomic_base	typeref:typename:__atomic_base &	access:public	signature:(const __atomic_base &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base& operator=(const __atomic_base&) volatile = delete;$/;"	p	struct:std::__atomic_base	typeref:typename:__atomic_base &	access:public	signature:(const __atomic_base &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float& operator=(const __atomic_float&) = delete;$/;"	p	struct:std::__atomic_float	typeref:typename:__atomic_float &	access:public	signature:(const __atomic_float &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float& operator=(const __atomic_float&) volatile = delete;$/;"	p	struct:std::__atomic_float	typeref:typename:__atomic_float &	access:public	signature:(const __atomic_float &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref& operator=(const __atomic_ref&) = delete;$/;"	p	struct:std::__atomic_ref	typeref:typename:__atomic_ref &	access:public	signature:(const __atomic_ref &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(_Fp __t) const
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __t)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __t)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Tp __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __t) const
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Tp* __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(_Tp * __t) const
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__pointer_type __p) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(__pointer_type __p)
operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__pointer_type __p) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(__pointer_type __p)
operator =	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag& operator=(const atomic_flag&) = delete;$/;"	p	struct:std::atomic_flag	typeref:typename:atomic_flag &	access:public	signature:(const atomic_flag &)
operator =	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag& operator=(const atomic_flag&) volatile = delete;$/;"	p	struct:std::atomic_flag	typeref:typename:atomic_flag &	access:public	signature:(const atomic_flag &)
operator =	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios& operator=(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:protected	signature:(const basic_ios &)
operator =	d:/include/c++/14/bits/basic_string.h	/^       operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator =	d:/include/c++/14/bits/basic_string.h	/^      basic_string& operator=(nullptr_t) = delete;$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(nullptr_t)
operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_CharT __c)
operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(basic_string && __str)
operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator =	d:/include/c++/14/bits/cow_string.h	/^	operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
operator =	d:/include/c++/14/bits/cow_string.h	/^      basic_string& operator=(nullptr_t) = delete;$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(nullptr_t)
operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
operator =	d:/include/c++/14/bits/exception.h	/^    exception& operator=(const exception&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(const exception &)
operator =	d:/include/c++/14/bits/exception.h	/^    exception& operator=(exception&&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(exception &&)
operator =	d:/include/c++/14/bits/exception_ptr.h	/^      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(const exception_ptr &)
operator =	d:/include/c++/14/bits/exception_ptr.h	/^      operator=(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(exception_ptr && __o)
operator =	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::operator=(const exception_ptr& __other) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED exception_ptr &	signature:(const exception_ptr & __other)
operator =	d:/include/c++/14/bits/ios_base.h	/^      Init& operator=(const Init&) = default;$/;"	p	class:std::ios_base::Init	typeref:typename:Init &	access:public	signature:(const Init &)
operator =	d:/include/c++/14/bits/ios_base.h	/^    operator=(const ios_base&) = delete;$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:public	signature:(const ios_base &)
operator =	d:/include/c++/14/bits/ios_base.h	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const facet&) = delete;$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
operator =	d:/include/c++/14/bits/locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
operator =	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception& operator=(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	typeref:typename:nested_exception &	access:public	signature:(const nested_exception &)
operator =	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator& operator=(const __new_allocator&) = default;$/;"	p	class:std::__new_allocator	typeref:typename:__new_allocator &	access:public	signature:(const __new_allocator &)
operator =	d:/include/c++/14/bits/postypes.h	/^      fpos& operator=(const fpos&) = default;$/;"	p	class:std::fpos	typeref:typename:fpos &	access:public	signature:(const fpos &)
operator =	d:/include/c++/14/bits/refwrap.h	/^      operator=(const reference_wrapper&) = default;$/;"	p	class:std::reference_wrapper	typeref:typename:reference_wrapper &	access:public	signature:(const reference_wrapper &)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(auto_ptr<_Yp>&& __r)$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<auto_ptr<_Yp>>	access:public	signature:(auto_ptr<_Yp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<const shared_ptr<_Yp> &>	access:public	signature:(const shared_ptr<_Yp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<const shared_ptr<_Yp> &>	access:public	signature:(const shared_ptr<_Yp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const weak_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<const weak_ptr<_Yp> &>	access:public	signature:(const weak_ptr<_Yp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(shared_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<shared_ptr<_Yp>>	access:public	signature:(shared_ptr<_Yp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<unique_ptr<_Yp,_Del>>	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(weak_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<weak_ptr<_Yp>>	access:public	signature:(weak_ptr<_Yp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(const enable_shared_from_this&) noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:enable_shared_from_this &	access:protected	signature:(const enable_shared_from_this &)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(const weak_ptr& __r) noexcept = default;$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	access:public	signature:(const weak_ptr & __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(shared_ptr&& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:shared_ptr &	access:public	signature:(shared_ptr && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(weak_ptr&& __r) noexcept = default;$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	access:public	signature:(weak_ptr && __r)
operator =	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr& operator=(const shared_ptr&) noexcept = default;$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	access:public	signature:(const shared_ptr &)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count& operator=(const _Atomic_count&) = delete;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:_Atomic_count &	access:public	signature:(const _Atomic_count &)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(nullptr_t) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(nullptr_t)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(shared_ptr<_Tp> __desired) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(shared_ptr<_Tp> __desired)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(weak_ptr<_Tp> __desired) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(weak_ptr<_Tp> __desired)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      void operator=(const _Sp_atomic&) = delete;$/;"	p	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(const _Sp_atomic &)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      void operator=(const atomic&) = delete;$/;"	p	struct:std::atomic	typeref:typename:void	access:public	signature:(const atomic &)
operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker& operator=(const _Sp_locker&) = delete;$/;"	p	struct:std::_Sp_locker	typeref:typename:_Sp_locker &	access:public	signature:(const _Sp_locker &)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(__weak_ptr<_Yp,_Lp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(auto_ptr<_Yp>&& __r)$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(auto_ptr<_Yp> && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::__shared_ptr	typeref:typename:_UniqAssignable<_Yp,_Del>	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;$/;"	p	class:std::_Sp_counted_base	typeref:typename:_Sp_counted_base &	access:private	signature:(_Sp_counted_base const &)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;$/;"	p	class:std::_Sp_counted_ptr	typeref:typename:_Sp_counted_ptr &	access:public	signature:(const _Sp_counted_ptr &)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;$/;"	p	class:std::__shared_ptr	typeref:typename:__shared_ptr &	access:public	signature:(const __shared_ptr &)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__shared_ptr&& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:__shared_ptr &	access:public	signature:(__shared_ptr && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__weak_count&& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(__weak_count && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__weak_ptr&& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:__weak_ptr &	access:public	signature:(__weak_ptr && __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __enable_shared_from_this&) noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__enable_shared_from_this &	access:protected	signature:(const __enable_shared_from_this &)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __shared_count& __r) noexcept$/;"	f	class:std::__shared_count	typeref:typename:__shared_count &	access:public	signature:(const __shared_count & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __shared_count<_Lp>& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(const __shared_count<_Lp> & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __weak_count& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(const __weak_count & __r)
operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __weak_ptr& __r) noexcept = default;$/;"	p	class:std::__weak_ptr	typeref:typename:__weak_ptr &	access:public	signature:(const __weak_ptr & __r)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^	move_iterator& operator=(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:requires __convertible<_Iter> && assignable_from<_Iterator &,const _Iter &> _GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(const move_iterator<_Iter> & __i)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires assignable_from<_It &,const _It2 &> counted_iterator &	access:public	signature:(const counted_iterator<_It2> & __x)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires assignable_from<_Sent &,const _S2 &> move_sentinel &	access:public	signature:(const move_sentinel<_S2> & __s)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:requires __convertible<_Iter> && assignable_from<_Iterator &,const _Iter &> _GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(const reverse_iterator<_Iter> & __x)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator& operator=(const reverse_iterator&) = default;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(const reverse_iterator &)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(common_iterator&& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(common_iterator && __x)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(common_iterator&&) = default;$/;"	p	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(common_iterator &&)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(const common_iterator& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator & __x)
operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(const common_iterator&) = default;$/;"	p	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator &)
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(_UPair&& __p) const$/;"	f	struct:std::pair	typeref:typename:requires (_S_const_assignable_from_tuple_like<_UPair> ())const pair &	access:public	signature:(_UPair && __p) const
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(_UPair&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_assignable_from_tuple_like<_UPair> ())pair &	access:public	signature:(_UPair && __p)
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(const pair<_U1,_U2> & __p) const
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair<_U1,_U2> & __p)
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(pair<_U1,_U2> && __p) const
operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(pair<_U1,_U2> && __p)
operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(const pair& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(const pair & __p) const
operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(const pair& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair & __p)
operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(pair&& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(pair && __p) const
operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(pair&& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(pair && __p)
operator =	d:/include/c++/14/bits/stl_pair.h	/^      pair& operator=(const pair&) = delete;$/;"	p	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair &)
operator =	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base& operator=(const __pair_base&) = delete;$/;"	p	class:std::__pair_base	typeref:typename:__pair_base &	access:private	signature:(const __pair_base &)
operator =	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator=(_Tp&& __element)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(_Tp && __element)
operator =	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(const _Tp & __element)
operator =	d:/include/c++/14/bits/stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	typeref:typename:void	access:private	signature:(const _Temporary_buffer &)
operator =	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
operator =	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator=(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:(const istreambuf_iterator &)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<__and_<__safe_conversion_up<_Up,_Ep>,is_assignable<deleter_type &,_Ep &&>>::value,unique_ptr &>::type	access:public	signature:(unique_ptr<_Up,_Ep> && __u)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;$/;"	p	struct:std::__uniq_ptr_data	typeref:typename:__uniq_ptr_data &	access:public	signature:(__uniq_ptr_data &&)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;$/;"	p	struct:std::__uniq_ptr_data	typeref:typename:__uniq_ptr_data &	access:public	signature:(__uniq_ptr_data &&)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR __uniq_ptr_impl &	access:public	signature:(__uniq_ptr_impl && __u)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      operator=(nullptr_t) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR unique_ptr &	access:public	signature:(nullptr_t)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      operator=(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(unique_ptr &&)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr& operator=(const unique_ptr&) = delete;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(const unique_ptr &)
operator =	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr& operator=(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(unique_ptr &&)
operator =	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	f	struct:std::__uses_alloc0::_Sink	typeref:typename:void _GLIBCXX20_CONSTEXPR	access:public	signature:(const void *)
operator =	d:/include/c++/14/ext/concurrence.h	/^    __cond& operator=(const __cond&);$/;"	p	class:__gnu_cxx::__cond	typeref:typename:__cond &	access:private	signature:(const __cond &)
operator =	d:/include/c++/14/ext/concurrence.h	/^    __mutex& operator=(const __mutex&);$/;"	p	class:__gnu_cxx::__mutex	typeref:typename:__mutex &	access:private	signature:(const __mutex &)
operator =	d:/include/c++/14/ext/concurrence.h	/^    __recursive_mutex& operator=(const __recursive_mutex&);$/;"	p	class:__gnu_cxx::__recursive_mutex	typeref:typename:__recursive_mutex &	access:private	signature:(const __recursive_mutex &)
operator =	d:/include/c++/14/ext/concurrence.h	/^    __scoped_lock& operator=(const __scoped_lock&);$/;"	p	class:__gnu_cxx::__scoped_lock	typeref:typename:__scoped_lock &	access:private	signature:(const __scoped_lock &)
operator ==	d:/include/c++/14/bits/allocator.h	/^      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
operator ==	d:/include/c++/14/bits/allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator ==	d:/include/c++/14/bits/exception_ptr.h	/^      operator==(const exception_ptr& __x, const exception_ptr& __y)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED bool	signature:(const exception_ptr & __x,const exception_ptr & __y)
operator ==	d:/include/c++/14/bits/locale_classes.h	/^    operator==(const locale& __other) const throw();$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const locale & __other) const
operator ==	d:/include/c++/14/bits/new_allocator.h	/^	operator==(const __new_allocator&, const __new_allocator<_Up>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __new_allocator &,const __new_allocator<_Up> &)
operator ==	d:/include/c++/14/bits/postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, const _Tp& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,const _Tp & __y)
operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, reference_wrapper __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,reference_wrapper __y)
operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, reference_wrapper<const _Tp> __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,reference_wrapper<const _Tp> __y)
operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^		bool operator==(const _Iter& __i) const$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:bool	access:public	signature:(const _Iter & __i) const
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator==(const __shared_count& __a, const __shared_count& __b) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_count & __a,const __shared_count & __b)
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator==(const __weak_count& __a, const __weak_count& __b) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __weak_count & __a,const __weak_count & __b)
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^	operator==(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^	operator==(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator== [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> && equality_comparable_with<_It,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator== [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator==(const _Sent& __s) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _Sent & __s) const
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator==(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,default_sentinel_t)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator ==	d:/include/c++/14/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator ==	d:/include/c++/14/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_U1,_U2> & __y)
operator ==	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator==(const istreambuf_iterator& __i, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator & __i,default_sentinel_t)
operator ==	d:/include/c++/14/bits/streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^      operator>(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^      operator>(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >	d:/include/c++/14/bits/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^      operator>=(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^      operator>=(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const __normal_iterator<_Iterator,_Container> & __lhs,const __normal_iterator<_Iterator,_Container> & __rhs)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,$/;"	f	namespace:__gnu_cxx	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const __normal_iterator<_IteratorL,_Container> & __lhs,const __normal_iterator<_IteratorR,_Container> & __rhs)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
operator >=	d:/include/c++/14/bits/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
operator >>	d:/include/c++/14/bits/basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
operator >>	d:/include/c++/14/bits/basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
operator []	d:/include/c++/14/bits/basic_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:(size_type __pos)
operator []	d:/include/c++/14/bits/cow_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
operator []	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator[](ptrdiff_t __i) const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type &	access:public	signature:(ptrdiff_t __i) const
operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const _GLIBCXX_NOEXCEPT$/;"	f	class:__gnu_cxx::__normal_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:(iter_difference_t<_It> __n) const
operator []	d:/include/c++/14/bits/stl_iterator.h	/^    operator[](difference_type __n) const$/;"	f	class:std::basic_const_iterator	typeref:typename:__reference	access:public	signature:(difference_type __n) const
operator []	d:/include/c++/14/bits/unique_ptr.h	/^      operator[](size_t __i) const$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename std::add_lvalue_reference<element_type>::type	access:public	signature:(size_t __i) const
operator [] 	d:/include/c++/14/bits/basic_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:(size_type __pos) const
operator [] 	d:/include/c++/14/bits/cow_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator _CIt	d:/include/c++/14/bits/stl_iterator.h	/^    operator _CIt() &&$/;"	f	class:std::basic_const_iterator	typeref:typename:requires __detail::__constant_iterator<_CIt> && convertible_to<_It,_CIt> 	access:public	signature:()
operator _CIt	d:/include/c++/14/bits/stl_iterator.h	/^    operator _CIt() const&$/;"	f	class:std::basic_const_iterator	typeref:typename:requires __detail::__constant_iterator<_CIt> && convertible_to<_It,_CIt> 	access:public	signature:() const
operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_float	access:public	signature:() const
operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const volatile noexcept { return this->load(); }$/;"	f	struct:std::__atomic_float	access:public	signature:() const
operator _Tp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Tp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
operator _Tp&	d:/include/c++/14/bits/refwrap.h	/^      operator _Tp&() const noexcept$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:() const
operator _Tp*	d:/include/c++/14/bits/atomic_base.h	/^      operator _Tp*() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
operator __int_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __int_type() const noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
operator __int_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __int_type() const volatile noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
operator __pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __pointer_type() const noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
operator __pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __pointer_type() const volatile noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
operator __safe_bool	d:/include/c++/14/bits/exception_ptr.h	/^      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
operator __sv_type	d:/include/c++/14/bits/basic_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:() const
operator __sv_type	d:/include/c++/14/bits/cow_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	access:public	signature:() const
operator auto_ptr<_Tp1>	d:/include/c++/14/backward/auto_ptr.h	/^        operator auto_ptr<_Tp1>() throw()$/;"	f	class:std::auto_ptr	access:public	signature:()
operator auto_ptr_ref<_Tp1>	d:/include/c++/14/backward/auto_ptr.h	/^        operator auto_ptr_ref<_Tp1>() throw()$/;"	f	class:std::auto_ptr	access:public	signature:()
operator bool	d:/include/c++/14/bits/basic_ios.h	/^      explicit operator bool() const$/;"	f	class:std::basic_ios	access:public	signature:() const
operator bool	d:/include/c++/14/bits/exception_ptr.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
operator bool	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:() const
operator bool	d:/include/c++/14/bits/unique_ptr.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:() const
operator shared_ptr<_Tp>	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator shared_ptr<_Tp>() const noexcept$/;"	f	struct:std::atomic	access:public	signature:() const
operator streamoff	d:/include/c++/14/bits/postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos	access:public	signature:() const
operator weak_ptr<_Tp>	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator weak_ptr<_Tp>() const noexcept$/;"	f	struct:std::atomic	access:public	signature:() const
operator |	d:/include/c++/14/bits/atomic_base.h	/^  operator|(memory_order __m, __memory_order_modifier __mod) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m,__memory_order_modifier __mod)
operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Fmtflags __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Iostate __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a)
operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Openmode __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a)
ostream_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator() noexcept$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
other	d:/include/c++/14/bits/allocator.h	/^	{ typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
other	d:/include/c++/14/bits/new_allocator.h	/^	{ typedef __new_allocator<_Tp1> other; };$/;"	t	struct:std::__new_allocator::rebind	typeref:typename:__new_allocator<_Tp1>	access:public
other	d:/include/c++/14/ext/alloc_traits.h	/^      { typedef typename _Alloc::template rebind<_Tp>::other other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Alloc::template rebind<_Tp>::other	access:public
other	d:/include/c++/14/ext/alloc_traits.h	/^      { typedef typename _Base_type::template rebind_alloc<_Tp> other; };$/;"	t	struct:__gnu_cxx::__alloc_traits::rebind	typeref:typename:_Base_type::template rebind_alloc<_Tp>	access:public
out	d:/include/c++/14/bits/ios_base.h	/^    static const openmode out =		_S_out;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
output_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct output_iterator_tag { };$/;"	s	namespace:std
owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:(__shared_ptr<_Tp1,_Lp> const & __rhs) const
owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:(__weak_ptr<_Tp1,_Lp> const & __rhs) const
owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:(const __shared_ptr<_Tp1,_Lp> & __rhs) const
owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:(const __weak_ptr<_Tp1,_Lp> & __rhs) const
owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<shared_ptr<_Tp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<shared_ptr<_Tp>,weak_ptr<_Tp>>
owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<void> : _Sp_owner_less<void, void>$/;"	s	namespace:std	inherits:_Sp_owner_less<void,void>
owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<weak_ptr<_Tp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<weak_ptr<_Tp>,shared_ptr<_Tp>>
owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct owner_less<__shared_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<__shared_ptr<_Tp,_Lp>,__weak_ptr<_Tp,_Lp>>
owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct owner_less<__weak_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<__weak_ptr<_Tp,_Lp>,__shared_ptr<_Tp,_Lp>>
p_cs_precedes	d:/include/locale.h	/^  char p_cs_precedes;$/;"	m	struct:lconv	typeref:typename:char	access:public
p_sep_by_space	d:/include/locale.h	/^  char p_sep_by_space;$/;"	m	struct:lconv	typeref:typename:char	access:public
p_sign_posn	d:/include/locale.h	/^  char p_sign_posn;$/;"	m	struct:lconv	typeref:typename:char	access:public
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(_U1 && __x,_U2 && __y)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_U1&&, _U2&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(_U1 &&,_U2 &&)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_UPair&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible_from_pair_like<_UPair> ())&& (!_S_dangles_from_pair_like<_UPair> ())(!_S_convertible_from_pair_like<_UPair> ())	access:public	signature:(_UPair && __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_UPair&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible_from_pair_like<_UPair> ())&& (_S_dangles_from_pair_like<_UPair> ())(!_S_convertible_from_pair_like<_UPair> ())	access:public	signature:(_UPair &&)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1 &,const _U2 &> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<const _U1 &,const _U2 &> ())	access:public	signature:(const pair<_U1,_U2> & __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1,const _U2> ())&& (!_S_dangles<const _U1,const _U2> ())(!_S_convertible<const _U1,const _U2> ())	access:public	signature:(const pair<_U1,_U2> && __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1,const _U2> ())&& (_S_dangles<const _U1,const _U2> ())(!_S_convertible<const _U1,const _U2> ())	access:public	signature:(const pair<_U1,_U2> &&)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1 &,const _U2 &> ())&& (_S_dangles<const _U1 &,const _U2 &> ())(!_S_convertible<const _U1 &,const _U2 &> ())	access:public	signature:(const pair<_U1,_U2> &)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1 &,_U2 &> ())&& (!_S_dangles<_U1 &,_U2 &> ())(!_S_convertible<_U1 &,_U2 &> ())	access:public	signature:(pair<_U1,_U2> & __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(pair<_U1,_U2> && __p)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(pair<_U1,_U2> &&)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1 &,_U2 &> ())&& (_S_dangles<_U1 &,_U2 &> ())(!_S_convertible<_U1 &,_U2 &> ())	access:public	signature:(pair<_U1,_U2> &)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(piecewise_construct_t,tuple<_Args1...>,tuple<_Args2...>)
pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(tuple<_Args1...>&, tuple<_Args2...>&,$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(tuple<_Args1...> &,tuple<_Args2...> &,_Index_tuple<_Indexes1...>,_Index_tuple<_Indexes2...>)
pair	d:/include/c++/14/bits/stl_pair.h	/^      constexpr pair(const pair&) = default;	\/\/\/< Copy constructor$/;"	p	struct:std::pair	access:public	signature:(const pair &)
pair	d:/include/c++/14/bits/stl_pair.h	/^      constexpr pair(pair&&) = default;		\/\/\/< Move constructor$/;"	p	struct:std::pair	access:public	signature:(pair &&)
pair	d:/include/c++/14/bits/stl_pair.h	/^      pair() : first(), second() { }$/;"	f	struct:std::pair	access:public	signature:()
pair	d:/include/c++/14/bits/stl_pair.h	/^      pair()$/;"	f	struct:std::pair	access:public	signature:()
pair	d:/include/c++/14/bits/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
pair	d:/include/c++/14/bits/stl_pair.h	/^      pair(const _T1& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,const _T2 & __y)
pair	d:/include/c++/14/bits/stl_pair.h	/^    requires requires { typename pair<common_reference_t<_TQual<_T1>, _UQual<_U1>>,$/;"	v	namespace:std	typeref:meta:typename
pair	d:/include/c++/14/bits/stl_pair.h	/^    requires requires { typename pair<common_type_t<_T1, _U1>, common_type_t<_T2, _U2>>; }$/;"	v	namespace:std	typeref:meta:typename
pair	d:/include/c++/14/bits/stl_pair.h	/^    struct pair$/;"	s	namespace:std	inherits:__pair_base<_T1,_T2>
pair	d:/include/c++/14/bits/stl_pair.h	/^  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;$/;"	p	namespace:std	signature:(_T1,_T2)
par	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr parallel_policy par{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE parallel_policy
par_unseq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr parallel_unsequenced_policy par_unseq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE parallel_unsequenced_policy
parallel_policy	d:/include/c++/14/pstl/execution_defs.h	/^class parallel_policy$/;"	c	namespace:__pstl::execution::v1
parallel_unsequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class parallel_unsequenced_policy$/;"	c	namespace:__pstl::execution::v1
pclose	d:/include/stdio.h	/^extern int pclose (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:int	signature:(FILE * __stream)
perror	d:/include/stdio.h	/^extern void perror (const char *__s) __COLD;$/;"	p	typeref:typename:void	signature:(const char * __s)
pid_t	d:/include/sched.h	/^typedef __pid_t pid_t;$/;"	t	typeref:typename:__pid_t
pid_t	d:/include/time.h	/^typedef __pid_t pid_t;$/;"	t	typeref:typename:__pid_t
piecewise_construct	d:/include/c++/14/bits/stl_pair.h	/^  _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE piecewise_construct_t
piecewise_construct_t	d:/include/c++/14/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	p	struct:std::piecewise_construct_t	access:public	signature:()
piecewise_construct_t	d:/include/c++/14/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	s	namespace:std
plus	d:/include/c++/14/bits/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
plus	d:/include/c++/14/bits/stl_function.h	/^    struct plus<void>$/;"	s	namespace:std
pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<value_type *,__pointer,_Alloc>	access:public
pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
pointer	d:/include/c++/14/bits/allocated_ptr.h	/^      using pointer = typename allocator_traits<_Alloc>::pointer;$/;"	t	struct:std::__allocated_ptr	typeref:typename:allocator_traits<_Alloc>::pointer	access:public
pointer	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::allocator	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/allocator.h	/^      typedef void*       pointer;$/;"	t	class:std::allocator	typeref:typename:void *	access:public
pointer	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::pointer		pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::pointer	access:public
pointer	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::pointer	    pointer;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::pointer	access:public
pointer	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/ptr_traits.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Ptr	access:public
pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Ptr	access:public
pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/shared_ptr.h	/^      using pointer = typename shared_ptr<_Tp>::element_type*;$/;"	t	function:std::operator <=>	typeref:typename:shared_ptr<_Tp>::element_type *
pointer	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	using pointer = decltype(__count_type::_M_pi);$/;"	t	struct:std::_Sp_atomic::_Atomic_count	access:public
pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^		using pointer = const _Up*;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up *	access:public
pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^	using pointer = typename allocator_traits<__allocator_type>::pointer;$/;"	t	function:std::_Sp_counted_ptr_inplace::_M_destroy	typeref:typename:allocator_traits<__allocator_type>::pointer
pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^      using pointer = typename __shared_ptr<_Tp, _Lp>::element_type*;$/;"	t	function:std::operator <=>	typeref:typename:__shared_ptr<_Tp,_Lp>::element_type *
pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^      using pointer = typename allocator_traits<_Alloc>::pointer;$/;"	t	class:std::_Sp_counted_array	typeref:typename:allocator_traits<_Alloc>::pointer	access:private
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					pointer;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer		pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::pointer	access:public
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer   	pointer;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::pointer	access:public
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = __conditional_t<contiguous_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:__conditional_t<contiguous_iterator<_It>,add_pointer_t<iter_reference_t<_It>>,void>	access:public
pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = typename __ptr<_It>::type;$/;"	t	struct:std::iterator_traits	typeref:typename:__ptr<_It>::type	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	typeref:typename:_Pointer	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::pointer	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using pointer	      = _Tp*;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
pointer	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Temporary_buffer	typeref:typename:value_type *	access:public
pointer	d:/include/c++/14/bits/unique_ptr.h	/^      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Dp>::pointer	access:public
pointer	d:/include/c++/14/bits/unique_ptr.h	/^      using pointer = typename _Ptr<_Tp, _Dp>::type;$/;"	t	class:std::__uniq_ptr_impl	typeref:typename:_Ptr<_Tp,_Dp>::type	access:public
pointer	d:/include/c++/14/bits/unique_ptr.h	/^      using pointer = typename unique_ptr<_Tp, _Dp>::pointer;$/;"	t	function:std::operator <=>	typeref:typename:unique_ptr<_Tp,_Dp>::pointer
pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::pointer                pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::pointer	access:public
pointer	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::pointer            pointer;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::pointer	access:public
pointer_to	d:/include/c++/14/bits/ptr_traits.h	/^      pointer_to(element_type& __r) noexcept$/;"	f	struct:std::__ptr_traits_ptr_to	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(element_type & __r)
pointer_to	d:/include/c++/14/bits/ptr_traits.h	/^      pointer_to(element_type& __r)$/;"	f	struct:std::__ptr_traits_ptr_to	typeref:typename:pointer	access:public	signature:(element_type & __r)
pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function<_Arg,_Result>
pointer_traits	d:/include/c++/14/bits/ptr_traits.h	/^    struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>$/;"	s	namespace:std	inherits:__ptr_traits_impl<_Ptr,__ptr_traits_elem_t<_Ptr>>
pointer_traits	d:/include/c++/14/bits/ptr_traits.h	/^    struct pointer_traits<_Tp*> : __ptr_traits_ptr_to<_Tp*, _Tp>$/;"	s	namespace:std	inherits:__ptr_traits_ptr_to<_Tp*,_Tp>
pop_back	d:/include/c++/14/bits/basic_string.h	/^      pop_back() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
pop_back	d:/include/c++/14/bits/cow_string.h	/^      pop_back() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
popen	d:/include/stdio.h	/^extern FILE *popen (const char *__command, const char *__modes)$/;"	p	typeref:typename:FILE *	signature:(const char * __command,const char * __modes)
pos_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::streampos  pos_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::streampos	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef streampos         pos_type;$/;"	t	struct:std::char_traits	typeref:typename:streampos	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::pos_type    pos_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::pos_type	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u16streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u16streampos	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u32streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u32streampos	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u8streampos       pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u8streampos	access:public
pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wstreampos        pos_type;$/;"	t	struct:std::char_traits	typeref:typename:wstreampos	access:public
positive_sign	d:/include/locale.h	/^  char *positive_sign;		\/* Sign for positive values.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
posix_memalign	../../../../../../usr/include/stdlib.h	/^int	posix_memalign (void **, size_t, size_t) __nonnull((1))$/;"	p	typeref:typename:int	signature:(void **,size_t,size_t)
posix_openpt	../../../../../../usr/include/cygwin/stdlib.h	/^int posix_openpt (int);$/;"	p	typeref:typename:int	signature:(int)
precision	d:/include/c++/14/bits/ios_base.h	/^    precision() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
precision	d:/include/c++/14/bits/ios_base.h	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
prev	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    prev(_BidirectionalIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _BidirectionalIterator	signature:(_BidirectionalIterator __x,typename iterator_traits<_BidirectionalIterator>::difference_type __n=1)
printf	d:/include/stdio.h	/^extern int printf (const char *__restrict __format, ...);$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
propagate_on_container_copy_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
propagate_on_container_copy_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocca,_Alloc>	access:public
propagate_on_container_move_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
propagate_on_container_move_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocma,_Alloc>	access:public
propagate_on_container_move_assignment	d:/include/c++/14/bits/allocator.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
propagate_on_container_move_assignment	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::true_type propagate_on_container_move_assignment;$/;"	t	class:std::__new_allocator	typeref:typename:std::true_type	access:public
propagate_on_container_swap	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_swap = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
propagate_on_container_swap	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_swap$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocs,_Alloc>	access:public
pthread_atfork	d:/include/pthread.h	/^extern int pthread_atfork (void (*__prepare) (void),$/;"	p	typeref:typename:int	signature:(void (* __prepare)(void),void (* __parent)(void),void (* __child)(void))
pthread_attr_destroy	d:/include/pthread.h	/^extern int pthread_attr_destroy (pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_attr_getaffinity_np	d:/include/pthread.h	/^extern int pthread_attr_getaffinity_np (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,size_t __cpusetsize,cpu_set_t * __cpuset)
pthread_attr_getdetachstate	d:/include/pthread.h	/^extern int pthread_attr_getdetachstate (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,int * __detachstate)
pthread_attr_getguardsize	d:/include/pthread.h	/^extern int pthread_attr_getguardsize (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,size_t * __guardsize)
pthread_attr_getinheritsched	d:/include/pthread.h	/^extern int pthread_attr_getinheritsched (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __inherit)
pthread_attr_getschedparam	d:/include/pthread.h	/^extern int pthread_attr_getschedparam (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,struct sched_param * __restrict __param)
pthread_attr_getschedpolicy	d:/include/pthread.h	/^extern int pthread_attr_getschedpolicy (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __policy)
pthread_attr_getscope	d:/include/pthread.h	/^extern int pthread_attr_getscope (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,int * __restrict __scope)
pthread_attr_getsigmask_np	d:/include/pthread.h	/^extern int pthread_attr_getsigmask_np (const pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr,__sigset_t * sigmask)
pthread_attr_getstack	d:/include/pthread.h	/^extern int pthread_attr_getstack (const pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,void ** __restrict __stackaddr,size_t * __restrict __stacksize)
pthread_attr_getstackaddr	d:/include/pthread.h	/^extern int pthread_attr_getstackaddr (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,void ** __restrict __stackaddr)
pthread_attr_getstacksize	d:/include/pthread.h	/^extern int pthread_attr_getstacksize (const pthread_attr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __restrict __attr,size_t * __restrict __stacksize)
pthread_attr_init	d:/include/pthread.h	/^extern int pthread_attr_init (pthread_attr_t *__attr) __THROW __nonnull ((1));$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_attr_setaffinity_np	d:/include/pthread.h	/^extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __cpusetsize,const cpu_set_t * __cpuset)
pthread_attr_setdetachstate	d:/include/pthread.h	/^extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __detachstate)
pthread_attr_setguardsize	d:/include/pthread.h	/^extern int pthread_attr_setguardsize (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __guardsize)
pthread_attr_setinheritsched	d:/include/pthread.h	/^extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __inherit)
pthread_attr_setschedparam	d:/include/pthread.h	/^extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __restrict __attr,const struct sched_param * __restrict __param)
pthread_attr_setschedpolicy	d:/include/pthread.h	/^extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __policy)
pthread_attr_setscope	d:/include/pthread.h	/^extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,int __scope)
pthread_attr_setsigmask_np	d:/include/pthread.h	/^extern int pthread_attr_setsigmask_np (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,const __sigset_t * sigmask)
pthread_attr_setstack	d:/include/pthread.h	/^extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,void * __stackaddr,size_t __stacksize)
pthread_attr_setstackaddr	d:/include/pthread.h	/^extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,void * __stackaddr)
pthread_attr_setstacksize	d:/include/pthread.h	/^extern int pthread_attr_setstacksize (pthread_attr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr,size_t __stacksize)
pthread_attr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef union pthread_attr_t pthread_attr_t;$/;"	t	typeref:union:pthread_attr_t
pthread_attr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^union pthread_attr_t$/;"	u
pthread_attr_t::__align	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  long int __align;$/;"	m	union:pthread_attr_t	typeref:typename:long int	access:public
pthread_attr_t::__size	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^  char __size[__SIZEOF_PTHREAD_ATTR_T];$/;"	m	union:pthread_attr_t	typeref:typename:char[]	access:public
pthread_barrier_destroy	d:/include/pthread.h	/^extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __barrier)
pthread_barrier_init	d:/include/pthread.h	/^extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __restrict __barrier,const pthread_barrierattr_t * __restrict __attr,unsigned int __count)
pthread_barrier_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_barrier_t;$/;"	t	typeref:union:__anon3fdbe2cb070a
pthread_barrier_wait	d:/include/pthread.h	/^extern int pthread_barrier_wait (pthread_barrier_t *__barrier)$/;"	p	typeref:typename:int	signature:(pthread_barrier_t * __barrier)
pthread_barrierattr_destroy	d:/include/pthread.h	/^extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr)
pthread_barrierattr_getpshared	d:/include/pthread.h	/^extern int pthread_barrierattr_getpshared (const pthread_barrierattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_barrierattr_t * __restrict __attr,int * __restrict __pshared)
pthread_barrierattr_init	d:/include/pthread.h	/^extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr)
pthread_barrierattr_setpshared	d:/include/pthread.h	/^extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_barrierattr_t * __attr,int __pshared)
pthread_barrierattr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_barrierattr_t;$/;"	t	typeref:union:__anon3fdbe2cb080a
pthread_cancel	d:/include/pthread.h	/^extern int pthread_cancel (pthread_t __th);$/;"	p	typeref:typename:int	signature:(pthread_t __th)
pthread_cleanup_pop	d:/include/pthread.h	/^#  define pthread_cleanup_pop(/;"	d	signature:(execute)
pthread_cleanup_pop	d:/include/pthread.h	/^# define pthread_cleanup_pop(/;"	d	signature:(execute)
pthread_cleanup_pop_restore_np	d:/include/pthread.h	/^#   define pthread_cleanup_pop_restore_np(/;"	d	signature:(execute)
pthread_cleanup_pop_restore_np	d:/include/pthread.h	/^#  define pthread_cleanup_pop_restore_np(/;"	d	signature:(execute)
pthread_cleanup_push	d:/include/pthread.h	/^#  define pthread_cleanup_push(/;"	d	signature:(routine,arg)
pthread_cleanup_push	d:/include/pthread.h	/^# define pthread_cleanup_push(/;"	d	signature:(routine,arg)
pthread_cleanup_push_defer_np	d:/include/pthread.h	/^#   define pthread_cleanup_push_defer_np(/;"	d	signature:(routine,arg)
pthread_cleanup_push_defer_np	d:/include/pthread.h	/^#  define pthread_cleanup_push_defer_np(/;"	d	signature:(routine,arg)
pthread_clockjoin_np	d:/include/pthread.h	/^#   define pthread_clockjoin_np __pthread_clockjoin_np6/;"	d
pthread_clockjoin_np	d:/include/pthread.h	/^extern int pthread_clockjoin_np (pthread_t __th, void **__thread_return,$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return,clockid_t __clockid,const struct timespec * __abstime)
pthread_cond_broadcast	d:/include/pthread.h	/^extern int pthread_cond_broadcast (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_clockwait	d:/include/pthread.h	/^#    define pthread_cond_clockwait __pthread_cond_clockwait6/;"	d
pthread_cond_clockwait	d:/include/pthread.h	/^extern int pthread_cond_clockwait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex,__clockid_t __clock_id,const struct timespec * __restrict __abstime)
pthread_cond_destroy	d:/include/pthread.h	/^extern int pthread_cond_destroy (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_init	d:/include/pthread.h	/^extern int pthread_cond_init (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,const pthread_condattr_t * __restrict __cond_attr)
pthread_cond_signal	d:/include/pthread.h	/^extern int pthread_cond_signal (pthread_cond_t *__cond)$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __cond)
pthread_cond_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_cond_t;$/;"	t	typeref:union:__anon3fdbe2cb040a
pthread_cond_timedwait	d:/include/pthread.h	/^#   define pthread_cond_timedwait __pthread_cond_timedwait6/;"	d
pthread_cond_timedwait	d:/include/pthread.h	/^extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex,const struct timespec * __restrict __abstime)
pthread_cond_wait	d:/include/pthread.h	/^extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,$/;"	p	typeref:typename:int	signature:(pthread_cond_t * __restrict __cond,pthread_mutex_t * __restrict __mutex)
pthread_condattr_destroy	d:/include/pthread.h	/^extern int pthread_condattr_destroy (pthread_condattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr)
pthread_condattr_getclock	d:/include/pthread.h	/^extern int pthread_condattr_getclock (const pthread_condattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_condattr_t * __restrict __attr,__clockid_t * __restrict __clock_id)
pthread_condattr_getpshared	d:/include/pthread.h	/^extern int pthread_condattr_getpshared (const pthread_condattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_condattr_t * __restrict __attr,int * __restrict __pshared)
pthread_condattr_init	d:/include/pthread.h	/^extern int pthread_condattr_init (pthread_condattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr)
pthread_condattr_setclock	d:/include/pthread.h	/^extern int pthread_condattr_setclock (pthread_condattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr,__clockid_t __clock_id)
pthread_condattr_setpshared	d:/include/pthread.h	/^extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_condattr_t * __attr,int __pshared)
pthread_condattr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_condattr_t;$/;"	t	typeref:union:__anon3fdbe2cb020a
pthread_create	d:/include/pthread.h	/^extern int pthread_create (pthread_t *__restrict __newthread,$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(pthread_t * __restrict __newthread,const pthread_attr_t * __restrict __attr,void * (* __start_routine)(void *),void * __restrict __arg)
pthread_detach	d:/include/pthread.h	/^extern int pthread_detach (pthread_t __th) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_t __th)
pthread_equal	d:/include/pthread.h	/^extern int pthread_equal (pthread_t __thread1, pthread_t __thread2)$/;"	p	typeref:typename:int	signature:(pthread_t __thread1,pthread_t __thread2)
pthread_exit	d:/include/pthread.h	/^extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));$/;"	p	typeref:typename:void	signature:(void * __retval)
pthread_getaffinity_np	d:/include/pthread.h	/^extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(pthread_t __th,size_t __cpusetsize,cpu_set_t * __cpuset)
pthread_getattr_default_np	d:/include/pthread.h	/^extern int pthread_getattr_default_np (pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_attr_t * __attr)
pthread_getattr_np	d:/include/pthread.h	/^extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_t __th,pthread_attr_t * __attr)
pthread_getconcurrency	d:/include/pthread.h	/^extern int pthread_getconcurrency (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
pthread_getcpuclockid	d:/include/pthread.h	/^extern int pthread_getcpuclockid (pthread_t __thread_id,$/;"	p	typeref:typename:int	signature:(pthread_t __thread_id,__clockid_t * __clock_id)
pthread_getname_np	d:/include/pthread.h	/^extern int pthread_getname_np (pthread_t __target_thread, char *__buf,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,char * __buf,size_t __buflen)
pthread_getschedparam	d:/include/pthread.h	/^extern int pthread_getschedparam (pthread_t __target_thread,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int * __restrict __policy,struct sched_param * __restrict __param)
pthread_getspecific	d:/include/pthread.h	/^extern void *pthread_getspecific (pthread_key_t __key) __THROW;$/;"	p	typeref:typename:void *	signature:(pthread_key_t __key)
pthread_join	d:/include/pthread.h	/^extern int pthread_join (pthread_t __th, void **__thread_return);$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return)
pthread_key_create	d:/include/pthread.h	/^extern int pthread_key_create (pthread_key_t *__key,$/;"	p	typeref:typename:int	signature:(pthread_key_t * __key,void (* __destr_function)(void *))
pthread_key_delete	d:/include/pthread.h	/^extern int pthread_key_delete (pthread_key_t __key) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_key_t __key)
pthread_key_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef unsigned int pthread_key_t;$/;"	t	typeref:typename:unsigned int
pthread_mutex_clocklock	d:/include/pthread.h	/^#   define pthread_mutex_clocklock __pthread_mutex_clocklock6/;"	d
pthread_mutex_clocklock	d:/include/pthread.h	/^extern int pthread_mutex_clocklock (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_mutex_consistent	d:/include/pthread.h	/^extern int pthread_mutex_consistent (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_consistent_np	d:/include/pthread.h	/^#   define pthread_mutex_consistent_np /;"	d
pthread_mutex_destroy	d:/include/pthread.h	/^extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_getprioceiling	d:/include/pthread.h	/^extern int pthread_mutex_getprioceiling (const pthread_mutex_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutex_t * __restrict __mutex,int * __restrict __prioceiling)
pthread_mutex_init	d:/include/pthread.h	/^extern int pthread_mutex_init (pthread_mutex_t *__mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex,const pthread_mutexattr_t * __mutexattr)
pthread_mutex_lock	d:/include/pthread.h	/^extern int pthread_mutex_lock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_setprioceiling	d:/include/pthread.h	/^extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,int __prioceiling,int * __restrict __old_ceiling)
pthread_mutex_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_mutex_t;$/;"	t	typeref:union:__anon3fdbe2cb030a
pthread_mutex_timedlock	d:/include/pthread.h	/^#   define pthread_mutex_timedlock __pthread_mutex_timedlock6/;"	d
pthread_mutex_timedlock	d:/include/pthread.h	/^extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __restrict __mutex,const struct timespec * __restrict __abstime)
pthread_mutex_trylock	d:/include/pthread.h	/^extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutex_unlock	d:/include/pthread.h	/^extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)$/;"	p	typeref:typename:int	signature:(pthread_mutex_t * __mutex)
pthread_mutexattr_destroy	d:/include/pthread.h	/^extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr)
pthread_mutexattr_getprioceiling	d:/include/pthread.h	/^extern int pthread_mutexattr_getprioceiling (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __prioceiling)
pthread_mutexattr_getprotocol	d:/include/pthread.h	/^extern int pthread_mutexattr_getprotocol (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __protocol)
pthread_mutexattr_getpshared	d:/include/pthread.h	/^extern int pthread_mutexattr_getpshared (const pthread_mutexattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __pshared)
pthread_mutexattr_getrobust	d:/include/pthread.h	/^extern int pthread_mutexattr_getrobust (const pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __attr,int * __robustness)
pthread_mutexattr_getrobust_np	d:/include/pthread.h	/^#   define pthread_mutexattr_getrobust_np /;"	d
pthread_mutexattr_gettype	d:/include/pthread.h	/^extern int pthread_mutexattr_gettype (const pthread_mutexattr_t *__restrict$/;"	p	typeref:typename:int	signature:(const pthread_mutexattr_t * __restrict __attr,int * __restrict __kind)
pthread_mutexattr_init	d:/include/pthread.h	/^extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr)
pthread_mutexattr_setprioceiling	d:/include/pthread.h	/^extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __prioceiling)
pthread_mutexattr_setprotocol	d:/include/pthread.h	/^extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __protocol)
pthread_mutexattr_setpshared	d:/include/pthread.h	/^extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __pshared)
pthread_mutexattr_setrobust	d:/include/pthread.h	/^extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __robustness)
pthread_mutexattr_setrobust_np	d:/include/pthread.h	/^#   define pthread_mutexattr_setrobust_np /;"	d
pthread_mutexattr_settype	d:/include/pthread.h	/^extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)$/;"	p	typeref:typename:int	signature:(pthread_mutexattr_t * __attr,int __kind)
pthread_mutexattr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_mutexattr_t;$/;"	t	typeref:union:__anon3fdbe2cb010a
pthread_once	d:/include/pthread.h	/^extern int pthread_once (pthread_once_t *__once_control,$/;"	p	typeref:typename:int	signature:(pthread_once_t * __once_control,void (* __init_routine)(void))
pthread_once_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef int __ONCE_ALIGNMENT pthread_once_t;$/;"	t	typeref:typename:int __ONCE_ALIGNMENT
pthread_rwlock_clockrdlock	d:/include/pthread.h	/^#    define pthread_rwlock_clockrdlock __pthread_rwlock_clockrdlock6/;"	d
pthread_rwlock_clockrdlock	d:/include/pthread.h	/^extern int pthread_rwlock_clockrdlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_rwlock_clockwrlock	d:/include/pthread.h	/^#    define pthread_rwlock_clockwrlock __pthread_rwlock_clockwrlock6/;"	d
pthread_rwlock_clockwrlock	d:/include/pthread.h	/^extern int pthread_rwlock_clockwrlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,clockid_t __clockid,const struct timespec * __restrict __abstime)
pthread_rwlock_destroy	d:/include/pthread.h	/^extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_init	d:/include/pthread.h	/^extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const pthread_rwlockattr_t * __restrict __attr)
pthread_rwlock_rdlock	d:/include/pthread.h	/^extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_rwlock_t;$/;"	t	typeref:union:__anon3fdbe2cb050a
pthread_rwlock_timedrdlock	d:/include/pthread.h	/^#    define pthread_rwlock_timedrdlock __pthread_rwlock_timedrdlock6/;"	d
pthread_rwlock_timedrdlock	d:/include/pthread.h	/^extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const struct timespec * __restrict __abstime)
pthread_rwlock_timedwrlock	d:/include/pthread.h	/^#    define pthread_rwlock_timedwrlock __pthread_rwlock_timedwrlock6/;"	d
pthread_rwlock_timedwrlock	d:/include/pthread.h	/^extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __restrict __rwlock,const struct timespec * __restrict __abstime)
pthread_rwlock_tryrdlock	d:/include/pthread.h	/^extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_trywrlock	d:/include/pthread.h	/^extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_unlock	d:/include/pthread.h	/^extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlock_wrlock	d:/include/pthread.h	/^extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)$/;"	p	typeref:typename:int	signature:(pthread_rwlock_t * __rwlock)
pthread_rwlockattr_destroy	d:/include/pthread.h	/^extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr)
pthread_rwlockattr_getkind_np	d:/include/pthread.h	/^extern int pthread_rwlockattr_getkind_np (const pthread_rwlockattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_rwlockattr_t * __restrict __attr,int * __restrict __pref)
pthread_rwlockattr_getpshared	d:/include/pthread.h	/^extern int pthread_rwlockattr_getpshared (const pthread_rwlockattr_t *$/;"	p	typeref:typename:int	signature:(const pthread_rwlockattr_t * __restrict __attr,int * __restrict __pshared)
pthread_rwlockattr_init	d:/include/pthread.h	/^extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr)
pthread_rwlockattr_setkind_np	d:/include/pthread.h	/^extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr,int __pref)
pthread_rwlockattr_setpshared	d:/include/pthread.h	/^extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,$/;"	p	typeref:typename:int	signature:(pthread_rwlockattr_t * __attr,int __pshared)
pthread_rwlockattr_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^} pthread_rwlockattr_t;$/;"	t	typeref:union:__anon3fdbe2cb060a
pthread_self	d:/include/pthread.h	/^extern pthread_t pthread_self (void) __THROW __attribute__ ((__const__));$/;"	p	typeref:typename:pthread_t	signature:(void)
pthread_setaffinity_np	d:/include/pthread.h	/^extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(pthread_t __th,size_t __cpusetsize,const cpu_set_t * __cpuset)
pthread_setattr_default_np	d:/include/pthread.h	/^extern int pthread_setattr_default_np (const pthread_attr_t *__attr)$/;"	p	typeref:typename:int	signature:(const pthread_attr_t * __attr)
pthread_setcancelstate	d:/include/pthread.h	/^extern int pthread_setcancelstate (int __state, int *__oldstate);$/;"	p	typeref:typename:int	signature:(int __state,int * __oldstate)
pthread_setcanceltype	d:/include/pthread.h	/^extern int pthread_setcanceltype (int __type, int *__oldtype);$/;"	p	typeref:typename:int	signature:(int __type,int * __oldtype)
pthread_setconcurrency	d:/include/pthread.h	/^extern int pthread_setconcurrency (int __level) __THROW;$/;"	p	typeref:typename:int	signature:(int __level)
pthread_setname_np	d:/include/pthread.h	/^extern int pthread_setname_np (pthread_t __target_thread, const char *__name)$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,const char * __name)
pthread_setschedparam	d:/include/pthread.h	/^extern int pthread_setschedparam (pthread_t __target_thread, int __policy,$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int __policy,const struct sched_param * __param)
pthread_setschedprio	d:/include/pthread.h	/^extern int pthread_setschedprio (pthread_t __target_thread, int __prio)$/;"	p	typeref:typename:int	signature:(pthread_t __target_thread,int __prio)
pthread_setspecific	d:/include/pthread.h	/^extern int pthread_setspecific (pthread_key_t __key,$/;"	p	typeref:typename:int	signature:(pthread_key_t __key,const void * __pointer)
pthread_spin_destroy	d:/include/pthread.h	/^extern int pthread_spin_destroy (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_init	d:/include/pthread.h	/^extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock,int __pshared)
pthread_spin_lock	d:/include/pthread.h	/^extern int pthread_spin_lock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_trylock	d:/include/pthread.h	/^extern int pthread_spin_trylock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spin_unlock	d:/include/pthread.h	/^extern int pthread_spin_unlock (pthread_spinlock_t *__lock)$/;"	p	typeref:typename:int	signature:(pthread_spinlock_t * __lock)
pthread_spinlock_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef volatile int pthread_spinlock_t;$/;"	t	typeref:typename:volatile int
pthread_t	d:/include/x86_64-linux-gnu/bits/pthreadtypes.h	/^typedef unsigned long int pthread_t;$/;"	t	typeref:typename:unsigned long int
pthread_testcancel	d:/include/pthread.h	/^extern void pthread_testcancel (void);$/;"	p	typeref:typename:void	signature:(void)
pthread_timedjoin_np	d:/include/pthread.h	/^#   define pthread_timedjoin_np __pthread_timedjoin_np6/;"	d
pthread_timedjoin_np	d:/include/pthread.h	/^extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return,const struct timespec * __abstime)
pthread_tryjoin_np	d:/include/pthread.h	/^extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) __THROW;$/;"	p	typeref:typename:int	signature:(pthread_t __th,void ** __thread_return)
pthread_yield	d:/include/pthread.h	/^#  define pthread_yield /;"	d
pthread_yield	d:/include/pthread.h	/^extern int pthread_yield (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
ptr_fun	d:/include/c++/14/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (* __x)(_Arg))
ptr_fun	d:/include/c++/14/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	signature:(_Result (* __x)(_Arg1,_Arg2))
ptsname	../../../../../../usr/include/cygwin/stdlib.h	/^char *ptsname (int);$/;"	p	typeref:typename:char *	signature:(int)
ptsname_r	../../../../../../usr/include/cygwin/stdlib.h	/^int ptsname_r(int, char *, size_t);$/;"	p	typeref:typename:int	signature:(int,char *,size_t)
push_back	d:/include/c++/14/bits/basic_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_CharT __c)
push_back	d:/include/c++/14/bits/cow_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,double __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const void * __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long double __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
putc	d:/include/stdio.h	/^extern int putc (int __c, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
putc_unlocked	d:/include/stdio.h	/^extern int putc_unlocked (int __c, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
putchar	d:/include/stdio.h	/^extern int putchar (int __c);$/;"	p	typeref:typename:int	signature:(int __c)
putchar_unlocked	d:/include/stdio.h	/^extern int putchar_unlocked (int __c);$/;"	p	typeref:typename:int	signature:(int __c)
putenv	../../../../../../usr/include/stdlib.h	/^int	putenv (char *__string);$/;"	p	typeref:typename:int	signature:(char * __string)
puts	d:/include/stdio.h	/^extern int puts (const char *__s);$/;"	p	typeref:typename:int	signature:(const char * __s)
putw	d:/include/stdio.h	/^extern int putw (int __w, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __w,FILE * __stream)
putwc	d:/include/wchar.h	/^extern wint_t putwc (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
putwc_unlocked	d:/include/wchar.h	/^extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc,__FILE * __stream)
putwchar	d:/include/wchar.h	/^extern wint_t putwchar (wchar_t __wc);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc)
putwchar_unlocked	d:/include/wchar.h	/^extern wint_t putwchar_unlocked (wchar_t __wc);$/;"	p	typeref:typename:wint_t	signature:(wchar_t __wc)
pword	d:/include/c++/14/bits/ios_base.h	/^    pword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
qsort	../../../../../../usr/include/stdlib.h	/^void	qsort (void *__base, size_t __nmemb, size_t __size, __compar_fn_t _compar);$/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,__compar_fn_t _compar)
qsort_r	../../../../../../usr/include/stdlib.h	/^#  define qsort_r __bsd_qsort_r$/;"	d
qsort_r	../../../../../../usr/include/stdlib.h	/^void	qsort_r (void *__base, size_t __nmemb, size_t __size, int (*_compar)(const void *, const vo/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,int (* _compar)(const void *,const void *,void *),void * __thunk)
qsort_r	../../../../../../usr/include/stdlib.h	/^void	qsort_r (void *__base, size_t __nmemb, size_t __size, void *__thunk, int (*_compar)(void *,/;"	p	typeref:typename:void	signature:(void * __base,size_t __nmemb,size_t __size,void * __thunk,int (* _compar)(void *,const void *,const void *))
quick_exit	../../../../../../usr/include/stdlib.h	/^	quick_exit(int);$/;"	p	typeref:typename:_Noreturn void	signature:(int)
quot	../../../../../../usr/include/stdlib.h	/^  int quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
quot	../../../../../../usr/include/stdlib.h	/^  long long int quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
quot	../../../../../../usr/include/stdlib.h	/^  long quot; \/* quotient *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long	access:public
rand	../../../../../../usr/include/stdlib.h	/^int	rand (void);$/;"	p	typeref:typename:int	signature:(void)
rand_r	../../../../../../usr/include/stdlib.h	/^int	rand_r (unsigned *__seed);$/;"	p	typeref:typename:int	signature:(unsigned * __seed)
random	../../../../../../usr/include/stdlib.h	/^long	random (void);$/;"	p	typeref:typename:long	signature:(void)
random_access_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
ranges	d:/include/c++/14/bits/utility.h	/^  namespace ranges::__detail$/;"	n	namespace:std
raw_storage_iterator	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      raw_storage_iterator(_OutputIterator __x)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_OutputIterator __x)
raw_storage_iterator	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^    class _GLIBCXX17_DEPRECATED raw_storage_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
rbegin	d:/include/c++/14/bits/basic_string.h	/^      rbegin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reverse_iterator	access:public	signature:()
rbegin	d:/include/c++/14/bits/basic_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
rbegin	d:/include/c++/14/bits/cow_string.h	/^      rbegin() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rbegin	d:/include/c++/14/bits/cow_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(_Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rbegin ())	signature:(_Container & __cont)
rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rbegin ())	signature:(const _Container & __cont)
rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      rdbuf() const$/;"	f	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
rdstate	d:/include/c++/14/bits/basic_ios.h	/^      rdstate() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
read	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_read_function_t *read;		\/* Read bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_read_function_t *	access:public
realloc	../../../../../../usr/include/stdlib.h	/^void	*realloc(void *, size_t) __result_use_check __alloc_size(2) _NOTHROW;$/;"	p	typeref:typename:void *	signature:(void *,size_t)
reallocarray	../../../../../../usr/include/stdlib.h	/^void	*reallocarray(void *, size_t, size_t) __result_use_check __alloc_size2(2, 3);$/;"	p	typeref:typename:void *	signature:(void *,size_t,size_t)
reallocf	../../../../../../usr/include/stdlib.h	/^void	*reallocf(void *, size_t) __result_use_check __alloc_size(2);$/;"	p	typeref:typename:void *	signature:(void *,size_t)
realpath	../../../../../../usr/include/stdlib.h	/^char *	realpath (const char *__restrict path, char *__restrict resolved_path);$/;"	p	typeref:typename:char *	signature:(const char * __restrict path,char * __restrict resolved_path)
rebind	d:/include/c++/14/bits/allocator.h	/^	struct rebind$/;"	s	class:std::allocator	access:public
rebind	d:/include/c++/14/bits/new_allocator.h	/^	struct rebind$/;"	s	class:std::__new_allocator	access:public
rebind	d:/include/c++/14/bits/ptr_traits.h	/^	using rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__detected_or_t<__replace_first_arg<_Ptr,_Up>,__rebind,_Ptr,_Up>::type	access:public
rebind	d:/include/c++/14/bits/ptr_traits.h	/^      template<typename _Up> using rebind = _Up*;$/;"	t	struct:std::pointer_traits	typeref:typename:_Up *	access:public
rebind	d:/include/c++/14/ext/alloc_traits.h	/^      struct rebind$/;"	s	struct:__gnu_cxx::__alloc_traits	access:public
rebind_alloc	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:__alloc_rebind<_Alloc,_Tp>	access:public
rebind_alloc	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_alloc = allocator<_Up>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Up>	access:public
rebind_traits	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<allocator<_Up>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<allocator<_Up>>	access:public
rebind_traits	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<rebind_alloc<_Tp>>	access:public
ref	d:/include/c++/14/bits/refwrap.h	/^    ref(_Tp& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<_Tp>	signature:(_Tp & __t)
ref	d:/include/c++/14/bits/refwrap.h	/^    ref(reference_wrapper<_Tp> __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<_Tp>	signature:(reference_wrapper<_Tp> __t)
ref	d:/include/c++/14/bits/refwrap.h	/^    void ref(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Tp &&)
reference	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::allocator	typeref:typename:_Tp &	access:public
reference	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::reference		reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::reference	access:public
reference	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_type::reference	    reference;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_type::reference	access:public
reference	d:/include/c++/14/bits/cow_string.h	/^      typedef value_type&				    reference;$/;"	t	class:std::basic_string	typeref:typename:value_type &	access:public
reference	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp &	access:public
reference	d:/include/c++/14/bits/shared_ptr_base.h	/^		using reference = const _Up&;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up &	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::reference		reference;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::reference	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::reference 	reference;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::reference	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_reference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_reference_t<_It>	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_reference_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_reference_t<_Iterator>	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_rvalue_reference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_rvalue_reference_t<_Iterator>	access:public
reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference$/;"	t	class:std::move_iterator	typeref:typename:__conditional_t<is_reference<__base_ref>::value,typename remove_reference<__base_ref>::type &&,__base_ref>	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	typeref:typename:_Reference	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using reference	      = _Tp&;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
reference	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT& reference; \/\/ Changed to _CharT by LWG 445$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT &	access:public
reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::reference              reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::reference	access:public
reference	d:/include/c++/14/ext/alloc_traits.h	/^    typedef value_type&                             reference;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:value_type &	access:public
reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^	reference_wrapper(_Up&& __uref)$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Up && __uref)
reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^      reference_wrapper(const reference_wrapper&) = default;$/;"	p	class:std::reference_wrapper	access:public	signature:(const reference_wrapper &)
reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^    class reference_wrapper$/;"	c	namespace:std	inherits:_Reference_wrapper_base_memfun<typenameremove_cv<_Tp>::type>
reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^    reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;$/;"	p	namespace:std	signature:(_Tp &)
register_callback	d:/include/c++/14/bits/ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    reinterpret_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    reinterpret_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
relaxed	d:/include/c++/14/bits/atomic_base.h	/^      relaxed,$/;"	e	enum:std::memory_order	access:public
release	d:/include/c++/14/backward/auto_ptr.h	/^      release() throw()$/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:()
release	d:/include/c++/14/bits/atomic_base.h	/^      release,$/;"	e	enum:std::memory_order	access:public
release	d:/include/c++/14/bits/unique_ptr.h	/^      pointer release() noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:()
release	d:/include/c++/14/bits/unique_ptr.h	/^      release() noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:()
rem	../../../../../../usr/include/stdlib.h	/^  int rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80108	typeref:typename:int	access:public
rem	../../../../../../usr/include/stdlib.h	/^  long long int rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80308	typeref:typename:long long int	access:public
rem	../../../../../../usr/include/stdlib.h	/^  long rem; \/* remainder *\/$/;"	m	struct:__anonf3b68ce80208	typeref:typename:long	access:public
remove	d:/include/stdio.h	/^extern int remove (const char *__filename) __THROW;$/;"	p	typeref:typename:int	signature:(const char * __filename)
rename	d:/include/stdio.h	/^extern int rename (const char *__old, const char *__new) __THROW;$/;"	p	typeref:typename:int	signature:(const char * __old,const char * __new)
renameat	d:/include/stdio.h	/^extern int renameat (int __oldfd, const char *__old, int __newfd,$/;"	p	typeref:typename:int	signature:(int __oldfd,const char * __old,int __newfd,const char * __new)
renameat2	d:/include/stdio.h	/^extern int renameat2 (int __oldfd, const char *__old, int __newfd,$/;"	p	typeref:typename:int	signature:(int __oldfd,const char * __old,int __newfd,const char * __new,unsigned int __flags)
rend	d:/include/c++/14/bits/basic_string.h	/^      rend() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reverse_iterator	access:public	signature:()
rend	d:/include/c++/14/bits/basic_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
rend	d:/include/c++/14/bits/cow_string.h	/^      rend() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
rend	d:/include/c++/14/bits/cow_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
rend	d:/include/c++/14/bits/range_access.h	/^    rend(_Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rend ())	signature:(_Container & __cont)
rend	d:/include/c++/14/bits/range_access.h	/^    rend(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
rend	d:/include/c++/14/bits/range_access.h	/^    rend(const _Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rend ())	signature:(const _Container & __cont)
rend	d:/include/c++/14/bits/range_access.h	/^    rend(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
replace	d:/include/c++/14/bits/basic_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
replace	d:/include/c++/14/bits/basic_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
replace	d:/include/c++/14/bits/basic_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
replace	d:/include/c++/14/bits/basic_string.h	/^        replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:__enable_if_not_native_iterator<_InputIterator>::__type	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^      basic_string& replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,initializer_list<_CharT> __l)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,size_type __n,_CharT __c)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,_CharT * __k1,_CharT * __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __k1,const _CharT * __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s,size_type __n)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const basic_string & __str)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const_iterator __k1,const_iterator __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,iterator __k1,iterator __k2)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
replace	d:/include/c++/14/bits/cow_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
replace	d:/include/c++/14/bits/cow_string.h	/^	replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
replace	d:/include/c++/14/bits/cow_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
replace	d:/include/c++/14/bits/cow_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
replace	d:/include/c++/14/bits/cow_string.h	/^      basic_string& replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,initializer_list<_CharT> __l)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_CharT * __k1,_CharT * __k2)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s,size_type __n)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const basic_string & __str)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,iterator __k1,iterator __k2)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,size_type __n,_CharT __c)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __k1,const _CharT * __k2)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const_iterator __k1,const_iterator __k2)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
replace	d:/include/c++/14/bits/cow_string.h	/^     replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
requested_size	d:/include/c++/14/bits/stl_tempbuf.h	/^      requested_size() const$/;"	f	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment = __alignof__(_Fp);$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment = __alignof__(_Tp*);$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
reserve	d:/include/c++/14/bits/basic_string.h	/^      reserve();$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
reserve	d:/include/c++/14/bits/basic_string.h	/^      reserve(size_type __res_arg);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __res_arg)
reserve	d:/include/c++/14/bits/cow_string.h	/^      reserve();$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:()
reserve	d:/include/c++/14/bits/cow_string.h	/^      reserve(size_type __res_arg);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg)
reserve	d:/include/c++/14/bits/cow_string.h	/^    reserve()$/;"	f	class:std::basic_string	typeref:typename:void	signature:()
reserve	d:/include/c++/14/bits/cow_string.h	/^    reserve(size_type __res)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __res)
reset	d:/include/c++/14/backward/auto_ptr.h	/^      reset(element_type* __p = 0) throw()$/;"	f	class:std::auto_ptr	typeref:typename:void	access:public	signature:(element_type * __p=0)
reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p) \/\/ _Yp must be complete.$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p)
reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p,_Deleter __d)
reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
reset	d:/include/c++/14/bits/shared_ptr_base.h	/^      reset() noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void	access:public	signature:()
reset	d:/include/c++/14/bits/shared_ptr_base.h	/^      reset() noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:public	signature:()
reset	d:/include/c++/14/bits/unique_ptr.h	/^      reset(_Up __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(_Up __p)
reset	d:/include/c++/14/bits/unique_ptr.h	/^      reset(pointer __p = pointer()) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(pointer __p=pointer ())
reset	d:/include/c++/14/bits/unique_ptr.h	/^      void reset(nullptr_t = nullptr) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(nullptr_t=nullptr)
reset	d:/include/c++/14/bits/unique_ptr.h	/^      void reset(pointer __p) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(pointer __p)
resize	d:/include/c++/14/bits/basic_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n)
resize	d:/include/c++/14/bits/basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n,_CharT __c)
resize	d:/include/c++/14/bits/cow_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
resize	d:/include/c++/14/bits/cow_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
resize	d:/include/c++/14/bits/cow_string.h	/^    resize(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __n,_CharT __c)
resize_and_overwrite	d:/include/c++/14/bits/basic_string.h	/^	resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^	resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^    resize_and_overwrite(const size_type __n, _Operation __op)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(const size_type __n,_Operation __op)
result_type	d:/include/c++/14/bits/refwrap.h	/^      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;$/;"	t	struct:std::_Reference_wrapper_base_memfun	typeref:typename:_Mem_fn_traits<_MemFunPtr>::__result_type	access:public
result_type	d:/include/c++/14/bits/refwrap.h	/^      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;$/;"	t	struct:std::_Weak_result_type_memfun	typeref:typename:_Mem_fn_traits<_MemFunPtr>::__result_type	access:public
result_type	d:/include/c++/14/bits/refwrap.h	/^    { typedef _Res result_type; };$/;"	t	struct:std::_Weak_result_type_impl	typeref:typename:_Res	access:public
result_type	d:/include/c++/14/bits/refwrap.h	/^    { typedef typename _Functor::result_type result_type; };$/;"	t	struct:std::_Maybe_get_result_type	typeref:typename:_Functor::result_type	access:public
result_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Result 	result_type;  $/;"	t	struct:std::unary_function	typeref:typename:_Result	access:public
result_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Result 	result_type;$/;"	t	struct:std::binary_function	typeref:typename:_Result	access:public
rethrow_exception	d:/include/c++/14/bits/exception_ptr.h	/^  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(exception_ptr)
rethrow_if_nested	d:/include/c++/14/bits/nested_exception.h	/^    rethrow_if_nested(const _Ex& __ex)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex & __ex)
rethrow_nested	d:/include/c++/14/bits/nested_exception.h	/^    rethrow_nested() const$/;"	f	class:std::nested_exception	typeref:typename:void	access:public	signature:() const
return_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    return_temporary_buffer(_Tp* __p)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_DEPRECATED void	signature:(_Tp * __p)
reverse_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef std::reverse_iterator<iterator>		reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef std::reverse_iterator<iterator>		    reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:requires __convertible<_Iter> _GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator<_Iter> & __x)
reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator & __x)
reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator(iterator_type __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __x)
reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
rewind	d:/include/stdio.h	/^extern void rewind (FILE *__stream) __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
rfind	d:/include/c++/14/bits/basic_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/cow_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
right	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
right	d:/include/c++/14/bits/ios_base.h	/^  right(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
rpmatch	../../../../../../usr/include/stdlib.h	/^int	rpmatch (const char *response);$/;"	p	typeref:typename:int	signature:(const char * response)
scan_is	d:/include/c++/14/bits/locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_is	d:/include/c++/14/bits/locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scan_not	d:/include/c++/14/bits/locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
scan_not	d:/include/c++/14/bits/locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
scanf	d:/include/stdio.h	/^#   define scanf __isoc23_scanf$/;"	d
scanf	d:/include/stdio.h	/^#   define scanf __isoc99_scanf$/;"	d
scanf	d:/include/stdio.h	/^extern int scanf (const char *__restrict __format, ...) __wur;$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,...)
sched_attr	d:/include/x86_64-linux-gnu/bits/sched.h	/^struct sched_attr$/;"	s
sched_attr::sched_deadline	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_deadline;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_attr::sched_flags	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_flags;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_attr::sched_nice	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __s32 sched_nice;$/;"	m	struct:sched_attr	typeref:typename:__s32	access:public
sched_attr::sched_period	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_period;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_attr::sched_policy	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_policy;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_attr::sched_priority	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_priority;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_attr::sched_runtime	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_runtime;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_attr::sched_util_max	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_util_max;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_attr::sched_util_min	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_util_min;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_attr::size	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 size;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_deadline	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_deadline;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_flags	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_flags;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_get_priority_max	d:/include/sched.h	/^extern int sched_get_priority_max (int __algorithm) __THROW;$/;"	p	typeref:typename:int	signature:(int __algorithm)
sched_get_priority_min	d:/include/sched.h	/^extern int sched_get_priority_min (int __algorithm) __THROW;$/;"	p	typeref:typename:int	signature:(int __algorithm)
sched_getaffinity	d:/include/sched.h	/^extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,size_t __cpusetsize,cpu_set_t * __cpuset)
sched_getattr	d:/include/x86_64-linux-gnu/bits/sched.h	/^int sched_getattr (pid_t tid, struct sched_attr *attr, unsigned int size,$/;"	p	typeref:typename:int	signature:(pid_t tid,struct sched_attr * attr,unsigned int size,unsigned int flags)
sched_getcpu	d:/include/x86_64-linux-gnu/bits/sched.h	/^extern int sched_getcpu (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
sched_getparam	d:/include/sched.h	/^extern int sched_getparam (__pid_t __pid, struct sched_param *__param) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid,struct sched_param * __param)
sched_getscheduler	d:/include/sched.h	/^extern int sched_getscheduler (__pid_t __pid) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid)
sched_nice	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __s32 sched_nice;$/;"	m	struct:sched_attr	typeref:typename:__s32	access:public
sched_param	d:/include/x86_64-linux-gnu/bits/sched.h	/^#   define sched_param __glibc_mask_sched_param$/;"	d
sched_param	d:/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^struct sched_param$/;"	s
sched_param::sched_priority	d:/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^  int sched_priority;$/;"	m	struct:sched_param	typeref:typename:int	access:public
sched_period	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_period;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_policy	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_policy;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_priority	d:/include/sched.h	/^#define sched_priority    sched_priority$/;"	d
sched_priority	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_priority;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_priority	d:/include/x86_64-linux-gnu/bits/types/struct_sched_param.h	/^  int sched_priority;$/;"	m	struct:sched_param	typeref:typename:int	access:public
sched_rr_get_interval	d:/include/sched.h	/^#  define sched_rr_get_interval __sched_rr_get_interval6/;"	d
sched_rr_get_interval	d:/include/sched.h	/^extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) __THROW;$/;"	p	typeref:typename:int	signature:(__pid_t __pid,struct timespec * __t)
sched_runtime	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u64 sched_runtime;$/;"	m	struct:sched_attr	typeref:typename:__u64	access:public
sched_setaffinity	d:/include/sched.h	/^extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,size_t __cpusetsize,const cpu_set_t * __cpuset)
sched_setattr	d:/include/x86_64-linux-gnu/bits/sched.h	/^int sched_setattr (pid_t tid, struct sched_attr *attr, unsigned int flags)$/;"	p	typeref:typename:int	signature:(pid_t tid,struct sched_attr * attr,unsigned int flags)
sched_setparam	d:/include/sched.h	/^extern int sched_setparam (__pid_t __pid, const struct sched_param *__param)$/;"	p	typeref:typename:__BEGIN_DECLS int	signature:(__pid_t __pid,const struct sched_param * __param)
sched_setscheduler	d:/include/sched.h	/^extern int sched_setscheduler (__pid_t __pid, int __policy,$/;"	p	typeref:typename:int	signature:(__pid_t __pid,int __policy,const struct sched_param * __param)
sched_util_max	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_util_max;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_util_min	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 sched_util_min;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
sched_yield	d:/include/sched.h	/^extern int sched_yield (void) __THROW;$/;"	p	typeref:typename:int	signature:(void)
scientific	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
scientific	d:/include/c++/14/bits/ios_base.h	/^  scientific(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
search	d:/include/c++/14/bits/stl_algobase.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
second	d:/include/c++/14/bits/stl_pair.h	/^      _T2 second;                \/\/\/< The second member$/;"	m	struct:std::pair	typeref:typename:_T2	access:public
second_argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::second_argument_type second_argument_type;$/;"	t	struct:std::_Refwrap_base_arg2	typeref:typename:_Tp::second_argument_type	access:public
second_argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg2 	second_argument_type;$/;"	t	struct:std::binary_function	typeref:typename:_Arg2	access:public
second_type	d:/include/c++/14/bits/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/< The type of the `second` member$/;"	t	struct:std::pair	typeref:typename:_T2	access:public
secure_getenv	../../../../../../usr/include/stdlib.h	/^char *  secure_getenv (const char *__string);$/;"	p	typeref:typename:char *	signature:(const char * __string)
seed48	../../../../../../usr/include/stdlib.h	/^       seed48 (unsigned short [3]);$/;"	p	typeref:typename:unsigned short *	signature:(unsigned short[3])
seek	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_seek_function_t *seek;		\/* Seek\/tell file position.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_seek_function_t *	access:public
seekdir	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
select_on_container_copy_construction	d:/include/c++/14/bits/alloc_traits.h	/^      select_on_container_copy_construction(const _Alloc& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR _Alloc	access:public	signature:(const _Alloc & __rhs)
select_on_container_copy_construction	d:/include/c++/14/bits/alloc_traits.h	/^      select_on_container_copy_construction(const allocator_type& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:(const allocator_type & __rhs)
seq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr sequenced_policy seq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE sequenced_policy
seq_cst	d:/include/c++/14/bits/atomic_base.h	/^      seq_cst$/;"	e	enum:std::memory_order	access:public
sequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class sequenced_policy$/;"	c	namespace:__pstl::execution::v1
set_rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
setbuf	d:/include/stdio.h	/^extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __THROW$/;"	p	typeref:typename:void	signature:(FILE * __restrict __stream,char * __restrict __buf)
setbuffer	d:/include/stdio.h	/^extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,$/;"	p	typeref:typename:void	signature:(FILE * __restrict __stream,char * __restrict __buf,size_t __size)
setenv	../../../../../../usr/include/stdlib.h	/^int	setenv (const char *__string, const char *__value, int __overwrite);$/;"	p	typeref:typename:int	signature:(const char * __string,const char * __value,int __overwrite)
setf	d:/include/c++/14/bits/ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
setf	d:/include/c++/14/bits/ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
setkey	../../../../../../usr/include/stdlib.h	/^void	setkey (const char *__key);$/;"	p	typeref:typename:void	signature:(const char * __key)
setlinebuf	d:/include/stdio.h	/^extern void setlinebuf (FILE *__stream) __THROW __nonnull ((1));$/;"	p	typeref:typename:void	signature:(FILE * __stream)
setlocale	d:/include/locale.h	/^extern char *setlocale (int __category, const char *__locale) __THROW;$/;"	p	typeref:typename:char *	signature:(int __category,const char * __locale)
setns	d:/include/x86_64-linux-gnu/bits/sched.h	/^extern int setns (int __fd, int __nstype) __THROW;$/;"	p	typeref:typename:int	signature:(int __fd,int __nstype)
setprogname	../../../../../../usr/include/cygwin/stdlib.h	/^void	setprogname (const char *);$/;"	p	typeref:typename:void	signature:(const char *)
setstate	../../../../../../usr/include/stdlib.h	/^char *	setstate (char *);$/;"	p	typeref:typename:char *	signature:(char *)
setstate	d:/include/c++/14/bits/basic_ios.h	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
setvbuf	d:/include/stdio.h	/^extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __stream,char * __restrict __buf,int __modes,size_t __n)
shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      shared_from_this() const$/;"	f	class:std::enable_shared_from_this	typeref:typename:shared_ptr<const _Tp>	access:public	signature:() const
shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      shared_from_this()$/;"	f	class:std::enable_shared_from_this	typeref:typename:shared_ptr<_Tp>	access:public	signature:()
shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      shared_from_this() const$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__shared_ptr<const _Tp,_Lp>	access:public	signature:() const
shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      shared_from_this()$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__shared_ptr<_Tp,_Lp>	access:public	signature:()
shared_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)$/;"	f	class:std::shared_ptr	signature:(std::auto_ptr<_Tp1> && __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	explicit shared_ptr(const weak_ptr<_Yp>& __r)$/;"	f	class:std::shared_ptr	access:public	signature:(const weak_ptr<_Yp> & __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)$/;"	f	class:std::shared_ptr	access:private	signature:(_Sp_alloc_shared_tag<_Alloc> __tag,_Args &&...__args)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p, _Deleter __d)$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(auto_ptr<_Yp>&& __r);$/;"	p	class:std::shared_ptr	access:public	signature:(auto_ptr<_Yp> && __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::shared_ptr	access:private	signature:(const _Sp_counted_array_base<_Alloc> & __a,_Init __init=nullptr)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(const shared_ptr<_Yp> & __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(const shared_ptr<_Yp> & __r,element_type * __p)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(nullptr_t __p, _Deleter __d)$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d,_Alloc __a)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(shared_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr<_Yp> && __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(shared_ptr<_Yp>&& __r, element_type* __p) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr<_Yp> && __r,element_type * __p)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::shared_ptr	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }$/;"	f	class:std::shared_ptr	access:public	signature:()
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(const shared_ptr&) noexcept = default; \/\/\/< Copy constructor$/;"	p	class:std::shared_ptr	access:public	signature:(const shared_ptr &)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::shared_ptr	access:private	signature:(const weak_ptr<_Tp> & __r,std::nothrow_t)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(shared_ptr&& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr && __r)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    class shared_ptr : public __shared_ptr<_Tp>$/;"	c	namespace:std	inherits:__shared_ptr<_Tp>
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    shared_ptr(unique_ptr<_Tp, _Del>) ->  shared_ptr<_Tp>;$/;"	p	namespace:std	signature:(unique_ptr<_Tp,_Del>)
shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;$/;"	p	namespace:std	signature:(weak_ptr<_Tp>)
showbase	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showbase	d:/include/c++/14/bits/ios_base.h	/^  showbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpoint	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpoint	d:/include/c++/14/bits/ios_base.h	/^  showpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
showpos	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
showpos	d:/include/c++/14/bits/ios_base.h	/^  showpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
shrink_to_fit	d:/include/c++/14/bits/basic_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
shrink_to_fit	d:/include/c++/14/bits/cow_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
size	d:/include/c++/14/bits/basic_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
size	d:/include/c++/14/bits/cow_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
size	d:/include/c++/14/bits/range_access.h	/^    size(const _Container& __cont) noexcept(noexcept(__cont.size()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
size	d:/include/c++/14/bits/range_access.h	/^    size(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:size_t	signature:(const _Tp (&)[_Nm])
size	d:/include/c++/14/bits/stl_tempbuf.h	/^      size() const$/;"	f	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
size	d:/include/c++/14/bits/utility.h	/^      static constexpr size_t size() noexcept { return sizeof...(_Idx); }$/;"	f	struct:std::integer_sequence	typeref:typename:size_t	access:public	signature:()
size	d:/include/x86_64-linux-gnu/bits/sched.h	/^  __u32 size;$/;"	m	struct:sched_attr	typeref:typename:__u32	access:public
size_type	d:/include/c++/14/bits/alloc_traits.h	/^      using size_type = std::size_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::size_t	access:public
size_type	d:/include/c++/14/bits/alloc_traits.h	/^      using size_type = typename _Size<_Alloc, difference_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Size<_Alloc,difference_type>::type	access:public
size_type	d:/include/c++/14/bits/allocator.h	/^      typedef size_t      size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
size_type	d:/include/c++/14/bits/allocator.h	/^      typedef size_t     size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
size_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::size_type		size_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::size_type	access:public
size_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::size_type	    size_type;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::size_type	access:public
size_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::size_t     size_type;$/;"	t	class:std::__new_allocator	typeref:typename:std::size_t	access:public
size_type	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	t	class:std::_Temporary_buffer	typeref:typename:ptrdiff_t	access:public
size_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::size_type              size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::size_type	access:public
size_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::size_type          size_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::size_type	access:public
skipws	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
skipws	d:/include/c++/14/bits/ios_base.h	/^  skipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
snprintf	d:/include/stdio.h	/^extern int snprintf (char *__restrict __s, size_t __maxlen,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,size_t __maxlen,const char * __restrict __format,...)
sp	move_shared_ptr.cpp	/^  std::shared_ptr<int> sp;$/;"	m	class:SharedInt	typeref:typename:std::shared_ptr<int>	file:	access:private
sprintf	d:/include/stdio.h	/^extern int sprintf (char *__restrict __s,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,const char * __restrict __format,...)
srand	../../../../../../usr/include/stdlib.h	/^void	srand (unsigned __seed);$/;"	p	typeref:typename:void	signature:(unsigned __seed)
srand48	../../../../../../usr/include/stdlib.h	/^void  srand48 (long);$/;"	p	typeref:typename:void	signature:(long)
srandom	../../../../../../usr/include/stdlib.h	/^void	srandom (unsigned);$/;"	p	typeref:typename:void	signature:(unsigned)
sscanf	d:/include/stdio.h	/^#   define sscanf __isoc23_sscanf$/;"	d
sscanf	d:/include/stdio.h	/^#   define sscanf __isoc99_sscanf$/;"	d
sscanf	d:/include/stdio.h	/^extern int sscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,...)
ssize	d:/include/c++/14/bits/range_access.h	/^    ssize(const _Container& __cont)$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
ssize	d:/include/c++/14/bits/range_access.h	/^    ssize(const _Tp (&)[_Num]) noexcept$/;"	f	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Tp (&)[_Num])
ssize_t	d:/include/stdio.h	/^typedef __ssize_t ssize_t;$/;"	t	typeref:typename:__ssize_t
starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
state	d:/include/c++/14/bits/postypes.h	/^      state() const$/;"	f	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
state	d:/include/c++/14/bits/postypes.h	/^      state(_StateT __st)$/;"	f	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef mbstate_t         state_type;$/;"	t	struct:std::char_traits	typeref:typename:mbstate_t	access:public
state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef std::mbstate_t  state_type;$/;"	t	struct:__gnu_cxx::_Char_types	typeref:typename:std::mbstate_t	access:public
state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef typename _Char_types<_CharT>::state_type  state_type;$/;"	t	struct:__gnu_cxx::char_traits	typeref:typename:_Char_types<_CharT>::state_type	access:public
static_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
static_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    static_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
static_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
std	d:/include/c++/14/backward/auto_ptr.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/backward/binders.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/align.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/alloc_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/allocated_ptr.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/allocator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/atomic_base.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/basic_ios.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/basic_string.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/char_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/charconv.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/cow_string.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/cpp_type_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/cxxabi_init_exception.h	/^namespace std$/;"	n
std	d:/include/c++/14/bits/exception.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/exception_ptr.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/functexcept.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/functional_hash.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/hash_bytes.h	/^namespace std$/;"	n
std	d:/include/c++/14/bits/invoke.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/ios_base.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/locale_classes.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/locale_facets.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/localefwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/memoryfwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/move.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/nested_exception.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/new_allocator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/ostream_insert.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/postypes.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/ptr_traits.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/range_access.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/refwrap.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/shared_ptr.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/shared_ptr_atomic.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/shared_ptr_base.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/std_abs.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_algobase.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_construct.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_function.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_iterator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_iterator_base_types.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_pair.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_tempbuf.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stl_uninitialized.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/streambuf_iterator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/stringfwd.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/unique_ptr.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/uses_allocator.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/bits/utility.h	/^namespace std _GLIBCXX_VISIBILITY(default)$/;"	n
std	d:/include/c++/14/debug/debug.h	/^namespace std$/;"	n
std	d:/include/c++/14/pstl/glue_memory_defs.h	/^namespace std$/;"	n
std::_Alloc::value_type	d:/include/c++/14/bits/alloc_traits.h	/^      typename _Alloc::value_type;$/;"	m	class:std::_Alloc	typeref:meta:typename
std::_BoundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _BoundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
std::_BoundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _BoundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<__is_array_known_bounds<_Tp>::value,_Tp>
std::_Build_index_tuple	d:/include/c++/14/bits/utility.h	/^    struct _Build_index_tuple$/;"	s	namespace:std
std::_Build_index_tuple::_IdxTuple	d:/include/c++/14/bits/utility.h	/^	using _IdxTuple = _Index_tuple<_Indices...>;$/;"	t	struct:std::_Build_index_tuple	typeref:typename:_Index_tuple<_Indices...>	access:public
std::_Build_index_tuple::__type	d:/include/c++/14/bits/utility.h	/^      using __type = __make_integer_seq<_IdxTuple, size_t, _Num>;$/;"	t	struct:std::_Build_index_tuple	typeref:typename:__make_integer_seq<_IdxTuple,size_t,_Num>	access:public
std::_Construct	d:/include/c++/14/bits/stl_construct.h	/^    _Construct(_T1* __p, const _T2& __value)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p,const _T2 & __value)
std::_Construct	d:/include/c++/14/bits/stl_construct.h	/^    _Construct(_Tp* __p, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_Tp * __p,_Args &&...__args)
std::_Construct_novalue	d:/include/c++/14/bits/stl_construct.h	/^    _Construct_novalue(_T1* __p)$/;"	f	namespace:std	typeref:typename:void	signature:(_T1 * __p)
std::_Destroy	d:/include/c++/14/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
std::_Destroy	d:/include/c++/14/bits/alloc_traits.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
std::_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy(_Tp* __pointer)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Tp * __pointer)
std::_Destroy_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_aux$/;"	s	namespace:std
std::_Destroy_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_aux<true>$/;"	s	namespace:std
std::_Destroy_aux::__destroy	d:/include/c++/14/bits/stl_construct.h	/^	__destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::_Destroy_aux	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::_Destroy_aux::__destroy	d:/include/c++/14/bits/stl_construct.h	/^        __destroy(_ForwardIterator, _ForwardIterator) { }$/;"	f	struct:std::_Destroy_aux	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
std::_Destroy_n	d:/include/c++/14/bits/stl_construct.h	/^    _Destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::_Destroy_n_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_n_aux$/;"	s	namespace:std
std::_Destroy_n_aux	d:/include/c++/14/bits/stl_construct.h	/^    struct _Destroy_n_aux<true>$/;"	s	namespace:std
std::_Destroy_n_aux::__destroy_n	d:/include/c++/14/bits/stl_construct.h	/^	__destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
std::_Destroy_n_aux::__destroy_n	d:/include/c++/14/bits/stl_construct.h	/^        __destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	struct:std::_Destroy_n_aux	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __count)
std::_Fnv_hash_bytes	d:/include/c++/14/bits/hash_bytes.h	/^  _Fnv_hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
std::_Fnv_hash_impl	d:/include/c++/14/bits/functional_hash.h	/^  struct _Fnv_hash_impl$/;"	s	namespace:std
std::_Fnv_hash_impl::__hash_combine	d:/include/c++/14/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
std::_Fnv_hash_impl::hash	d:/include/c++/14/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
std::_Fnv_hash_impl::hash	d:/include/c++/14/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Fnv_hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (2166136261UL))
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::auto_ptr
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::auto_ptr_ref
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun1_ref_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun1_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun_ref_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::const_mem_fun_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun1_ref_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun1_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun_ref_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::mem_fun_t
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::pointer_to_binary_function
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:class:std::pointer_to_unary_function
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::binary_function
std::_GLIBCXX11_DEPRECATED	d:/include/c++/14/bits/stl_function.h	/^    } _GLIBCXX11_DEPRECATED;$/;"	v	namespace:std	typeref:struct:std::unary_function
std::_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/auto_ptr.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::unique_ptr");$/;"	v	namespace:std	typeref:class:std::auto_ptr
std::_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/binders.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::bind");$/;"	v	namespace:std	typeref:class:std::binder1st
std::_GLIBCXX11_DEPRECATED_SUGGEST	d:/include/c++/14/backward/binders.h	/^    } _GLIBCXX11_DEPRECATED_SUGGEST("std::bind");$/;"	v	namespace:std	typeref:class:std::binder2nd
std::_Hash_bytes	d:/include/c++/14/bits/hash_bytes.h	/^  _Hash_bytes(const void* __ptr, size_t __len, size_t __seed);$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION size_t	signature:(const void * __ptr,size_t __len,size_t __seed)
std::_Hash_impl	d:/include/c++/14/bits/functional_hash.h	/^  struct _Hash_impl$/;"	s	namespace:std
std::_Hash_impl::__hash_combine	d:/include/c++/14/bits/functional_hash.h	/^      __hash_combine(const _Tp& __val, size_t __hash)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val,size_t __hash)
std::_Hash_impl::hash	d:/include/c++/14/bits/functional_hash.h	/^      hash(const _Tp& __val)$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const _Tp & __val)
std::_Hash_impl::hash	d:/include/c++/14/bits/functional_hash.h	/^    hash(const void* __ptr, size_t __clength,$/;"	f	struct:std::_Hash_impl	typeref:typename:size_t	access:public	signature:(const void * __ptr,size_t __clength,size_t __seed=static_cast<size_t> (0xc70f6907UL))
std::_Identity	d:/include/c++/14/bits/stl_function.h	/^    struct _Identity$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::_Identity	d:/include/c++/14/bits/stl_function.h	/^  template<typename _Tp> struct _Identity<const _Tp> : _Identity<_Tp> { };$/;"	s	namespace:std	inherits:_Identity<_Tp>
std::_Identity::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:_Tp &	access:public	signature:(_Tp & __x) const
std::_Identity::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::_Identity	typeref:typename:const _Tp &	access:public	signature:(const _Tp & __x) const
std::_Index_tuple	d:/include/c++/14/bits/utility.h	/^  template<size_t... _Indexes> struct _Index_tuple { };$/;"	s	namespace:std
std::_Ios_Fmtflags	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Fmtflags $/;"	g	namespace:std
std::_Ios_Iostate	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Iostate$/;"	g	namespace:std
std::_Ios_Openmode	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Openmode $/;"	g	namespace:std
std::_Ios_Seekdir	d:/include/c++/14/bits/ios_base.h	/^  enum _Ios_Seekdir $/;"	g	namespace:std
std::_Maybe_get_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_get_result_type$/;"	s	namespace:std
std::_Maybe_get_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_get_result_type<_Functor,$/;"	s	namespace:std
std::_Maybe_get_result_type::result_type	d:/include/c++/14/bits/refwrap.h	/^    { typedef typename _Functor::result_type result_type; };$/;"	t	struct:std::_Maybe_get_result_type	typeref:typename:_Functor::result_type	access:public
std::_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function { };$/;"	s	namespace:std
std::_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function<_Res, _T1, _T2>$/;"	s	namespace:std	inherits:std::binary_function<_T1,_T2,_Res>
std::_Maybe_unary_or_binary_function	d:/include/c++/14/bits/refwrap.h	/^    struct _Maybe_unary_or_binary_function<_Res, _T1>$/;"	s	namespace:std	inherits:std::unary_function<_T1,_Res>
std::_Mem_fn_traits_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Mem_fn_traits_base$/;"	s	namespace:std
std::_Mem_fn_traits_base::__arity	d:/include/c++/14/bits/refwrap.h	/^      using __arity = integral_constant<size_t, sizeof...(_ArgTypes)>;$/;"	t	struct:std::_Mem_fn_traits_base	access:public
std::_Mem_fn_traits_base::__maybe_type	d:/include/c++/14/bits/refwrap.h	/^      using __maybe_type$/;"	t	struct:std::_Mem_fn_traits_base	typeref:typename:_Maybe_unary_or_binary_function<_Res,_Class *,_ArgTypes...>	access:public
std::_Mem_fn_traits_base::__result_type	d:/include/c++/14/bits/refwrap.h	/^      using __result_type = _Res;$/;"	t	struct:std::_Mem_fn_traits_base	typeref:typename:_Res	access:public
std::_Mutex_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Mutex_base$/;"	c	namespace:std
std::_Mutex_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Mutex_base<_S_mutex>$/;"	c	namespace:std	inherits:__gnu_cxx::__mutex
std::_Mutex_base::_S_need_barriers	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 0 };$/;"	e	enum:std::_Mutex_base::__anonc68b537e0103	access:public
std::_Mutex_base::_S_need_barriers	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 1 };$/;"	e	enum:std::_Mutex_base::__anonc68b537e0203	access:public
std::_Mutex_base::__anonc68b537e0103	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 0 };$/;"	g	class:std::_Mutex_base	access:protected
std::_Mutex_base::__anonc68b537e0203	d:/include/c++/14/bits/shared_ptr_base.h	/^      enum { _S_need_barriers = 1 };$/;"	g	class:std::_Mutex_base	access:protected
std::_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    struct _Nested_exception : public _Except, public nested_exception$/;"	s	namespace:std	inherits:_Except,nested_exception
std::_Nested_exception::_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^      explicit _Nested_exception(_Except&& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(_Except && __ex)
std::_Nested_exception::_Nested_exception	d:/include/c++/14/bits/nested_exception.h	/^      explicit _Nested_exception(const _Except& __ex)$/;"	f	struct:std::_Nested_exception	access:public	signature:(const _Except & __ex)
std::_NonArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NonArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
std::_NonArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NonArray = __enable_if_t<!is_array<_Tp>::value, _Tp>;$/;"	t	namespace:std	typeref:typename:__enable_if_t<!is_array<_Tp>::value,_Tp>
std::_NotUnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NotUnboundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
std::_NotUnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _NotUnboundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<!__is_array_unknown_bounds<_Tp>::value,_Tp>
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<0, _Tp0, _Rest...>$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<0, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<1, _Tp0, _Tp1, _Rest...>$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<1, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<2, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std
std::_Nth_type	d:/include/c++/14/bits/utility.h	/^    struct _Nth_type<_Np, _Tp0, _Tp1, _Tp2, _Rest...>$/;"	s	namespace:std	inherits:_Nth_type<_Np-3,_Rest...>
std::_Nth_type::type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp0; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp0	access:public
std::_Nth_type::type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp1; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp1	access:public
std::_Nth_type::type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp2; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp2	access:public
std::_Nth_type::type	d:/include/c++/14/bits/utility.h	/^    { using type = __type_pack_element<_Np, _Types...>; };$/;"	t	struct:std::_Nth_type	typeref:typename:__type_pack_element<_Np,_Types...>	access:public
std::_PCC	d:/include/c++/14/bits/stl_pair.h	/^    struct _PCC$/;"	s	namespace:std
std::_PCC	d:/include/c++/14/bits/stl_pair.h	/^    struct _PCC<false, _T1, _T2>$/;"	s	namespace:std
std::_PCC::_ConstructiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_ImplicitlyConvertiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_ImplicitlyMoveConvertiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _ImplicitlyMoveConvertiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_PCC::_MoveConstructiblePair	d:/include/c++/14/bits/stl_pair.h	/^      static constexpr bool _MoveConstructiblePair()$/;"	f	struct:std::_PCC	typeref:typename:bool	access:public	signature:()
std::_Ptr::element_type	d:/include/c++/14/bits/ptr_traits.h	/^  template<typename _Ptr> requires requires { typename _Ptr::element_type; }$/;"	m	class:std::_Ptr	typeref:meta:typename
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base$/;"	s	namespace:std	inherits:_Weak_result_type<_Tp>,_Refwrap_base_arg1<_Tp>,_Refwrap_base_arg2<_Tp>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(*)(_T1) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(*)(_T1, _T2) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) const volatile>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) const>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1) volatile>$/;"	s	namespace:std	inherits:unary_function<_T1,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) const volatile>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) const>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
std::_Reference_wrapper_base	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base<_Res(_T1, _T2) volatile>$/;"	s	namespace:std	inherits:binary_function<_T1,_T2,_Res>
std::_Reference_wrapper_base_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base_memfun$/;"	s	namespace:std	inherits:_Reference_wrapper_base<_Tp>
std::_Reference_wrapper_base_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Reference_wrapper_base_memfun<_MemFunPtr, true>$/;"	s	namespace:std	inherits:_Mem_fn_traits<_MemFunPtr>::__maybe_type
std::_Reference_wrapper_base_memfun::result_type	d:/include/c++/14/bits/refwrap.h	/^      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;$/;"	t	struct:std::_Reference_wrapper_base_memfun	typeref:typename:_Mem_fn_traits<_MemFunPtr>::__result_type	access:public
std::_Refwrap_base_arg1	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg1$/;"	s	namespace:std
std::_Refwrap_base_arg1	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg1<_Tp,$/;"	s	namespace:std
std::_Refwrap_base_arg1::argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::argument_type argument_type;$/;"	t	struct:std::_Refwrap_base_arg1	typeref:typename:_Tp::argument_type	access:public
std::_Refwrap_base_arg2	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg2$/;"	s	namespace:std
std::_Refwrap_base_arg2	d:/include/c++/14/bits/refwrap.h	/^    struct _Refwrap_base_arg2<_Tp,$/;"	s	namespace:std
std::_Refwrap_base_arg2::first_argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::first_argument_type first_argument_type;$/;"	t	struct:std::_Refwrap_base_arg2	typeref:typename:_Tp::first_argument_type	access:public
std::_Refwrap_base_arg2::second_argument_type	d:/include/c++/14/bits/refwrap.h	/^      typedef typename _Tp::second_argument_type second_argument_type;$/;"	t	struct:std::_Refwrap_base_arg2	typeref:typename:_Tp::second_argument_type	access:public
std::_RequireAllocator	d:/include/c++/14/bits/alloc_traits.h	/^    using _RequireAllocator$/;"	t	namespace:std	typeref:typename:enable_if<__is_allocator<_Alloc>::value,_Alloc>::type
std::_RequireInputIter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    using _RequireInputIter =$/;"	t	namespace:std	typeref:typename:__enable_if_t<is_convertible<__iter_category_t<_InIter>,input_iterator_tag>::value>
std::_RequireNotAllocator	d:/include/c++/14/bits/alloc_traits.h	/^    using _RequireNotAllocator$/;"	t	namespace:std	typeref:typename:enable_if<!__is_allocator<_Alloc>::value,_Alloc>::type
std::_S_adjustfield	d:/include/c++/14/bits/ios_base.h	/^      _S_adjustfield 	= _S_left | _S_right | _S_internal,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_app	d:/include/c++/14/bits/ios_base.h	/^      _S_app 		= 1L << 0,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ate	d:/include/c++/14/bits/ios_base.h	/^      _S_ate 		= 1L << 1,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_badbit	d:/include/c++/14/bits/ios_base.h	/^      _S_badbit 		= 1L << 0,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_basefield	d:/include/c++/14/bits/ios_base.h	/^      _S_basefield 	= _S_dec | _S_oct | _S_hex,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_beg	d:/include/c++/14/bits/ios_base.h	/^      _S_beg = 0,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_bin	d:/include/c++/14/bits/ios_base.h	/^      _S_bin 		= 1L << 2,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_boolalpha	d:/include/c++/14/bits/ios_base.h	/^      _S_boolalpha 	= 1L << 0,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_cur	d:/include/c++/14/bits/ios_base.h	/^      _S_cur = _GLIBCXX_STDIO_SEEK_CUR,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_dec	d:/include/c++/14/bits/ios_base.h	/^      _S_dec 		= 1L << 1,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_end	d:/include/c++/14/bits/ios_base.h	/^      _S_end = _GLIBCXX_STDIO_SEEK_END,$/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_eofbit	d:/include/c++/14/bits/ios_base.h	/^      _S_eofbit 		= 1L << 1,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_failbit	d:/include/c++/14/bits/ios_base.h	/^      _S_failbit		= 1L << 2,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_fixed	d:/include/c++/14/bits/ios_base.h	/^      _S_fixed 		= 1L << 2,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_floatfield	d:/include/c++/14/bits/ios_base.h	/^      _S_floatfield 	= _S_scientific | _S_fixed,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_goodbit	d:/include/c++/14/bits/ios_base.h	/^      _S_goodbit 		= 0,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_hex	d:/include/c++/14/bits/ios_base.h	/^      _S_hex 		= 1L << 3,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_in	d:/include/c++/14/bits/ios_base.h	/^      _S_in 		= 1L << 3,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_internal	d:/include/c++/14/bits/ios_base.h	/^      _S_internal 	= 1L << 4,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_end = 1L << 16,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_fmtflags_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_fmtflags_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_ios_iostate_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_end = 1L << 16,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_iostate_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_iostate_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_iostate_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Iostate	access:public
std::_S_ios_openmode_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_end = 1L << 16,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_openmode_max	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_max = __INT_MAX__,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_openmode_min	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_openmode_min = ~__INT_MAX__$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_ios_seekdir_end	d:/include/c++/14/bits/ios_base.h	/^      _S_ios_seekdir_end = 1L << 16 $/;"	e	enum:std::_Ios_Seekdir	access:public
std::_S_left	d:/include/c++/14/bits/ios_base.h	/^      _S_left 		= 1L << 5,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_noreplace	d:/include/c++/14/bits/ios_base.h	/^      _S_noreplace 	= 1L << 6,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_oct	d:/include/c++/14/bits/ios_base.h	/^      _S_oct 		= 1L << 6,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_out	d:/include/c++/14/bits/ios_base.h	/^      _S_out 		= 1L << 4,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_right	d:/include/c++/14/bits/ios_base.h	/^      _S_right 		= 1L << 7,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_scientific	d:/include/c++/14/bits/ios_base.h	/^      _S_scientific 	= 1L << 8,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showbase	d:/include/c++/14/bits/ios_base.h	/^      _S_showbase 	= 1L << 9,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showpoint	d:/include/c++/14/bits/ios_base.h	/^      _S_showpoint 	= 1L << 10,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_showpos	d:/include/c++/14/bits/ios_base.h	/^      _S_showpos 	= 1L << 11,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_skipws	d:/include/c++/14/bits/ios_base.h	/^      _S_skipws 	= 1L << 12,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_trunc	d:/include/c++/14/bits/ios_base.h	/^      _S_trunc 		= 1L << 5,$/;"	e	enum:std::_Ios_Openmode	access:public
std::_S_unitbuf	d:/include/c++/14/bits/ios_base.h	/^      _S_unitbuf 	= 1L << 13,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_S_uppercase	d:/include/c++/14/bits/ios_base.h	/^      _S_uppercase 	= 1L << 14,$/;"	e	enum:std::_Ios_Fmtflags	access:public
std::_Select1st	d:/include/c++/14/bits/stl_function.h	/^    struct _Select1st$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::first_type>
std::_Select1st::operator ()	d:/include/c++/14/bits/stl_function.h	/^        operator()(_Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair2::first_type &	access:public	signature:(_Pair2 & __x) const
std::_Select1st::operator ()	d:/include/c++/14/bits/stl_function.h	/^        operator()(const _Pair2& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair2::first_type &	access:public	signature:(const _Pair2 & __x) const
std::_Select1st::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:_Pair::first_type &	access:public	signature:(_Pair & __x) const
std::_Select1st::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select1st	typeref:typename:const typename _Pair::first_type &	access:public	signature:(const _Pair & __x) const
std::_Select2nd	d:/include/c++/14/bits/stl_function.h	/^    struct _Select2nd$/;"	s	namespace:std	inherits:unary_function<_Pair,typename_Pair::second_type>
std::_Select2nd::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:_Pair::second_type &	access:public	signature:(_Pair & __x) const
std::_Select2nd::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Pair& __x) const$/;"	f	struct:std::_Select2nd	typeref:typename:const typename _Pair::second_type &	access:public	signature:(const _Pair & __x) const
std::_Sp_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_alloc_shared_tag$/;"	s	namespace:std
std::_Sp_alloc_shared_tag::_M_a	d:/include/c++/14/bits/shared_ptr_base.h	/^      const _Alloc& _M_a;$/;"	m	struct:std::_Sp_alloc_shared_tag	typeref:typename:const _Alloc &	access:public
std::_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    class _Sp_atomic$/;"	c	namespace:std
std::_Sp_atomic::_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      struct _Atomic_count$/;"	s	class:std::_Sp_atomic	access:private
std::_Sp_atomic::_Atomic_count::_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count(__count_type&& __c) noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:(__count_type && __c)
std::_Sp_atomic::_Atomic_count::_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count(const _Atomic_count&) = delete;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:(const _Atomic_count &)
std::_Sp_atomic::_Atomic_count::_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	constexpr _Atomic_count() noexcept = default;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:()
std::_Sp_atomic::_Atomic_count::_M_swap_unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_M_swap_unlock(__count_type& __c, memory_order __o) noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(__count_type & __c,memory_order __o)
std::_Sp_atomic::_Atomic_count::_M_val	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	mutable __atomic_base<uintptr_t> _M_val{0};$/;"	m	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:__atomic_base<uintptr_t>	access:private
std::_Sp_atomic::_Atomic_count::_M_wait_unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_M_wait_unlock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(memory_order __o) const
std::_Sp_atomic::_Atomic_count::_S_lock_bit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	static constexpr uintptr_t _S_lock_bit{1};$/;"	m	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:uintptr_t	access:private
std::_Sp_atomic::_Atomic_count::__count_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	using __count_type = decltype(_Tp::_M_refcount);$/;"	t	struct:std::_Sp_atomic::_Atomic_count	access:public
std::_Sp_atomic::_Atomic_count::lock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	lock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:pointer	access:public	signature:(memory_order __o) const
std::_Sp_atomic::_Atomic_count::notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	notify_all() noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:()
std::_Sp_atomic::_Atomic_count::notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	notify_one() noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:()
std::_Sp_atomic::_Atomic_count::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	_Atomic_count& operator=(const _Atomic_count&) = delete;$/;"	p	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:_Atomic_count &	access:public	signature:(const _Atomic_count &)
std::_Sp_atomic::_Atomic_count::pointer	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	using pointer = decltype(__count_type::_M_pi);$/;"	t	struct:std::_Sp_atomic::_Atomic_count	access:public
std::_Sp_atomic::_Atomic_count::unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	unlock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(memory_order __o) const
std::_Sp_atomic::_Atomic_count::~_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	~_Atomic_count()$/;"	f	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:()
std::_Sp_atomic::_M_ptr	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      typename _Tp::element_type* _M_ptr = nullptr;$/;"	m	class:std::_Sp_atomic	typeref:typename:_Tp::element_type *	access:private
std::_Sp_atomic::_M_refcount	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Atomic_count _M_refcount;$/;"	m	class:std::_Sp_atomic	typeref:typename:_Atomic_count	access:private
std::_Sp_atomic::_S_add_ref	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _S_add_ref(typename _Atomic_count::pointer __p)$/;"	f	class:std::_Sp_atomic	typeref:typename:_Atomic_count::pointer	access:private	signature:(typename _Atomic_count::pointer __p)
std::_Sp_atomic::_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic(const _Sp_atomic&) = delete;$/;"	p	class:std::_Sp_atomic	access:private	signature:(const _Sp_atomic &)
std::_Sp_atomic::_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic(value_type __r) noexcept$/;"	f	class:std::_Sp_atomic	access:private	signature:(value_type __r)
std::_Sp_atomic::_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr _Sp_atomic() noexcept = default;$/;"	p	class:std::_Sp_atomic	access:private	signature:()
std::_Sp_atomic::compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(value_type& __expected, value_type __desired,$/;"	f	class:std::_Sp_atomic	typeref:typename:bool	access:private	signature:(value_type & __expected,value_type __desired,memory_order __o,memory_order __o2)
std::_Sp_atomic::load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o) const noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:value_type	access:private	signature:(memory_order __o) const
std::_Sp_atomic::notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_all() noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:()
std::_Sp_atomic::notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_one() noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:()
std::_Sp_atomic::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      void operator=(const _Sp_atomic&) = delete;$/;"	p	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(const _Sp_atomic &)
std::_Sp_atomic::swap	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      swap(value_type& __r, memory_order __o) noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(value_type & __r,memory_order __o)
std::_Sp_atomic::value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = _Tp;$/;"	t	class:std::_Sp_atomic	typeref:typename:_Tp	access:private
std::_Sp_atomic::wait	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      wait(value_type __old, memory_order __o) const noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(value_type __old,memory_order __o) const
std::_Sp_atomic::~_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      ~_Sp_atomic() = default;$/;"	p	class:std::_Sp_atomic	access:private	signature:()
std::_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_array final$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>,_Sp_counted_array_base<_Alloc>
std::_Sp_counted_array::_M_alloc_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      pointer _M_alloc_ptr;$/;"	m	class:std::_Sp_counted_array	typeref:typename:pointer	access:private
std::_Sp_counted_array::_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_array	typeref:typename:void	access:public	signature:()
std::_Sp_counted_array::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_array	typeref:typename:void	access:public	signature:()
std::_Sp_counted_array::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept override$/;"	f	class:std::_Sp_counted_array	typeref:typename:void *	access:public	signature:(const std::type_info &)
std::_Sp_counted_array::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      auto _M_ptr() const noexcept { return std::to_address(_M_alloc_ptr); }$/;"	f	class:std::_Sp_counted_array	typeref:typename:auto	access:private	signature:() const
std::_Sp_counted_array::_S_tail	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_tail()$/;"	f	class:std::_Sp_counted_array	typeref:typename:size_t	access:public	signature:()
std::_Sp_counted_array::_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_array(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::_Sp_counted_array	access:public	signature:(const _Sp_counted_array_base<_Alloc> & __a,pointer __p)
std::_Sp_counted_array::pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^      using pointer = typename allocator_traits<_Alloc>::pointer;$/;"	t	class:std::_Sp_counted_array	typeref:typename:allocator_traits<_Alloc>::pointer	access:private
std::_Sp_counted_array::~_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_array() = default;$/;"	p	class:std::_Sp_counted_array	access:public	signature:()
std::_Sp_counted_array_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_counted_array_base$/;"	s	namespace:std
std::_Sp_counted_array_base::_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^      [[no_unique_address]] _Alloc _M_alloc{};$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:_Alloc	access:public
std::_Sp_counted_array_base::_M_alloc_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_alloc_array(size_t __tail)$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:allocator_traits<_Alloc>::pointer	access:public	signature:(size_t __tail)
std::_Sp_counted_array_base::_M_dealloc_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dealloc_array(typename allocator_traits<_Alloc>::pointer __p,$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:public	signature:(typename allocator_traits<_Alloc>::pointer __p,size_t __tail)
std::_Sp_counted_array_base::_M_dispose_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose_array(typename allocator_traits<_Alloc>::value_type* __p)$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:protected	signature:(typename allocator_traits<_Alloc>::value_type * __p)
std::_Sp_counted_array_base::_M_init	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_init(typename allocator_traits<_Alloc>::value_type* __p,$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:void	access:public	signature:(typename allocator_traits<_Alloc>::value_type * __p,_Init __init)
std::_Sp_counted_array_base::_M_init::_Iter::_M_len	d:/include/c++/14/bits/shared_ptr_base.h	/^		size_t _M_len;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:size_t	access:public
std::_Sp_counted_array_base::_M_init::_Iter::_M_p	d:/include/c++/14/bits/shared_ptr_base.h	/^		const _Up* _M_p;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up *	access:public
std::_Sp_counted_array_base::_M_init::_Iter::_M_pos	d:/include/c++/14/bits/shared_ptr_base.h	/^		size_t _M_pos;$/;"	m	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:size_t	access:public
std::_Sp_counted_array_base::_M_init::_Iter::difference_type	d:/include/c++/14/bits/shared_ptr_base.h	/^		using difference_type = ptrdiff_t;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:ptrdiff_t	access:public
std::_Sp_counted_array_base::_M_init::_Iter::iterator_category	d:/include/c++/14/bits/shared_ptr_base.h	/^		using iterator_category = forward_iterator_tag;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:forward_iterator_tag	access:public
std::_Sp_counted_array_base::_M_init::_Iter::operator *	d:/include/c++/14/bits/shared_ptr_base.h	/^		reference operator*() const { return _M_p[_M_pos % _M_len]; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:reference	access:public	signature:() const
std::_Sp_counted_array_base::_M_init::_Iter::operator ++	d:/include/c++/14/bits/shared_ptr_base.h	/^		_Iter operator++(int) { auto __i(*this); ++_M_pos; return __i; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Iter	access:public	signature:(int)
std::_Sp_counted_array_base::_M_init::_Iter::operator ++	d:/include/c++/14/bits/shared_ptr_base.h	/^		_Iter& operator++() { ++_M_pos; return *this; }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Iter &	access:public	signature:()
std::_Sp_counted_array_base::_M_init::_Iter::operator ->	d:/include/c++/14/bits/shared_ptr_base.h	/^		pointer operator->() const { return _M_p + (_M_pos % _M_len); }$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:pointer	access:public	signature:() const
std::_Sp_counted_array_base::_M_init::_Iter::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^		bool operator==(const _Iter& __i) const$/;"	f	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:bool	access:public	signature:(const _Iter & __i) const
std::_Sp_counted_array_base::_M_init::_Iter::pointer	d:/include/c++/14/bits/shared_ptr_base.h	/^		using pointer = const _Up*;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up *	access:public
std::_Sp_counted_array_base::_M_init::_Iter::reference	d:/include/c++/14/bits/shared_ptr_base.h	/^		using reference = const _Up&;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:const _Up &	access:public
std::_Sp_counted_array_base::_M_init::_Iter::value_type	d:/include/c++/14/bits/shared_ptr_base.h	/^		using value_type = _Up;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Up	access:public
std::_Sp_counted_array_base::_M_n	d:/include/c++/14/bits/shared_ptr_base.h	/^      size_t _M_n = 0;$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:size_t	access:public
std::_Sp_counted_array_base::_M_overwrite	d:/include/c++/14/bits/shared_ptr_base.h	/^      bool _M_overwrite = false;$/;"	m	struct:std::_Sp_counted_array_base	typeref:typename:bool	access:public
std::_Sp_counted_array_base::_S_first_elem	d:/include/c++/14/bits/shared_ptr_base.h	/^	_S_first_elem(_Tp (*__p)[_Nm]) { return _S_first_elem(*__p); }$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:auto	access:private	signature:(_Tp (* __p)[_Nm])
std::_Sp_counted_array_base::_S_first_elem	d:/include/c++/14/bits/shared_ptr_base.h	/^	_S_first_elem(_Tp* __p) { return __p; }$/;"	f	struct:std::_Sp_counted_array_base	typeref:typename:_Tp *	access:private	signature:(_Tp * __p)
std::_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_base$/;"	c	namespace:std	inherits:_Mutex_base<_Lp>
std::_Sp_counted_base::_M_add_ref_copy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_copy()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_add_ref_copy	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_add_ref_copy()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_M_add_ref_lock	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_lock()$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_add_ref_lock_nothrow	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_add_ref_lock_nothrow() noexcept;$/;"	p	class:std::_Sp_counted_base	typeref:typename:bool	access:public	signature:()
std::_Sp_counted_base::_M_add_ref_lock_nothrow	d:/include/c++/14/bits/shared_ptr_base.h	/^    _M_add_ref_lock_nothrow() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:bool	signature:()
std::_Sp_counted_base::_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept = 0;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept = 0;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void *	access:public	signature:(const std::type_info &)
std::_Sp_counted_base::_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:long	access:public	signature:() const
std::_Sp_counted_base::_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_get_use_count() const noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:long	signature:() const
std::_Sp_counted_base::_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release() noexcept;$/;"	p	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_atomic>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_mutex>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_M_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_M_release_last_use	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release_last_use() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_release_last_use_cold	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_release_last_use_cold() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Atomic_word  _M_use_count;     \/\/ #shared$/;"	m	class:std::_Sp_counted_base	typeref:typename:_Atomic_word	access:private
std::_Sp_counted_base::_M_weak_add_ref	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_weak_add_ref() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_weak_add_ref	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_weak_add_ref() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_M_weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Atomic_word  _M_weak_count;    \/\/ #weak + (#shared != 0)$/;"	m	class:std::_Sp_counted_base	typeref:typename:_Atomic_word	access:private
std::_Sp_counted_base::_M_weak_release	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_weak_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	access:public	signature:()
std::_Sp_counted_base::_M_weak_release	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_base<_S_single>::_M_weak_release() noexcept$/;"	f	class:std::_Sp_counted_base	typeref:typename:void	signature:()
std::_Sp_counted_base::_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base() noexcept$/;"	f	class:std::_Sp_counted_base	access:public	signature:()
std::_Sp_counted_base::_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base(_Sp_counted_base const&) = delete;$/;"	p	class:std::_Sp_counted_base	access:private	signature:(_Sp_counted_base const &)
std::_Sp_counted_base::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base& operator=(_Sp_counted_base const&) = delete;$/;"	p	class:std::_Sp_counted_base	typeref:typename:_Sp_counted_base &	access:private	signature:(_Sp_counted_base const &)
std::_Sp_counted_base::~_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_base() noexcept$/;"	f	class:std::_Sp_counted_base	access:public	signature:()
std::_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_deleter final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
std::_Sp_counted_deleter::_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      class _Impl : _Sp_ebo_helper<0, _Deleter>, _Sp_ebo_helper<1, _Alloc>$/;"	c	class:std::_Sp_counted_deleter	inherits:_Sp_ebo_helper<0,_Deleter>,_Sp_ebo_helper<1,_Alloc>	access:private
std::_Sp_counted_deleter::_Impl::_Alloc_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;$/;"	t	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Sp_ebo_helper<1,_Alloc>	access:private
std::_Sp_counted_deleter::_Impl::_Del_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;$/;"	t	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Sp_ebo_helper<0,_Deleter>	access:private
std::_Sp_counted_deleter::_Impl::_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept$/;"	f	class:std::_Sp_counted_deleter::_Impl	access:public	signature:(_Ptr __p,_Deleter __d,const _Alloc & __a)
std::_Sp_counted_deleter::_Impl::_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Alloc& _M_alloc() noexcept { return _Alloc_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Alloc &	access:public	signature:()
std::_Sp_counted_deleter::_Impl::_M_del	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Deleter& _M_del() noexcept { return _Del_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Deleter &	access:public	signature:()
std::_Sp_counted_deleter::_Impl::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Ptr _M_ptr;$/;"	m	class:std::_Sp_counted_deleter::_Impl	typeref:typename:_Ptr	access:public
std::_Sp_counted_deleter::_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void	access:public	signature:()
std::_Sp_counted_deleter::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void	access:public	signature:()
std::_Sp_counted_deleter::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const type_info& __ti [[__gnu__::__unused__]]) noexcept$/;"	f	class:std::_Sp_counted_deleter	typeref:typename:void *	access:public	signature:(const type_info & __ti)
std::_Sp_counted_deleter::_M_impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Impl _M_impl;$/;"	m	class:std::_Sp_counted_deleter	typeref:typename:_Impl	access:private
std::_Sp_counted_deleter::_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:(_Ptr __p,_Deleter __d)
std::_Sp_counted_deleter::_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:(_Ptr __p,_Deleter __d,const _Alloc & __a)
std::_Sp_counted_deleter::__allocator_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_deleter>;$/;"	t	class:std::_Sp_counted_deleter	typeref:typename:__alloc_rebind<_Alloc,_Sp_counted_deleter>	access:public
std::_Sp_counted_deleter::~_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_deleter() noexcept { }$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:()
std::_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
std::_Sp_counted_ptr::_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	access:public	signature:()
std::_Sp_counted_ptr::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	access:public	signature:()
std::_Sp_counted_ptr::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_atomic>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
std::_Sp_counted_ptr::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_mutex>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
std::_Sp_counted_ptr::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^    _Sp_counted_ptr<nullptr_t, _S_single>::_M_dispose() noexcept { }$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void	signature:()
std::_Sp_counted_ptr::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept$/;"	f	class:std::_Sp_counted_ptr	typeref:typename:void *	access:public	signature:(const std::type_info &)
std::_Sp_counted_ptr::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Ptr             _M_ptr;$/;"	m	class:std::_Sp_counted_ptr	typeref:typename:_Ptr	access:private
std::_Sp_counted_ptr::_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr(_Ptr __p) noexcept$/;"	f	class:std::_Sp_counted_ptr	access:public	signature:(_Ptr __p)
std::_Sp_counted_ptr::_Sp_counted_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr(const _Sp_counted_ptr&) = delete;$/;"	p	class:std::_Sp_counted_ptr	access:public	signature:(const _Sp_counted_ptr &)
std::_Sp_counted_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr& operator=(const _Sp_counted_ptr&) = delete;$/;"	p	class:std::_Sp_counted_ptr	typeref:typename:_Sp_counted_ptr &	access:public	signature:(const _Sp_counted_ptr &)
std::_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr_inplace final : public _Sp_counted_base<_Lp>$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
std::_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^    class _Sp_counted_ptr_inplace<_Tp, _Alloc, _Lp> final$/;"	c	namespace:std	inherits:_Sp_counted_base<_Lp>
std::_Sp_counted_ptr_inplace::_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      class _Impl : _Sp_ebo_helper<0, _Alloc>$/;"	c	class:std::_Sp_counted_ptr_inplace	inherits:_Sp_ebo_helper<0,_Alloc>	access:private
std::_Sp_counted_ptr_inplace::_Impl::_A_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	typedef _Sp_ebo_helper<0, _Alloc>	_A_base;$/;"	t	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:_Sp_ebo_helper<0,_Alloc>	access:private
std::_Sp_counted_ptr_inplace::_Impl::_Impl	d:/include/c++/14/bits/shared_ptr_base.h	/^	explicit _Impl(_Alloc __a) noexcept : _A_base(__a) { }$/;"	f	class:std::_Sp_counted_ptr_inplace::_Impl	access:public	signature:(_Alloc __a)
std::_Sp_counted_ptr_inplace::_Impl::_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Alloc& _M_alloc() noexcept { return _A_base::_S_get(*this); }$/;"	f	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:_Alloc &	access:public	signature:()
std::_Sp_counted_ptr_inplace::_Impl::_M_storage	d:/include/c++/14/bits/shared_ptr_base.h	/^	__gnu_cxx::__aligned_buffer<_Tp> _M_storage;$/;"	m	class:std::_Sp_counted_ptr_inplace::_Impl	typeref:typename:__gnu_cxx::__aligned_buffer<_Tp>	access:public
std::_Sp_counted_ptr_inplace::_M_alloc	d:/include/c++/14/bits/shared_ptr_base.h	/^      [[no_unique_address]] _Alloc _M_alloc;$/;"	m	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Alloc	access:private
std::_Sp_counted_ptr_inplace::_M_destroy	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_destroy() noexcept$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void	access:public	signature:()
std::_Sp_counted_ptr_inplace::_M_dispose	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_dispose() noexcept$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void	access:public	signature:()
std::_Sp_counted_ptr_inplace::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) noexcept override$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void *	access:private	signature:(const std::type_info & __ti)
std::_Sp_counted_ptr_inplace::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info&) noexcept override$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:void *	access:public	signature:(const std::type_info &)
std::_Sp_counted_ptr_inplace::_M_impl	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Impl _M_impl;$/;"	m	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Impl	access:private
std::_Sp_counted_ptr_inplace::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp* _M_ptr() noexcept { return _M_impl._M_storage._M_ptr(); }$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Tp *	access:private	signature:()
std::_Sp_counted_ptr_inplace::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp* _M_ptr() noexcept { return std::__addressof(_M_obj); }$/;"	f	class:std::_Sp_counted_ptr_inplace	typeref:typename:_Tp *	access:private	signature:()
std::_Sp_counted_ptr_inplace::_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Sp_counted_ptr_inplace(_Alloc __a, _Args&&... __args)$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:(_Alloc __a,_Args &&...__args)
std::_Sp_counted_ptr_inplace::_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_ptr_inplace(const _Alloc& __a)$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:(const _Alloc & __a)
std::_Sp_counted_ptr_inplace::__allocator_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using __allocator_type = __alloc_rebind<_Alloc, _Sp_counted_ptr_inplace>;$/;"	t	class:std::_Sp_counted_ptr_inplace	typeref:typename:__alloc_rebind<_Alloc,_Sp_counted_ptr_inplace>	access:public
std::_Sp_counted_ptr_inplace::__anonc68b537e030a	d:/include/c++/14/bits/shared_ptr_base.h	/^      union {$/;"	u	class:std::_Sp_counted_ptr_inplace	access:private
std::_Sp_counted_ptr_inplace::__anonc68b537e030a::_M_obj	d:/include/c++/14/bits/shared_ptr_base.h	/^	_Tp _M_obj;$/;"	m	union:std::_Sp_counted_ptr_inplace::__anonc68b537e030a	typeref:typename:_Tp	access:public
std::_Sp_counted_ptr_inplace::__anonc68b537e030a::_M_unused	d:/include/c++/14/bits/shared_ptr_base.h	/^	char _M_unused;$/;"	m	union:std::_Sp_counted_ptr_inplace::__anonc68b537e030a	typeref:typename:char	access:public
std::_Sp_counted_ptr_inplace::~_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_ptr_inplace() noexcept { }$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:()
std::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_ebo_helper<_Nm, _Tp, false>$/;"	s	namespace:std
std::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_ebo_helper<_Nm, _Tp, true> : private _Tp$/;"	s	namespace:std	inherits:_Tp
std::_Sp_ebo_helper::_M_tp	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Tp _M_tp;$/;"	m	struct:std::_Sp_ebo_helper	typeref:typename:_Tp	access:private
std::_Sp_ebo_helper::_S_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_get(_Sp_ebo_helper& __eboh) { return static_cast<_Tp&>(__eboh); }$/;"	f	struct:std::_Sp_ebo_helper	typeref:typename:_Tp &	access:public	signature:(_Sp_ebo_helper & __eboh)
std::_Sp_ebo_helper::_S_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _S_get(_Sp_ebo_helper& __eboh)$/;"	f	struct:std::_Sp_ebo_helper	typeref:typename:_Tp &	access:public	signature:(_Sp_ebo_helper & __eboh)
std::_Sp_ebo_helper::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(_Tp&& __tp) : _M_tp(std::move(__tp)) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(_Tp && __tp)
std::_Sp_ebo_helper::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(_Tp&& __tp) : _Tp(std::move(__tp)) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(_Tp && __tp)
std::_Sp_ebo_helper::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(const _Tp& __tp) : _M_tp(__tp) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(const _Tp & __tp)
std::_Sp_ebo_helper::_Sp_ebo_helper	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit _Sp_ebo_helper(const _Tp& __tp) : _Tp(__tp) { }$/;"	f	struct:std::_Sp_ebo_helper	access:public	signature:(const _Tp & __tp)
std::_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^  struct _Sp_locker$/;"	s	namespace:std
std::_Sp_locker::_M_key1	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    unsigned char _M_key1;$/;"	m	struct:std::_Sp_locker	typeref:typename:unsigned char	access:private
std::_Sp_locker::_M_key2	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    unsigned char _M_key2;$/;"	m	struct:std::_Sp_locker	typeref:typename:unsigned char	access:private
std::_Sp_locker::_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const _Sp_locker&) = delete;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const _Sp_locker &)
std::_Sp_locker::_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const void*) noexcept;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const void *)
std::_Sp_locker::_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker(const void*, const void*) noexcept;$/;"	p	struct:std::_Sp_locker	access:public	signature:(const void *,const void *)
std::_Sp_locker::_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    explicit _Sp_locker(const void*, const void* = nullptr) { }$/;"	f	struct:std::_Sp_locker	access:private	signature:(const void *,const void * =nullptr)
std::_Sp_locker::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    _Sp_locker& operator=(const _Sp_locker&) = delete;$/;"	p	struct:std::_Sp_locker	typeref:typename:_Sp_locker &	access:public	signature:(const _Sp_locker &)
std::_Sp_locker::~_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    ~_Sp_locker();$/;"	p	struct:std::_Sp_locker	access:public	signature:()
std::_Sp_make_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct _Sp_make_shared_tag$/;"	s	namespace:std
std::_Sp_make_shared_tag::_S_eq	d:/include/c++/14/bits/shared_ptr_base.h	/^    static bool _S_eq(const type_info&) noexcept;$/;"	p	struct:std::_Sp_make_shared_tag	typeref:typename:bool	access:private	signature:(const type_info &)
std::_Sp_make_shared_tag::_S_ti	d:/include/c++/14/bits/shared_ptr_base.h	/^    _S_ti() noexcept _GLIBCXX_VISIBILITY(default)$/;"	f	struct:std::_Sp_make_shared_tag	typeref:typename:const type_info &	access:private	signature:()
std::_Sp_overwrite_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct _Sp_overwrite_tag { };$/;"	s	namespace:std
std::_Sp_owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_owner_less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::_Sp_owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct _Sp_owner_less<void, void>$/;"	s	namespace:std
std::_Sp_owner_less::is_transparent	d:/include/c++/14/bits/shared_ptr_base.h	/^      using is_transparent = void;$/;"	t	struct:std::_Sp_owner_less	typeref:typename:void	access:public
std::_Sp_owner_less::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator()(const _Tp& __lhs, const _Up& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:auto	access:public	signature:(const _Tp & __lhs,const _Up & __rhs) const
std::_Sp_owner_less::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp& __lhs, const _Tp& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp & __lhs,const _Tp & __rhs) const
std::_Sp_owner_less::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp& __lhs, const _Tp1& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp & __lhs,const _Tp1 & __rhs) const
std::_Sp_owner_less::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const _Tp1& __lhs, const _Tp& __rhs) const noexcept$/;"	f	struct:std::_Sp_owner_less	typeref:typename:bool	access:public	signature:(const _Tp1 & __lhs,const _Tp & __rhs) const
std::_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    class _Temporary_buffer$/;"	c	namespace:std
std::_Temporary_buffer::_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^      struct _Impl$/;"	s	class:std::_Temporary_buffer	access:protected
std::_Temporary_buffer::_Impl::_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^	_Impl(ptrdiff_t __original_len)$/;"	f	struct:std::_Temporary_buffer::_Impl	access:public	signature:(ptrdiff_t __original_len)
std::_Temporary_buffer::_Impl::_M_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^	pointer    _M_buffer;$/;"	m	struct:std::_Temporary_buffer::_Impl	typeref:typename:pointer	access:public
std::_Temporary_buffer::_Impl::_M_len	d:/include/c++/14/bits/stl_tempbuf.h	/^	size_type  _M_len;$/;"	m	struct:std::_Temporary_buffer::_Impl	typeref:typename:size_type	access:public
std::_Temporary_buffer::_Impl::~_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^	~_Impl()$/;"	f	struct:std::_Temporary_buffer::_Impl	access:public	signature:()
std::_Temporary_buffer::_M_impl	d:/include/c++/14/bits/stl_tempbuf.h	/^      } _M_impl;$/;"	m	class:std::_Temporary_buffer	typeref:struct:std::_Temporary_buffer::_Impl	access:protected
std::_Temporary_buffer::_M_original_len	d:/include/c++/14/bits/stl_tempbuf.h	/^      size_type  _M_original_len;$/;"	m	class:std::_Temporary_buffer	typeref:typename:size_type	access:protected
std::_Temporary_buffer::_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      _Temporary_buffer(_ForwardIterator __seed, size_type __original_len);$/;"	p	class:std::_Temporary_buffer	access:public	signature:(_ForwardIterator __seed,size_type __original_len)
std::_Temporary_buffer::_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      _Temporary_buffer(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	access:private	signature:(const _Temporary_buffer &)
std::_Temporary_buffer::_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    _Temporary_buffer(_ForwardIterator __seed, size_type __original_len)$/;"	f	class:std::_Temporary_buffer	signature:(_ForwardIterator __seed,size_type __original_len)
std::_Temporary_buffer::begin	d:/include/c++/14/bits/stl_tempbuf.h	/^      begin()$/;"	f	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
std::_Temporary_buffer::end	d:/include/c++/14/bits/stl_tempbuf.h	/^      end()$/;"	f	class:std::_Temporary_buffer	typeref:typename:iterator	access:public	signature:()
std::_Temporary_buffer::iterator	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef pointer     iterator;$/;"	t	class:std::_Temporary_buffer	typeref:typename:pointer	access:public
std::_Temporary_buffer::operator =	d:/include/c++/14/bits/stl_tempbuf.h	/^      operator=(const _Temporary_buffer&);$/;"	p	class:std::_Temporary_buffer	typeref:typename:void	access:private	signature:(const _Temporary_buffer &)
std::_Temporary_buffer::pointer	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef value_type* pointer;$/;"	t	class:std::_Temporary_buffer	typeref:typename:value_type *	access:public
std::_Temporary_buffer::requested_size	d:/include/c++/14/bits/stl_tempbuf.h	/^      requested_size() const$/;"	f	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
std::_Temporary_buffer::size	d:/include/c++/14/bits/stl_tempbuf.h	/^      size() const$/;"	f	class:std::_Temporary_buffer	typeref:typename:size_type	access:public	signature:() const
std::_Temporary_buffer::size_type	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef ptrdiff_t   size_type;$/;"	t	class:std::_Temporary_buffer	typeref:typename:ptrdiff_t	access:public
std::_Temporary_buffer::value_type	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	t	class:std::_Temporary_buffer	typeref:typename:_Tp	access:public
std::_Temporary_buffer::~_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
std::_UnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _UnboundedArray = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
std::_UnboundedArray	d:/include/c++/14/bits/shared_ptr.h	/^    using _UnboundedArray$/;"	t	namespace:std	typeref:typename:__enable_if_t<__is_array_unknown_bounds<_Tp>::value,_Tp>
std::_Weak_result_type	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type$/;"	s	namespace:std	inherits:_Weak_result_type_memfun<typenameremove_cv<_Functor>::type>
std::_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    _Weak_result_type_impl<_Res(*)(_ArgTypes......) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
std::_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl$/;"	s	namespace:std	inherits:_Maybe_get_result_type<_Functor>
std::_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(*)(_ArgTypes...) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
std::_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(_ArgTypes...) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
std::_Weak_result_type_impl	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_impl<_Res(_ArgTypes......) _GLIBCXX_NOEXCEPT_QUAL>$/;"	s	namespace:std
std::_Weak_result_type_impl::result_type	d:/include/c++/14/bits/refwrap.h	/^    { typedef _Res result_type; };$/;"	t	struct:std::_Weak_result_type_impl	typeref:typename:_Res	access:public
std::_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun$/;"	s	namespace:std	inherits:_Weak_result_type_impl<_Functor>
std::_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun<_Func _Class::*, false>$/;"	s	namespace:std
std::_Weak_result_type_memfun	d:/include/c++/14/bits/refwrap.h	/^    struct _Weak_result_type_memfun<_MemFunPtr, true>$/;"	s	namespace:std
std::_Weak_result_type_memfun::result_type	d:/include/c++/14/bits/refwrap.h	/^      using result_type = typename _Mem_fn_traits<_MemFunPtr>::__result_type;$/;"	t	struct:std::_Weak_result_type_memfun	typeref:typename:_Mem_fn_traits<_MemFunPtr>::__result_type	access:public
std::__add_grouping	d:/include/c++/14/bits/locale_facets.h	/^    __add_grouping(_CharT* __s, _CharT __sep,$/;"	p	namespace:std	typeref:typename:_CharT *	signature:(_CharT * __s,_CharT __sep,const char * __gbeg,size_t __gsize,const _CharT * __first,const _CharT * __last)
std::__addressof	d:/include/c++/14/bits/move.h	/^    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_CONSTEXPR _Tp *	signature:(_Tp & __r)
std::__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_BidirectionalIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_BidirectionalIterator & __i,_Distance __n,bidirectional_iterator_tag)
std::__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n,input_iterator_tag)
std::__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_OutputIterator&, _Distance, output_iterator_tag) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(_OutputIterator &,_Distance,output_iterator_tag)
std::__advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __advance(_RandomAccessIterator& __i, _Distance __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_RandomAccessIterator & __i,_Distance __n,random_access_iterator_tag)
std::__alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_copy(_Alloc& __one, const _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,const _Alloc & __two)
std::__alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_copy(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_Alloc	signature:(const _Alloc & __a)
std::__alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_move(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    __alloc_on_swap(_Alloc& __one, _Alloc& __two)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR void	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_rebind	d:/include/c++/14/bits/alloc_traits.h	/^    using __alloc_rebind$/;"	t	namespace:std	typeref:typename:__allocator_traits_base::template __rebind<_Alloc,_Up>::type
std::__alloc_swap	d:/include/c++/14/bits/alloc_traits.h	/^    struct __alloc_swap$/;"	s	namespace:std
std::__alloc_swap	d:/include/c++/14/bits/alloc_traits.h	/^    struct __alloc_swap<_Alloc, false>$/;"	s	namespace:std
std::__alloc_swap::_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^      _S_do_it(_Alloc& __one, _Alloc& __two) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc & __one,_Alloc & __two)
std::__alloc_swap::_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^    { static void _S_do_it(_Alloc&, _Alloc&) _GLIBCXX_NOEXCEPT { } };$/;"	f	struct:std::__alloc_swap	typeref:typename:void	access:public	signature:(_Alloc &,_Alloc &)
std::__allocate_guarded	d:/include/c++/14/bits/allocated_ptr.h	/^    __allocate_guarded(_Alloc& __a)$/;"	f	namespace:std	typeref:typename:__allocated_ptr<_Alloc>	signature:(_Alloc & __a)
std::__allocate_shared	d:/include/c++/14/bits/shared_ptr_base.h	/^    __allocate_shared(const _Alloc& __a, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const _Alloc & __a,_Args &&...__args)
std::__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^    struct __allocated_ptr$/;"	s	namespace:std
std::__allocated_ptr::_M_alloc	d:/include/c++/14/bits/allocated_ptr.h	/^      _Alloc* _M_alloc;$/;"	m	struct:std::__allocated_ptr	typeref:typename:_Alloc *	access:private
std::__allocated_ptr::_M_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      pointer _M_ptr;$/;"	m	struct:std::__allocated_ptr	typeref:typename:pointer	access:private
std::__allocated_ptr::__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(_Alloc& __a, _Ptr __ptr)$/;"	f	struct:std::__allocated_ptr	access:public	signature:(_Alloc & __a,_Ptr __ptr)
std::__allocated_ptr::__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept$/;"	f	struct:std::__allocated_ptr	access:public	signature:(_Alloc & __a,pointer __ptr)
std::__allocated_ptr::__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      __allocated_ptr(__allocated_ptr&& __gd) noexcept$/;"	f	struct:std::__allocated_ptr	access:public	signature:(__allocated_ptr && __gd)
std::__allocated_ptr::get	d:/include/c++/14/bits/allocated_ptr.h	/^      value_type* get() { return std::__to_address(_M_ptr); }$/;"	f	struct:std::__allocated_ptr	typeref:typename:value_type *	access:public	signature:()
std::__allocated_ptr::operator =	d:/include/c++/14/bits/allocated_ptr.h	/^      operator=(std::nullptr_t) noexcept$/;"	f	struct:std::__allocated_ptr	typeref:typename:__allocated_ptr &	access:public	signature:(std::nullptr_t)
std::__allocated_ptr::pointer	d:/include/c++/14/bits/allocated_ptr.h	/^      using pointer = typename allocator_traits<_Alloc>::pointer;$/;"	t	struct:std::__allocated_ptr	typeref:typename:allocator_traits<_Alloc>::pointer	access:public
std::__allocated_ptr::value_type	d:/include/c++/14/bits/allocated_ptr.h	/^      using value_type = typename allocator_traits<_Alloc>::value_type;$/;"	t	struct:std::__allocated_ptr	typeref:typename:allocator_traits<_Alloc>::value_type	access:public
std::__allocated_ptr::~__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      ~__allocated_ptr()$/;"	f	struct:std::__allocated_ptr	access:public	signature:()
std::__allocator_traits_base	d:/include/c++/14/bits/alloc_traits.h	/^  struct __allocator_traits_base$/;"	s	namespace:std
std::__allocator_traits_base::__c_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __c_pointer = typename _Tp::const_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_pointer	access:protected
std::__allocator_traits_base::__can_construct	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __can_construct$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__construct_t	d:/include/c++/14/bits/alloc_traits.h	/^      using __construct_t$/;"	t	struct:std::__allocator_traits_base	access:protected
std::__allocator_traits_base::__cv_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __cv_pointer = typename _Tp::const_void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::const_void_pointer	access:protected
std::__allocator_traits_base::__equal	d:/include/c++/14/bits/alloc_traits.h	/^      using __equal = __type_identity<typename _Tp::is_always_equal>;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:__type_identity<typename _Tp::is_always_equal>	access:protected
std::__allocator_traits_base::__has_construct	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_construct$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__has_construct_impl	d:/include/c++/14/bits/alloc_traits.h	/^      __has_construct_impl<_Alloc, _Tp,$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__has_construct_impl	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_construct_impl = false;$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__has_new_expr	d:/include/c++/14/bits/alloc_traits.h	/^      __has_new_expr<_Tp, __void_t<__new_expr_t<_Tp, _Args...>>, _Args...>$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__has_new_expr	d:/include/c++/14/bits/alloc_traits.h	/^      static constexpr bool __has_new_expr = false;$/;"	m	struct:std::__allocator_traits_base	typeref:typename:bool	access:protected
std::__allocator_traits_base::__new_expr_t	d:/include/c++/14/bits/alloc_traits.h	/^      using __new_expr_t$/;"	t	struct:std::__allocator_traits_base	access:protected
std::__allocator_traits_base::__pocca	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocca = typename _Tp::propagate_on_container_copy_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_copy_assignment	access:protected
std::__allocator_traits_base::__pocma	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocma = typename _Tp::propagate_on_container_move_assignment;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_move_assignment	access:protected
std::__allocator_traits_base::__pocs	d:/include/c++/14/bits/alloc_traits.h	/^      using __pocs = typename _Tp::propagate_on_container_swap;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::propagate_on_container_swap	access:protected
std::__allocator_traits_base::__pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __pointer = typename _Tp::pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::pointer	access:protected
std::__allocator_traits_base::__rebind	d:/include/c++/14/bits/alloc_traits.h	/^      struct __rebind : __replace_first_arg<_Tp, _Up>$/;"	s	struct:std::__allocator_traits_base	inherits:__replace_first_arg<_Tp,_Up>	access:public
std::__allocator_traits_base::__rebind	d:/include/c++/14/bits/alloc_traits.h	/^      struct __rebind<_Tp, _Up,$/;"	s	struct:std::__allocator_traits_base	access:public
std::__allocator_traits_base::__rebind::type	d:/include/c++/14/bits/alloc_traits.h	/^	using type = typename _Tp::template rebind<_Up>::other;$/;"	t	struct:std::__allocator_traits_base::__rebind	typeref:typename:_Tp::template rebind<_Up>::other	access:public
std::__allocator_traits_base::__v_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using __v_pointer = typename _Tp::void_pointer;$/;"	t	struct:std::__allocator_traits_base	typeref:typename:_Tp::void_pointer	access:protected
std::__are_same	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __are_same$/;"	s	namespace:std
std::__are_same	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __are_same<_Tp, _Tp>$/;"	s	namespace:std
std::__are_same::__anon7e5ad8920203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__are_same	access:public
std::__are_same::__anon7e5ad8920303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__are_same	access:public
std::__are_same::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__false_type	access:public
std::__are_same::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__are_same	typeref:typename:__true_type	access:public
std::__are_same::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__are_same::__anon7e5ad8920203	access:public
std::__are_same::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__are_same::__anon7e5ad8920303	access:public
std::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_base$/;"	s	namespace:std
std::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_base<_PTp*>$/;"	s	namespace:std
std::__atomic_base::_GLIBCXX20_INIT	d:/include/c++/14/bits/atomic_base.h	/^      __pointer_type 	_M_p _GLIBCXX20_INIT(nullptr);$/;"	p	struct:std::__atomic_base	typeref:typename:__pointer_type _M_p	access:private	signature:(nullptr)
std::__atomic_base::_M_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _M_type_size(ptrdiff_t __d) const volatile { return __d * sizeof(_PTp); }$/;"	f	struct:std::__atomic_base	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d) const
std::__atomic_base::_M_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _M_type_size(ptrdiff_t __d) const { return __d * sizeof(_PTp); }$/;"	f	struct:std::__atomic_base	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d) const
std::__atomic_base::_S_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr int _S_alignment =$/;"	m	struct:std::__atomic_base	typeref:typename:int	access:private
std::__atomic_base::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base() noexcept = default;$/;"	p	struct:std::__atomic_base	access:public	signature:()
std::__atomic_base::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base(const __atomic_base&) = delete;$/;"	p	struct:std::__atomic_base	access:public	signature:(const __atomic_base &)
std::__atomic_base::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }$/;"	f	struct:std::__atomic_base	access:public	signature:(__int_type __i)
std::__atomic_base::__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }$/;"	f	struct:std::__atomic_base	access:public	signature:(__pointer_type __p)
std::__atomic_base::__int_type	d:/include/c++/14/bits/atomic_base.h	/^      typedef _ITp 	__int_type;$/;"	t	struct:std::__atomic_base	typeref:typename:_ITp	access:private
std::__atomic_base::__pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      typedef _PTp* 	__pointer_type;$/;"	t	struct:std::__atomic_base	typeref:typename:_PTp *	access:private
std::__atomic_base::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m1,memory_order __m2)
std::__atomic_base::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m=memory_order_seq_cst)
std::__atomic_base::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(__pointer_type& __p1, __pointer_type __p2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__pointer_type & __p1,__pointer_type __p2,memory_order __m1,memory_order __m2)
std::__atomic_base::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m1,memory_order __m2)
std::__atomic_base::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__int_type& __i1, __int_type __i2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__int_type & __i1,__int_type __i2,memory_order __m=memory_order_seq_cst)
std::__atomic_base::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(__pointer_type& __p1, __pointer_type __p2,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(__pointer_type & __p1,__pointer_type __p2,memory_order __m1,memory_order __m2)
std::__atomic_base::difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_base	typeref:typename:value_type	access:public
std::__atomic_base::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(__pointer_type __p,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(__pointer_type __p,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(ptrdiff_t __d,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(ptrdiff_t __d,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(ptrdiff_t __d,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(ptrdiff_t __d,memory_order __m=memory_order_seq_cst)
std::__atomic_base::fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:bool	access:public	signature:() const
std::__atomic_base::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:bool	access:public	signature:() const
std::__atomic_base::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_base::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_base::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __int_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_base::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE __pointer_type	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_base::notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_base::notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
std::__atomic_base::notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_base::notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
std::__atomic_base::operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
std::__atomic_base::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
std::__atomic_base::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
std::__atomic_base::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(ptrdiff_t __d) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:()
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:()
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(int)
std::__atomic_base::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(int)
std::__atomic_base::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
std::__atomic_base::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(ptrdiff_t __d) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(ptrdiff_t __d)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base& operator=(const __atomic_base&) = delete;$/;"	p	struct:std::__atomic_base	typeref:typename:__atomic_base &	access:public	signature:(const __atomic_base &)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_base& operator=(const __atomic_base&) volatile = delete;$/;"	p	struct:std::__atomic_base	typeref:typename:__atomic_base &	access:public	signature:(const __atomic_base &)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__pointer_type __p) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(__pointer_type __p)
std::__atomic_base::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(__pointer_type __p) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__pointer_type	access:public	signature:(__pointer_type __p)
std::__atomic_base::operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator __int_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __int_type() const noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
std::__atomic_base::operator __int_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __int_type() const volatile noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
std::__atomic_base::operator __pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __pointer_type() const noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
std::__atomic_base::operator __pointer_type	d:/include/c++/14/bits/atomic_base.h	/^      operator __pointer_type() const volatile noexcept$/;"	f	struct:std::__atomic_base	access:public	signature:() const
std::__atomic_base::operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(__int_type __i) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(__int_type __i) volatile noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:__int_type	access:public	signature:(__int_type __i)
std::__atomic_base::store	d:/include/c++/14/bits/atomic_base.h	/^      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::store	d:/include/c++/14/bits/atomic_base.h	/^      store(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_base::store	d:/include/c++/14/bits/atomic_base.h	/^      store(__pointer_type __p,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__pointer_type __p,memory_order __m=memory_order_seq_cst)
std::__atomic_base::value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _ITp;$/;"	t	struct:std::__atomic_base	typeref:typename:_ITp	access:public
std::__atomic_base::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(__int_type __old,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __old,memory_order __m=memory_order_seq_cst) const
std::__atomic_base::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(__pointer_type __old,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__pointer_type __old,memory_order __m=memory_order_seq_cst) const
std::__atomic_base::~__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      ~__atomic_base() noexcept = default;$/;"	p	struct:std::__atomic_base	access:public	signature:()
std::__atomic_flag_base	d:/include/c++/14/bits/atomic_base.h	/^  struct __atomic_flag_base$/;"	s	namespace:std
std::__atomic_flag_data_type	d:/include/c++/14/bits/atomic_base.h	/^    typedef bool __atomic_flag_data_type;$/;"	t	namespace:std	typeref:typename:bool
std::__atomic_flag_data_type	d:/include/c++/14/bits/atomic_base.h	/^    typedef unsigned char __atomic_flag_data_type;$/;"	t	namespace:std	typeref:typename:unsigned char
std::__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_float$/;"	s	namespace:std
std::__atomic_float::_S_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t _S_alignment = __alignof__(_Fp);$/;"	m	struct:std::__atomic_float	typeref:typename:size_t	access:public
std::__atomic_float::__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float() = default;$/;"	p	struct:std::__atomic_float	access:public	signature:()
std::__atomic_float::__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float(_Fp __t) : _M_fp(__t)$/;"	f	struct:std::__atomic_float	access:public	signature:(_Fp __t)
std::__atomic_float::__atomic_float	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float(const __atomic_float&) = delete;$/;"	p	struct:std::__atomic_float	access:public	signature:(const __atomic_float &)
std::__atomic_float::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst)
std::__atomic_float::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure)
std::__atomic_float::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst)
std::__atomic_float::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure)
std::__atomic_float::difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_float	typeref:typename:value_type	access:public
std::__atomic_float::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Fp __desired,$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __desired,memory_order __m=memory_order_seq_cst)
std::__atomic_float::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(value_type __i,$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_float::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(value_type __i,$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst)
std::__atomic_float::is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free$/;"	m	struct:std::__atomic_float	typeref:typename:bool	access:public
std::__atomic_float::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:() const
std::__atomic_float::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:bool	access:public	signature:() const
std::__atomic_float::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_float::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_float::notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_float::notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_float::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
std::__atomic_float::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
std::__atomic_float::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
std::__atomic_float::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:value_type	access:public	signature:(value_type __i)
std::__atomic_float::operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float& operator=(const __atomic_float&) = delete;$/;"	p	struct:std::__atomic_float	typeref:typename:__atomic_float &	access:public	signature:(const __atomic_float &)
std::__atomic_float::operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_float& operator=(const __atomic_float&) volatile = delete;$/;"	p	struct:std::__atomic_float	typeref:typename:__atomic_float &	access:public	signature:(const __atomic_float &)
std::__atomic_float::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __t)
std::__atomic_float::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_Fp	access:public	signature:(_Fp __t)
std::__atomic_float::operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_float	access:public	signature:() const
std::__atomic_float::operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const volatile noexcept { return this->load(); }$/;"	f	struct:std::__atomic_float	access:public	signature:() const
std::__atomic_float::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst)
std::__atomic_float::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst)
std::__atomic_float::value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Fp;$/;"	t	struct:std::__atomic_float	typeref:typename:_Fp	access:public
std::__atomic_float::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Fp __old,memory_order __m=memory_order_seq_cst) const
std::__atomic_impl	d:/include/c++/14/bits/atomic_base.h	/^  namespace __atomic_impl$/;"	n	namespace:std
std::__atomic_impl::_Diff	d:/include/c++/14/bits/atomic_base.h	/^      using _Diff = __conditional_t<is_pointer_v<_Tp>, ptrdiff_t, _Val<_Tp>>;$/;"	t	namespace:std::__atomic_impl	typeref:typename:__conditional_t<is_pointer_v<_Tp>,ptrdiff_t,_Val<_Tp>>
std::__atomic_impl::_Val	d:/include/c++/14/bits/atomic_base.h	/^      using _Val = typename remove_volatile<_Tp>::type;$/;"	t	namespace:std::__atomic_impl	typeref:typename:remove_volatile<_Tp>::type
std::__atomic_impl::__add_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __add_fetch(_Tp* __ptr, _Diff<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i)
std::__atomic_impl::__add_fetch_flt	d:/include/c++/14/bits/atomic_base.h	/^      __add_fetch_flt(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
std::__atomic_impl::__and_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __and_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
std::__atomic_impl::__clear_padding	d:/include/c++/14/bits/atomic_base.h	/^      __clear_padding(_Tp& __val) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp & __val)
std::__atomic_impl::__compare_exchange	d:/include/c++/14/bits/atomic_base.h	/^      __compare_exchange(_Tp& __val, _Val<_Tp>& __e, _Val<_Tp>& __i,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp & __val,_Val<_Tp> & __e,_Val<_Tp> & __i,bool __is_weak,memory_order __s,memory_order __f)
std::__atomic_impl::__fetch_add_flt	d:/include/c++/14/bits/atomic_base.h	/^      __fetch_add_flt(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
std::__atomic_impl::__fetch_sub_flt	d:/include/c++/14/bits/atomic_base.h	/^      __fetch_sub_flt(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
std::__atomic_impl::__maybe_has_padding	d:/include/c++/14/bits/atomic_base.h	/^      __maybe_has_padding()$/;"	f	namespace:std::__atomic_impl	typeref:typename:bool	signature:()
std::__atomic_impl::__or_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __or_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
std::__atomic_impl::__sub_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __sub_fetch(_Tp* __ptr, _Diff<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i)
std::__atomic_impl::__sub_fetch_flt	d:/include/c++/14/bits/atomic_base.h	/^      __sub_fetch_flt(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
std::__atomic_impl::__xor_fetch	d:/include/c++/14/bits/atomic_base.h	/^      __xor_fetch(_Tp* __ptr, _Val<_Tp> __i) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i)
std::__atomic_impl::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp* __ptr, _Val<_Tp>& __expected,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp * __ptr,_Val<_Tp> & __expected,_Val<_Tp> __desired,memory_order __success,memory_order __failure,bool __ignore_padding=false)
std::__atomic_impl::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp* __ptr, _Val<_Tp>& __expected,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:(_Tp * __ptr,_Val<_Tp> & __expected,_Val<_Tp> __desired,memory_order __success,memory_order __failure,bool __check_padding=false)
std::__atomic_impl::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp* __ptr, _Val<_Tp> __desired, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Val<_Tp>	signature:(_Tp * __ptr,_Val<_Tp> __desired,memory_order __m)
std::__atomic_impl::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(_Tp* __ptr, _Diff<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i,memory_order __m)
std::__atomic_impl::fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
std::__atomic_impl::fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
std::__atomic_impl::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(_Tp* __ptr, _Diff<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Diff<_Tp> __i,memory_order __m)
std::__atomic_impl::fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(_Tp* __ptr, _Val<_Tp> __i, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Tp	signature:(_Tp * __ptr,_Val<_Tp> __i,memory_order __m)
std::__atomic_impl::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	signature:()
std::__atomic_impl::load	d:/include/c++/14/bits/atomic_base.h	/^      load(const _Tp* __ptr, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE _Val<_Tp>	signature:(const _Tp * __ptr,memory_order __m)
std::__atomic_impl::notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all(const _Tp* __ptr) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr)
std::__atomic_impl::notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one(const _Tp* __ptr) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr)
std::__atomic_impl::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp* __ptr, _Val<_Tp> __t, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(_Tp * __ptr,_Val<_Tp> __t,memory_order __m)
std::__atomic_impl::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(const _Tp* __ptr, _Val<_Tp> __old,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr,_Val<_Tp> __old,memory_order __m=memory_order_seq_cst)
std::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Fp, false, true>$/;"	s	namespace:std
std::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp*, false, false>$/;"	s	namespace:std
std::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp, false, false>$/;"	s	namespace:std
std::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^    struct __atomic_ref<_Tp, true, false>$/;"	s	namespace:std
std::__atomic_ref::_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Fp* _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Fp *	access:private
std::__atomic_ref::_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Tp* _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Tp *	access:private
std::__atomic_ref::_M_ptr	d:/include/c++/14/bits/atomic_base.h	/^      _Tp** _M_ptr;$/;"	m	struct:std::__atomic_ref	typeref:typename:_Tp **	access:private
std::__atomic_ref::_S_min_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr int _S_min_alignment$/;"	m	struct:std::__atomic_ref	typeref:typename:int	access:public
std::__atomic_ref::_S_type_size	d:/include/c++/14/bits/atomic_base.h	/^      _S_type_size(ptrdiff_t __d) noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:ptrdiff_t	access:private	signature:(ptrdiff_t __d)
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref() = delete;$/;"	p	struct:std::__atomic_ref	access:public	signature:()
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Fp& __t) : _M_ptr(&__t)$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Fp & __t)
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp& __t) : _M_ptr(&__t)$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp & __t)
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp& __t) : _M_ptr(std::__addressof(__t))$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp & __t)
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(_Tp*& __t) : _M_ptr(std::__addressof(__t))$/;"	f	struct:std::__atomic_ref	access:public	signature:(_Tp * & __t)
std::__atomic_ref::__atomic_ref	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref(const __atomic_ref&) noexcept = default;$/;"	p	struct:std::__atomic_ref	access:public	signature:(const __atomic_ref &)
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_strong	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_strong(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Fp& __expected, _Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Fp & __expected,_Fp __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp& __expected, _Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp & __expected,_Tp __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __order=memory_order_seq_cst) const
std::__atomic_ref::compare_exchange_weak	d:/include/c++/14/bits/atomic_base.h	/^      compare_exchange_weak(_Tp*& __expected, _Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:(_Tp * & __expected,_Tp * __desired,memory_order __success,memory_order __failure) const
std::__atomic_ref::difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = ptrdiff_t;$/;"	t	struct:std::__atomic_ref	typeref:typename:ptrdiff_t	access:public
std::__atomic_ref::difference_type	d:/include/c++/14/bits/atomic_base.h	/^      using difference_type = value_type;$/;"	t	struct:std::__atomic_ref	typeref:typename:value_type	access:public
std::__atomic_ref::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Fp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(_Fp __desired,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp __desired, memory_order __m = memory_order_seq_cst)$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __desired,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __desired,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::exchange	d:/include/c++/14/bits/atomic_base.h	/^      exchange(_Tp* __desired,$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(_Tp * __desired,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(difference_type __d,$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(difference_type __d,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_add	d:/include/c++/14/bits/atomic_base.h	/^      fetch_add(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_and	d:/include/c++/14/bits/atomic_base.h	/^      fetch_and(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_or	d:/include/c++/14/bits/atomic_base.h	/^      fetch_or(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(difference_type __d,$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(difference_type __d,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_sub	d:/include/c++/14/bits/atomic_base.h	/^      fetch_sub(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::fetch_xor	d:/include/c++/14/bits/atomic_base.h	/^      fetch_xor(value_type __i,$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free = ATOMIC_POINTER_LOCK_FREE == 2;$/;"	m	struct:std::__atomic_ref	typeref:typename:bool	access:public
std::__atomic_ref::is_always_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr bool is_always_lock_free$/;"	m	struct:std::__atomic_ref	typeref:typename:bool	access:public
std::__atomic_ref::is_lock_free	d:/include/c++/14/bits/atomic_base.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:bool	access:public	signature:() const
std::__atomic_ref::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::load	d:/include/c++/14/bits/atomic_base.h	/^      load(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::notify_all	d:/include/c++/14/bits/atomic_base.h	/^      notify_all() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_ref::notify_one	d:/include/c++/14/bits/atomic_base.h	/^      notify_one() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:() const
std::__atomic_ref::operator &=	d:/include/c++/14/bits/atomic_base.h	/^      operator&=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
std::__atomic_ref::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:() const
std::__atomic_ref::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(int) const
std::__atomic_ref::operator ++	d:/include/c++/14/bits/atomic_base.h	/^      operator++(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(int) const
std::__atomic_ref::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(difference_type __d) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(difference_type __d) const
std::__atomic_ref::operator +=	d:/include/c++/14/bits/atomic_base.h	/^      operator+=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
std::__atomic_ref::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--() const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:() const
std::__atomic_ref::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE value_type	access:public	signature:(int) const
std::__atomic_ref::operator --	d:/include/c++/14/bits/atomic_base.h	/^      operator--(int) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(int) const
std::__atomic_ref::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(difference_type __d) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(difference_type __d) const
std::__atomic_ref::operator -=	d:/include/c++/14/bits/atomic_base.h	/^      operator-=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
std::__atomic_ref::operator =	d:/include/c++/14/bits/atomic_base.h	/^      __atomic_ref& operator=(const __atomic_ref&) = delete;$/;"	p	struct:std::__atomic_ref	typeref:typename:__atomic_ref &	access:public	signature:(const __atomic_ref &)
std::__atomic_ref::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Fp __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Fp	access:public	signature:(_Fp __t) const
std::__atomic_ref::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Tp __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp	access:public	signature:(_Tp __t) const
std::__atomic_ref::operator =	d:/include/c++/14/bits/atomic_base.h	/^      operator=(_Tp* __t) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public	signature:(_Tp * __t) const
std::__atomic_ref::operator ^=	d:/include/c++/14/bits/atomic_base.h	/^      operator^=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
std::__atomic_ref::operator _Fp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Fp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
std::__atomic_ref::operator _Tp	d:/include/c++/14/bits/atomic_base.h	/^      operator _Tp() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
std::__atomic_ref::operator _Tp*	d:/include/c++/14/bits/atomic_base.h	/^      operator _Tp*() const noexcept { return this->load(); }$/;"	f	struct:std::__atomic_ref	access:public	signature:() const
std::__atomic_ref::operator |=	d:/include/c++/14/bits/atomic_base.h	/^      operator|=(value_type __i) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:value_type	access:public	signature:(value_type __i) const
std::__atomic_ref::required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment = __alignof__(_Fp);$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
std::__atomic_ref::required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment = __alignof__(_Tp*);$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
std::__atomic_ref::required_alignment	d:/include/c++/14/bits/atomic_base.h	/^      static constexpr size_t required_alignment$/;"	m	struct:std::__atomic_ref	typeref:typename:size_t	access:public
std::__atomic_ref::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Tp __t,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp* __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Tp * __t,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Fp;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Fp	access:public
std::__atomic_ref::value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Tp*;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public
std::__atomic_ref::value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Tp;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Tp	access:public
std::__atomic_ref::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Fp __old,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Tp __old,memory_order __m=memory_order_seq_cst) const
std::__atomic_ref::wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Tp* __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Tp * __old,memory_order __m=memory_order_seq_cst) const
std::__check_constructible	d:/include/c++/14/bits/stl_uninitialized.h	/^    __check_constructible()$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION bool	signature:()
std::__check_facet	d:/include/c++/14/bits/basic_ios.h	/^    __check_facet(const _Facet* __f)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION const _Facet &	signature:(const _Facet * __f)
std::__cmpexch_failure_order	d:/include/c++/14/bits/atomic_base.h	/^  __cmpexch_failure_order(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m)
std::__cmpexch_failure_order2	d:/include/c++/14/bits/atomic_base.h	/^  __cmpexch_failure_order2(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m)
std::__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, _Tp&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(const char *,_Tp &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,double &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, float&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,float &,ios_base::iostate &,const __c_locale &)
std::__convert_to_v	d:/include/c++/14/bits/locale_facets.h	/^    __convert_to_v(const char*, long double&, ios_base::iostate&,$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,long double &,ios_base::iostate &,const __c_locale &)
std::__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move$/;"	s	namespace:std
std::__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<false, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<true, false, _Category>$/;"	s	namespace:std
std::__copy_move	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move<true, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move::__assign_one	d:/include/c++/14/bits/stl_algobase.h	/^	__assign_one(_Tp* __to, _Up* __from)$/;"	f	struct:std::__copy_move	typeref:typename:void	access:public	signature:(_Tp * __to,_Up * __from)
std::__copy_move::__copy_m	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_m(_II __first, _II __last, _OI __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	access:public	signature:(_II __first,_II __last,_OI __result)
std::__copy_move::__copy_m	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)$/;"	f	struct:std::__copy_move	typeref:typename:_GLIBCXX20_CONSTEXPR _Up *	access:public	signature:(_Tp * __first,_Tp * __last,_Up * __result)
std::__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(_II, _II,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
std::__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat>	signature:(const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat> &)
std::__copy_move_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
std::__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_ITp, _IRef, _IPtr>,$/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
std::__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
std::__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
std::__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2($/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >>::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >)
std::__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(_CharT*, _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(_CharT *,_CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
std::__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(const _CharT*, const _CharT*,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT,char_traits<_CharT>>>::__type	signature:(const _CharT *,const _CharT *,ostreambuf_iterator<_CharT,char_traits<_CharT>>)
std::__copy_move_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,istreambuf_iterator<_CharT,char_traits<_CharT>>,_CharT *)
std::__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(_CharT* __first, _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(_CharT * __first,_CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(const _CharT* __first, const _CharT* __last,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(const _CharT * __first,const _CharT * __last,ostreambuf_iterator<_CharT> __result)
std::__copy_move_a2	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_move_a2(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,_CharT * __result)
std::__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward$/;"	s	namespace:std
std::__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<false, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, _Category>$/;"	s	namespace:std
std::__copy_move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    struct __copy_move_backward<true, false, random_access_iterator_tag>$/;"	s	namespace:std
std::__copy_move_backward::__copy_move_b	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	access:public	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_move_backward::__copy_move_b	d:/include/c++/14/bits/stl_algobase.h	/^	__copy_move_b(_Tp* __first, _Tp* __last, _Up* __result)$/;"	f	struct:std::__copy_move_backward	typeref:typename:_GLIBCXX20_CONSTEXPR _Up *	access:public	signature:(_Tp * __first,_Tp * __last,_Up * __result)
std::__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,_OI)
std::__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat>	signature:(const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_IIte,_ISeq,_ICat> &,const::__gnu_debug::_Safe_iterator<_OIte,_OSeq,_OCat> &)
std::__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::__copy_move_backward_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a(_II, _II,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(_II,_II,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &)
std::__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1($/;"	p	namespace:std	typeref:typename:_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >	signature:(_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_ITp,_IRef,_IPtr>,_GLIBCXX_STD_C::_Deque_iterator<_OTp,_OTp &,_OTp * >)
std::__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:_OI	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_OI)
std::__copy_move_backward_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * >)
std::__copy_move_backward_a2	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_InputIterator __first,_Size __n,_OutputIterator __result,bool)
std::__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >, _Size,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >>::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,_Size,_GLIBCXX_STD_C::_Deque_iterator<_CharT,_CharT &,_CharT * >,bool)
std::__copy_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT,char_traits<_CharT>>,_Size,_CharT *,bool)
std::__copy_n_a	d:/include/c++/14/bits/streambuf_iterator.h	/^    __copy_n_a(istreambuf_iterator<_CharT> __it, _Size __n, _CharT* __result,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,_CharT * >::__type	signature:(istreambuf_iterator<_CharT> __it,_Size __n,_CharT * __result,bool __strict)
std::__count_if	d:/include/c++/14/bits/stl_algobase.h	/^    __count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred)
std::__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^    class __ctype_abstract_base : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
std::__ctype_abstract_base::__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:(size_t __refs=0)
std::__ctype_abstract_base::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT char_type;$/;"	t	class:std::__ctype_abstract_base	typeref:typename:_CharT	access:public
std::__ctype_abstract_base::do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::__ctype_abstract_base::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::__ctype_abstract_base::do_scan_is	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_scan_not	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::__ctype_abstract_base::do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::__ctype_abstract_base::do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:char_type	access:protected	signature:(char __c) const
std::__ctype_abstract_base::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const = 0;$/;"	p	class:std::__ctype_abstract_base	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::__ctype_abstract_base::is	d:/include/c++/14/bits/locale_facets.h	/^      is(const char_type *__lo, const char_type *__hi, mask *__vec) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::__ctype_abstract_base::is	d:/include/c++/14/bits/locale_facets.h	/^      is(mask __m, char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:bool	access:public	signature:(mask __m,char_type __c) const
std::__ctype_abstract_base::narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::__ctype_abstract_base::narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::__ctype_abstract_base::scan_is	d:/include/c++/14/bits/locale_facets.h	/^      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::scan_not	d:/include/c++/14/bits/locale_facets.h	/^      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::__ctype_abstract_base::toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::__ctype_abstract_base::widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
std::__ctype_abstract_base::widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::__ctype_abstract_base::~__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:()
std::__debug	d:/include/c++/14/debug/debug.h	/^  namespace __debug { } $/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/char_traits.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/charconv.h	/^namespace __detail$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/shared_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/stl_iterator.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/stl_tempbuf.h	/^  namespace __detail$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/unique_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std
std::__detail	d:/include/c++/14/bits/unique_ptr.h	/^namespace __detail$/;"	n	namespace:std
std::__detail::_It::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename _It::iterator_category; }$/;"	m	class:std::__detail::_It	typeref:meta:typename
std::__detail::_It::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename _It::iterator_concept; }$/;"	m	class:std::__detail::_It	typeref:meta:typename
std::__detail::_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq$/;"	s	namespace:std::__detail
std::__detail::_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq<_Tp[]>$/;"	s	namespace:std::__detail
std::__detail::_MakeUniq	d:/include/c++/14/bits/unique_ptr.h	/^    struct _MakeUniq<_Tp[_Bound]>$/;"	s	namespace:std::__detail
std::__detail::_MakeUniq::__array	d:/include/c++/14/bits/unique_ptr.h	/^    { typedef unique_ptr<_Tp[]> __array; };$/;"	t	struct:std::__detail::_MakeUniq	typeref:typename:unique_ptr<_Tp[]>	access:public
std::__detail::_MakeUniq::__invalid_type	d:/include/c++/14/bits/unique_ptr.h	/^    { struct __invalid_type { }; };$/;"	s	struct:std::__detail::_MakeUniq	access:public
std::__detail::_MakeUniq::__single_object	d:/include/c++/14/bits/unique_ptr.h	/^    { typedef unique_ptr<_Tp> __single_object; };$/;"	t	struct:std::__detail::_MakeUniq	typeref:typename:unique_ptr<_Tp>	access:public
std::__detail::__basic_const_iterator_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __basic_const_iterator_iter_cat$/;"	s	namespace:std::__detail
std::__detail::__basic_const_iterator_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __basic_const_iterator_iter_cat<_It>$/;"	s	namespace:std::__detail
std::__detail::__basic_const_iterator_iter_cat::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_category = __iter_category_t<_It>; };$/;"	t	struct:std::__detail::__basic_const_iterator_iter_cat	typeref:typename:__iter_category_t<_It>	access:public
std::__detail::__char_traits_cmp_cat	d:/include/c++/14/bits/char_traits.h	/^      __char_traits_cmp_cat(int __cmp) noexcept$/;"	f	namespace:std::__detail	typeref:typename:auto	signature:(int __cmp)
std::__detail::__clamp_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      using __clamp_iter_cat$/;"	t	namespace:std::__detail	typeref:typename:__conditional_t<derived_from<_Cat,_Limit>,_Limit,_Otherwise>
std::__detail::__const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      struct __const_sentinel$/;"	s	namespace:std::__detail
std::__detail::__const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      struct __const_sentinel<_Sent>$/;"	s	namespace:std::__detail
std::__detail::__const_sentinel::type	d:/include/c++/14/bits/stl_iterator.h	/^      { using type = _Sent; };$/;"	t	struct:std::__detail::__const_sentinel	typeref:typename:_Sent	access:public
std::__detail::__const_sentinel::type	d:/include/c++/14/bits/stl_iterator.h	/^      { using type = const_iterator<_Sent>; };$/;"	t	struct:std::__detail::__const_sentinel	typeref:typename:const_iterator<_Sent>	access:public
std::__detail::__counted_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_cat$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_cat<_It>$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_cat::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_category = typename _It::iterator_category; };$/;"	t	struct:std::__detail::__counted_iter_cat	typeref:typename:_It::iterator_category	access:public
std::__detail::__counted_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_concept$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_concept<_It>$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_concept::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      { using iterator_concept = typename _It::iterator_concept; };$/;"	t	struct:std::__detail::__counted_iter_concept	typeref:typename:_It::iterator_concept	access:public
std::__detail::__counted_iter_value_type	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_value_type$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_value_type	d:/include/c++/14/bits/stl_iterator.h	/^      struct __counted_iter_value_type<_It>$/;"	s	namespace:std::__detail
std::__detail::__counted_iter_value_type::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      { using value_type = iter_value_t<_It>; };$/;"	t	struct:std::__detail::__counted_iter_value_type	typeref:typename:iter_value_t<_It>	access:public
std::__detail::__get_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      __get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOTHROW$/;"	f	namespace:std::__detail	typeref:typename:_Tp *	signature:(ptrdiff_t __len)
std::__detail::__integer_to_chars_is_unsigned	d:/include/c++/14/bits/charconv.h	/^    constexpr bool __integer_to_chars_is_unsigned$/;"	v	namespace:std::__detail	typeref:typename:bool
std::__detail::__invalid_make_unique_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __invalid_make_unique_t = typename _MakeUniq<_Tp>::__invalid_type;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__invalid_type
std::__detail::__is_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      inline constexpr bool __is_const_iterator = false;$/;"	v	namespace:std::__detail	typeref:typename:bool
std::__detail::__is_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      inline constexpr bool __is_const_iterator<basic_const_iterator<_It>> = true;$/;"	v	namespace:std::__detail	typeref:typename:bool
std::__detail::__iter_category_t	d:/include/c++/14/bits/stl_iterator.h	/^      requires requires { typename __iter_category_t<_Iterator>; }$/;"	v	namespace:std::__detail	typeref:meta:typename
std::__detail::__iter_const_rvalue_reference_t	d:/include/c++/14/bits/stl_iterator.h	/^      using __iter_const_rvalue_reference_t$/;"	t	namespace:std::__detail	typeref:typename:common_reference_t<const iter_value_t<_It> &&,iter_rvalue_reference_t<_It>>
std::__detail::__move_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __move_iter_cat$/;"	s	namespace:std::__detail
std::__detail::__move_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      struct __move_iter_cat<_Iterator>$/;"	s	namespace:std::__detail
std::__detail::__move_iter_cat::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^	using iterator_category$/;"	t	struct:std::__detail::__move_iter_cat	typeref:typename:__clamp_iter_cat<__iter_category_t<_Iterator>,random_access_iterator_tag>	access:public
std::__detail::__return_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      __return_temporary_buffer(_Tp* __p,$/;"	f	namespace:std::__detail	typeref:typename:void	signature:(_Tp * __p,size_t __len)
std::__detail::__to_chars_10_impl	d:/include/c++/14/bits/charconv.h	/^    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX23_CONSTEXPR void	signature:(char * __first,unsigned __len,_Tp __val)
std::__detail::__to_chars_len	d:/include/c++/14/bits/charconv.h	/^    __to_chars_len(_Tp __value, int __base = 10) noexcept$/;"	f	namespace:std::__detail	typeref:typename:_GLIBCXX14_CONSTEXPR unsigned	signature:(_Tp __value,int __base=10)
std::__detail::__unique_ptr_array_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __unique_ptr_array_t = typename _MakeUniq<_Tp>::__array;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__array
std::__detail::__unique_ptr_t	d:/include/c++/14/bits/unique_ptr.h	/^    using __unique_ptr_t = typename _MakeUniq<_Tp>::__single_object;$/;"	t	namespace:std::__detail	typeref:typename:_MakeUniq<_Tp>::__single_object
std::__detail::__variant	d:/include/c++/14/bits/basic_string.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
std::__detail::__variant	d:/include/c++/14/bits/shared_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
std::__detail::__variant	d:/include/c++/14/bits/unique_ptr.h	/^  namespace __detail::__variant$/;"	n	namespace:std::__detail
std::__detail::__variant::_Never_valueless_alt	d:/include/c++/14/bits/basic_string.h	/^      struct _Never_valueless_alt<std::basic_string<_Tp, _Traits, _Alloc>>$/;"	s	namespace:std::__detail::__variant	inherits:__and_<is_nothrow_move_constructible<std::basic_string<_Tp,_Traits,_Alloc>>,is_nothrow_move_assignable<std::basic_string<_Tp,_Traits,_Alloc>>>::type
std::__detail::__variant::_Never_valueless_alt	d:/include/c++/14/bits/shared_ptr.h	/^      struct _Never_valueless_alt<std::shared_ptr<_Tp>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
std::__detail::__variant::_Never_valueless_alt	d:/include/c++/14/bits/shared_ptr.h	/^      struct _Never_valueless_alt<std::weak_ptr<_Tp>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
std::__detail::__variant::_Never_valueless_alt	d:/include/c++/14/bits/unique_ptr.h	/^      struct _Never_valueless_alt<std::unique_ptr<_Tp, _Del>>$/;"	s	namespace:std::__detail::__variant	inherits:std::true_type
std::__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_const_iterator<_Tp>,_GLIBCXX_STD_C::_List_const_iterator<_Tp>,input_iterator_tag)
std::__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_GLIBCXX_STD_C::_List_iterator<_Tp>,$/;"	p	namespace:std	typeref:typename:ptrdiff_t	signature:(_GLIBCXX_STD_C::_List_iterator<_Tp>,_GLIBCXX_STD_C::_List_iterator<_Tp>,input_iterator_tag)
std::__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CONTAINER _GLIBCXX14_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last,input_iterator_tag)
std::__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_OutputIterator, _OutputIterator, output_iterator_tag) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(_OutputIterator,_OutputIterator,output_iterator_tag)
std::__distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR typename iterator_traits<_RandomAccessIterator>::difference_type	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,random_access_iterator_tag)
std::__do_alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc& __one, const _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,const _Alloc & __two,true_type)
std::__do_alloc_on_copy	d:/include/c++/14/bits/alloc_traits.h	/^    __do_alloc_on_copy(_Alloc&, const _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,const _Alloc &,false_type)
std::__do_alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
std::__do_alloc_on_move	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_move(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
std::__do_alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc& __one, _Alloc& __two, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc & __one,_Alloc & __two,true_type)
std::__do_alloc_on_swap	d:/include/c++/14/bits/alloc_traits.h	/^    inline void __do_alloc_on_swap(_Alloc&, _Alloc&, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Alloc &,_Alloc &,false_type)
std::__do_uninit_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::__do_uninit_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
std::__do_uninit_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __do_uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
std::__enable_if_has_tuple_size	d:/include/c++/14/bits/utility.h	/^    using __enable_if_has_tuple_size = _Tp;$/;"	t	namespace:std	typeref:typename:_Tp
std::__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __enable_shared_from_this$/;"	c	namespace:std
std::__enable_shared_from_this::_M_weak_assign	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_weak_assign(_Tp1* __p, const __shared_count<_Lp>& __n) const noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:void	access:private	signature:(_Tp1 * __p,const __shared_count<_Lp> & __n) const
std::__enable_shared_from_this::_M_weak_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      mutable __weak_ptr<_Tp, _Lp>  _M_weak_this;$/;"	m	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<_Tp,_Lp>	access:private
std::__enable_shared_from_this::__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      __enable_shared_from_this(const __enable_shared_from_this&) noexcept { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:(const __enable_shared_from_this &)
std::__enable_shared_from_this::__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __enable_shared_from_this() noexcept { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:()
std::__enable_shared_from_this::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __enable_shared_from_this&) noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__enable_shared_from_this &	access:protected	signature:(const __enable_shared_from_this &)
std::__enable_shared_from_this::shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      shared_from_this() const$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__shared_ptr<const _Tp,_Lp>	access:public	signature:() const
std::__enable_shared_from_this::shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      shared_from_this()$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__shared_ptr<_Tp,_Lp>	access:public	signature:()
std::__enable_shared_from_this::weak_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      weak_from_this() const noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<const _Tp,_Lp>	access:public	signature:() const
std::__enable_shared_from_this::weak_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      weak_from_this() noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<_Tp,_Lp>	access:public	signature:()
std::__enable_shared_from_this::~__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__enable_shared_from_this() { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:()
std::__enable_shared_from_this_base	d:/include/c++/14/bits/shared_ptr.h	/^      __enable_shared_from_this_base(const __shared_count<>&,$/;"	f	namespace:std	typeref:typename:const enable_shared_from_this *	signature:(const __shared_count<> &,const enable_shared_from_this * __p)
std::__enable_shared_from_this_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      __enable_shared_from_this_base(const __shared_count<_Lp>&,$/;"	f	namespace:std	typeref:typename:const __enable_shared_from_this *	signature:(const __shared_count<_Lp> &,const __enable_shared_from_this * __p)
std::__equal	d:/include/c++/14/bits/stl_algobase.h	/^    struct __equal$/;"	s	namespace:std
std::__equal	d:/include/c++/14/bits/stl_algobase.h	/^    struct __equal<true>$/;"	s	namespace:std
std::__equal4	d:/include/c++/14/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__equal4	d:/include/c++/14/bits/stl_algobase.h	/^    __equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_BinaryPredicate __binary_pred)
std::__equal::equal	d:/include/c++/14/bits/stl_algobase.h	/^	equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__equal::equal	d:/include/c++/14/bits/stl_algobase.h	/^	equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)$/;"	f	struct:std::__equal	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Tp * __first2)
std::__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(_II1, _II1,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
std::__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,_II2)
std::__equal_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux(const ::__gnu_debug::_Safe_iterator<_II1, _Seq1, _Cat1>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_II2,_Seq2,_Cat2> &)
std::__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>,_II)
std::__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_GLIBCXX_STD_C::_Deque_iterator<_Tp1, _Ref1, _Ptr1>,$/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
std::__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_II, _II,$/;"	p	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_random_access_iter<_II>::__value,bool>::__type	signature:(_II,_II,_GLIBCXX_STD_C::_Deque_iterator<_Tp,_Ref,_Ptr>)
std::__equal_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::__erased_type	d:/include/c++/14/bits/uses_allocator.h	/^  struct __erased_type { };$/;"	s	namespace:std
std::__exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^  namespace __exception_ptr$/;"	n	namespace:std
std::__exception_ptr::__dest_thunk	d:/include/c++/14/bits/exception_ptr.h	/^      __dest_thunk(void* __x)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_CDTOR_CALLABI void	signature:(void * __x)
std::__exception_ptr::exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    class exception_ptr$/;"	c	namespace:std::__exception_ptr
std::__exception_ptr::exception_ptr::_M_addref	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_addref() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
std::__exception_ptr::exception_ptr::_M_exception_object	d:/include/c++/14/bits/exception_ptr.h	/^      void* _M_exception_object;$/;"	m	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private
std::__exception_ptr::exception_ptr::_M_get	d:/include/c++/14/bits/exception_ptr.h	/^      void *_M_get() const _GLIBCXX_NOEXCEPT __attribute__ ((__pure__));$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void *	access:private	signature:() const
std::__exception_ptr::exception_ptr::_M_release	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_release() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:private	signature:()
std::__exception_ptr::exception_ptr::_M_safe_bool_dummy	d:/include/c++/14/bits/exception_ptr.h	/^      void _M_safe_bool_dummy() _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:()
std::__exception_ptr::exception_ptr::__cxa_exception_type	d:/include/c++/14/bits/exception_ptr.h	/^      __cxa_exception_type() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:const class std::type_info *	access:public	signature:() const
std::__exception_ptr::exception_ptr::__safe_bool	d:/include/c++/14/bits/exception_ptr.h	/^      typedef void (exception_ptr::*__safe_bool)();$/;"	t	class:std::__exception_ptr::exception_ptr	typeref:typename:void (exception_ptr::*)()	access:public
std::__exception_ptr::exception_ptr::exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^      exception_ptr(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(exception_ptr && __o)
std::__exception_ptr::exception_ptr::exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^      exception_ptr(nullptr_t) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:(nullptr_t)
std::__exception_ptr::exception_ptr::exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::exception_ptr() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:()
std::__exception_ptr::exception_ptr::exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::exception_ptr(const exception_ptr& __other)$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:(const exception_ptr & __other)
std::__exception_ptr::exception_ptr::operator !	d:/include/c++/14/bits/exception_ptr.h	/^      bool operator!() const _GLIBCXX_USE_NOEXCEPT$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:bool	access:public	signature:() const
std::__exception_ptr::exception_ptr::operator =	d:/include/c++/14/bits/exception_ptr.h	/^      operator=(const exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(const exception_ptr &)
std::__exception_ptr::exception_ptr::operator =	d:/include/c++/14/bits/exception_ptr.h	/^      operator=(exception_ptr&& __o) noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:exception_ptr &	access:public	signature:(exception_ptr && __o)
std::__exception_ptr::exception_ptr::operator =	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::operator=(const exception_ptr& __other) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED exception_ptr &	signature:(const exception_ptr & __other)
std::__exception_ptr::exception_ptr::operator __safe_bool	d:/include/c++/14/bits/exception_ptr.h	/^      operator __safe_bool() const _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
std::__exception_ptr::exception_ptr::operator bool	d:/include/c++/14/bits/exception_ptr.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::__exception_ptr::exception_ptr	access:public	signature:() const
std::__exception_ptr::exception_ptr::swap	d:/include/c++/14/bits/exception_ptr.h	/^      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:(exception_ptr &)
std::__exception_ptr::exception_ptr::swap	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::swap(exception_ptr &__other) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED void	signature:(exception_ptr & __other)
std::__exception_ptr::exception_ptr::~exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:()
std::__exception_ptr::operator !=	d:/include/c++/14/bits/exception_ptr.h	/^      operator!=(const exception_ptr& __x, const exception_ptr& __y)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED bool	signature:(const exception_ptr & __x,const exception_ptr & __y)
std::__exception_ptr::operator ==	d:/include/c++/14/bits/exception_ptr.h	/^      operator==(const exception_ptr& __x, const exception_ptr& __y)$/;"	f	namespace:std::__exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED bool	signature:(const exception_ptr & __x,const exception_ptr & __y)
std::__exception_ptr::swap	d:/include/c++/14/bits/exception_ptr.h	/^    swap(exception_ptr& __lhs, exception_ptr& __rhs)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(exception_ptr & __lhs,exception_ptr & __rhs)
std::__exchange	d:/include/c++/14/bits/move.h	/^    __exchange(_Tp& __obj, _Up&& __new_val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp	signature:(_Tp & __obj,_Up && __new_val)
std::__false_type	d:/include/c++/14/bits/cpp_type_traits.h	/^  struct __false_type { };$/;"	s	namespace:std
std::__fill_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a(_FIte __first, _FIte __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_FIte __first,_FIte __last,const _Tp & __value)
std::__fill_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> &,const _Tp &)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(::__gnu_cxx::__normal_iterator<_Ite, _Cont> __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(::__gnu_cxx::__normal_iterator<_Ite,_Cont> __first,::__gnu_cxx::__normal_iterator<_Ite,_Cont> __last,const _Tp & __value)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,void>::__type	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(_Tp* __first, _Tp* __last, const _Tp& __c)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_byte<_Tp>::__value,void>::__type	signature:(_Tp * __first,_Tp * __last,const _Tp & __c)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_a1(const _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>&,$/;"	p	namespace:std	typeref:typename:void	signature:(const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _GLIBCXX_STD_C::_Deque_iterator<_Tp,_Tp &,_Tp * > &,const _VTp &)
std::__fill_a1	d:/include/c++/14/bits/stl_algobase.h	/^  __fill_a1(_GLIBCXX_STD_C::_Bit_iterator, _GLIBCXX_STD_C::_Bit_iterator,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_GLIBCXX_STD_C::_Bit_iterator,_GLIBCXX_STD_C::_Bit_iterator,const bool &)
std::__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
std::__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::output_iterator_tag)
std::__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OutputIterator	signature:(_OutputIterator __first,_Size __n,const _Tp & __value,std::random_access_iterator_tag)
std::__fill_n_a	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>& __first,$/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat>	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,_Cat> & __first,_Size __n,const _Tp & __value,std::input_iterator_tag)
std::__fill_n_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
std::__fill_n_a1	d:/include/c++/14/bits/stl_algobase.h	/^    __fill_n_a1(_OutputIterator __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value,_OutputIterator>::__type	signature:(_OutputIterator __first,_Size __n,const _Tp & __value)
std::__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _InputIterator	signature:(_InputIterator __first,_InputIterator __last,_Predicate __pred,input_iterator_tag)
std::__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_Iterator __first, _Iterator __last, _Predicate __pred)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __first,_Iterator __last,_Predicate __pred)
std::__find_if	d:/include/c++/14/bits/stl_algobase.h	/^    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _RandomAccessIterator	signature:(_RandomAccessIterator __first,_RandomAccessIterator __last,_Predicate __pred,random_access_iterator_tag)
std::__find_uniq_type_in_pack	d:/include/c++/14/bits/utility.h	/^    __find_uniq_type_in_pack()$/;"	f	namespace:std	typeref:typename:size_t	signature:()
std::__get_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __get_first_arg$/;"	s	namespace:std
std::__get_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __get_first_arg<_SomeTemplate<_Tp, _Types...>>$/;"	s	namespace:std
std::__get_first_arg::type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = _Tp; };$/;"	t	struct:std::__get_first_arg	typeref:typename:_Tp	access:public
std::__get_first_arg::type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = __undefined; };$/;"	t	struct:std::__get_first_arg	typeref:typename:__undefined	access:public
std::__has_is_transparent	d:/include/c++/14/bits/stl_function.h	/^    struct __has_is_transparent$/;"	s	namespace:std
std::__has_is_transparent	d:/include/c++/14/bits/stl_function.h	/^    struct __has_is_transparent<_Func, _SfinaeType,$/;"	s	namespace:std
std::__has_is_transparent::type	d:/include/c++/14/bits/stl_function.h	/^    { typedef void type; };$/;"	t	struct:std::__has_is_transparent	typeref:typename:void	access:public
std::__has_is_transparent_t	d:/include/c++/14/bits/stl_function.h	/^    using __has_is_transparent_t$/;"	t	namespace:std	typeref:typename:__has_is_transparent<_Func,_SfinaeType>::type
std::__hash_base	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_base$/;"	s	namespace:std
std::__hash_base::_GLIBCXX17_DEPRECATED	d:/include/c++/14/bits/functional_hash.h	/^      typedef _Arg      argument_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Arg argument_type	access:public
std::__hash_base::_GLIBCXX17_DEPRECATED	d:/include/c++/14/bits/functional_hash.h	/^      typedef _Result     result_type _GLIBCXX17_DEPRECATED;$/;"	t	struct:std::__hash_base	typeref:typename:_Result result_type	access:public
std::__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_enum$/;"	s	namespace:std
std::__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^    struct __hash_enum<_Tp, true> : public __hash_base<size_t, _Tp>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp>
std::__hash_enum::__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^      __hash_enum(__hash_enum&&);$/;"	p	struct:std::__hash_enum	access:private	signature:(__hash_enum &&)
std::__hash_enum::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(_Tp __val) const noexcept$/;"	f	struct:std::__hash_enum	typeref:typename:size_t	access:public	signature:(_Tp __val) const
std::__hash_enum::~__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^      ~__hash_enum();$/;"	p	struct:std::__hash_enum	access:private	signature:()
std::__invfwd	d:/include/c++/14/bits/invoke.h	/^    __invfwd(typename remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _Up &&	signature:(typename remove_reference<_Tp>::type & __t)
std::__invoke	d:/include/c++/14/bits/invoke.h	/^    __invoke(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__invoke_result<_Callable,_Args...>::type	signature:(_Callable && __fn,_Args &&...__args)
std::__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memfun_deref,_MemFun && __f,_Tp && __t,_Args &&...__args)
std::__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memfun_ref,_MemFun && __f,_Tp && __t,_Args &&...__args)
std::__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memobj_deref, _MemPtr&& __f, _Tp&& __t)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memobj_deref,_MemPtr && __f,_Tp && __t)
std::__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_memobj_ref, _MemPtr&& __f, _Tp&& __t)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_memobj_ref,_MemPtr && __f,_Tp && __t)
std::__invoke_impl	d:/include/c++/14/bits/invoke.h	/^    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_Res	signature:(__invoke_other,_Fn && __f,_Args &&...__args)
std::__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR __enable_if_t<is_void<_Res>::value,_Res>	signature:(_Callable && __fn,_Args &&...__args)
std::__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:__enable_if_t<!is_void<_Res>::value,_Res>	signature:(_Callable && __fn,_Args &&...__args)
std::__invoke_r	d:/include/c++/14/bits/invoke.h	/^    __invoke_r(_Callable&& __fn, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:enable_if_t<is_invocable_r_v<_Res,_Callable,_Args...>,_Res>	signature:(_Callable && __fn,_Args &&...__args)
std::__is_alloc_insertable_impl	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl$/;"	s	namespace:std	inherits:false_type
std::__is_alloc_insertable_impl	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_alloc_insertable_impl<_Alloc, _Tp, _ValueT,$/;"	s	namespace:std	inherits:true_type
std::__is_allocator	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_allocator : false_type { };$/;"	s	namespace:std	inherits:false_type
std::__is_allocator	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_allocator<_Alloc,$/;"	s	namespace:std	inherits:true_type
std::__is_arithmetic	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_arithmetic$/;"	s	namespace:std	inherits:__traitor<__is_integer<_Tp>,__is_floating<_Tp>>
std::__is_bitwise_relocatable	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __is_bitwise_relocatable$/;"	s	namespace:std	inherits:is_trivial<_Tp>
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte$/;"	s	namespace:std
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<byte>$/;"	s	namespace:std
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<char8_t>$/;"	s	namespace:std
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<char>$/;"	s	namespace:std
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<signed char>$/;"	s	namespace:std
std::__is_byte	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_byte<unsigned char>$/;"	s	namespace:std
std::__is_byte::__anon7e5ad8922503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anon7e5ad8922603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anon7e5ad8922703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anon7e5ad8922803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anon7e5ad8922903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__anon7e5ad8922a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_byte	access:public
std::__is_byte::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__false_type	access:public
std::__is_byte::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_byte	typeref:typename:__true_type	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922503	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922603	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922703	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922803	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922903	access:public
std::__is_byte::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_byte::__anon7e5ad8922a03	access:public
std::__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char$/;"	s	namespace:std
std::__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char<char>$/;"	s	namespace:std
std::__is_char	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_char<wchar_t>$/;"	s	namespace:std
std::__is_char::__anon7e5ad8922203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__anon7e5ad8922303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__anon7e5ad8922403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_char	access:public
std::__is_char::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__false_type	access:public
std::__is_char::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_char	typeref:typename:__true_type	access:public
std::__is_char::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_char::__anon7e5ad8922203	access:public
std::__is_char::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon7e5ad8922303	access:public
std::__is_char::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_char::__anon7e5ad8922403	access:public
std::__is_copy_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_copy_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_typeconst&>::type
std::__is_copy_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_copy_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_copy_constructible<_Tp>
std::__is_erased_or_convertible	d:/include/c++/14/bits/uses_allocator.h	/^    using __is_erased_or_convertible$/;"	t	namespace:std	typeref:typename:__or_<is_convertible<_Alloc,_Tp>,is_same<_Tp,__erased_type>>
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^    struct __is_fast_hash<hash<basic_string<_CharT, _Traits, _Alloc>>>$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^    struct __is_fast_hash<hash<basic_string<wchar_t, char_traits<wchar_t>,$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u16string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u32string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<u8string>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/basic_string.h	/^  template<> struct __is_fast_hash<hash<wstring>> : std::false_type { };$/;"	s	namespace:std	inherits:std::false_type
std::__is_fast_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __is_fast_hash : public std::true_type$/;"	s	namespace:std	inherits:std::true_type
std::__is_fast_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __is_fast_hash<hash<long double>> : public std::false_type$/;"	s	namespace:std	inherits:std::false_type
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float128>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float16>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float32>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<_Float64>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<__gnu_cxx::__bfloat16_t>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<double>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<float>$/;"	s	namespace:std
std::__is_floating	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_floating<long double>$/;"	s	namespace:std
std::__is_floating::__anon7e5ad8921703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__anon7e5ad8921f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_floating	access:public
std::__is_floating::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__false_type	access:public
std::__is_floating::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_floating	typeref:typename:__true_type	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921703	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921803	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921903	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921a03	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921b03	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921c03	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921d03	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921e03	access:public
std::__is_floating::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_floating::__anon7e5ad8921f03	access:public
std::__is_in_place_index_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_index_v = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_in_place_index_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_index_v<in_place_index_t<_Nm>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_in_place_type	d:/include/c++/14/bits/utility.h	/^    using __is_in_place_type = bool_constant<__is_in_place_type_v<_Tp>>;$/;"	t	namespace:std	typeref:typename:bool_constant<__is_in_place_type_v<_Tp>>
std::__is_in_place_type_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_type_v = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_in_place_type_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr bool __is_in_place_type_v<in_place_type_t<_Tp>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<bool>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char16_t>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char32_t>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char8_t>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<char>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<int>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<long long>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<long>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<short>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<signed char>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned char>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned int>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long long>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned long>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<unsigned short>$/;"	s	namespace:std
std::__is_integer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_integer<wchar_t>$/;"	s	namespace:std
std::__is_integer::__anon7e5ad8920603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920703	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920803	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920903	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920a03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8920f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921003	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921203	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921303	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__anon7e5ad8921603	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_integer	access:public
std::__is_integer::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__false_type	access:public
std::__is_integer::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_integer	typeref:typename:__true_type	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920603	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920703	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920803	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920903	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920a03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920b03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920c03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920d03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920e03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8920f03	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921003	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921103	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921203	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921303	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921403	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921503	access:public
std::__is_integer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_integer::__anon7e5ad8921603	access:public
std::__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered$/;"	s	namespace:std
std::__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<_Tp, false>$/;"	s	namespace:std
std::__is_memcmp_ordered	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered<std::byte, false>$/;"	s	namespace:std
std::__is_memcmp_ordered::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = _Tp(-1) > _Tp(1); \/\/ is unsigned$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
std::__is_memcmp_ordered::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:const bool	access:public
std::__is_memcmp_ordered::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered	typeref:typename:bool	access:public
std::__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with$/;"	s	namespace:std
std::__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, _Up, false>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<_Tp, std::byte, _SameSize>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, _Up, _SameSize>$/;"	s	namespace:std
std::__is_memcmp_ordered_with	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_memcmp_ordered_with<std::byte, std::byte, true>$/;"	s	namespace:std
std::__is_memcmp_ordered_with::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = __is_memcmp_ordered<_Tp>::__value$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
std::__is_memcmp_ordered_with::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      static const bool __value = false;$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:const bool	access:public
std::__is_memcmp_ordered_with::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = false; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
std::__is_memcmp_ordered_with::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^    { static constexpr bool __value = true; };$/;"	m	struct:std::__is_memcmp_ordered_with	typeref:typename:bool	access:public
std::__is_move_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_move_insertable$/;"	s	namespace:std	inherits:__is_alloc_insertable_impl<_Alloc,typename_Alloc::value_type>::type
std::__is_move_insertable	d:/include/c++/14/bits/alloc_traits.h	/^    struct __is_move_insertable<allocator<_Tp>>$/;"	s	namespace:std	inherits:is_move_constructible<_Tp>
std::__is_move_iterator	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_move_iterator$/;"	s	namespace:std
std::__is_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    struct __is_move_iterator<move_iterator<_Iterator> >$/;"	s	namespace:std
std::__is_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    struct __is_move_iterator<reverse_iterator<_Iterator> >$/;"	s	namespace:std	inherits:__is_move_iterator<_Iterator>
std::__is_move_iterator::__anon657713b40203	d:/include/c++/14/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_move_iterator	access:public
std::__is_move_iterator::__anon7e5ad8922f03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_move_iterator	access:public
std::__is_move_iterator::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__false_type	access:public
std::__is_move_iterator::__type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_move_iterator	typeref:typename:__true_type	access:public
std::__is_move_iterator::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_move_iterator::__anon7e5ad8922f03	access:public
std::__is_move_iterator::__value	d:/include/c++/14/bits/stl_iterator.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_move_iterator::__anon657713b40203	access:public
std::__is_nonvolatile_trivially_copyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable$/;"	s	namespace:std
std::__is_nonvolatile_trivially_copyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_nonvolatile_trivially_copyable<volatile _Tp>$/;"	s	namespace:std
std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922b03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922c03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_nonvolatile_trivially_copyable	access:public
std::__is_nonvolatile_trivially_copyable::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922c03	access:public
std::__is_nonvolatile_trivially_copyable::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = __is_trivially_copyable(_Tp) };$/;"	e	enum:std::__is_nonvolatile_trivially_copyable::__anon7e5ad8922b03	access:public
std::__is_nothrow_uses_allocator_constructible	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_nothrow_uses_allocator_constructible$/;"	s	namespace:std	inherits:__is_uses_allocator_predicate<is_nothrow_constructible,_Tp,_Alloc,_Args...>
std::__is_nothrow_uses_allocator_constructible_v	d:/include/c++/14/bits/uses_allocator.h	/^    __is_nothrow_uses_allocator_constructible_v =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE bool
std::__is_pair	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_pair = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_pair	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_pair<pair<_Tp, _Up>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_permutation	d:/include/c++/14/bits/stl_algobase.h	/^    __is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_BinaryPredicate __pred)
std::__is_pointer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_pointer$/;"	s	namespace:std
std::__is_pointer	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_pointer<_Tp*>$/;"	s	namespace:std
std::__is_pointer::__anon7e5ad8922003	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_pointer	access:public
std::__is_pointer::__anon7e5ad8922103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_pointer	access:public
std::__is_pointer::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__false_type	access:public
std::__is_pointer::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_pointer	typeref:typename:__true_type	access:public
std::__is_pointer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_pointer::__anon7e5ad8922003	access:public
std::__is_pointer::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_pointer::__anon7e5ad8922103	access:public
std::__is_random_access_iter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std
std::__is_random_access_iter	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __is_random_access_iter$/;"	s	namespace:std	inherits:is_base_of<random_access_iterator_tag,_Cat>
std::__is_random_access_iter::_Base	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef is_base_of<random_access_iterator_tag, _Cat> _Base;$/;"	t	struct:std::__is_random_access_iter	typeref:typename:is_base_of<random_access_iterator_tag,_Cat>	access:public
std::__is_random_access_iter::__anon31cdb6c20103	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	g	struct:std::__is_random_access_iter	access:public
std::__is_random_access_iter::__anon31cdb6c20203	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	g	struct:std::__is_random_access_iter	access:public
std::__is_random_access_iter::__value	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      enum { __value = _Base::value };$/;"	e	enum:std::__is_random_access_iter::__anon31cdb6c20103	access:public
std::__is_random_access_iter::__value	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    { enum { __value = __is_base_of(random_access_iterator_tag, _Cat) }; };$/;"	e	enum:std::__is_random_access_iter::__anon31cdb6c20203	access:public
std::__is_scalar	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_scalar$/;"	s	namespace:std	inherits:__traitor<__is_arithmetic<_Tp>,__is_pointer<_Tp>>
std::__is_shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    static constexpr bool __is_shared_ptr = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    static constexpr bool __is_shared_ptr<shared_ptr<_Tp>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_like_impl	d:/include/c++/14/bits/stl_pair.h	/^    struct __is_tuple_like_impl<pair<_T1, _T2>> : true_type$/;"	s	namespace:std	inherits:true_type
std::__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<array<_Tp, _Nm>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<pair<_T1, _T2>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_like_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_like_v<tuple<_Elements...>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_v = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_tuple_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr bool __is_tuple_v<tuple<_Ts...>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    static constexpr bool __is_unique_ptr = false;$/;"	v	namespace:std	typeref:typename:bool
std::__is_unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    static constexpr bool __is_unique_ptr<unique_ptr<_Tp, _Del>> = true;$/;"	v	namespace:std	typeref:typename:bool
std::__is_uses_allocator_constructible	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_uses_allocator_constructible$/;"	s	namespace:std	inherits:__is_uses_allocator_predicate<is_constructible,_Tp,_Alloc,_Args...>
std::__is_uses_allocator_constructible_v	d:/include/c++/14/bits/uses_allocator.h	/^    _GLIBCXX17_INLINE constexpr bool __is_uses_allocator_constructible_v =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE bool
std::__is_uses_allocator_predicate	d:/include/c++/14/bits/uses_allocator.h	/^    struct __is_uses_allocator_predicate$/;"	s	namespace:std	inherits:__conditional_t<uses_allocator<_Tp,_Alloc>::value,__or_<_Predicate<_Tp,allocator_arg_t,_Alloc,_Args...>,_Predicate<_Tp,_Args...,_Alloc>>,_Predicate<_Tp,_Args...>>
std::__is_valid_cmpexch_failure_order	d:/include/c++/14/bits/atomic_base.h	/^  __is_valid_cmpexch_failure_order(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(memory_order __m)
std::__is_void	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_void$/;"	s	namespace:std
std::__is_void	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __is_void<void>$/;"	s	namespace:std
std::__is_void::__anon7e5ad8920403	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__is_void	access:public
std::__is_void::__anon7e5ad8920503	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	g	struct:std::__is_void	access:public
std::__is_void::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __false_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__false_type	access:public
std::__is_void::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef __true_type __type;$/;"	t	struct:std::__is_void	typeref:typename:__true_type	access:public
std::__is_void::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__is_void::__anon7e5ad8920403	access:public
std::__is_void::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 1 };$/;"	e	enum:std::__is_void::__anon7e5ad8920503	access:public
std::__iter_category_t	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    using __iter_category_t$/;"	t	namespace:std	typeref:typename:iterator_traits<_Iter>::iterator_category
std::__iter_key_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_key_t = remove_const_t<$/;"	t	namespace:std	typeref:typename:remove_const_t<tuple_element_t<0,typename iterator_traits<_InputIterator>::value_type>>
std::__iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    struct __iter_swap$/;"	s	namespace:std
std::__iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    struct __iter_swap<true>$/;"	s	namespace:std
std::__iter_swap::iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^	iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	struct:std::__iter_swap	typeref:typename:void	access:public	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::__iter_to_alloc_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_to_alloc_t$/;"	t	namespace:std	typeref:typename:pair<const __iter_key_t<_InputIterator>,__iter_val_t<_InputIterator>>
std::__iter_val_t	d:/include/c++/14/bits/stl_iterator.h	/^    using __iter_val_t$/;"	t	namespace:std	typeref:typename:tuple_element_t<1,typename iterator_traits<_InputIterator>::value_type>
std::__iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    __iterator_category(const _Iter&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR typename iterator_traits<_Iter>::iterator_category	signature:(const _Iter &)
std::__iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __iterator_traits { };$/;"	s	namespace:std
std::__iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct __iterator_traits<_Iterator,$/;"	s	namespace:std
std::__iterator_traits::difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::__iterator_traits::iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::__iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::pointer	access:public
std::__iterator_traits::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::reference	access:public
std::__iterator_traits::value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::__lc_rai	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lc_rai$/;"	s	namespace:std
std::__lc_rai	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>$/;"	s	namespace:std
std::__lc_rai::__cnd2	d:/include/c++/14/bits/stl_algobase.h	/^	__cnd2(_II __first, _II __last)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II __first,_II __last)
std::__lc_rai::__cnd2	d:/include/c++/14/bits/stl_algobase.h	/^	__cnd2(_RAI, _RAI)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_RAI,_RAI)
std::__lc_rai::__newlast1	d:/include/c++/14/bits/stl_algobase.h	/^	__newlast1(_II1, _II1 __last1, _II2, _II2)$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _II1	access:public	signature:(_II1,_II1 __last1,_II2,_II2)
std::__lc_rai::__newlast1	d:/include/c++/14/bits/stl_algobase.h	/^	__newlast1(_RAI1 __first1, _RAI1 __last1,$/;"	f	struct:std::__lc_rai	typeref:typename:_GLIBCXX20_CONSTEXPR _RAI1	access:public	signature:(_RAI1 __first1,_RAI1 __last1,_RAI2 __first2,_RAI2 __last2)
std::__lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lexicographical_compare$/;"	s	namespace:std
std::__lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    struct __lexicographical_compare<true>$/;"	s	namespace:std
std::__lexicographical_compare::__3way	d:/include/c++/14/bits/stl_algobase.h	/^	__3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR int	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare::__3way	d:/include/c++/14/bits/stl_algobase.h	/^	__3way(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR ptrdiff_t	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
std::__lexicographical_compare::__lc	d:/include/c++/14/bits/stl_algobase.h	/^	__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare::__lc	d:/include/c++/14/bits/stl_algobase.h	/^	__lc(const _Tp* __first1, const _Tp* __last1,$/;"	f	struct:std::__lexicographical_compare	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(const _Tp * __first1,const _Tp * __last1,const _Up * __first2,const _Up * __last2)
std::__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1,_II1,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &)
std::__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,_II2,_II2)
std::__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux($/;"	p	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter1,_Seq1,_Cat1> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &,const::__gnu_debug::_Safe_iterator<_Iter2,_Seq2,_Cat2> &)
std::__lexicographical_compare_aux	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1($/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
std::__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1($/;"	p	namespace:std	typeref:typename:bool	signature:(_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_GLIBCXX_STD_C::_Deque_iterator<_Tp1,_Ref1,_Ptr1>,_Tp2 *,_Tp2 *)
std::__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::__lexicographical_compare_aux1	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_aux1(_Tp1*, _Tp1*,$/;"	p	namespace:std	typeref:typename:bool	signature:(_Tp1 *,_Tp1 *,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>,_GLIBCXX_STD_C::_Deque_iterator<_Tp2,_Ref2,_Ptr2>)
std::__lexicographical_compare_impl	d:/include/c++/14/bits/stl_algobase.h	/^    __lexicographical_compare_impl(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
std::__lg	d:/include/c++/14/bits/stl_algobase.h	/^    __lg(_Tp __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR _Tp	signature:(_Tp __n)
std::__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<_Tp&&, _Up&>$/;"	s	namespace:std
std::__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<_Tp&, _Up&>$/;"	s	namespace:std
std::__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<const _Tp&&, _Up&>$/;"	s	namespace:std
std::__like_impl	d:/include/c++/14/bits/move.h	/^  struct __like_impl<const _Tp&, _Up&>$/;"	s	namespace:std
std::__like_impl::type	d:/include/c++/14/bits/move.h	/^  { using type = _Up&&; };$/;"	t	struct:std::__like_impl	typeref:typename:_Up &&	access:public
std::__like_impl::type	d:/include/c++/14/bits/move.h	/^  { using type = _Up&; };$/;"	t	struct:std::__like_impl	typeref:typename:_Up &	access:public
std::__like_impl::type	d:/include/c++/14/bits/move.h	/^  { using type = const _Up&&; };$/;"	t	struct:std::__like_impl	typeref:typename:const _Up &&	access:public
std::__like_impl::type	d:/include/c++/14/bits/move.h	/^  { using type = const _Up&; };$/;"	t	struct:std::__like_impl	typeref:typename:const _Up &	access:public
std::__like_t	d:/include/c++/14/bits/move.h	/^    using __like_t = typename __like_impl<_Tp&&, _Up&>::type;$/;"	t	namespace:std	typeref:typename:__like_impl<_Tp &&,_Up &>::type
std::__lower_bound	d:/include/c++/14/bits/stl_algobase.h	/^    __lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val,_Compare __comp)
std::__make_move_if_noexcept_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Iterator __i)
std::__make_move_if_noexcept_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_move_if_noexcept_iterator(_Tp* __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR _ReturnType	signature:(_Tp * __i)
std::__make_reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    __make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
std::__make_shared	d:/include/c++/14/bits/shared_ptr_base.h	/^    __make_shared(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(_Args &&...__args)
std::__make_shared_arrN_tag	d:/include/c++/14/bits/shared_ptr.h	/^    __make_shared_arrN_tag(const _Alloc& __a = _Alloc()) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Alloc & __a=_Alloc ())
std::__make_shared_arr_tag	d:/include/c++/14/bits/shared_ptr.h	/^    __make_shared_arr_tag(size_t __n, const _Alloc& __a = _Alloc()) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(size_t __n,const _Alloc & __a=_Alloc ())
std::__memcmp	d:/include/c++/14/bits/stl_algobase.h	/^    __memcmp(const _Tp* __first1, const _Up* __first2, size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX14_CONSTEXPR int	signature:(const _Tp * __first1,const _Up * __first2,size_t __num)
std::__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable$/;"	s	namespace:std
std::__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcmpable<const _Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcmpable::__anon7e5ad8922e03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcmpable	access:public
std::__memcmpable::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcmpable::__anon7e5ad8922e03	access:public
std::__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable$/;"	s	namespace:std
std::__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcpyable	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __memcpyable<_Tp*, const _Tp*>$/;"	s	namespace:std	inherits:__is_nonvolatile_trivially_copyable<_Tp>
std::__memcpyable::__anon7e5ad8922d03	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	g	struct:std::__memcpyable	access:public
std::__memcpyable::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = 0 };$/;"	e	enum:std::__memcpyable::__anon7e5ad8922d03	access:public
std::__memory_order_hle_acquire	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_hle_acquire   = 0x10000,$/;"	e	enum:std::__memory_order_modifier	access:public
std::__memory_order_hle_release	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_hle_release   = 0x20000$/;"	e	enum:std::__memory_order_modifier	access:public
std::__memory_order_mask	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_mask          = 0x0ffff,$/;"	e	enum:std::__memory_order_modifier	access:public
std::__memory_order_modifier	d:/include/c++/14/bits/atomic_base.h	/^  enum __memory_order_modifier$/;"	g	namespace:std
std::__memory_order_modifier_mask	d:/include/c++/14/bits/atomic_base.h	/^      __memory_order_modifier_mask = 0xffff0000,$/;"	e	enum:std::__memory_order_modifier	access:public
std::__min_cmp	d:/include/c++/14/bits/stl_algobase.h	/^    __min_cmp(_Tp __x, _Tp __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp __x,_Tp __y)
std::__min_cmp::_Res::_M_cmp	d:/include/c++/14/bits/stl_algobase.h	/^	decltype(__x <=> __y) _M_cmp;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:decltype(__x<=>__y)	access:public
std::__min_cmp::_Res::_M_min	d:/include/c++/14/bits/stl_algobase.h	/^	_Tp _M_min;$/;"	m	struct:std::__min_cmp::_Res	typeref:typename:_Tp	access:public
std::__mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::__mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    __mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
std::__miter_base	d:/include/c++/14/bits/cpp_type_traits.h	/^    __miter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
std::__miter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __miter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__miter_base (__it.base ()))	signature:(move_iterator<_Iterator> __it)
std::__miter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __miter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__make_reverse_iterator (__miter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
std::__move_if_noexcept_cond	d:/include/c++/14/bits/move.h	/^    struct __move_if_noexcept_cond$/;"	s	namespace:std	inherits:__and_<__not_<is_nothrow_move_constructible<_Tp>>,is_copy_constructible<_Tp>>::type
std::__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^    class __new_allocator$/;"	c	namespace:std
std::__new_allocator::_M_max_size	d:/include/c++/14/bits/new_allocator.h	/^      _M_max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX_CONSTEXPR size_type	access:private	signature:() const
std::__new_allocator::__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __new_allocator<_Tp1> &)
std::__new_allocator::__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
std::__new_allocator::__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator(const __new_allocator&) _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const __new_allocator &)
std::__new_allocator::address	d:/include/c++/14/bits/new_allocator.h	/^      address(const_reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:const_pointer	access:public	signature:(const_reference __x) const
std::__new_allocator::address	d:/include/c++/14/bits/new_allocator.h	/^      address(reference __x) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:pointer	access:public	signature:(reference __x) const
std::__new_allocator::allocate	d:/include/c++/14/bits/new_allocator.h	/^      allocate(size_type __n, const void* = static_cast<const void*>(0))$/;"	f	class:std::__new_allocator	typeref:typename:_GLIBCXX_NODISCARD _Tp *	access:public	signature:(size_type __n,const void * =static_cast<const void * > (0))
std::__new_allocator::const_pointer	d:/include/c++/14/bits/new_allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::__new_allocator	typeref:typename:const _Tp *	access:public
std::__new_allocator::const_reference	d:/include/c++/14/bits/new_allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::__new_allocator	typeref:typename:const _Tp &	access:public
std::__new_allocator::construct	d:/include/c++/14/bits/new_allocator.h	/^	construct(_Up* __p, _Args&&... __args)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Up * __p,_Args &&...__args)
std::__new_allocator::construct	d:/include/c++/14/bits/new_allocator.h	/^      construct(pointer __p, const _Tp& __val)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(pointer __p,const _Tp & __val)
std::__new_allocator::deallocate	d:/include/c++/14/bits/new_allocator.h	/^      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_type __n)
std::__new_allocator::destroy	d:/include/c++/14/bits/new_allocator.h	/^	destroy(_Up* __p)$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(_Up * __p)
std::__new_allocator::destroy	d:/include/c++/14/bits/new_allocator.h	/^      destroy(pointer __p) { __p->~_Tp(); }$/;"	f	class:std::__new_allocator	typeref:typename:void	access:public	signature:(pointer __p)
std::__new_allocator::difference_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::ptrdiff_t  difference_type;$/;"	t	class:std::__new_allocator	typeref:typename:std::ptrdiff_t	access:public
std::__new_allocator::max_size	d:/include/c++/14/bits/new_allocator.h	/^      max_size() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__new_allocator	typeref:typename:size_type	access:public	signature:() const
std::__new_allocator::operator =	d:/include/c++/14/bits/new_allocator.h	/^      __new_allocator& operator=(const __new_allocator&) = default;$/;"	p	class:std::__new_allocator	typeref:typename:__new_allocator &	access:public	signature:(const __new_allocator &)
std::__new_allocator::pointer	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp *	access:public
std::__new_allocator::propagate_on_container_move_assignment	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::true_type propagate_on_container_move_assignment;$/;"	t	class:std::__new_allocator	typeref:typename:std::true_type	access:public
std::__new_allocator::rebind	d:/include/c++/14/bits/new_allocator.h	/^	struct rebind$/;"	s	class:std::__new_allocator	access:public
std::__new_allocator::rebind::other	d:/include/c++/14/bits/new_allocator.h	/^	{ typedef __new_allocator<_Tp1> other; };$/;"	t	struct:std::__new_allocator::rebind	typeref:typename:__new_allocator<_Tp1>	access:public
std::__new_allocator::reference	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp &	access:public
std::__new_allocator::size_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef std::size_t     size_type;$/;"	t	class:std::__new_allocator	typeref:typename:std::size_t	access:public
std::__new_allocator::value_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp	access:public
std::__new_allocator::~__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	access:public	signature:()
std::__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(_Iterator __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(_Iterator __it)
std::__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(const ::__gnu_debug::_Safe_iterator<$/;"	p	namespace:std	typeref:typename:_Ite	signature:(const::__gnu_debug::_Safe_iterator<::__gnu_cxx::__normal_iterator<_Ite,_Cont>,_Seq,std::random_access_iterator_tag> &)
std::__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,$/;"	p	namespace:std	typeref:typename:_Ite	signature:(const::__gnu_debug::_Safe_iterator<_Ite,_Seq,std::random_access_iterator_tag> &)
std::__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR _Iterator	signature:(__gnu_cxx::__normal_iterator<_Iterator,_Container> __it)
std::__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(move_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(make_move_iterator (__niter_base (__it.base ())))	signature:(move_iterator<_Iterator> __it)
std::__niter_base	d:/include/c++/14/bits/stl_iterator.h	/^    __niter_base(reverse_iterator<_Iterator> __it)$/;"	f	namespace:std	typeref:typename:decltype(__make_reverse_iterator (__niter_base (__it.base ())))	signature:(reverse_iterator<_Iterator> __it)
std::__niter_wrap	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_wrap(_From __from, _To __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _From	signature:(_From __from,_To __res)
std::__niter_wrap	d:/include/c++/14/bits/stl_algobase.h	/^    __niter_wrap(const _Iterator&, _Iterator __res)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _Iterator	signature:(const _Iterator &,_Iterator __res)
std::__num_base	d:/include/c++/14/bits/locale_facets.h	/^  class __num_base$/;"	c	namespace:std
std::__num_base::_S_atoms_in	d:/include/c++/14/bits/locale_facets.h	/^    static const char* _S_atoms_in;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_atoms_out	d:/include/c++/14/bits/locale_facets.h	/^    static const char* _S_atoms_out;$/;"	m	class:std::__num_base	typeref:typename:const char *	access:public
std::__num_base::_S_format_float	d:/include/c++/14/bits/locale_facets.h	/^    _S_format_float(const ios_base& __io, char* __fptr, char __mod) throw();$/;"	p	class:std::__num_base	typeref:typename:void	access:public	signature:(const ios_base & __io,char * __fptr,char __mod)
std::__num_base::_S_iE	d:/include/c++/14/bits/locale_facets.h	/^      _S_iE = _S_izero + 20,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_iX	d:/include/c++/14/bits/locale_facets.h	/^      _S_iX,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_ie	d:/include/c++/14/bits/locale_facets.h	/^      _S_ie = _S_izero + 14,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_iend	d:/include/c++/14/bits/locale_facets.h	/^      _S_iend = 26$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_iminus	d:/include/c++/14/bits/locale_facets.h	/^      _S_iminus,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_iplus	d:/include/c++/14/bits/locale_facets.h	/^      _S_iplus,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_ix	d:/include/c++/14/bits/locale_facets.h	/^      _S_ix,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_izero	d:/include/c++/14/bits/locale_facets.h	/^      _S_izero,$/;"	e	enum:std::__num_base::__anon69d05cbd0203	access:public
std::__num_base::_S_oE	d:/include/c++/14/bits/locale_facets.h	/^	_S_oE = _S_oudigits + 14, \/\/ For scientific notation, 'E'$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oX	d:/include/c++/14/bits/locale_facets.h	/^	_S_oX,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_odigits	d:/include/c++/14/bits/locale_facets.h	/^	_S_odigits,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_odigits_end	d:/include/c++/14/bits/locale_facets.h	/^	_S_odigits_end = _S_odigits + 16,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oe	d:/include/c++/14/bits/locale_facets.h	/^	_S_oe = _S_odigits + 14,  \/\/ For scientific notation, 'e'$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oend	d:/include/c++/14/bits/locale_facets.h	/^	_S_oend = _S_oudigits_end$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_ominus	d:/include/c++/14/bits/locale_facets.h	/^	_S_ominus,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oplus	d:/include/c++/14/bits/locale_facets.h	/^	_S_oplus,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oudigits	d:/include/c++/14/bits/locale_facets.h	/^	_S_oudigits = _S_odigits_end,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_oudigits_end	d:/include/c++/14/bits/locale_facets.h	/^	_S_oudigits_end = _S_oudigits + 16,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::_S_ox	d:/include/c++/14/bits/locale_facets.h	/^	_S_ox,$/;"	e	enum:std::__num_base::__anon69d05cbd0103	access:public
std::__num_base::__anon69d05cbd0103	d:/include/c++/14/bits/locale_facets.h	/^      {$/;"	g	class:std::__num_base	access:public
std::__num_base::__anon69d05cbd0203	d:/include/c++/14/bits/locale_facets.h	/^    {$/;"	g	class:std::__num_base	access:public
std::__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^    struct __numpunct_cache : public locale::facet$/;"	s	namespace:std	inherits:locale::facet
std::__numpunct_cache::_M_allocated	d:/include/c++/14/bits/locale_facets.h	/^      bool				_M_allocated;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::_M_atoms_in	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_atoms_in[__num_base::_S_iend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_atoms_out	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_atoms_out[__num_base::_S_oend];$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT[]	access:public
std::__numpunct_cache::_M_cache	d:/include/c++/14/bits/locale_facets.h	/^      _M_cache(const locale& __loc);$/;"	p	struct:std::__numpunct_cache	typeref:typename:void	access:public	signature:(const locale & __loc)
std::__numpunct_cache::_M_decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_decimal_point;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_falsename	d:/include/c++/14/bits/locale_facets.h	/^      const _CharT*			_M_falsename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_falsename_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_falsename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_grouping	d:/include/c++/14/bits/locale_facets.h	/^      const char*			_M_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const char *	access:public
std::__numpunct_cache::_M_grouping_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_grouping_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      _CharT				_M_thousands_sep;$/;"	m	struct:std::__numpunct_cache	typeref:typename:_CharT	access:public
std::__numpunct_cache::_M_truename	d:/include/c++/14/bits/locale_facets.h	/^      const _CharT*			_M_truename;$/;"	m	struct:std::__numpunct_cache	typeref:typename:const _CharT *	access:public
std::__numpunct_cache::_M_truename_size	d:/include/c++/14/bits/locale_facets.h	/^      size_t                            _M_truename_size;$/;"	m	struct:std::__numpunct_cache	typeref:typename:size_t	access:public
std::__numpunct_cache::_M_use_grouping	d:/include/c++/14/bits/locale_facets.h	/^      bool				_M_use_grouping;$/;"	m	struct:std::__numpunct_cache	typeref:typename:bool	access:public
std::__numpunct_cache::__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      __numpunct_cache(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      __numpunct_cache(size_t __refs = 0)$/;"	f	struct:std::__numpunct_cache	access:public	signature:(size_t __refs=0)
std::__numpunct_cache::operator =	d:/include/c++/14/bits/locale_facets.h	/^      operator=(const __numpunct_cache&);$/;"	p	struct:std::__numpunct_cache	typeref:typename:__numpunct_cache &	access:private	signature:(const __numpunct_cache &)
std::__numpunct_cache::~__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	access:public	signature:()
std::__numpunct_cache::~__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache	signature:()
std::__ostream_fill	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)$/;"	f	namespace:std	typeref:typename:void	signature:(basic_ostream<_CharT,_Traits> & __out,streamsize __n)
std::__ostream_insert	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__ostream_write	d:/include/c++/14/bits/ostream_insert.h	/^    __ostream_write(basic_ostream<_CharT, _Traits>& __out,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(basic_ostream<_CharT,_Traits> & __out,const _CharT * __s,streamsize __n)
std::__pad	d:/include/c++/14/bits/locale_facets.h	/^    struct __pad$/;"	s	namespace:std
std::__pad::_S_pad	d:/include/c++/14/bits/locale_facets.h	/^      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,$/;"	p	struct:std::__pad	typeref:typename:void	access:public	signature:(ios_base & __io,_CharT __fill,_CharT * __news,const _CharT * __olds,streamsize __newlen,streamsize __oldlen)
std::__pair_base	d:/include/c++/14/bits/stl_pair.h	/^  template<typename _U1, typename _U2> class __pair_base$/;"	c	namespace:std
std::__pair_base::__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
std::__pair_base::__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base(const __pair_base&) = default;$/;"	p	class:std::__pair_base	access:private	signature:(const __pair_base &)
std::__pair_base::operator =	d:/include/c++/14/bits/stl_pair.h	/^    __pair_base& operator=(const __pair_base&) = delete;$/;"	p	class:std::__pair_base	typeref:typename:__pair_base &	access:private	signature:(const __pair_base &)
std::__pair_base::~__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    ~__pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
std::__pair_get	d:/include/c++/14/bits/stl_pair.h	/^    struct __pair_get<0>$/;"	s	namespace:std
std::__pair_get	d:/include/c++/14/bits/stl_pair.h	/^    struct __pair_get<1>$/;"	s	namespace:std
std::__pair_get::__const_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp1 &	access:public	signature:(const pair<_Tp1,_Tp2> & __pair)
std::__pair_get::__const_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_get(const pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp2 &	access:public	signature:(const pair<_Tp1,_Tp2> & __pair)
std::__pair_get::__const_move_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp1 &&	access:public	signature:(const pair<_Tp1,_Tp2> && __pair)
std::__pair_get::__const_move_get	d:/include/c++/14/bits/stl_pair.h	/^	__const_move_get(const pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:const _Tp2 &&	access:public	signature:(const pair<_Tp1,_Tp2> && __pair)
std::__pair_get::__get	d:/include/c++/14/bits/stl_pair.h	/^	__get(pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp1 &	access:public	signature:(pair<_Tp1,_Tp2> & __pair)
std::__pair_get::__get	d:/include/c++/14/bits/stl_pair.h	/^	__get(pair<_Tp1, _Tp2>& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp2 &	access:public	signature:(pair<_Tp1,_Tp2> & __pair)
std::__pair_get::__move_get	d:/include/c++/14/bits/stl_pair.h	/^	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp1 &&	access:public	signature:(pair<_Tp1,_Tp2> && __pair)
std::__pair_get::__move_get	d:/include/c++/14/bits/stl_pair.h	/^	__move_get(pair<_Tp1, _Tp2>&& __pair) noexcept$/;"	f	struct:std::__pair_get	typeref:typename:_Tp2 &&	access:public	signature:(pair<_Tp1,_Tp2> && __pair)
std::__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __poison_hash$/;"	s	namespace:std
std::__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^    struct __poison_hash<_Tp, __void_t<decltype(hash<_Tp>()(declval<_Tp>()))>>$/;"	s	namespace:std
std::__poison_hash::__enable_hash_call	d:/include/c++/14/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = false;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
std::__poison_hash::__enable_hash_call	d:/include/c++/14/bits/functional_hash.h	/^      static constexpr bool __enable_hash_call = true;$/;"	m	struct:std::__poison_hash	typeref:typename:bool	access:public
std::__poison_hash::__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^      __poison_hash(__poison_hash&&);$/;"	p	struct:std::__poison_hash	access:private	signature:(__poison_hash &&)
std::__poison_hash::~__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^      ~__poison_hash();$/;"	p	struct:std::__poison_hash	access:private	signature:()
std::__ptr_rebind	d:/include/c++/14/bits/ptr_traits.h	/^    using __ptr_rebind = typename pointer_traits<_Ptr>::template rebind<_Tp>;$/;"	t	namespace:std	typeref:typename:pointer_traits<_Ptr>::template rebind<_Tp>
std::__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem : __get_first_arg<_Ptr>$/;"	s	namespace:std	inherits:__get_first_arg<_Ptr>
std::__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem<_Ptr, __void_t<typename _Ptr::element_type>>$/;"	s	namespace:std
std::__ptr_traits_elem	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_elem<_Ptr, void>$/;"	s	namespace:std
std::__ptr_traits_elem::type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = typename _Ptr::element_type; };$/;"	t	struct:std::__ptr_traits_elem	typeref:typename:_Ptr::element_type	access:public
std::__ptr_traits_elem_t	d:/include/c++/14/bits/ptr_traits.h	/^    using __ptr_traits_elem_t = typename __ptr_traits_elem<_Ptr>::type;$/;"	t	namespace:std	typeref:typename:__ptr_traits_elem<_Ptr>::type
std::__ptr_traits_impl	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_impl : __ptr_traits_ptr_to<_Ptr, _Elt>$/;"	s	namespace:std	inherits:__ptr_traits_ptr_to<_Ptr,_Elt>
std::__ptr_traits_impl	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_impl<_Ptr, __undefined>$/;"	s	namespace:std
std::__ptr_traits_impl::__diff_t	d:/include/c++/14/bits/ptr_traits.h	/^	using __diff_t = typename _Tp::difference_type;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Tp::difference_type	access:private
std::__ptr_traits_impl::__rebind	d:/include/c++/14/bits/ptr_traits.h	/^	using __rebind = __type_identity<typename _Tp::template rebind<_Up>>;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__type_identity<typename _Tp::template rebind<_Up>>	access:private
std::__ptr_traits_impl::difference_type	d:/include/c++/14/bits/ptr_traits.h	/^      using difference_type = __detected_or_t<ptrdiff_t, __diff_t, _Ptr>;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__detected_or_t<ptrdiff_t,__diff_t,_Ptr>	access:public
std::__ptr_traits_impl::element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Elt;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Elt	access:public
std::__ptr_traits_impl::pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:_Ptr	access:public
std::__ptr_traits_impl::rebind	d:/include/c++/14/bits/ptr_traits.h	/^	using rebind = typename __detected_or_t<__replace_first_arg<_Ptr, _Up>,$/;"	t	struct:std::__ptr_traits_impl	typeref:typename:__detected_or_t<__replace_first_arg<_Ptr,_Up>,__rebind,_Ptr,_Up>::type	access:public
std::__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to$/;"	s	namespace:std
std::__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to<_Ptr, _Elt, true>$/;"	s	namespace:std
std::__ptr_traits_ptr_to	d:/include/c++/14/bits/ptr_traits.h	/^    struct __ptr_traits_ptr_to<_Tp*, _Tp, false>$/;"	s	namespace:std
std::__ptr_traits_ptr_to::element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Elt;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Elt	access:public
std::__ptr_traits_ptr_to::element_type	d:/include/c++/14/bits/ptr_traits.h	/^      using element_type = _Tp;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Tp	access:public
std::__ptr_traits_ptr_to::pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Ptr;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Ptr	access:public
std::__ptr_traits_ptr_to::pointer	d:/include/c++/14/bits/ptr_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::__ptr_traits_ptr_to	typeref:typename:_Tp *	access:public
std::__ptr_traits_ptr_to::pointer_to	d:/include/c++/14/bits/ptr_traits.h	/^      pointer_to(element_type& __r) noexcept$/;"	f	struct:std::__ptr_traits_ptr_to	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(element_type & __r)
std::__ptr_traits_ptr_to::pointer_to	d:/include/c++/14/bits/ptr_traits.h	/^      pointer_to(element_type& __r)$/;"	f	struct:std::__ptr_traits_ptr_to	typeref:typename:pointer	access:public	signature:(element_type & __r)
std::__relocate_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
std::__relocate_a_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a_1(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
std::__relocate_a_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_a_1(_Tp* __first, _Tp* __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value,_Tp * >	signature:(_Tp * __first,_Tp * __last,_Tp * __result,allocator<_Up> & __alloc)
std::__relocate_object_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_Tp * __restrict __dest,_Up * __restrict __orig,_Allocator & __alloc)
std::__remove_if	d:/include/c++/14/bits/stl_algobase.h	/^    __remove_if(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,_Predicate __pred)
std::__replace_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __replace_first_arg$/;"	s	namespace:std
std::__replace_first_arg	d:/include/c++/14/bits/ptr_traits.h	/^    struct __replace_first_arg<_SomeTemplate<_Tp, _Types...>, _Up>$/;"	s	namespace:std
std::__replace_first_arg::type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = _SomeTemplate<_Up, _Types...>; };$/;"	t	struct:std::__replace_first_arg	typeref:typename:_SomeTemplate<_Up,_Types...>	access:public
std::__rethrow_if_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __rethrow_if_nested_impl(const _Ex* __ptr, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex * __ptr,true_type)
std::__rethrow_if_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^  __rethrow_if_nested_impl(const void*, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(const void *,false_type)
std::__search	d:/include/c++/14/bits/stl_algobase.h	/^    __search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
std::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_count$/;"	c	namespace:std
std::__shared_count::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:void *	access:public	signature:(const std::type_info & __ti) const
std::__shared_count::_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::__shared_count	typeref:typename:long	access:public	signature:() const
std::__shared_count::_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __shared_count& __rhs) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:(const __shared_count & __rhs) const
std::__shared_count::_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __weak_count<_Lp>& __rhs) const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:(const __weak_count<_Lp> & __rhs) const
std::__shared_count::_M_pi	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base<_Lp>*  _M_pi;$/;"	m	class:std::__shared_count	typeref:typename:_Sp_counted_base<_Lp> *	access:private
std::__shared_count::_M_swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_swap(__shared_count& __r) noexcept$/;"	f	class:std::__shared_count	typeref:typename:void	access:public	signature:(__shared_count & __r)
std::__shared_count::_M_unique	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_unique() const noexcept$/;"	f	class:std::__shared_count	typeref:typename:bool	access:public	signature:() const
std::__shared_count::__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag { using type = void; };$/;"	s	class:std::__shared_count	access:private
std::__shared_count::__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag<_Sp_alloc_shared_tag<_Tp>> { };$/;"	s	class:std::__shared_count	access:private
std::__shared_count::__not_alloc_shared_tag	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag<_Sp_counted_array_base<_Alloc>> { };$/;"	s	class:std::__shared_count	access:private
std::__shared_count::__not_alloc_shared_tag::type	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag { using type = void; };$/;"	t	struct:std::__shared_count::__not_alloc_shared_tag	typeref:typename:void	access:public
std::__shared_count::__shared_count	d:/include/c++/14/backward/auto_ptr.h	/^    __shared_count<_Lp>::__shared_count(std::auto_ptr<_Tp>&& __r)$/;"	f	class:std::__shared_count	signature:(std::auto_ptr<_Tp> && __r)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, \/* is_array = *\/ false_type)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,false_type)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, \/* is_array = *\/ true_type)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,true_type)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, _Deleter __d)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,_Deleter __d)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(_Ptr __p,_Deleter __d,_Alloc __a)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Tp*& __p, _Sp_alloc_shared_tag<_Alloc> __a,$/;"	f	class:std::__shared_count	access:public	signature:(_Tp * & __p,_Sp_alloc_shared_tag<_Alloc> __a,_Args &&...__args)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(_Tp*& __p, const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::__shared_count	access:public	signature:(_Tp * & __p,const _Sp_counted_array_base<_Alloc> & __a,_Init __init)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(std::auto_ptr<_Tp>&& __r);$/;"	p	class:std::__shared_count	access:public	signature:(std::auto_ptr<_Tp> && __r)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_count(std::unique_ptr<_Tp, _Del>&& __r) : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:(std::unique_ptr<_Tp,_Del> && __r)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count(const __shared_count& __r) noexcept$/;"	f	class:std::__shared_count	access:public	signature:(const __shared_count & __r)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept;$/;"	p	class:std::__shared_count	access:public	signature:(const __weak_count<_Lp> & __r,std::nothrow_t)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_count() noexcept : _M_pi(0)$/;"	f	class:std::__shared_count	access:public	signature:()
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit __shared_count(const __weak_count<_Lp>& __r);$/;"	p	class:std::__shared_count	access:public	signature:(const __weak_count<_Lp> & __r)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::__shared_count	signature:(const __weak_count<_Lp> & __r,std::nothrow_t)
std::__shared_count::__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    __shared_count<_Lp>::__shared_count(const __weak_count<_Lp>& __r)$/;"	f	class:std::__shared_count	signature:(const __weak_count<_Lp> & __r)
std::__shared_count::__shared_count::_Guarded_ptr::_Guarded_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    _Guarded_ptr(_Sp_counted_array_base<_Alloc> __a)$/;"	f	struct:std::__shared_count::__shared_count::_Guarded_ptr	access:public	signature:(_Sp_counted_array_base<_Alloc> __a)
std::__shared_count::__shared_count::_Guarded_ptr::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    typename allocator_traits<_Alloc>::pointer _M_ptr;$/;"	m	struct:std::__shared_count::__shared_count::_Guarded_ptr	typeref:typename:allocator_traits<_Alloc>::pointer	access:public
std::__shared_count::__shared_count::_Guarded_ptr::~_Guarded_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    ~_Guarded_ptr()$/;"	f	struct:std::__shared_count::__shared_count::_Guarded_ptr	access:public	signature:()
std::__shared_count::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __shared_count& __r) noexcept$/;"	f	class:std::__shared_count	typeref:typename:__shared_count &	access:public	signature:(const __shared_count & __r)
std::__shared_count::~__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__shared_count() noexcept$/;"	f	class:std::__shared_count	access:public	signature:()
std::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr$/;"	c	namespace:std	inherits:__shared_ptr_access<_Tp,_Lp>
std::__shared_ptr::_Assignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Assignable = _Compatible<_Yp, __shared_ptr&>;$/;"	t	class:std::__shared_ptr	typeref:typename:_Compatible<_Yp,__shared_ptr &>	access:private
std::__shared_ptr::_Compatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Compatible = typename$/;"	t	class:std::__shared_ptr	typeref:typename:enable_if<__sp_compatible_with<_Yp *,_Tp * >::value,_Res>::type	access:private
std::__shared_ptr::_M_enable_shared_from_this_with	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_enable_shared_from_this_with(_Yp* __p) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:enable_if<__has_esft_base<_Yp2>::value>::type	access:private	signature:(_Yp * __p)
std::__shared_ptr::_M_enable_shared_from_this_with	d:/include/c++/14/bits/shared_ptr_base.h	/^	_M_enable_shared_from_this_with(_Yp*) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:enable_if<!__has_esft_base<_Yp2>::value>::type	access:private	signature:(_Yp *)
std::__shared_ptr::_M_get_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_deleter(const std::type_info& __ti) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void *	access:private	signature:(const std::type_info & __ti) const
std::__shared_ptr::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      element_type*	   _M_ptr;         \/\/ Contained pointer.$/;"	m	class:std::__shared_ptr	typeref:typename:element_type *	access:private
std::__shared_ptr::_M_refcount	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_count<_Lp>  _M_refcount;    \/\/ Reference counter.$/;"	m	class:std::__shared_ptr	typeref:typename:__shared_count<_Lp>	access:private
std::__shared_ptr::_SafeConv	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _SafeConv$/;"	t	class:std::__shared_ptr	typeref:typename:enable_if<__sp_is_constructible<_Tp,_Yp>::value>::type	access:private
std::__shared_ptr::_UniqAssignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _UniqAssignable = _UniqCompatible<_Yp, _Del, __shared_ptr&>;$/;"	t	class:std::__shared_ptr	typeref:typename:_UniqCompatible<_Yp,_Del,__shared_ptr &>	access:private
std::__shared_ptr::_UniqCompatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _UniqCompatible = __enable_if_t<__and_<$/;"	t	class:std::__shared_ptr	access:private
std::__shared_ptr::__esft_base_t	d:/include/c++/14/bits/shared_ptr_base.h	/^	using __esft_base_t = decltype(__enable_shared_from_this_base($/;"	t	class:std::__shared_ptr	access:private
std::__shared_ptr::__has_esft_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __has_esft_base$/;"	s	class:std::__shared_ptr	inherits:false_type	access:private
std::__shared_ptr::__has_esft_base	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __has_esft_base<_Yp, __void_t<__esft_base_t<_Yp>>>$/;"	s	class:std::__shared_ptr	inherits:__not_<is_array<_Tp>>	access:private
std::__shared_ptr::__shared_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    __shared_ptr<_Tp, _Lp>::__shared_ptr(std::auto_ptr<_Tp1>&& __r)$/;"	f	class:std::__shared_ptr	signature:(std::auto_ptr<_Tp1> && __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)$/;"	f	class:std::__shared_ptr	access:protected	signature:(_Sp_alloc_shared_tag<_Alloc> __tag,_Args &&...__args)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(__shared_ptr<_Yp, _Lp>&& __r,$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r,element_type * __p)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(auto_ptr<_Yp>&& __r);$/;"	p	class:std::__shared_ptr	access:public	signature:(auto_ptr<_Yp> && __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::__shared_ptr	access:protected	signature:(const _Sp_counted_array_base<_Alloc> & __a,_Init __init=nullptr)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,$/;"	f	class:std::__shared_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r,element_type * __p)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(nullptr_t __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(unique_ptr<_Tp1, _Del>&& __r, __sp_array_delete)$/;"	f	class:std::__shared_ptr	access:protected	signature:(unique_ptr<_Tp1,_Del> && __r,__sp_array_delete)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__shared_ptr(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::__shared_ptr	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	explicit __shared_ptr(const __weak_ptr<_Yp, _Lp>& __r)$/;"	f	class:std::__shared_ptr	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^        __shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d,_Alloc __a)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(__shared_ptr&& __r) noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:(__shared_ptr && __r)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(const __shared_ptr&) noexcept = default;$/;"	p	class:std::__shared_ptr	access:public	signature:(const __shared_ptr &)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr(const __weak_ptr<_Tp, _Lp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::__shared_ptr	access:protected	signature:(const __weak_ptr<_Tp,_Lp> & __r,std::nothrow_t)
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_ptr() noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:()
std::__shared_ptr::__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __shared_ptr(nullptr_t) noexcept : __shared_ptr() { }$/;"	f	class:std::__shared_ptr	access:public	signature:(nullptr_t)
std::__shared_ptr::element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__shared_ptr	typeref:typename:remove_extent<_Tp>::type	access:public
std::__shared_ptr::get	d:/include/c++/14/bits/shared_ptr_base.h	/^      get() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:element_type *	access:public	signature:() const
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(__shared_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(__shared_ptr<_Yp,_Lp> && __r)
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(auto_ptr<_Yp>&& __r)$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(auto_ptr<_Yp> && __r)
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::__shared_ptr	typeref:typename:_UniqAssignable<_Yp,_Del>	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;$/;"	p	class:std::__shared_ptr	typeref:typename:__shared_ptr &	access:public	signature:(const __shared_ptr &)
std::__shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__shared_ptr&& __r) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:__shared_ptr &	access:public	signature:(__shared_ptr && __r)
std::__shared_ptr::operator bool	d:/include/c++/14/bits/shared_ptr_base.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::__shared_ptr	access:public	signature:() const
std::__shared_ptr::owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(__shared_ptr<_Tp1, _Lp> const& __rhs) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:(__shared_ptr<_Tp1,_Lp> const & __rhs) const
std::__shared_ptr::owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(__weak_ptr<_Tp1, _Lp> const& __rhs) const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:(__weak_ptr<_Tp1,_Lp> const & __rhs) const
std::__shared_ptr::reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p) \/\/ _Yp must be complete.$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p)
std::__shared_ptr::reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p, _Deleter __d)$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p,_Deleter __d)
std::__shared_ptr::reset	d:/include/c++/14/bits/shared_ptr_base.h	/^	reset(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::__shared_ptr	typeref:typename:_SafeConv<_Yp>	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
std::__shared_ptr::reset	d:/include/c++/14/bits/shared_ptr_base.h	/^      reset() noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void	access:public	signature:()
std::__shared_ptr::swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void	access:public	signature:(__shared_ptr<_Tp,_Lp> & __other)
std::__shared_ptr::unique	d:/include/c++/14/bits/shared_ptr_base.h	/^      unique() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:() const
std::__shared_ptr::use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      use_count() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:long	access:public	signature:() const
std::__shared_ptr::weak_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using weak_type = __weak_ptr<_Tp, _Lp>;$/;"	t	class:std::__shared_ptr	typeref:typename:__weak_ptr<_Tp,_Lp>	access:public
std::__shared_ptr::~__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__shared_ptr() = default;$/;"	p	class:std::__shared_ptr	access:public	signature:()
std::__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access$/;"	c	namespace:std
std::__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access<_Tp, _Lp, false, true>$/;"	c	namespace:std
std::__shared_ptr_access	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __shared_ptr_access<_Tp, _Lp, true, false>$/;"	c	namespace:std
std::__shared_ptr_access::_M_get	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type *	access:private	signature:() const
std::__shared_ptr_access::element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = _Tp;$/;"	t	class:std::__shared_ptr_access	typeref:typename:_Tp	access:public
std::__shared_ptr_access::element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__shared_ptr_access	typeref:typename:remove_extent<_Tp>::type	access:public
std::__shared_ptr_access::operator *	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator*() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type &	access:public	signature:() const
std::__shared_ptr_access::operator ->	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator->() const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type *	access:public	signature:() const
std::__shared_ptr_access::operator []	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator[](ptrdiff_t __i) const noexcept$/;"	f	class:std::__shared_ptr_access	typeref:typename:element_type &	access:public	signature:(ptrdiff_t __i) const
std::__shrink_to_fit_aux	d:/include/c++/14/bits/alloc_traits.h	/^    struct __shrink_to_fit_aux$/;"	s	namespace:std
std::__shrink_to_fit_aux	d:/include/c++/14/bits/alloc_traits.h	/^    struct __shrink_to_fit_aux<_Tp, true>$/;"	s	namespace:std
std::__shrink_to_fit_aux::_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^      _S_do_it(_Tp& __c) noexcept$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:public	signature:(_Tp & __c)
std::__shrink_to_fit_aux::_S_do_it	d:/include/c++/14/bits/alloc_traits.h	/^    { static bool _S_do_it(_Tp&) noexcept { return false; } };$/;"	f	struct:std::__shrink_to_fit_aux	typeref:typename:bool	access:public	signature:(_Tp &)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(__float128 __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR long long	signature:(__float128 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(double __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(double __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(float __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(float __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(int __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR int	signature:(int __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long	signature:(long __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long double __n) { return (long long)__n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long double __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long long	signature:(long long __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_0 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_0	signature:(unsigned __GLIBCXX_TYPE_INT_N_0 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_1 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_1	signature:(unsigned __GLIBCXX_TYPE_INT_N_1 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_2 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR unsigned __GLIBCXX_TYPE_INT_N_2	signature:(unsigned __GLIBCXX_TYPE_INT_N_2 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __GLIBCXX_TYPE_INT_N_3 __n) { return __n; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(unsigned __GLIBCXX_TYPE_INT_N_3 __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned	signature:(unsigned __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long	signature:(unsigned long __n)
std::__size_to_integer	d:/include/c++/14/bits/stl_algobase.h	/^  __size_to_integer(unsigned long long __n) { return __n; }$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR unsigned long long	signature:(unsigned long long __n)
std::__sp_array_delete	d:/include/c++/14/bits/shared_ptr_base.h	/^  struct __sp_array_delete$/;"	s	namespace:std
std::__sp_array_delete::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      void operator()(_Yp* __p) const { delete[] __p; }$/;"	f	struct:std::__sp_array_delete	typeref:typename:void	access:public	signature:(_Yp * __p) const
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with$/;"	s	namespace:std	inherits:false_type
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], const _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], const volatile _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Up(*)[_Nm], volatile _Up(*)[]>$/;"	s	namespace:std	inherits:true_type
std::__sp_compatible_with	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_compatible_with<_Yp*, _Tp*>$/;"	s	namespace:std	inherits:is_convertible<_Yp*,_Tp*>::type
std::__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible$/;"	s	namespace:std	inherits:is_convertible<_Yp*,_Tp*>::type
std::__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible<_Up[], _Yp>$/;"	s	namespace:std	inherits:__sp_is_constructible_arr<_Up,_Yp>::type
std::__sp_is_constructible	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible<_Up[_Nm], _Yp>$/;"	s	namespace:std	inherits:__sp_is_constructible_arrN<_Up,_Nm,_Yp>::type
std::__sp_is_constructible_arr	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arr$/;"	s	namespace:std	inherits:false_type
std::__sp_is_constructible_arr	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arr<_Up, _Yp, __void_t<_Yp[]>>$/;"	s	namespace:std	inherits:is_convertible<_Yp(*)[],_Up(*)[]>::type
std::__sp_is_constructible_arrN	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arrN$/;"	s	namespace:std	inherits:false_type
std::__sp_is_constructible_arrN	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct __sp_is_constructible_arrN<_Up, _Nm, _Yp, __void_t<_Yp[_Nm]>>$/;"	s	namespace:std	inherits:is_convertible<_Yp(*)[_Nm],_Up(*)[_Nm]>::type
std::__str_concat	d:/include/c++/14/bits/basic_string.h	/^    __str_concat(typename _Str::value_type const* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_CXX11 _GLIBCXX20_CONSTEXPR _Str	signature:(typename _Str::value_type const * __lhs,typename _Str::size_type __lhs_len,typename _Str::value_type const * __rhs,typename _Str::size_type __rhs_len,typename _Str::allocator_type const & __a)
std::__str_hash_base	d:/include/c++/14/bits/basic_string.h	/^    struct __str_hash_base$/;"	s	namespace:std	inherits:__hash_base<size_t,_StrT>
std::__str_hash_base::operator ()	d:/include/c++/14/bits/basic_string.h	/^      operator()(const _StrT& __s) const noexcept$/;"	f	struct:std::__str_hash_base	typeref:typename:size_t	access:public	signature:(const _StrT & __s) const
std::__throw_bad_alloc	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_alloc(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_array_new_length	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_array_new_length(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_cast	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_cast(void) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_exception	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_exception(void) __attribute__((__noreturn__));$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void	signature:(void)
std::__throw_bad_function_call	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_function_call() __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:()
std::__throw_bad_typeid	d:/include/c++/14/bits/functexcept.h	/^  __throw_bad_typeid(void) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(void)
std::__throw_bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^  __throw_bad_weak_ptr()$/;"	f	namespace:std	typeref:typename:void	signature:()
std::__throw_domain_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_domain_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_future_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_future_error(int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
std::__throw_invalid_argument	d:/include/c++/14/bits/functexcept.h	/^  __throw_invalid_argument(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_ios_failure	d:/include/c++/14/bits/functexcept.h	/^  __throw_ios_failure(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_ios_failure	d:/include/c++/14/bits/functexcept.h	/^  __throw_ios_failure(const char*, int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,int)
std::__throw_length_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_length_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_logic_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_logic_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_out_of_range	d:/include/c++/14/bits/functexcept.h	/^  __throw_out_of_range(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_out_of_range_fmt	d:/include/c++/14/bits/functexcept.h	/^  __throw_out_of_range_fmt(const char*, ...) __attribute__((__noreturn__,__cold__))$/;"	p	namespace:std	typeref:typename:void	signature:(const char *,...)
std::__throw_overflow_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_overflow_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_range_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_range_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_runtime_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_runtime_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_system_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_system_error(int) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(int)
std::__throw_underflow_error	d:/include/c++/14/bits/functexcept.h	/^  __throw_underflow_error(const char*) __attribute__((__noreturn__,__cold__));$/;"	p	namespace:std	typeref:typename:void	signature:(const char *)
std::__throw_with_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, false_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,false_type)
std::__throw_with_nested_impl	d:/include/c++/14/bits/nested_exception.h	/^    __throw_with_nested_impl(_Tp&& __t, true_type)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t,true_type)
std::__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
std::__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
std::__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr)$/;"	f	namespace:std	typeref:typename:std::pointer_traits<_Ptr>::element_type *	signature:(const _Ptr & __ptr)
std::__to_address	d:/include/c++/14/bits/ptr_traits.h	/^    __to_address(const _Ptr& __ptr, _None...) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr,_None...)
std::__to_address	d:/include/c++/14/bits/stl_iterator.h	/^    __to_address(const __gnu_cxx::__normal_iterator<_Iterator,$/;"	f	namespace:std	typeref:typename:auto	signature:(const __gnu_cxx::__normal_iterator<_Iterator,_Container> & __it)
std::__to_wstring_numeric	d:/include/c++/14/bits/basic_string.h	/^  __to_wstring_numeric(const char* __s, int __len, wchar_t* __wout)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(const char * __s,int __len,wchar_t * __wout)
std::__to_wstring_numeric	d:/include/c++/14/bits/basic_string.h	/^  __to_wstring_numeric(string_view __s)$/;"	f	namespace:std	typeref:typename:wstring	signature:(string_view __s)
std::__traitor	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __traitor$/;"	s	namespace:std
std::__traitor::__anon7e5ad8920103	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	g	struct:std::__traitor	access:public
std::__traitor::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^      typedef typename __truth_type<__value>::__type __type;$/;"	t	struct:std::__traitor	typeref:typename:__truth_type<__value>::__type	access:public
std::__traitor::__value	d:/include/c++/14/bits/cpp_type_traits.h	/^      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };$/;"	e	enum:std::__traitor::__anon7e5ad8920103	access:public
std::__true_type	d:/include/c++/14/bits/cpp_type_traits.h	/^  struct __true_type { };$/;"	s	namespace:std
std::__truth_type	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __truth_type$/;"	s	namespace:std
std::__truth_type	d:/include/c++/14/bits/cpp_type_traits.h	/^    struct __truth_type<true>$/;"	s	namespace:std
std::__truth_type::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^    { typedef __false_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__false_type	access:public
std::__truth_type::__type	d:/include/c++/14/bits/cpp_type_traits.h	/^    { typedef __true_type __type; };$/;"	t	struct:std::__truth_type	typeref:typename:__true_type	access:public
std::__tuple_element_t	d:/include/c++/14/bits/utility.h	/^    using __tuple_element_t = typename tuple_element<__i, _Tp>::type;$/;"	t	namespace:std	typeref:typename:tuple_element<__i,_Tp>::type
std::__uninitialized_construct_buf	d:/include/c++/14/bits/stl_tempbuf.h	/^    __uninitialized_construct_buf(_Tp* __first, _Tp* __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp * __first,_Tp * __last,_ForwardIterator __seed)
std::__uninitialized_construct_buf_dispatch	d:/include/c++/14/bits/stl_tempbuf.h	/^    struct __uninitialized_construct_buf_dispatch$/;"	s	namespace:std
std::__uninitialized_construct_buf_dispatch	d:/include/c++/14/bits/stl_tempbuf.h	/^    struct __uninitialized_construct_buf_dispatch<true>$/;"	s	namespace:std
std::__uninitialized_construct_buf_dispatch::__ucr	d:/include/c++/14/bits/stl_tempbuf.h	/^        __ucr(_Pointer __first, _Pointer __last,$/;"	f	struct:std::__uninitialized_construct_buf_dispatch	typeref:typename:void	access:public	signature:(_Pointer __first,_Pointer __last,_ForwardIterator __seed)
std::__uninitialized_construct_buf_dispatch::__ucr	d:/include/c++/14/bits/stl_tempbuf.h	/^        __ucr(_Pointer, _Pointer, _ForwardIterator) { }$/;"	f	struct:std::__uninitialized_construct_buf_dispatch	typeref:typename:void	access:public	signature:(_Pointer,_Pointer,_ForwardIterator)
std::__uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_copy$/;"	s	namespace:std
std::__uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_copy<true>$/;"	s	namespace:std
std::__uninitialized_copy::__uninit_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_copy(_InputIterator __first, _InputIterator __last,$/;"	f	struct:std::__uninitialized_copy	typeref:typename:_ForwardIterator	access:public	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::__uninitialized_copy_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
std::__uninitialized_copy_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,allocator<_Tp> &)
std::__uninitialized_copy_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_move(_InputIterator1 __first1,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator & __alloc)
std::__uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result,input_iterator_tag)
std::__uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n(_RandomAccessIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_RandomAccessIterator __first,_Size __n,_ForwardIterator __result,random_access_iterator_tag)
std::__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result)
std::__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result,input_iterator_tag)
std::__uninitialized_copy_n_pair	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:pair<_RandomAccessIterator,_ForwardIterator>	signature:(_RandomAccessIterator __first,_Size __n,_ForwardIterator __result,random_access_iterator_tag)
std::__uninitialized_default	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::__uninitialized_default_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_1$/;"	s	namespace:std
std::__uninitialized_default_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_1<true>$/;"	s	namespace:std
std::__uninitialized_default_1::__uninit_default	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	struct:std::__uninitialized_default_1	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::__uninitialized_default_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_a(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,_Allocator & __alloc)
std::__uninitialized_default_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_a(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,allocator<_Tp> &)
std::__uninitialized_default_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n(_ForwardIterator __first, _Size __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n)
std::__uninitialized_default_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_n_1$/;"	s	namespace:std
std::__uninitialized_default_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_n_1<true>$/;"	s	namespace:std
std::__uninitialized_default_n_1::__uninit_default_n	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default_n(_ForwardIterator __first, _Size __n)$/;"	f	struct:std::__uninitialized_default_n_1	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n)
std::__uninitialized_default_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,_Allocator & __alloc)
std::__uninitialized_default_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,allocator<_Tp> &)
std::__uninitialized_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_novalue(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::__uninitialized_default_novalue_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_1$/;"	s	namespace:std
std::__uninitialized_default_novalue_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_1<true>$/;"	s	namespace:std
std::__uninitialized_default_novalue_1::__uninit_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^	__uninit_default_novalue(_ForwardIterator __first,$/;"	f	struct:std::__uninitialized_default_novalue_1	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::__uninitialized_default_novalue_1::__uninit_default_novalue	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_default_novalue(_ForwardIterator, _ForwardIterator)$/;"	f	struct:std::__uninitialized_default_novalue_1	typeref:typename:void	access:public	signature:(_ForwardIterator,_ForwardIterator)
std::__uninitialized_default_novalue_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __n)
std::__uninitialized_default_novalue_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_n_1$/;"	s	namespace:std
std::__uninitialized_default_novalue_n_1	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_default_novalue_n_1<true>$/;"	s	namespace:std
std::__uninitialized_default_novalue_n_1::__uninit_default_novalue_n	d:/include/c++/14/bits/stl_uninitialized.h	/^	__uninit_default_novalue_n(_ForwardIterator __first, _Size __n)$/;"	f	struct:std::__uninitialized_default_novalue_n_1	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n)
std::__uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill$/;"	s	namespace:std
std::__uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill<true>$/;"	s	namespace:std
std::__uninitialized_fill::__uninit_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	struct:std::__uninitialized_fill	typeref:typename:void	access:public	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
std::__uninitialized_fill_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,_Allocator & __alloc)
std::__uninitialized_fill_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x,allocator<_Tp2> &)
std::__uninitialized_fill_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __result,_ForwardIterator __mid,const _Tp & __x,_InputIterator __first,_InputIterator __last,_Allocator & __alloc)
std::__uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill_n$/;"	s	namespace:std
std::__uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    struct __uninitialized_fill_n<true>$/;"	s	namespace:std
std::__uninitialized_fill_n::__uninit_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^        __uninit_fill_n(_ForwardIterator __first, _Size __n,$/;"	f	struct:std::__uninitialized_fill_n	typeref:typename:_ForwardIterator	access:public	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
std::__uninitialized_fill_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,_Allocator & __alloc)
std::__uninitialized_fill_n_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x,allocator<_Tp2> &)
std::__uninitialized_move_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
std::__uninitialized_move_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_copy(_InputIterator1 __first1,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_ForwardIterator __result,_Allocator & __alloc)
std::__uninitialized_move_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,$/;"	f	namespace:std	typeref:typename:void	signature:(_InputIterator __first1,_InputIterator __last1,_ForwardIterator __first2,_ForwardIterator __last2,const _Tp & __x,_Allocator & __alloc)
std::__uninitialized_move_if_noexcept_a	d:/include/c++/14/bits/stl_uninitialized.h	/^    __uninitialized_move_if_noexcept_a(_InputIterator __first,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result,_Allocator & __alloc)
std::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
std::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, false, false> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
std::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, false, true> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
std::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_data<_Tp, _Dp, true, false> : __uniq_ptr_impl<_Tp, _Dp>$/;"	s	namespace:std	inherits:__uniq_ptr_impl<_Tp,_Dp>
std::__uniq_ptr_data::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data(__uniq_ptr_data&&) = default;$/;"	p	struct:std::__uniq_ptr_data	access:public	signature:(__uniq_ptr_data &&)
std::__uniq_ptr_data::__uniq_ptr_data	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data(__uniq_ptr_data&&) = delete;$/;"	p	struct:std::__uniq_ptr_data	access:public	signature:(__uniq_ptr_data &&)
std::__uniq_ptr_data::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;$/;"	p	struct:std::__uniq_ptr_data	typeref:typename:__uniq_ptr_data &	access:public	signature:(__uniq_ptr_data &&)
std::__uniq_ptr_data::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = delete;$/;"	p	struct:std::__uniq_ptr_data	typeref:typename:__uniq_ptr_data &	access:public	signature:(__uniq_ptr_data &&)
std::__uniq_ptr_hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_hash$/;"	s	namespace:std	inherits:__poison_hash<_Ptr>
std::__uniq_ptr_hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct __uniq_ptr_hash<_Up, _Ptr, false>$/;"	s	namespace:std	inherits:__poison_hash<_Ptr>
std::__uniq_ptr_hash::operator ()	d:/include/c++/14/bits/unique_ptr.h	/^      operator()(const _Up& __u) const$/;"	f	struct:std::__uniq_ptr_hash	typeref:typename:size_t	access:public	signature:(const _Up & __u) const
std::__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^    class __uniq_ptr_impl$/;"	c	namespace:std
std::__uniq_ptr_impl::_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^      using _DeleterConstraint = enable_if<$/;"	t	class:std::__uniq_ptr_impl	typeref:typename:enable_if<__and_<__not_<is_pointer<_Dp>>,is_default_constructible<_Dp>>::value>	access:public
std::__uniq_ptr_impl::_M_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      _Dp&       _M_deleter() noexcept { return std::get<1>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR _Dp &	access:public	signature:()
std::__uniq_ptr_impl::_M_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      const _Dp& _M_deleter() const noexcept { return std::get<1>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR const _Dp &	access:public	signature:() const
std::__uniq_ptr_impl::_M_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
std::__uniq_ptr_impl::_M_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer &	access:public	signature:()
std::__uniq_ptr_impl::_M_t	d:/include/c++/14/bits/unique_ptr.h	/^      tuple<pointer, _Dp> _M_t;$/;"	m	class:std::__uniq_ptr_impl	typeref:typename:tuple<pointer,_Dp>	access:private
std::__uniq_ptr_impl::_Ptr	d:/include/c++/14/bits/unique_ptr.h	/^	_Ptr<_Up, _Ep, __void_t<typename remove_reference<_Ep>::type::pointer>>$/;"	s	class:std::__uniq_ptr_impl	access:private
std::__uniq_ptr_impl::_Ptr	d:/include/c++/14/bits/unique_ptr.h	/^	struct _Ptr$/;"	s	class:std::__uniq_ptr_impl	access:private
std::__uniq_ptr_impl::_Ptr::type	d:/include/c++/14/bits/unique_ptr.h	/^	  using type = _Up*;$/;"	t	struct:std::__uniq_ptr_impl::_Ptr	typeref:typename:_Up *	access:public
std::__uniq_ptr_impl::_Ptr::type	d:/include/c++/14/bits/unique_ptr.h	/^	  using type = typename remove_reference<_Ep>::type::pointer;$/;"	t	struct:std::__uniq_ptr_impl::_Ptr	typeref:typename:remove_reference<_Ep>::type::pointer	access:public
std::__uniq_ptr_impl::__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^	__uniq_ptr_impl(pointer __p, _Del&& __d)$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,_Del && __d)
std::__uniq_ptr_impl::__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl() = default;$/;"	p	class:std::__uniq_ptr_impl	access:public	signature:()
std::__uniq_ptr_impl::__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl(__uniq_ptr_impl&& __u) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(__uniq_ptr_impl && __u)
std::__uniq_ptr_impl::__uniq_ptr_impl	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p)
std::__uniq_ptr_impl::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR __uniq_ptr_impl &	access:public	signature:(__uniq_ptr_impl && __u)
std::__uniq_ptr_impl::pointer	d:/include/c++/14/bits/unique_ptr.h	/^      using pointer = typename _Ptr<_Tp, _Dp>::type;$/;"	t	class:std::__uniq_ptr_impl	typeref:typename:_Ptr<_Tp,_Dp>::type	access:public
std::__uniq_ptr_impl::release	d:/include/c++/14/bits/unique_ptr.h	/^      pointer release() noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:()
std::__uniq_ptr_impl::reset	d:/include/c++/14/bits/unique_ptr.h	/^      void reset(pointer __p) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(pointer __p)
std::__uniq_ptr_impl::swap	d:/include/c++/14/bits/unique_ptr.h	/^      swap(__uniq_ptr_impl& __rhs) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(__uniq_ptr_impl & __rhs)
std::__use_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    __use_alloc(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR __uses_alloc_t<_Tp,_Alloc,_Args...>	signature:(const _Alloc & __a)
std::__use_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    __use_alloc(const _Alloc&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Alloc &&)
std::__uses_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc<false, _Tp, _Alloc, _Args...>$/;"	s	namespace:std	inherits:__uses_alloc0
std::__uses_alloc	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc<true, _Tp, _Alloc, _Args...>$/;"	s	namespace:std	inherits:__conditional_t<is_constructible<_Tp,allocator_arg_t,const_Alloc&,_Args...>::value,__uses_alloc1<_Alloc>,__uses_alloc2<_Alloc>>
std::__uses_alloc0	d:/include/c++/14/bits/uses_allocator.h	/^  struct __uses_alloc0 : __uses_alloc_base$/;"	s	namespace:std	inherits:__uses_alloc_base
std::__uses_alloc0::_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	m	struct:std::__uses_alloc0	typeref:struct:std::__uses_alloc0::_Sink	access:public
std::__uses_alloc0::_Sink	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	s	struct:std::__uses_alloc0	access:public
std::__uses_alloc0::_Sink::operator =	d:/include/c++/14/bits/uses_allocator.h	/^    struct _Sink { void _GLIBCXX20_CONSTEXPR operator=(const void*) { } } _M_a;$/;"	f	struct:std::__uses_alloc0::_Sink	typeref:typename:void _GLIBCXX20_CONSTEXPR	access:public	signature:(const void *)
std::__uses_alloc1	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	s	namespace:std	inherits:__uses_alloc_base
std::__uses_alloc1::_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc1 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	m	struct:std::__uses_alloc1	typeref:typename:const _Alloc *	access:public
std::__uses_alloc2	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	s	namespace:std	inherits:__uses_alloc_base
std::__uses_alloc2::_M_a	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_alloc2 : __uses_alloc_base { const _Alloc* _M_a; };$/;"	m	struct:std::__uses_alloc2	typeref:typename:const _Alloc *	access:public
std::__uses_alloc_base	d:/include/c++/14/bits/uses_allocator.h	/^  struct __uses_alloc_base { };$/;"	s	namespace:std
std::__uses_alloc_t	d:/include/c++/14/bits/uses_allocator.h	/^    using __uses_alloc_t =$/;"	t	namespace:std	typeref:typename:__uses_alloc<uses_allocator<_Tp,_Alloc>::value,_Tp,_Alloc,_Args...>
std::__uses_allocator_construct	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct(const _Alloc& __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(const _Alloc & __a,_Tp * __ptr,_Args &&...__args)
std::__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc0, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc0,_Tp * __ptr,_Args &&...__args)
std::__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc1<_Alloc> __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc1<_Alloc> __a,_Tp * __ptr,_Args &&...__args)
std::__uses_allocator_construct_impl	d:/include/c++/14/bits/uses_allocator.h	/^    void __uses_allocator_construct_impl(__uses_alloc2<_Alloc> __a, _Tp* __ptr,$/;"	f	namespace:std	typeref:typename:void	signature:(__uses_alloc2<_Alloc> __a,_Tp * __ptr,_Args &&...__args)
std::__uses_allocator_helper	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_allocator_helper$/;"	s	namespace:std	inherits:false_type
std::__uses_allocator_helper	d:/include/c++/14/bits/uses_allocator.h	/^    struct __uses_allocator_helper<_Tp, _Alloc,$/;"	s	namespace:std	inherits:__is_erased_or_convertible<_Alloc,typename_Tp::allocator_type>::type
std::__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __weak_count$/;"	c	namespace:std
std::__weak_count::_M_get_use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_get_use_count() const noexcept$/;"	f	class:std::__weak_count	typeref:typename:long	access:public	signature:() const
std::__weak_count::_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __shared_count<_Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_count	typeref:typename:bool	access:public	signature:(const __shared_count<_Lp> & __rhs) const
std::__weak_count::_M_less	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_less(const __weak_count& __rhs) const noexcept$/;"	f	class:std::__weak_count	typeref:typename:bool	access:public	signature:(const __weak_count & __rhs) const
std::__weak_count::_M_pi	d:/include/c++/14/bits/shared_ptr_base.h	/^      _Sp_counted_base<_Lp>*  _M_pi;$/;"	m	class:std::__weak_count	typeref:typename:_Sp_counted_base<_Lp> *	access:private
std::__weak_count::_M_swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_swap(__weak_count& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:void	access:public	signature:(__weak_count & __r)
std::__weak_count::__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(__weak_count&& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(__weak_count && __r)
std::__weak_count::__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(const __shared_count<_Lp>& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(const __shared_count<_Lp> & __r)
std::__weak_count::__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count(const __weak_count& __r) noexcept$/;"	f	class:std::__weak_count	access:public	signature:(const __weak_count & __r)
std::__weak_count::__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __weak_count() noexcept : _M_pi(nullptr)$/;"	f	class:std::__weak_count	access:public	signature:()
std::__weak_count::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__weak_count&& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(__weak_count && __r)
std::__weak_count::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __shared_count<_Lp>& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(const __shared_count<_Lp> & __r)
std::__weak_count::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __weak_count& __r) noexcept$/;"	f	class:std::__weak_count	typeref:typename:__weak_count &	access:public	signature:(const __weak_count & __r)
std::__weak_count::~__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__weak_count() noexcept$/;"	f	class:std::__weak_count	access:public	signature:()
std::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    class __weak_ptr$/;"	c	namespace:std
std::__weak_ptr::_Assignable	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Assignable = _Compatible<_Yp, __weak_ptr&>;$/;"	t	class:std::__weak_ptr	typeref:typename:_Compatible<_Yp,__weak_ptr &>	access:private
std::__weak_ptr::_Compatible	d:/include/c++/14/bits/shared_ptr_base.h	/^	using _Compatible = typename$/;"	t	class:std::__weak_ptr	typeref:typename:enable_if<__sp_compatible_with<_Yp *,_Tp * >::value,_Res>::type	access:private
std::__weak_ptr::_M_assign	d:/include/c++/14/bits/shared_ptr_base.h	/^      _M_assign(_Tp* __ptr, const __shared_count<_Lp>& __refcount) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:private	signature:(_Tp * __ptr,const __shared_count<_Lp> & __refcount)
std::__weak_ptr::_M_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      element_type*	 _M_ptr;         \/\/ Contained pointer.$/;"	m	class:std::__weak_ptr	typeref:typename:element_type *	access:private
std::__weak_ptr::_M_refcount	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_count<_Lp>  _M_refcount;    \/\/ Reference counter.$/;"	m	class:std::__weak_ptr	typeref:typename:__weak_count<_Lp>	access:private
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(__weak_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(__weak_ptr<_Yp,_Lp> && __r)
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	__weak_ptr(const __weak_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_ptr(__weak_ptr&& __r) noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:(__weak_ptr && __r)
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      __weak_ptr(const __weak_ptr&) noexcept = default;$/;"	p	class:std::__weak_ptr	access:public	signature:(const __weak_ptr &)
std::__weak_ptr::__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      constexpr __weak_ptr() noexcept$/;"	f	class:std::__weak_ptr	access:public	signature:()
std::__weak_ptr::element_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using element_type = typename remove_extent<_Tp>::type;$/;"	t	class:std::__weak_ptr	typeref:typename:remove_extent<_Tp>::type	access:public
std::__weak_ptr::expired	d:/include/c++/14/bits/shared_ptr_base.h	/^      expired() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:() const
std::__weak_ptr::lock	d:/include/c++/14/bits/shared_ptr_base.h	/^      lock() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:__shared_ptr<_Tp,_Lp>	access:public	signature:() const
std::__weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(__weak_ptr<_Yp, _Lp>&& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(__weak_ptr<_Yp,_Lp> && __r)
std::__weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __shared_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __shared_ptr<_Yp,_Lp> & __r)
std::__weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^	operator=(const __weak_ptr<_Yp, _Lp>& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:_Assignable<_Yp>	access:public	signature:(const __weak_ptr<_Yp,_Lp> & __r)
std::__weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(__weak_ptr&& __r) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:__weak_ptr &	access:public	signature:(__weak_ptr && __r)
std::__weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator=(const __weak_ptr& __r) noexcept = default;$/;"	p	class:std::__weak_ptr	typeref:typename:__weak_ptr &	access:public	signature:(const __weak_ptr & __r)
std::__weak_ptr::owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(const __shared_ptr<_Tp1, _Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:(const __shared_ptr<_Tp1,_Lp> & __rhs) const
std::__weak_ptr::owner_before	d:/include/c++/14/bits/shared_ptr_base.h	/^	owner_before(const __weak_ptr<_Tp1, _Lp>& __rhs) const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:bool	access:public	signature:(const __weak_ptr<_Tp1,_Lp> & __rhs) const
std::__weak_ptr::reset	d:/include/c++/14/bits/shared_ptr_base.h	/^      reset() noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:public	signature:()
std::__weak_ptr::swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      swap(__weak_ptr& __s) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:public	signature:(__weak_ptr & __s)
std::__weak_ptr::use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      use_count() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:long	access:public	signature:() const
std::__weak_ptr::~__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__weak_ptr() = default;$/;"	p	class:std::__weak_ptr	access:public	signature:()
std::__write	d:/include/c++/14/bits/locale_facets.h	/^    __write(_OutIter __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:_OutIter	signature:(_OutIter __s,const _CharT * __ws,int __len)
std::__write	d:/include/c++/14/bits/locale_facets.h	/^    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)$/;"	f	namespace:std	typeref:typename:ostreambuf_iterator<_CharT>	signature:(ostreambuf_iterator<_CharT> __s,const _CharT * __ws,int __len)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float128 __x)$/;"	f	namespace:std	typeref:typename:_Float128	signature:(_Float128 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float16 __x)$/;"	f	namespace:std	typeref:typename:_Float16	signature:(_Float16 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float32 __x)$/;"	f	namespace:std	typeref:typename:_Float32	signature:(_Float32 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(_Float64 __x)$/;"	f	namespace:std	typeref:typename:_Float64	signature:(_Float64 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_0 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_0	signature:(__GLIBCXX_TYPE_INT_N_0 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_1 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_1	signature:(__GLIBCXX_TYPE_INT_N_1 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_2 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_2	signature:(__GLIBCXX_TYPE_INT_N_2 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__GLIBCXX_TYPE_INT_N_3 __x) { return __x >= 0 ? __x : -__x; }$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __GLIBCXX_TYPE_INT_N_3	signature:(__GLIBCXX_TYPE_INT_N_3 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__float128 __x)$/;"	f	namespace:std	typeref:typename:__extension__ _GLIBCXX_CONSTEXPR __float128	signature:(__float128 __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(__gnu_cxx::__bfloat16_t __x)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__bfloat16_t	signature:(__gnu_cxx::__bfloat16_t __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR double	signature:(double __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(float __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR float	signature:(float __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long __i) { return __builtin_labs(__i); }$/;"	f	namespace:std	typeref:typename:long	signature:(long __i)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long double __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR long double	signature:(long double __x)
std::abs	d:/include/c++/14/bits/std_abs.h	/^  abs(long long __x) { return __builtin_llabs (__x); }$/;"	f	namespace:std	typeref:typename:long long	signature:(long long __x)
std::acq_rel	d:/include/c++/14/bits/atomic_base.h	/^      acq_rel,$/;"	e	enum:std::memory_order	access:public
std::acquire	d:/include/c++/14/bits/atomic_base.h	/^      acquire,$/;"	e	enum:std::memory_order	access:public
std::addressof	d:/include/c++/14/bits/move.h	/^    addressof(_Tp& __r) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _Tp *	signature:(_Tp & __r)
std::addressof	d:/include/c++/14/bits/move.h	/^    const _Tp* addressof(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const _Tp &&)
std::advance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    advance(_InputIterator& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR void	signature:(_InputIterator & __i,_Distance __n)
std::advance	d:/include/c++/14/bits/streambuf_iterator.h	/^    advance(istreambuf_iterator<_CharT>& __i, _Distance __n)$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,void>::__type	signature:(istreambuf_iterator<_CharT> & __i,_Distance __n)
std::align	d:/include/c++/14/bits/align.h	/^align(size_t __align, size_t __size, void*& __ptr, size_t& __space) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION void *	signature:(size_t __align,size_t __size,void * & __ptr,size_t & __space)
std::allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const _Alloc & __a)
std::allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NonArray<_Tp>>	signature:(const _Alloc & __a,_Args &&...__args)
std::allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const _Alloc & __a,const remove_extent_t<_Tp> & __u)
std::allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n)
std::allocate_shared	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared(const _Alloc& __a, size_t __n,$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n,const remove_extent_t<_Tp> & __u)
std::allocate_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared_for_overwrite(const _Alloc& __a)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NotUnboundedArray<_Tp>>	signature:(const _Alloc & __a)
std::allocate_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    allocate_shared_for_overwrite(const _Alloc& __a, size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(const _Alloc & __a,size_t __n)
std::allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator : public __allocator_base<_Tp>$/;"	c	namespace:std	inherits:__allocator_base<_Tp>
std::allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<const _Tp>$/;"	c	namespace:std
std::allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<const volatile _Tp>$/;"	c	namespace:std
std::allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<void>$/;"	c	namespace:std
std::allocator	d:/include/c++/14/bits/allocator.h	/^    class allocator<volatile _Tp>$/;"	c	namespace:std
std::allocator::allocate	d:/include/c++/14/bits/allocator.h	/^      allocate(size_t __n)$/;"	f	class:std::allocator	typeref:typename:_Tp *	access:public	signature:(size_t __n)
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator<_Tp1> &)
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^	allocator(const allocator<_Up>&) noexcept { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^      allocator() { }$/;"	f	class:std::allocator	access:public	signature:()
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^      allocator(const allocator& __a) _GLIBCXX_NOTHROW$/;"	f	class:std::allocator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const allocator & __a)
std::allocator::allocator	d:/include/c++/14/bits/allocator.h	/^      template<typename _Up> allocator(const allocator<_Up>&) { }$/;"	f	class:std::allocator	access:public	signature:(const allocator<_Up> &)
std::allocator::const_pointer	d:/include/c++/14/bits/allocator.h	/^      typedef const _Tp* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const _Tp *	access:public
std::allocator::const_pointer	d:/include/c++/14/bits/allocator.h	/^      typedef const void* const_pointer;$/;"	t	class:std::allocator	typeref:typename:const void *	access:public
std::allocator::const_reference	d:/include/c++/14/bits/allocator.h	/^      typedef const _Tp& const_reference;$/;"	t	class:std::allocator	typeref:typename:const _Tp &	access:public
std::allocator::deallocate	d:/include/c++/14/bits/allocator.h	/^      deallocate(_Tp* __p, size_t __n)$/;"	f	class:std::allocator	typeref:typename:void	access:public	signature:(_Tp * __p,size_t __n)
std::allocator::difference_type	d:/include/c++/14/bits/allocator.h	/^      typedef ptrdiff_t   difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::difference_type	d:/include/c++/14/bits/allocator.h	/^      typedef ptrdiff_t  difference_type;$/;"	t	class:std::allocator	typeref:typename:ptrdiff_t	access:public
std::allocator::is_always_equal	d:/include/c++/14/bits/allocator.h	/^      using is_always_equal$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
std::allocator::operator =	d:/include/c++/14/bits/allocator.h	/^      allocator& operator=(const allocator&) = default;$/;"	p	class:std::allocator	typeref:typename:allocator &	access:public	signature:(const allocator &)
std::allocator::pointer	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp*       pointer;$/;"	t	class:std::allocator	typeref:typename:_Tp *	access:public
std::allocator::pointer	d:/include/c++/14/bits/allocator.h	/^      typedef void*       pointer;$/;"	t	class:std::allocator	typeref:typename:void *	access:public
std::allocator::propagate_on_container_move_assignment	d:/include/c++/14/bits/allocator.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	class:std::allocator	typeref:typename:true_type	access:public
std::allocator::rebind	d:/include/c++/14/bits/allocator.h	/^	struct rebind$/;"	s	class:std::allocator	access:public
std::allocator::rebind::other	d:/include/c++/14/bits/allocator.h	/^	{ typedef allocator<_Tp1> other; };$/;"	t	struct:std::allocator::rebind	typeref:typename:allocator<_Tp1>	access:public
std::allocator::reference	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp&       reference;$/;"	t	class:std::allocator	typeref:typename:_Tp &	access:public
std::allocator::size_type	d:/include/c++/14/bits/allocator.h	/^      typedef size_t      size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::size_type	d:/include/c++/14/bits/allocator.h	/^      typedef size_t     size_type;$/;"	t	class:std::allocator	typeref:typename:size_t	access:public
std::allocator::value_type	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
std::allocator::value_type	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
std::allocator::value_type	d:/include/c++/14/bits/allocator.h	/^      typedef void        value_type;$/;"	t	class:std::allocator	typeref:typename:void	access:public
std::allocator::~allocator	d:/include/c++/14/bits/allocator.h	/^      ~allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
std::allocator::~allocator	d:/include/c++/14/bits/allocator.h	/^      ~allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	access:public	signature:()
std::allocator_arg	d:/include/c++/14/bits/uses_allocator.h	/^  _GLIBCXX17_INLINE constexpr allocator_arg_t allocator_arg =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE allocator_arg_t
std::allocator_arg_t	d:/include/c++/14/bits/uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	s	namespace:std
std::allocator_arg_t::allocator_arg_t	d:/include/c++/14/bits/uses_allocator.h	/^  struct allocator_arg_t { explicit allocator_arg_t() = default; };$/;"	p	struct:std::allocator_arg_t	access:public	signature:()
std::allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits : __allocator_traits_base$/;"	s	namespace:std	inherits:__allocator_traits_base
std::allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits<allocator<_Tp>>$/;"	s	namespace:std
std::allocator_traits	d:/include/c++/14/bits/alloc_traits.h	/^    struct allocator_traits<allocator<void>>$/;"	s	namespace:std
std::allocator_traits::_Diff	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Diff$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Diff	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Diff<_A2, _PtrT, __void_t<typename _A2::difference_type>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Diff::type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename _A2::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:_A2::difference_type	access:public
std::allocator_traits::_Diff::type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename pointer_traits<_PtrT>::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:pointer_traits<_PtrT>::difference_type	access:public
std::allocator_traits::_Ptr	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Ptr$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Ptr	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Ptr<_Func, _Tp, __void_t<_Func<_Alloc>>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Ptr::type	d:/include/c++/14/bits/alloc_traits.h	/^	  using type = _Func<_Alloc>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:_Func<_Alloc>	access:public
std::allocator_traits::_Ptr::type	d:/include/c++/14/bits/alloc_traits.h	/^	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:pointer_traits<pointer>::template rebind<_Tp>	access:public
std::allocator_traits::_S_allocate	d:/include/c++/14/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer __hint, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.allocate (__n,__hint))	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer __hint,int)
std::allocator_traits::_S_allocate	d:/include/c++/14/bits/alloc_traits.h	/^	_S_allocate(_Alloc2& __a, size_type __n, const_void_pointer, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:pointer	access:private	signature:(_Alloc2 & __a,size_type __n,const_void_pointer,...)
std::allocator_traits::_S_destroy	d:/include/c++/14/bits/alloc_traits.h	/^	_S_destroy(_Alloc2& __a, _Tp* __p, int)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:private	signature:(_Alloc2 & __a,_Tp * __p,int)
std::allocator_traits::_S_destroy	d:/include/c++/14/bits/alloc_traits.h	/^	_S_destroy(_Alloc2&, _Tp* __p, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:(_Alloc2 &,_Tp * __p,...)
std::allocator_traits::_S_max_size	d:/include/c++/14/bits/alloc_traits.h	/^	_S_max_size(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.max_size ())	access:private	signature:(_Alloc2 & __a,int)
std::allocator_traits::_S_max_size	d:/include/c++/14/bits/alloc_traits.h	/^	_S_max_size(_Alloc2&, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:size_type	access:private	signature:(_Alloc2 &,...)
std::allocator_traits::_S_nothrow_construct	d:/include/c++/14/bits/alloc_traits.h	/^	_S_nothrow_construct(_Alloc* __a = nullptr, _Tp* __p = nullptr)$/;"	f	struct:std::allocator_traits	typeref:typename:bool	access:private	signature:(_Alloc * __a=nullptr,_Tp * __p=nullptr)
std::allocator_traits::_S_select	d:/include/c++/14/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, ...)$/;"	f	struct:std::allocator_traits	typeref:typename:_Alloc2	access:private	signature:(_Alloc2 & __a,...)
std::allocator_traits::_S_select	d:/include/c++/14/bits/alloc_traits.h	/^	_S_select(_Alloc2& __a, int)$/;"	f	struct:std::allocator_traits	typeref:typename:decltype(__a.select_on_container_copy_construction ())	access:private	signature:(_Alloc2 & __a,int)
std::allocator_traits::_Size	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Size : make_unsigned<_DiffT> { };$/;"	s	struct:std::allocator_traits	inherits:make_unsigned<_DiffT>	access:private
std::allocator_traits::_Size	d:/include/c++/14/bits/alloc_traits.h	/^	struct _Size<_A2, _DiffT, __void_t<typename _A2::size_type>>$/;"	s	struct:std::allocator_traits	access:private
std::allocator_traits::_Size::type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename _A2::size_type; };$/;"	t	struct:std::allocator_traits::_Size	typeref:typename:_A2::size_type	access:public
std::allocator_traits::allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n)
std::allocator_traits::allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(_Alloc& __a, size_type __n, const_void_pointer __hint)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pointer	access:public	signature:(_Alloc & __a,size_type __n,const_void_pointer __hint)
std::allocator_traits::allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n)
std::allocator_traits::allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type& __a, size_type __n,$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:public	signature:(allocator_type & __a,size_type __n,const_void_pointer __hint)
std::allocator_traits::allocate	d:/include/c++/14/bits/alloc_traits.h	/^      allocate(allocator_type&, size_type, const void* = nullptr) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:void *	access:public	signature:(allocator_type &,size_type,const void * =nullptr)
std::allocator_traits::allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      typedef _Alloc allocator_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc	access:public
std::allocator_traits::allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      using allocator_type = allocator<_Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Tp>	access:public
std::allocator_traits::allocator_type	d:/include/c++/14/bits/alloc_traits.h	/^      using allocator_type = allocator<void>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<void>	access:public
std::allocator_traits::const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = const _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:const _Tp *	access:public
std::allocator_traits::const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
std::allocator_traits::const_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_pointer = typename _Ptr<__c_pointer, const value_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__c_pointer,const value_type>::type	access:public
std::allocator_traits::const_void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_void_pointer = const void*;$/;"	t	struct:std::allocator_traits	typeref:typename:const void *	access:public
std::allocator_traits::const_void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using const_void_pointer = typename _Ptr<__cv_pointer, const void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__cv_pointer,const void>::type	access:public
std::allocator_traits::construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(_Alloc& __a, _Tp* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR __enable_if_t<__can_construct<_Alloc,_Tp,_Args...>>	access:public	signature:(_Alloc & __a,_Tp * __p,_Args &&...__args)
std::allocator_traits::construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(allocator_type& __a __attribute__((__unused__)),$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p,_Args &&...__args)
std::allocator_traits::construct	d:/include/c++/14/bits/alloc_traits.h	/^	construct(allocator_type&, _Up* __p, _Args&&... __args)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type &,_Up * __p,_Args &&...__args)
std::allocator_traits::deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(_Alloc& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,pointer __p,size_type __n)
std::allocator_traits::deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(allocator_type& __a, pointer __p, size_type __n)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,pointer __p,size_type __n)
std::allocator_traits::deallocate	d:/include/c++/14/bits/alloc_traits.h	/^      deallocate(allocator_type&, void*, size_type) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:void	access:public	signature:(allocator_type &,void *,size_type)
std::allocator_traits::destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(_Alloc& __a, _Tp* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_Alloc & __a,_Tp * __p)
std::allocator_traits::destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type & __a,_Up * __p)
std::allocator_traits::destroy	d:/include/c++/14/bits/alloc_traits.h	/^	destroy(allocator_type&, _Up* __p)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(allocator_type &,_Up * __p)
std::allocator_traits::difference_type	d:/include/c++/14/bits/alloc_traits.h	/^      using difference_type = std::ptrdiff_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::ptrdiff_t	access:public
std::allocator_traits::difference_type	d:/include/c++/14/bits/alloc_traits.h	/^      using difference_type = typename _Diff<_Alloc, pointer>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Diff<_Alloc,pointer>::type	access:public
std::allocator_traits::is_always_equal	d:/include/c++/14/bits/alloc_traits.h	/^      using is_always_equal = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
std::allocator_traits::is_always_equal	d:/include/c++/14/bits/alloc_traits.h	/^      using is_always_equal$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<is_empty<_Alloc>,__equal,_Alloc>::type	access:public
std::allocator_traits::max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const _Alloc& __a) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _Alloc & __a)
std::allocator_traits::max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const allocator_type & __a)
std::allocator_traits::max_size	d:/include/c++/14/bits/alloc_traits.h	/^      max_size(const allocator_type&) = delete;$/;"	p	struct:std::allocator_traits	typeref:typename:size_type	access:public	signature:(const allocator_type &)
std::allocator_traits::pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = _Tp*;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp *	access:public
std::allocator_traits::pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = __detected_or_t<value_type*, __pointer, _Alloc>;$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<value_type *,__pointer,_Alloc>	access:public
std::allocator_traits::pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
std::allocator_traits::propagate_on_container_copy_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
std::allocator_traits::propagate_on_container_copy_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_copy_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocca,_Alloc>	access:public
std::allocator_traits::propagate_on_container_move_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment = true_type;$/;"	t	struct:std::allocator_traits	typeref:typename:true_type	access:public
std::allocator_traits::propagate_on_container_move_assignment	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_move_assignment$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocma,_Alloc>	access:public
std::allocator_traits::propagate_on_container_swap	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_swap = false_type;$/;"	t	struct:std::allocator_traits	typeref:typename:false_type	access:public
std::allocator_traits::propagate_on_container_swap	d:/include/c++/14/bits/alloc_traits.h	/^      using propagate_on_container_swap$/;"	t	struct:std::allocator_traits	typeref:typename:__detected_or_t<false_type,__pocs,_Alloc>	access:public
std::allocator_traits::rebind_alloc	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_alloc = __alloc_rebind<_Alloc, _Tp>;$/;"	t	struct:std::allocator_traits	typeref:typename:__alloc_rebind<_Alloc,_Tp>	access:public
std::allocator_traits::rebind_alloc	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_alloc = allocator<_Up>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator<_Up>	access:public
std::allocator_traits::rebind_traits	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<allocator<_Up>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<allocator<_Up>>	access:public
std::allocator_traits::rebind_traits	d:/include/c++/14/bits/alloc_traits.h	/^	using rebind_traits = allocator_traits<rebind_alloc<_Tp>>;$/;"	t	struct:std::allocator_traits	typeref:typename:allocator_traits<rebind_alloc<_Tp>>	access:public
std::allocator_traits::select_on_container_copy_construction	d:/include/c++/14/bits/alloc_traits.h	/^      select_on_container_copy_construction(const _Alloc& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR _Alloc	access:public	signature:(const _Alloc & __rhs)
std::allocator_traits::select_on_container_copy_construction	d:/include/c++/14/bits/alloc_traits.h	/^      select_on_container_copy_construction(const allocator_type& __rhs)$/;"	f	struct:std::allocator_traits	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:(const allocator_type & __rhs)
std::allocator_traits::size_type	d:/include/c++/14/bits/alloc_traits.h	/^      using size_type = std::size_t;$/;"	t	struct:std::allocator_traits	typeref:typename:std::size_t	access:public
std::allocator_traits::size_type	d:/include/c++/14/bits/alloc_traits.h	/^      using size_type = typename _Size<_Alloc, difference_type>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Size<_Alloc,difference_type>::type	access:public
std::allocator_traits::value_type	d:/include/c++/14/bits/alloc_traits.h	/^      typedef typename _Alloc::value_type value_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc::value_type	access:public
std::allocator_traits::value_type	d:/include/c++/14/bits/alloc_traits.h	/^      using value_type = _Tp;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp	access:public
std::allocator_traits::value_type	d:/include/c++/14/bits/alloc_traits.h	/^      using value_type = void;$/;"	t	struct:std::allocator_traits	typeref:typename:void	access:public
std::allocator_traits::void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using void_pointer = typename _Ptr<__v_pointer, void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__v_pointer,void>::type	access:public
std::allocator_traits::void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using void_pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
std::assume_aligned	d:/include/c++/14/bits/align.h	/^    assume_aligned(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
std::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    struct atomic<shared_ptr<_Tp>>$/;"	s	namespace:std
std::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    struct atomic<weak_ptr<_Tp>>$/;"	s	namespace:std
std::atomic::_M_impl	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic<shared_ptr<_Tp>> _M_impl;$/;"	m	struct:std::atomic	typeref:typename:_Sp_atomic<shared_ptr<_Tp>>	access:private
std::atomic::_M_impl	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      _Sp_atomic<weak_ptr<_Tp>> _M_impl;$/;"	m	struct:std::atomic	typeref:typename:_Sp_atomic<weak_ptr<_Tp>>	access:private
std::atomic::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(const atomic&) = delete;$/;"	p	struct:std::atomic	access:public	signature:(const atomic &)
std::atomic::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(shared_ptr<_Tp> __r) noexcept$/;"	f	struct:std::atomic	access:public	signature:(shared_ptr<_Tp> __r)
std::atomic::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      atomic(weak_ptr<_Tp> __r) noexcept$/;"	f	struct:std::atomic	access:public	signature:(weak_ptr<_Tp> __r)
std::atomic::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr atomic() noexcept = default;$/;"	p	struct:std::atomic	access:public	signature:()
std::atomic::atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      constexpr atomic(nullptr_t) noexcept : atomic() { }$/;"	f	struct:std::atomic	access:public	signature:(nullptr_t)
std::atomic::compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(shared_ptr<_Tp>& __expected,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(shared_ptr<_Tp> & __expected,shared_ptr<_Tp> __desired,memory_order __o,memory_order __o2)
std::atomic::compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o=memory_order_seq_cst)
std::atomic::compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_strong(weak_ptr<_Tp>& __expected,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(weak_ptr<_Tp> & __expected,weak_ptr<_Tp> __desired,memory_order __o,memory_order __o2)
std::atomic::compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_weak(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o,memory_order __o2)
std::atomic::compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      compare_exchange_weak(value_type& __expected, value_type __desired,$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:(value_type & __expected,value_type __desired,memory_order __o=memory_order_seq_cst)
std::atomic::exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      exchange(shared_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public	signature:(shared_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
std::atomic::exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      exchange(weak_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public	signature:(weak_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
std::atomic::is_always_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      static constexpr bool is_always_lock_free = false;$/;"	m	struct:std::atomic	typeref:typename:bool	access:public
std::atomic::is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      is_lock_free() const noexcept$/;"	f	struct:std::atomic	typeref:typename:bool	access:public	signature:() const
std::atomic::load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public	signature:(memory_order __o=memory_order_seq_cst) const
std::atomic::load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      load(memory_order __o = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public	signature:(memory_order __o=memory_order_seq_cst) const
std::atomic::notify_all	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_all() noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:()
std::atomic::notify_one	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      notify_one() noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:()
std::atomic::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(nullptr_t) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(nullptr_t)
std::atomic::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(shared_ptr<_Tp> __desired) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(shared_ptr<_Tp> __desired)
std::atomic::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator=(weak_ptr<_Tp> __desired) noexcept$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(weak_ptr<_Tp> __desired)
std::atomic::operator =	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      void operator=(const atomic&) = delete;$/;"	p	struct:std::atomic	typeref:typename:void	access:public	signature:(const atomic &)
std::atomic::operator shared_ptr<_Tp>	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator shared_ptr<_Tp>() const noexcept$/;"	f	struct:std::atomic	access:public	signature:() const
std::atomic::operator weak_ptr<_Tp>	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      operator weak_ptr<_Tp>() const noexcept$/;"	f	struct:std::atomic	access:public	signature:() const
std::atomic::store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      store(shared_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(shared_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
std::atomic::store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      store(weak_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(weak_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
std::atomic::value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = shared_ptr<_Tp>;$/;"	t	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public
std::atomic::value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = weak_ptr<_Tp>;$/;"	t	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public
std::atomic::wait	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      wait(value_type __old,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(value_type __old,memory_order __o=memory_order_seq_cst) const
std::atomic_compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w)
std::atomic_compare_exchange_strong	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w)
std::atomic_compare_exchange_strong_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w,memory_order,memory_order)
std::atomic_compare_exchange_strong_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w,memory_order,memory_order)
std::atomic_compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w)
std::atomic_compare_exchange_weak	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w)
std::atomic_compare_exchange_weak_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> * __v,__shared_ptr<_Tp,_Lp> __w,memory_order __success,memory_order __failure)
std::atomic_compare_exchange_weak_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> * __v,shared_ptr<_Tp> __w,memory_order __success,memory_order __failure)
std::atomic_exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)$/;"	f	namespace:std	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r)
std::atomic_exchange	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)$/;"	f	namespace:std	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r)
std::atomic_exchange_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r,memory_order)
std::atomic_exchange_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,$/;"	f	namespace:std	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r,memory_order)
std::atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^  struct atomic_flag : public __atomic_flag_base$/;"	s	namespace:std	inherits:__atomic_flag_base
std::atomic_flag::_S_init	d:/include/c++/14/bits/atomic_base.h	/^    _S_init(bool __i)$/;"	f	struct:std::atomic_flag	typeref:typename:__atomic_flag_data_type	access:private	signature:(bool __i)
std::atomic_flag::atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag() noexcept = default;$/;"	p	struct:std::atomic_flag	access:public	signature:()
std::atomic_flag::atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag(const atomic_flag&) = delete;$/;"	p	struct:std::atomic_flag	access:public	signature:(const atomic_flag &)
std::atomic_flag::atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    constexpr atomic_flag(bool __i) noexcept$/;"	f	struct:std::atomic_flag	access:public	signature:(bool __i)
std::atomic_flag::clear	d:/include/c++/14/bits/atomic_base.h	/^    clear(memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(memory_order __m=memory_order_seq_cst)
std::atomic_flag::clear	d:/include/c++/14/bits/atomic_base.h	/^    clear(memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(memory_order __m=memory_order_seq_cst)
std::atomic_flag::notify_all	d:/include/c++/14/bits/atomic_base.h	/^    notify_all() noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
std::atomic_flag::notify_one	d:/include/c++/14/bits/atomic_base.h	/^    notify_one() noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:()
std::atomic_flag::operator =	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag& operator=(const atomic_flag&) = delete;$/;"	p	struct:std::atomic_flag	typeref:typename:atomic_flag &	access:public	signature:(const atomic_flag &)
std::atomic_flag::operator =	d:/include/c++/14/bits/atomic_base.h	/^    atomic_flag& operator=(const atomic_flag&) volatile = delete;$/;"	p	struct:std::atomic_flag	typeref:typename:atomic_flag &	access:public	signature:(const atomic_flag &)
std::atomic_flag::test	d:/include/c++/14/bits/atomic_base.h	/^    test(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::atomic_flag::test	d:/include/c++/14/bits/atomic_base.h	/^    test(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst) const
std::atomic_flag::test_and_set	d:/include/c++/14/bits/atomic_base.h	/^    test_and_set(memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst)
std::atomic_flag::test_and_set	d:/include/c++/14/bits/atomic_base.h	/^    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst)
std::atomic_flag::wait	d:/include/c++/14/bits/atomic_base.h	/^    wait(bool __old,$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(bool __old,memory_order __m=memory_order_seq_cst) const
std::atomic_flag::~atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    ~atomic_flag() noexcept = default;$/;"	p	struct:std::atomic_flag	access:public	signature:()
std::atomic_is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_is_lock_free(const __shared_ptr<_Tp, _Lp>*)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(const __shared_ptr<_Tp,_Lp> *)
std::atomic_is_lock_free	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_is_lock_free(const shared_ptr<_Tp>* __p)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")bool	signature:(const shared_ptr<_Tp> * __p)
std::atomic_load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load(const __shared_ptr<_Tp, _Lp>* __p)$/;"	f	namespace:std	signature:(const __shared_ptr<_Tp,_Lp> * __p)
std::atomic_load	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load(const shared_ptr<_Tp>* __p)$/;"	f	namespace:std	signature:(const shared_ptr<_Tp> * __p)
std::atomic_load_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load_explicit(const __shared_ptr<_Tp, _Lp>* __p, memory_order)$/;"	f	namespace:std	signature:(const __shared_ptr<_Tp,_Lp> * __p,memory_order)
std::atomic_load_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)$/;"	f	namespace:std	signature:(const shared_ptr<_Tp> * __p,memory_order)
std::atomic_signal_fence	d:/include/c++/14/bits/atomic_base.h	/^  atomic_signal_fence(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(memory_order __m)
std::atomic_store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store(__shared_ptr<_Tp, _Lp>* __p, __shared_ptr<_Tp, _Lp> __r)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r)
std::atomic_store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r)
std::atomic_store_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store_explicit(__shared_ptr<_Tp, _Lp>* __p,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(__shared_ptr<_Tp,_Lp> * __p,__shared_ptr<_Tp,_Lp> __r,memory_order)
std::atomic_store_explicit	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_DEPRECATED_SUGGEST ("std::atomic<std::shared_ptr<T>>")void	signature:(shared_ptr<_Tp> * __p,shared_ptr<_Tp> __r,memory_order)
std::atomic_thread_fence	d:/include/c++/14/bits/atomic_base.h	/^  atomic_thread_fence(memory_order __m) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(memory_order __m)
std::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    class auto_ptr$/;"	c	namespace:std
std::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    class auto_ptr<void>$/;"	c	namespace:std
std::auto_ptr::_M_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      _Tp* _M_ptr;$/;"	m	class:std::auto_ptr	typeref:typename:_Tp *	access:private
std::auto_ptr::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^        auto_ptr(auto_ptr<_Tp1>& __a) throw() : _M_ptr(__a.release()) { }$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr<_Tp1> & __a)
std::auto_ptr::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(auto_ptr& __a) throw() : _M_ptr(__a.release()) { }$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr & __a)
std::auto_ptr::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(auto_ptr_ref<element_type> __ref) throw()$/;"	f	class:std::auto_ptr	access:public	signature:(auto_ptr_ref<element_type> __ref)
std::auto_ptr::auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr(element_type* __p = 0) throw() : _M_ptr(__p) { }$/;"	f	class:std::auto_ptr	access:public	signature:(element_type * __p=0)
std::auto_ptr::element_type	d:/include/c++/14/backward/auto_ptr.h	/^      typedef _Tp element_type;$/;"	t	class:std::auto_ptr	typeref:typename:_Tp	access:public
std::auto_ptr::element_type	d:/include/c++/14/backward/auto_ptr.h	/^      typedef void element_type;$/;"	t	class:std::auto_ptr	typeref:typename:void	access:public
std::auto_ptr::get	d:/include/c++/14/backward/auto_ptr.h	/^      get() const throw() { return _M_ptr; }$/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:() const
std::auto_ptr::operator *	d:/include/c++/14/backward/auto_ptr.h	/^      operator*() const throw() $/;"	f	class:std::auto_ptr	typeref:typename:element_type &	access:public	signature:() const
std::auto_ptr::operator ->	d:/include/c++/14/backward/auto_ptr.h	/^      operator->() const throw() $/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:() const
std::auto_ptr::operator =	d:/include/c++/14/backward/auto_ptr.h	/^        operator=(auto_ptr<_Tp1>& __a) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr<_Tp1> & __a)
std::auto_ptr::operator =	d:/include/c++/14/backward/auto_ptr.h	/^      operator=(auto_ptr& __a) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr & __a)
std::auto_ptr::operator =	d:/include/c++/14/backward/auto_ptr.h	/^      operator=(auto_ptr_ref<element_type> __ref) throw()$/;"	f	class:std::auto_ptr	typeref:typename:auto_ptr &	access:public	signature:(auto_ptr_ref<element_type> __ref)
std::auto_ptr::operator auto_ptr<_Tp1>	d:/include/c++/14/backward/auto_ptr.h	/^        operator auto_ptr<_Tp1>() throw()$/;"	f	class:std::auto_ptr	access:public	signature:()
std::auto_ptr::operator auto_ptr_ref<_Tp1>	d:/include/c++/14/backward/auto_ptr.h	/^        operator auto_ptr_ref<_Tp1>() throw()$/;"	f	class:std::auto_ptr	access:public	signature:()
std::auto_ptr::release	d:/include/c++/14/backward/auto_ptr.h	/^      release() throw()$/;"	f	class:std::auto_ptr	typeref:typename:element_type *	access:public	signature:()
std::auto_ptr::reset	d:/include/c++/14/backward/auto_ptr.h	/^      reset(element_type* __p = 0) throw()$/;"	f	class:std::auto_ptr	typeref:typename:void	access:public	signature:(element_type * __p=0)
std::auto_ptr::~auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      ~auto_ptr() { delete _M_ptr; }$/;"	f	class:std::auto_ptr	access:public	signature:()
std::auto_ptr_ref	d:/include/c++/14/backward/auto_ptr.h	/^    struct auto_ptr_ref$/;"	s	namespace:std
std::auto_ptr_ref::_M_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      _Tp1* _M_ptr;$/;"	m	struct:std::auto_ptr_ref	typeref:typename:_Tp1 *	access:public
std::auto_ptr_ref::auto_ptr_ref	d:/include/c++/14/backward/auto_ptr.h	/^      auto_ptr_ref(_Tp1* __p): _M_ptr(__p) { }$/;"	f	struct:std::auto_ptr_ref	access:public	signature:(_Tp1 * __p)
std::back_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class back_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::back_insert_iterator::back_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      back_insert_iterator(_Container& __x)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
std::back_insert_iterator::container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::back_insert_iterator	typeref:typename:_Container *	access:protected
std::back_insert_iterator::container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::back_insert_iterator	typeref:typename:_Container	access:public
std::back_insert_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::back_insert_iterator	typeref:typename:ptrdiff_t	access:public
std::back_insert_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:()
std::back_insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator	access:public	signature:(int)
std::back_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::back_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:back_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::back_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::back_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR back_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::back_inserter	d:/include/c++/14/bits/stl_iterator.h	/^    back_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR back_insert_iterator<_Container>	signature:(_Container & __x)
std::bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^  class bad_weak_ptr : public std::exception$/;"	c	namespace:std	inherits:std::exception
std::bad_weak_ptr::what	d:/include/c++/14/bits/shared_ptr_base.h	/^    virtual char const* what() const noexcept;$/;"	p	class:std::bad_weak_ptr	typeref:typename:char const *	access:public	signature:() const
std::bad_weak_ptr::~bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    virtual ~bad_weak_ptr() noexcept;$/;"	p	class:std::bad_weak_ptr	access:public	signature:()
std::basic_common_reference	d:/include/c++/14/bits/stl_pair.h	/^  struct basic_common_reference<pair<_T1, _T2>, pair<_U1, _U2>, _TQual, _UQual>$/;"	s	namespace:std
std::basic_common_reference::type	d:/include/c++/14/bits/stl_pair.h	/^    using type = pair<common_reference_t<_TQual<_T1>, _UQual<_U1>>,$/;"	t	struct:std::basic_common_reference	typeref:typename:pair<common_reference_t<_TQual<_T1>,_UQual<_U1>>,common_reference_t<_TQual<_T2>,_UQual<_U2>>>	access:public
std::basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^  class basic_const_iterator$/;"	c	namespace:std	inherits:__detail::__basic_const_iterator_iter_cat<_It>
std::basic_const_iterator::_M_current	d:/include/c++/14/bits/stl_iterator.h	/^    _It _M_current = _It();$/;"	m	class:std::basic_const_iterator	typeref:typename:_It	access:private
std::basic_const_iterator::_S_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^    _S_iter_concept()$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:private	signature:()
std::basic_const_iterator::__reference	d:/include/c++/14/bits/stl_iterator.h	/^    using __reference = iter_const_reference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_const_reference_t<_It>	access:private
std::basic_const_iterator::__rvalue_reference	d:/include/c++/14/bits/stl_iterator.h	/^    using __rvalue_reference = __detail::__iter_const_rvalue_reference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:__detail::__iter_const_rvalue_reference_t<_It>	access:private
std::basic_const_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^    base() &&$/;"	f	class:std::basic_const_iterator	typeref:typename:_It	access:public	signature:()
std::basic_const_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^    base() const & noexcept$/;"	f	class:std::basic_const_iterator	typeref:typename:const _It &	access:public	signature:() const
std::basic_const_iterator::basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      basic_const_iterator(_Tp&& __current)$/;"	f	class:std::basic_const_iterator	typeref:typename:requires convertible_to<_Tp,_It> 	access:public	signature:(_Tp && __current)
std::basic_const_iterator::basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      basic_const_iterator(basic_const_iterator<_It2> __current)$/;"	f	class:std::basic_const_iterator	access:public	signature:(basic_const_iterator<_It2> __current)
std::basic_const_iterator::basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    basic_const_iterator() requires default_initializable<_It> = default;$/;"	p	class:std::basic_const_iterator	access:public	signature:()
std::basic_const_iterator::basic_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    basic_const_iterator(_It __current)$/;"	f	class:std::basic_const_iterator	access:public	signature:(_It __current)
std::basic_const_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^    using difference_type = iter_difference_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_difference_t<_It>	access:public
std::basic_const_iterator::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^    using iterator_concept = decltype(_S_iter_concept());$/;"	t	class:std::basic_const_iterator	access:public
std::basic_const_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*() const$/;"	f	class:std::basic_const_iterator	typeref:typename:__reference	access:public	signature:() const
std::basic_const_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:()
std::basic_const_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator	access:public	signature:(int)
std::basic_const_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:void	access:public	signature:(int)
std::basic_const_iterator::operator +=	d:/include/c++/14/bits/stl_iterator.h	/^    operator+=(difference_type __n)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:(difference_type __n)
std::basic_const_iterator::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const _Sent& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:difference_type	access:public	signature:(const _Sent & __y) const
std::basic_const_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^    operator--()$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:()
std::basic_const_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^    operator--(int)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator	access:public	signature:(int)
std::basic_const_iterator::operator -=	d:/include/c++/14/bits/stl_iterator.h	/^    operator-=(difference_type __n)$/;"	f	class:std::basic_const_iterator	typeref:typename:basic_const_iterator &	access:public	signature:(difference_type __n)
std::basic_const_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^    operator->() const$/;"	f	class:std::basic_const_iterator	typeref:typename:const auto *	access:public	signature:() const
std::basic_const_iterator::operator <	d:/include/c++/14/bits/stl_iterator.h	/^      operator<(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
std::basic_const_iterator::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
std::basic_const_iterator::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
std::basic_const_iterator::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
std::basic_const_iterator::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=>(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:public	signature:(const _It2 & __y) const
std::basic_const_iterator::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:auto	access:public	signature:(const basic_const_iterator & __y) const
std::basic_const_iterator::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator==(const _Sent& __s) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _Sent & __s) const
std::basic_const_iterator::operator >	d:/include/c++/14/bits/stl_iterator.h	/^      operator>(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
std::basic_const_iterator::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
std::basic_const_iterator::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^      operator>=(const _It2& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const _It2 & __y) const
std::basic_const_iterator::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const basic_const_iterator& __y) const$/;"	f	class:std::basic_const_iterator	typeref:typename:bool	access:public	signature:(const basic_const_iterator & __y) const
std::basic_const_iterator::operator []	d:/include/c++/14/bits/stl_iterator.h	/^    operator[](difference_type __n) const$/;"	f	class:std::basic_const_iterator	typeref:typename:__reference	access:public	signature:(difference_type __n) const
std::basic_const_iterator::operator _CIt	d:/include/c++/14/bits/stl_iterator.h	/^    operator _CIt() &&$/;"	f	class:std::basic_const_iterator	typeref:typename:requires __detail::__constant_iterator<_CIt> && convertible_to<_It,_CIt> 	access:public	signature:()
std::basic_const_iterator::operator _CIt	d:/include/c++/14/bits/stl_iterator.h	/^    operator _CIt() const&$/;"	f	class:std::basic_const_iterator	typeref:typename:requires __detail::__constant_iterator<_CIt> && convertible_to<_It,_CIt> 	access:public	signature:() const
std::basic_const_iterator::value_type	d:/include/c++/14/bits/stl_iterator.h	/^    using value_type = iter_value_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_value_t<_It>	access:public
std::basic_ios	d:/include/c++/14/bits/basic_ios.h	/^    class basic_ios : public ios_base$/;"	c	namespace:std	inherits:ios_base
std::basic_ios::_M_cache_locale	d:/include/c++/14/bits/basic_ios.h	/^      _M_cache_locale(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(const locale & __loc)
std::basic_ios::_M_ctype	d:/include/c++/14/bits/basic_ios.h	/^      const __ctype_type*                            _M_ctype;$/;"	m	class:std::basic_ios	typeref:typename:const __ctype_type *	access:protected
std::basic_ios::_M_fill	d:/include/c++/14/bits/basic_ios.h	/^      mutable char_type                              _M_fill;$/;"	m	class:std::basic_ios	typeref:typename:char_type	access:protected
std::basic_ios::_M_fill_init	d:/include/c++/14/bits/basic_ios.h	/^      mutable bool                                   _M_fill_init;$/;"	m	class:std::basic_ios	typeref:typename:bool	access:protected
std::basic_ios::_M_num_get	d:/include/c++/14/bits/basic_ios.h	/^      const __num_get_type*                          _M_num_get;$/;"	m	class:std::basic_ios	typeref:typename:const __num_get_type *	access:protected
std::basic_ios::_M_num_put	d:/include/c++/14/bits/basic_ios.h	/^      const __num_put_type*                          _M_num_put;$/;"	m	class:std::basic_ios	typeref:typename:const __num_put_type *	access:protected
std::basic_ios::_M_setstate	d:/include/c++/14/bits/basic_ios.h	/^      _M_setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::_M_streambuf	d:/include/c++/14/bits/basic_ios.h	/^      basic_streambuf<_CharT, _Traits>*              _M_streambuf;$/;"	m	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:protected
std::basic_ios::_M_tie	d:/include/c++/14/bits/basic_ios.h	/^      basic_ostream<_CharT, _Traits>*                _M_tie;$/;"	m	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:protected
std::basic_ios::__ctype_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef ctype<_CharT>                          __ctype_type;$/;"	t	class:std::basic_ios	typeref:typename:ctype<_CharT>	access:public
std::basic_ios::__num_get_type	d:/include/c++/14/bits/basic_ios.h	/^						     __num_get_type;$/;"	t	class:std::basic_ios	typeref:typename:num_get<_CharT,istreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::__num_put_type	d:/include/c++/14/bits/basic_ios.h	/^						     __num_put_type;$/;"	t	class:std::basic_ios	typeref:typename:num_put<_CharT,ostreambuf_iterator<_CharT,_Traits>>	access:public
std::basic_ios::bad	d:/include/c++/14/bits/basic_ios.h	/^      bad() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios()$/;"	f	class:std::basic_ios	access:protected	signature:()
std::basic_ios::basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	access:protected	signature:(const basic_ios &)
std::basic_ios::char_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef _CharT                                 char_type;$/;"	t	class:std::basic_ios	typeref:typename:_CharT	access:public
std::basic_ios::clear	d:/include/c++/14/bits/basic_ios.h	/^      clear(iostate __state = goodbit);$/;"	p	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state=goodbit)
std::basic_ios::copyfmt	d:/include/c++/14/bits/basic_ios.h	/^      copyfmt(const basic_ios& __rhs);$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:public	signature:(const basic_ios & __rhs)
std::basic_ios::eof	d:/include/c++/14/bits/basic_ios.h	/^      eof() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::exceptions	d:/include/c++/14/bits/basic_ios.h	/^      exceptions() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::exceptions	d:/include/c++/14/bits/basic_ios.h	/^      exceptions(iostate __except)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __except)
std::basic_ios::fail	d:/include/c++/14/bits/basic_ios.h	/^      fail() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::fill	d:/include/c++/14/bits/basic_ios.h	/^      fill() const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:() const
std::basic_ios::fill	d:/include/c++/14/bits/basic_ios.h	/^      fill(char_type __ch)$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char_type __ch)
std::basic_ios::good	d:/include/c++/14/bits/basic_ios.h	/^      good() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::imbue	d:/include/c++/14/bits/basic_ios.h	/^      imbue(const locale& __loc);$/;"	p	class:std::basic_ios	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::basic_ios::init	d:/include/c++/14/bits/basic_ios.h	/^      init(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::int_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::int_type             int_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::int_type	access:public
std::basic_ios::move	d:/include/c++/14/bits/basic_ios.h	/^      move(basic_ios& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
std::basic_ios::move	d:/include/c++/14/bits/basic_ios.h	/^      move(basic_ios&& __rhs)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios && __rhs)
std::basic_ios::narrow	d:/include/c++/14/bits/basic_ios.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::basic_ios	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::basic_ios::off_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::off_type             off_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::off_type	access:public
std::basic_ios::operator !	d:/include/c++/14/bits/basic_ios.h	/^      operator!() const$/;"	f	class:std::basic_ios	typeref:typename:bool	access:public	signature:() const
std::basic_ios::operator =	d:/include/c++/14/bits/basic_ios.h	/^      basic_ios& operator=(const basic_ios&) = delete;$/;"	p	class:std::basic_ios	typeref:typename:basic_ios &	access:protected	signature:(const basic_ios &)
std::basic_ios::operator bool	d:/include/c++/14/bits/basic_ios.h	/^      explicit operator bool() const$/;"	f	class:std::basic_ios	access:public	signature:() const
std::basic_ios::pos_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef typename _Traits::pos_type             pos_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits::pos_type	access:public
std::basic_ios::rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      rdbuf() const$/;"	f	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);$/;"	p	class:std::basic_ios	typeref:typename:basic_streambuf<_CharT,_Traits> *	access:public	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::rdstate	d:/include/c++/14/bits/basic_ios.h	/^      rdstate() const$/;"	f	class:std::basic_ios	typeref:typename:iostate	access:public	signature:() const
std::basic_ios::set_rdbuf	d:/include/c++/14/bits/basic_ios.h	/^      set_rdbuf(basic_streambuf<_CharT, _Traits>* __sb)$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_streambuf<_CharT,_Traits> * __sb)
std::basic_ios::setstate	d:/include/c++/14/bits/basic_ios.h	/^      setstate(iostate __state)$/;"	f	class:std::basic_ios	typeref:typename:void	access:public	signature:(iostate __state)
std::basic_ios::swap	d:/include/c++/14/bits/basic_ios.h	/^      swap(basic_ios& __rhs) noexcept$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
std::basic_ios::tie	d:/include/c++/14/bits/basic_ios.h	/^      tie() const$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
std::basic_ios::tie	d:/include/c++/14/bits/basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
std::basic_ios::traits_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits	access:public
std::basic_ios::widen	d:/include/c++/14/bits/basic_ios.h	/^      widen(char __c) const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
std::basic_ios::~basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios	access:public	signature:()
std::basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())$/;"	p	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11	signature:(_InputIterator,_InputIterator,_Allocator=_Allocator ())
std::basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>, const _Allocator& = _Allocator())$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,const _Allocator &=_Allocator ())
std::basic_string	d:/include/c++/14/bits/basic_string.h	/^    basic_string(basic_string_view<_CharT, _Traits>,$/;"	p	namespace:std	signature:(basic_string_view<_CharT,_Traits>,typename basic_string<_CharT,_Traits,_Allocator>::size_type,typename basic_string<_CharT,_Traits,_Allocator>::size_type,const _Allocator &=_Allocator ())
std::basic_string	d:/include/c++/14/bits/basic_string.h	/^    class basic_string$/;"	c	namespace:std
std::basic_string	d:/include/c++/14/bits/cow_string.h	/^    class basic_string$/;"	c	namespace:std
std::basic_string::_Alloc_hider	d:/include/c++/14/bits/basic_string.h	/^      struct _Alloc_hider : allocator_type \/\/ TODO check __is_final$/;"	s	class:std::basic_string	inherits:allocator_type	access:private
std::basic_string::_Alloc_hider	d:/include/c++/14/bits/cow_string.h	/^      struct _Alloc_hider : _Alloc$/;"	s	class:std::basic_string	inherits:_Alloc	access:private
std::basic_string::_Alloc_hider::_Alloc_hider	d:/include/c++/14/bits/basic_string.h	/^	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(pointer __dat,const _Alloc & __a=_Alloc ())
std::basic_string::_Alloc_hider::_Alloc_hider	d:/include/c++/14/bits/cow_string.h	/^	_Alloc_hider(_CharT* __dat, const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Alloc_hider	access:public	signature:(_CharT * __dat,const _Alloc & __a)
std::basic_string::_Alloc_hider::_M_p	d:/include/c++/14/bits/basic_string.h	/^	pointer _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:pointer	access:public
std::basic_string::_Alloc_hider::_M_p	d:/include/c++/14/bits/cow_string.h	/^	_CharT* _M_p; \/\/ The actual data.$/;"	m	struct:std::basic_string::_Alloc_hider	typeref:typename:_CharT *	access:public
std::basic_string::_Alloc_traits	d:/include/c++/14/bits/basic_string.h	/^      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Char_alloc_type>	access:private
std::basic_string::_CharT_alloc_traits	d:/include/c++/14/bits/cow_string.h	/^      typedef __gnu_cxx::__alloc_traits<_CharT_alloc_type> _CharT_alloc_traits;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_CharT_alloc_type>	access:private
std::basic_string::_CharT_alloc_type	d:/include/c++/14/bits/cow_string.h	/^	rebind<_CharT>::other _CharT_alloc_type;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<_CharT>::other	access:private
std::basic_string::_Char_alloc_type	d:/include/c++/14/bits/basic_string.h	/^      using _Char_alloc_type = _Alloc;$/;"	t	class:std::basic_string	typeref:typename:_Alloc	access:private
std::basic_string::_If_sv	d:/include/c++/14/bits/basic_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
std::basic_string::_If_sv	d:/include/c++/14/bits/cow_string.h	/^	using _If_sv = enable_if_t<$/;"	t	class:std::basic_string	access:private
std::basic_string::_M_append	d:/include/c++/14/bits/basic_string.h	/^      _M_append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const _CharT * __s,size_type __n)
std::basic_string::_M_assign	d:/include/c++/14/bits/basic_string.h	/^      _M_assign(const basic_string&);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(const basic_string &)
std::basic_string::_M_assign	d:/include/c++/14/bits/cow_string.h	/^      _M_assign(_CharT* __d, size_type __n, _CharT __c) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
std::basic_string::_M_capacity	d:/include/c++/14/bits/basic_string.h	/^      _M_capacity(size_type __capacity)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __capacity)
std::basic_string::_M_check	d:/include/c++/14/bits/basic_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:private	signature:(size_type __pos,const char * __s) const
std::basic_string::_M_check	d:/include/c++/14/bits/cow_string.h	/^      _M_check(size_type __pos, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,const char * __s) const
std::basic_string::_M_check_length	d:/include/c++/14/bits/basic_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
std::basic_string::_M_check_length	d:/include/c++/14/bits/cow_string.h	/^      _M_check_length(size_type __n1, size_type __n2, const char* __s) const$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __n1,size_type __n2,const char * __s) const
std::basic_string::_M_construct	d:/include/c++/14/bits/basic_string.h	/^        _M_construct(_FwdIterator __beg, _FwdIterator __end,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,std::forward_iterator_tag)
std::basic_string::_M_construct	d:/include/c++/14/bits/basic_string.h	/^        _M_construct(_InIterator __beg, _InIterator __end,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_InIterator __beg,_InIterator __end,std::input_iterator_tag)
std::basic_string::_M_construct	d:/include/c++/14/bits/basic_string.h	/^      _M_construct(size_type __req, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __req,_CharT __c)
std::basic_string::_M_construct_aux	d:/include/c++/14/bits/basic_string.h	/^        _M_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_InIterator __beg,_InIterator __end,std::__false_type)
std::basic_string::_M_construct_aux	d:/include/c++/14/bits/basic_string.h	/^        _M_construct_aux(_Integer __beg, _Integer __end, std::__true_type)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_Integer __beg,_Integer __end,std::__true_type)
std::basic_string::_M_construct_aux_2	d:/include/c++/14/bits/basic_string.h	/^      _M_construct_aux_2(size_type __req, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __req,_CharT __c)
std::basic_string::_M_copy	d:/include/c++/14/bits/cow_string.h	/^      _M_copy(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_M_create	d:/include/c++/14/bits/basic_string.h	/^      _M_create(size_type&, size_type);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:(size_type &,size_type)
std::basic_string::_M_data	d:/include/c++/14/bits/basic_string.h	/^      _M_data() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:() const
std::basic_string::_M_data	d:/include/c++/14/bits/basic_string.h	/^      _M_data(pointer __p)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(pointer __p)
std::basic_string::_M_data	d:/include/c++/14/bits/cow_string.h	/^      _M_data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:() const
std::basic_string::_M_data	d:/include/c++/14/bits/cow_string.h	/^      _M_data(_CharT* __p) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_CharT * __p)
std::basic_string::_M_dataplus	d:/include/c++/14/bits/basic_string.h	/^      _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
std::basic_string::_M_dataplus	d:/include/c++/14/bits/cow_string.h	/^      mutable _Alloc_hider	_M_dataplus;$/;"	m	class:std::basic_string	typeref:typename:_Alloc_hider	access:private
std::basic_string::_M_destroy	d:/include/c++/14/bits/basic_string.h	/^      _M_destroy(size_type __size) throw()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __size)
std::basic_string::_M_disjunct	d:/include/c++/14/bits/basic_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
std::basic_string::_M_disjunct	d:/include/c++/14/bits/cow_string.h	/^      _M_disjunct(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:bool	access:private	signature:(const _CharT * __s) const
std::basic_string::_M_dispose	d:/include/c++/14/bits/basic_string.h	/^      _M_dispose()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:()
std::basic_string::_M_erase	d:/include/c++/14/bits/basic_string.h	/^      _M_erase(size_type __pos, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __pos,size_type __n)
std::basic_string::_M_get_allocator	d:/include/c++/14/bits/basic_string.h	/^      _M_get_allocator() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR const allocator_type &	access:private	signature:() const
std::basic_string::_M_get_allocator	d:/include/c++/14/bits/basic_string.h	/^      _M_get_allocator()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR allocator_type &	access:private	signature:()
std::basic_string::_M_ibegin	d:/include/c++/14/bits/cow_string.h	/^      _M_ibegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
std::basic_string::_M_iend	d:/include/c++/14/bits/cow_string.h	/^      _M_iend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:iterator	access:private	signature:() const
std::basic_string::_M_init_local_buf	d:/include/c++/14/bits/basic_string.h	/^      _M_init_local_buf() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX14_CONSTEXPR void	access:private	signature:()
std::basic_string::_M_is_local	d:/include/c++/14/bits/basic_string.h	/^      _M_is_local() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR bool	access:private	signature:() const
std::basic_string::_M_leak	d:/include/c++/14/bits/cow_string.h	/^      _M_leak()    \/\/ for use in begin() & non-const op[]$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:()
std::basic_string::_M_leak_hard	d:/include/c++/14/bits/cow_string.h	/^      _M_leak_hard();$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:()
std::basic_string::_M_leak_hard	d:/include/c++/14/bits/cow_string.h	/^    _M_leak_hard()$/;"	f	class:std::basic_string	typeref:typename:void	signature:()
std::basic_string::_M_length	d:/include/c++/14/bits/basic_string.h	/^      _M_length(size_type __length)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __length)
std::basic_string::_M_limit	d:/include/c++/14/bits/basic_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:private	signature:(size_type __pos,size_type __off) const
std::basic_string::_M_limit	d:/include/c++/14/bits/cow_string.h	/^      _M_limit(size_type __pos, size_type __off) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:private	signature:(size_type __pos,size_type __off) const
std::basic_string::_M_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_local_data() const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR const_pointer	access:private	signature:() const
std::basic_string::_M_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_local_data()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:()
std::basic_string::_M_move	d:/include/c++/14/bits/cow_string.h	/^      _M_move(_CharT* __d, const _CharT* __s, size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_M_mutate	d:/include/c++/14/bits/basic_string.h	/^      _M_mutate(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,size_type __len2)
std::basic_string::_M_mutate	d:/include/c++/14/bits/cow_string.h	/^      _M_mutate(size_type __pos, size_type __len1, size_type __len2);$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(size_type __pos,size_type __len1,size_type __len2)
std::basic_string::_M_mutate	d:/include/c++/14/bits/cow_string.h	/^    _M_mutate(size_type __pos, size_type __len1, size_type __len2)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __pos,size_type __len1,size_type __len2)
std::basic_string::_M_rep	d:/include/c++/14/bits/cow_string.h	/^      _M_rep() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_Rep *	access:private	signature:() const
std::basic_string::_M_replace	d:/include/c++/14/bits/basic_string.h	/^      _M_replace(size_type __pos, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(size_type __pos,size_type __len1,const _CharT * __s,const size_type __len2)
std::basic_string::_M_replace_aux	d:/include/c++/14/bits/basic_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::_M_replace_aux	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::_M_replace_aux	d:/include/c++/14/bits/cow_string.h	/^    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos1,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::_M_replace_cold	d:/include/c++/14/bits/basic_string.h	/^      _M_replace_cold(pointer __p, size_type __len1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:void	access:private	signature:(pointer __p,size_type __len1,const _CharT * __s,const size_type __len2,const size_type __how_much)
std::basic_string::_M_replace_dispatch	d:/include/c++/14/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_Integer __n,_Integer __val,__true_type)
std::basic_string::_M_replace_dispatch	d:/include/c++/14/bits/basic_string.h	/^	_M_replace_dispatch(const_iterator __i1, const_iterator __i2,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:private	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
std::basic_string::_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
std::basic_string::_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^	_M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(iterator __i1,iterator __i2,_Integer __n,_Integer __val,__true_type)
std::basic_string::_M_replace_dispatch	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2,__false_type)
std::basic_string::_M_replace_safe	d:/include/c++/14/bits/cow_string.h	/^      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:private	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::_M_replace_safe	d:/include/c++/14/bits/cow_string.h	/^    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos1,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::_M_set_length	d:/include/c++/14/bits/basic_string.h	/^      _M_set_length(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(size_type __n)
std::basic_string::_M_string_length	d:/include/c++/14/bits/basic_string.h	/^      size_type		_M_string_length;$/;"	m	class:std::basic_string	typeref:typename:size_type	access:private
std::basic_string::_M_use_local_data	d:/include/c++/14/bits/basic_string.h	/^      _M_use_local_data() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX14_CONSTEXPR pointer	access:private	signature:()
std::basic_string::_Rep	d:/include/c++/14/bits/cow_string.h	/^      struct _Rep : _Rep_base$/;"	s	class:std::basic_string	inherits:_Rep_base	access:private
std::basic_string::_Rep::_M_clone	d:/include/c++/14/bits/cow_string.h	/^	_M_clone(const _Alloc&, size_type __res = 0);$/;"	p	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc &,size_type __res=0)
std::basic_string::_Rep::_M_clone	d:/include/c++/14/bits/cow_string.h	/^    _M_clone(const _Alloc& __alloc, size_type __res)$/;"	f	class:std::basic_string::_Rep	typeref:typename:_CharT *	signature:(const _Alloc & __alloc,size_type __res)
std::basic_string::_Rep::_M_destroy	d:/include/c++/14/bits/cow_string.h	/^	_M_destroy(const _Alloc&) throw();$/;"	p	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc &)
std::basic_string::_Rep::_M_destroy	d:/include/c++/14/bits/cow_string.h	/^    _M_destroy(const _Alloc& __a) throw ()$/;"	f	class:std::basic_string::_Rep	typeref:typename:void	signature:(const _Alloc & __a)
std::basic_string::_Rep::_M_dispose	d:/include/c++/14/bits/cow_string.h	/^	_M_dispose(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(const _Alloc & __a)
std::basic_string::_Rep::_M_grab	d:/include/c++/14/bits/cow_string.h	/^	_M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:(const _Alloc & __alloc1,const _Alloc & __alloc2)
std::basic_string::_Rep::_M_is_leaked	d:/include/c++/14/bits/cow_string.h	/^	_M_is_leaked() const _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
std::basic_string::_Rep::_M_is_shared	d:/include/c++/14/bits/cow_string.h	/^	_M_is_shared() const _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:bool	access:public	signature:() const
std::basic_string::_Rep::_M_refcopy	d:/include/c++/14/bits/cow_string.h	/^	_M_refcopy() throw()$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::_Rep::_M_refdata	d:/include/c++/14/bits/cow_string.h	/^	_M_refdata() throw()$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::_Rep::_M_set_leaked	d:/include/c++/14/bits/cow_string.h	/^	_M_set_leaked() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
std::basic_string::_Rep::_M_set_length_and_sharable	d:/include/c++/14/bits/cow_string.h	/^	_M_set_length_and_sharable(size_type __n) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:(size_type __n)
std::basic_string::_Rep::_M_set_sharable	d:/include/c++/14/bits/cow_string.h	/^	_M_set_sharable() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:void	access:public	signature:()
std::basic_string::_Rep::_Raw_bytes_alloc	d:/include/c++/14/bits/cow_string.h	/^	  rebind<char>::other _Raw_bytes_alloc;$/;"	t	struct:std::basic_string::_Rep	typeref:typename:__gnu_cxx::__alloc_traits<_Alloc>::template rebind<char>::other	access:public
std::basic_string::_Rep::_S_create	d:/include/c++/14/bits/cow_string.h	/^	_S_create(size_type, size_type, const _Alloc&);$/;"	p	struct:std::basic_string::_Rep	typeref:typename:_Rep *	access:public	signature:(size_type,size_type,const _Alloc &)
std::basic_string::_Rep::_S_create	d:/include/c++/14/bits/cow_string.h	/^    _S_create(size_type __capacity, size_type __old_capacity,$/;"	f	class:std::basic_string::_Rep	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::_Rep *	signature:(size_type __capacity,size_type __old_capacity,const _Alloc & __alloc)
std::basic_string::_Rep::_S_empty_rep	d:/include/c++/14/bits/cow_string.h	/^	_S_empty_rep() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::basic_string::_Rep	typeref:typename:_Rep &	access:public	signature:()
std::basic_string::_Rep::_S_empty_rep_storage	d:/include/c++/14/bits/cow_string.h	/^	static size_type _S_empty_rep_storage[];$/;"	m	struct:std::basic_string::_Rep	typeref:typename:size_type[]	access:public
std::basic_string::_Rep::_S_max_size	d:/include/c++/14/bits/cow_string.h	/^	static const size_type	_S_max_size;$/;"	m	struct:std::basic_string::_Rep	typeref:typename:const size_type	access:public
std::basic_string::_Rep::_S_terminal	d:/include/c++/14/bits/cow_string.h	/^	static const _CharT	_S_terminal;$/;"	m	struct:std::basic_string::_Rep	typeref:typename:const _CharT	access:public
std::basic_string::_Rep_base	d:/include/c++/14/bits/cow_string.h	/^      struct _Rep_base$/;"	s	class:std::basic_string	access:private
std::basic_string::_Rep_base::_M_capacity	d:/include/c++/14/bits/cow_string.h	/^	size_type		_M_capacity;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
std::basic_string::_Rep_base::_M_length	d:/include/c++/14/bits/cow_string.h	/^	size_type		_M_length;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:size_type	access:public
std::basic_string::_Rep_base::_M_refcount	d:/include/c++/14/bits/cow_string.h	/^	_Atomic_word		_M_refcount;$/;"	m	struct:std::basic_string::_Rep_base	typeref:typename:_Atomic_word	access:public
std::basic_string::_S_allocate	d:/include/c++/14/bits/basic_string.h	/^      _S_allocate(_Char_alloc_type& __a, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR pointer	access:private	signature:(_Char_alloc_type & __a,size_type __n)
std::basic_string::_S_assign	d:/include/c++/14/bits/basic_string.h	/^      _S_assign(_CharT* __d, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,size_type __n,_CharT __c)
std::basic_string::_S_compare	d:/include/c++/14/bits/basic_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR int	access:private	signature:(size_type __n1,size_type __n2)
std::basic_string::_S_compare	d:/include/c++/14/bits/cow_string.h	/^      _S_compare(size_type __n1, size_type __n2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:private	signature:(size_type __n1,size_type __n2)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^	 _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^	_S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_FwdIterator __beg,_FwdIterator __end,const _Alloc & __a,forward_iterator_tag)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^	_S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,forward_iterator_tag)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,input_iterator_tag)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);$/;"	p	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
std::basic_string::_S_construct	d:/include/c++/14/bits/cow_string.h	/^    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	signature:(size_type __n,_CharT __c,const _Alloc & __a)
std::basic_string::_S_construct_aux	d:/include/c++/14/bits/cow_string.h	/^	_S_construct_aux(_InIterator __beg, _InIterator __end,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_InIterator __beg,_InIterator __end,const _Alloc & __a,__false_type)
std::basic_string::_S_construct_aux	d:/include/c++/14/bits/cow_string.h	/^	_S_construct_aux(_Integer __beg, _Integer __end,$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(_Integer __beg,_Integer __end,const _Alloc & __a,__true_type)
std::basic_string::_S_construct_aux_2	d:/include/c++/14/bits/cow_string.h	/^      _S_construct_aux_2(size_type __req, _CharT __c, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:private	signature:(size_type __req,_CharT __c,const _Alloc & __a)
std::basic_string::_S_copy	d:/include/c++/14/bits/basic_string.h	/^      _S_copy(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/basic_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^	_S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_Iterator __k1,_Iterator __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,_CharT * __k1,_CharT * __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const _CharT * __k1,const _CharT * __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,const_iterator __k1,const_iterator __k2)
std::basic_string::_S_copy_chars	d:/include/c++/14/bits/cow_string.h	/^      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:private	signature:(_CharT * __p,iterator __k1,iterator __k2)
std::basic_string::_S_empty_rep	d:/include/c++/14/bits/cow_string.h	/^      _S_empty_rep() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_Rep &	access:private	signature:()
std::basic_string::_S_local_capacity	d:/include/c++/14/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	e	enum:std::basic_string::__anon246589900103	access:public
std::basic_string::_S_move	d:/include/c++/14/bits/basic_string.h	/^      _S_move(_CharT* __d, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:private	signature:(_CharT * __d,const _CharT * __s,size_type __n)
std::basic_string::_S_to_string_view	d:/include/c++/14/bits/basic_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR __sv_type	access:private	signature:(__sv_type __svt)
std::basic_string::_S_to_string_view	d:/include/c++/14/bits/cow_string.h	/^      _S_to_string_view(__sv_type __svt) noexcept$/;"	f	class:std::basic_string	typeref:typename:__sv_type	access:private	signature:(__sv_type __svt)
std::basic_string::__anon246589900103	d:/include/c++/14/bits/basic_string.h	/^      enum { _S_local_capacity = 15 \/ sizeof(_CharT) };$/;"	g	class:std::basic_string	access:private
std::basic_string::__anon24658990020a	d:/include/c++/14/bits/basic_string.h	/^      {$/;"	u	class:std::basic_string	access:private
std::basic_string::__anon24658990020a::_M_allocated_capacity	d:/include/c++/14/bits/basic_string.h	/^	size_type        _M_allocated_capacity;$/;"	m	union:std::basic_string::__anon24658990020a	typeref:typename:size_type	access:public
std::basic_string::__anon24658990020a::_M_local_buf	d:/include/c++/14/bits/basic_string.h	/^	_CharT           _M_local_buf[_S_local_capacity + 1];$/;"	m	union:std::basic_string::__anon24658990020a	typeref:typename:_CharT[]	access:public
std::basic_string::__const_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
std::basic_string::__const_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef iterator __const_iterator;$/;"	t	class:std::basic_string	typeref:typename:iterator	access:protected
std::basic_string::__enable_if_not_native_iterator	d:/include/c++/14/bits/basic_string.h	/^	struct __enable_if_not_native_iterator$/;"	s	class:std::basic_string	access:private
std::basic_string::__enable_if_not_native_iterator	d:/include/c++/14/bits/basic_string.h	/^	struct __enable_if_not_native_iterator<_Tp, false> { };$/;"	s	class:std::basic_string	access:private
std::basic_string::__enable_if_not_native_iterator::__type	d:/include/c++/14/bits/basic_string.h	/^	{ typedef basic_string& __type; };$/;"	t	struct:std::basic_string::__enable_if_not_native_iterator	typeref:typename:basic_string &	access:public
std::basic_string::__resize_and_overwrite	d:/include/c++/14/bits/basic_string.h	/^	__resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n,_Operation __op)
std::basic_string::__resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^	__resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
std::basic_string::__resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^    __resize_and_overwrite(const size_type __n, _Operation __op)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(const size_type __n,_Operation __op)
std::basic_string::__sv_type	d:/include/c++/14/bits/basic_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
std::basic_string::__sv_type	d:/include/c++/14/bits/cow_string.h	/^      typedef basic_string_view<_CharT, _Traits> __sv_type;$/;"	t	class:std::basic_string	typeref:typename:basic_string_view<_CharT,_Traits>	access:private
std::basic_string::__sv_wrapper	d:/include/c++/14/bits/basic_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
std::basic_string::__sv_wrapper	d:/include/c++/14/bits/cow_string.h	/^      struct __sv_wrapper$/;"	s	class:std::basic_string	access:private
std::basic_string::__sv_wrapper::_M_sv	d:/include/c++/14/bits/basic_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
std::basic_string::__sv_wrapper::_M_sv	d:/include/c++/14/bits/cow_string.h	/^	__sv_type _M_sv;$/;"	m	struct:std::basic_string::__sv_wrapper	typeref:typename:__sv_type	access:public
std::basic_string::__sv_wrapper::__sv_wrapper	d:/include/c++/14/bits/basic_string.h	/^	__sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(__sv_type __sv)
std::basic_string::__sv_wrapper::__sv_wrapper	d:/include/c++/14/bits/cow_string.h	/^	explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { }$/;"	f	struct:std::basic_string::__sv_wrapper	access:public	signature:(__sv_type __sv)
std::basic_string::allocator_type	d:/include/c++/14/bits/basic_string.h	/^      typedef _Char_alloc_type				allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Char_alloc_type	access:public
std::basic_string::allocator_type	d:/include/c++/14/bits/cow_string.h	/^      typedef _Alloc					    allocator_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc	access:public
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^        append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^        append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::append	d:/include/c++/14/bits/basic_string.h	/^      append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^	append(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^	append(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^	append(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(const basic_string& __str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(const basic_string& __str, size_type __pos, size_type __n = npos);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^      append(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^    append(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const _CharT * __s,size_type __n)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^    append(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^    append(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::append	d:/include/c++/14/bits/cow_string.h	/^    append(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __n,_CharT __c)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::assign	d:/include/c++/14/bits/basic_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^	assign(_InputIterator __first, _InputIterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_InputIterator __first,_InputIterator __last)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^	assign(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^	assign(const _Tp& __svt, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt,size_type __pos,size_type __n=npos)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s,size_type __n)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const basic_string& __str);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(const basic_string& __str, size_type __pos, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n=npos)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^      assign(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^    assign(const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const _CharT * __s,size_type __n)
std::basic_string::assign	d:/include/c++/14/bits/cow_string.h	/^    assign(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(const basic_string & __str)
std::basic_string::at	d:/include/c++/14/bits/basic_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:(size_type __n) const
std::basic_string::at	d:/include/c++/14/bits/basic_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:(size_type __n)
std::basic_string::at	d:/include/c++/14/bits/cow_string.h	/^      at(size_type __n) const$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __n) const
std::basic_string::at	d:/include/c++/14/bits/cow_string.h	/^      at(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __n)
std::basic_string::back	d:/include/c++/14/bits/basic_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:() const
std::basic_string::back	d:/include/c++/14/bits/basic_string.h	/^      back() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:()
std::basic_string::back	d:/include/c++/14/bits/cow_string.h	/^      back() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
std::basic_string::back	d:/include/c++/14/bits/cow_string.h	/^      back()$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^        basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(basic_string && __str)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(basic_string && __str,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _Alloc& __a) _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(nullptr_t) = delete;$/;"	p	class:std::basic_string	access:public	signature:(nullptr_t)
std::basic_string::basic_string	d:/include/c++/14/bits/basic_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(_InputIterator __beg, _InputIterator __end,$/;"	f	class:std::basic_string	access:public	signature:(_InputIterator __beg,_InputIterator __end,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(const _Tp& __t, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^	basic_string(const _Tp& __t, size_type __pos, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _Tp & __t,size_type __pos,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string()$/;"	f	class:std::basic_string	access:public	signature:()
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(__sv_wrapper __svw, const _Alloc& __a)$/;"	f	class:std::basic_string	access:private	signature:(__sv_wrapper __svw,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(basic_string&& __str) noexcept$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(basic_string&& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(basic_string && __str,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const _CharT* __s, size_type __n,$/;"	f	class:std::basic_string	access:public	signature:(const _CharT * __s,size_type __n,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, const _Alloc& __a)$/;"	f	class:std::basic_string	access:public	signature:(const basic_string & __str,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(const basic_string& __str, size_type __pos,$/;"	p	class:std::basic_string	access:public	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(initializer_list<_CharT> __l, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(initializer_list<_CharT> __l,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(nullptr_t) = delete;$/;"	p	class:std::basic_string	access:public	signature:(nullptr_t)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())$/;"	f	class:std::basic_string	access:public	signature:(size_type __n,_CharT __c,const _Alloc & __a=_Alloc ())
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos, const _Alloc& __a)$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,const _Alloc & __a)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos, size_type __n)$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,size_type __n)
std::basic_string::basic_string	d:/include/c++/14/bits/cow_string.h	/^    basic_string(const basic_string& __str, size_type __pos,$/;"	f	class:std::basic_string	signature:(const basic_string & __str,size_type __pos,size_type __n,const _Alloc & __a)
std::basic_string::begin	d:/include/c++/14/bits/basic_string.h	/^      begin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR iterator	access:public	signature:()
std::basic_string::begin	d:/include/c++/14/bits/basic_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
std::basic_string::begin	d:/include/c++/14/bits/cow_string.h	/^      begin() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::begin	d:/include/c++/14/bits/cow_string.h	/^      begin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::c_str	d:/include/c++/14/bits/basic_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const _CharT *	access:public	signature:() const
std::basic_string::c_str	d:/include/c++/14/bits/cow_string.h	/^      c_str() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::capacity	d:/include/c++/14/bits/basic_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
std::basic_string::capacity	d:/include/c++/14/bits/cow_string.h	/^      capacity() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::cbegin	d:/include/c++/14/bits/basic_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
std::basic_string::cbegin	d:/include/c++/14/bits/cow_string.h	/^      cbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::cend	d:/include/c++/14/bits/basic_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
std::basic_string::cend	d:/include/c++/14/bits/cow_string.h	/^      cend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::clear	d:/include/c++/14/bits/basic_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
std::basic_string::clear	d:/include/c++/14/bits/cow_string.h	/^      clear() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::clear	d:/include/c++/14/bits/cow_string.h	/^      clear()$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(const _CharT * __s) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(const basic_string & __str) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
std::basic_string::compare	d:/include/c++/14/bits/basic_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^	compare(const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(const _Tp & __svt) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^	compare(size_type __pos, size_type __n, const _Tp& __svt) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^	compare(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,int>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(const _CharT* __s) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const _CharT * __s) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(const basic_string & __str) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n, const basic_string& __str) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s) const$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2) const
std::basic_string::compare	d:/include/c++/14/bits/cow_string.h	/^      compare(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:int	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos) const
std::basic_string::const_iterator	d:/include/c++/14/bits/basic_string.h	/^							const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
std::basic_string::const_iterator	d:/include/c++/14/bits/cow_string.h	/^							    const_iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<const_pointer,basic_string>	access:public
std::basic_string::const_pointer	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_pointer	const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_pointer	access:public
std::basic_string::const_pointer	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::const_pointer   const_pointer;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::const_pointer	access:public
std::basic_string::const_reference	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::const_reference	const_reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::const_reference	access:public
std::basic_string::const_reference	d:/include/c++/14/bits/cow_string.h	/^      typedef const value_type&				    const_reference;$/;"	t	class:std::basic_string	typeref:typename:const value_type &	access:public
std::basic_string::const_reference	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_type::const_reference   const_reference;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_type::const_reference	access:public
std::basic_string::const_reverse_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::basic_string::const_reverse_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef std::reverse_iterator<const_iterator>	const_reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<const_iterator>	access:public
std::basic_string::contains	d:/include/c++/14/bits/basic_string.h	/^      contains(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::contains	d:/include/c++/14/bits/basic_string.h	/^      contains(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::contains	d:/include/c++/14/bits/basic_string.h	/^      contains(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::contains	d:/include/c++/14/bits/cow_string.h	/^      contains(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::contains	d:/include/c++/14/bits/cow_string.h	/^      contains(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::contains	d:/include/c++/14/bits/cow_string.h	/^      contains(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::copy	d:/include/c++/14/bits/basic_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
std::basic_string::copy	d:/include/c++/14/bits/cow_string.h	/^      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT * __s,size_type __n,size_type __pos=0) const
std::basic_string::copy	d:/include/c++/14/bits/cow_string.h	/^    copy(_CharT* __s, size_type __n, size_type __pos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::size_type	signature:(_CharT * __s,size_type __n,size_type __pos) const
std::basic_string::crbegin	d:/include/c++/14/bits/basic_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
std::basic_string::crbegin	d:/include/c++/14/bits/cow_string.h	/^      crbegin() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::crend	d:/include/c++/14/bits/basic_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
std::basic_string::crend	d:/include/c++/14/bits/cow_string.h	/^      crend() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::data	d:/include/c++/14/bits/basic_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const _CharT *	access:public	signature:() const
std::basic_string::data	d:/include/c++/14/bits/basic_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _CharT *	access:public	signature:()
std::basic_string::data	d:/include/c++/14/bits/cow_string.h	/^      data() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const _CharT *	access:public	signature:() const
std::basic_string::data	d:/include/c++/14/bits/cow_string.h	/^      data() noexcept$/;"	f	class:std::basic_string	typeref:typename:_CharT *	access:public	signature:()
std::basic_string::difference_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::difference_type	difference_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::difference_type	access:public
std::basic_string::difference_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::difference_type difference_type;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::difference_type	access:public
std::basic_string::empty	d:/include/c++/14/bits/basic_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	access:public	signature:() const
std::basic_string::empty	d:/include/c++/14/bits/cow_string.h	/^      empty() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
std::basic_string::end	d:/include/c++/14/bits/basic_string.h	/^      end() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR iterator	access:public	signature:()
std::basic_string::end	d:/include/c++/14/bits/basic_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_iterator	access:public	signature:() const
std::basic_string::end	d:/include/c++/14/bits/cow_string.h	/^      end() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:()
std::basic_string::end	d:/include/c++/14/bits/cow_string.h	/^      end() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_iterator	access:public	signature:() const
std::basic_string::ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::ends_with	d:/include/c++/14/bits/basic_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::ends_with	d:/include/c++/14/bits/cow_string.h	/^      ends_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::erase	d:/include/c++/14/bits/basic_string.h	/^      erase(__const_iterator __first, __const_iterator __last)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __first,__const_iterator __last)
std::basic_string::erase	d:/include/c++/14/bits/basic_string.h	/^      erase(__const_iterator __position)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __position)
std::basic_string::erase	d:/include/c++/14/bits/basic_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
std::basic_string::erase	d:/include/c++/14/bits/cow_string.h	/^      erase(iterator __first, iterator __last);$/;"	p	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __first,iterator __last)
std::basic_string::erase	d:/include/c++/14/bits/cow_string.h	/^      erase(iterator __position)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __position)
std::basic_string::erase	d:/include/c++/14/bits/cow_string.h	/^      erase(size_type __pos = 0, size_type __n = npos)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos=0,size_type __n=npos)
std::basic_string::erase	d:/include/c++/14/bits/cow_string.h	/^     erase(iterator __first, iterator __last)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::iterator	signature:(iterator __first,iterator __last)
std::basic_string::find	d:/include/c++/14/bits/basic_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/basic_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/basic_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find	d:/include/c++/14/bits/basic_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/cow_string.h	/^	find(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/cow_string.h	/^      find(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/cow_string.h	/^      find(const _CharT* __s, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find	d:/include/c++/14/bits/cow_string.h	/^      find(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find	d:/include/c++/14/bits/cow_string.h	/^      find(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^	find_first_not_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(_CharT __c, size_type __pos = 0) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_not_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/basic_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_of	d:/include/c++/14/bits/basic_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/cow_string.h	/^	find_first_of(const _Tp& __svt, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(_CharT __c, size_type __pos = 0) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const _CharT* __s, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=0) const
std::basic_string::find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_first_of	d:/include/c++/14/bits/cow_string.h	/^      find_first_of(const basic_string& __str, size_type __pos = 0) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=0) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^	find_last_not_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(_CharT __c, size_type __pos = npos) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const _CharT* __s, size_type __pos,$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_not_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_not_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/basic_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_of	d:/include/c++/14/bits/basic_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/cow_string.h	/^	find_last_of(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::find_last_of	d:/include/c++/14/bits/cow_string.h	/^      find_last_of(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::front	d:/include/c++/14/bits/basic_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:() const
std::basic_string::front	d:/include/c++/14/bits/basic_string.h	/^      front() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:()
std::basic_string::front	d:/include/c++/14/bits/cow_string.h	/^      front() const noexcept$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:() const
std::basic_string::front	d:/include/c++/14/bits/cow_string.h	/^      front()$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:()
std::basic_string::get_allocator	d:/include/c++/14/bits/basic_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR allocator_type	access:public	signature:() const
std::basic_string::get_allocator	d:/include/c++/14/bits/cow_string.h	/^      get_allocator() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:allocator_type	access:public	signature:() const
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^        insert(const_iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^        insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(__const_iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(__const_iterator __p,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(const_iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,initializer_list<_CharT> __l)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(const_iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR iterator	access:public	signature:(const_iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
std::basic_string::insert	d:/include/c++/14/bits/basic_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^	insert(iterator __p, _InputIterator __beg, _InputIterator __end)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,_InputIterator __beg,_InputIterator __end)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^	insert(size_type __pos, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,const _Tp & __svt)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^	insert(size_type __pos1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,const _Tp & __svt,size_type __pos2,size_type __n=npos)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:iterator	access:public	signature:(iterator __p,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,initializer_list<_CharT> __l)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(iterator __p, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(iterator __p,size_type __n,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, const _CharT* __s, size_type __n);$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,const _CharT * __s,size_type __n)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,_CharT __c)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos1, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^      insert(size_type __pos1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,const basic_string & __str,size_type __pos2,size_type __n=npos)
std::basic_string::insert	d:/include/c++/14/bits/cow_string.h	/^     insert(size_type __pos, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos,const _CharT * __s,size_type __n)
std::basic_string::iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
std::basic_string::iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef __gnu_cxx::__normal_iterator<pointer, basic_string>  iterator;$/;"	t	class:std::basic_string	typeref:typename:__gnu_cxx::__normal_iterator<pointer,basic_string>	access:public
std::basic_string::length	d:/include/c++/14/bits/basic_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
std::basic_string::length	d:/include/c++/14/bits/cow_string.h	/^      length() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::max_size	d:/include/c++/14/bits/basic_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
std::basic_string::max_size	d:/include/c++/14/bits/cow_string.h	/^      max_size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::npos	d:/include/c++/14/bits/basic_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
std::basic_string::npos	d:/include/c++/14/bits/cow_string.h	/^      static const size_type	npos = static_cast<size_type>(-1);$/;"	m	class:std::basic_string	typeref:typename:const size_type	access:public
std::basic_string::operator +=	d:/include/c++/14/bits/basic_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator +=	d:/include/c++/14/bits/basic_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator +=	d:/include/c++/14/bits/cow_string.h	/^	operator+=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator +=	d:/include/c++/14/bits/cow_string.h	/^      operator+=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^       operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      basic_string& operator=(nullptr_t) = delete;$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(nullptr_t)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator =	d:/include/c++/14/bits/basic_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^	operator=(const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const _Tp & __svt)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      basic_string& operator=(nullptr_t) = delete;$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(nullptr_t)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(_CharT __c)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(basic_string&& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(basic_string && __str)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const _CharT * __s)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(const basic_string & __str)
std::basic_string::operator =	d:/include/c++/14/bits/cow_string.h	/^      operator=(initializer_list<_CharT> __l)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(initializer_list<_CharT> __l)
std::basic_string::operator []	d:/include/c++/14/bits/basic_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reference	access:public	signature:(size_type __pos)
std::basic_string::operator []	d:/include/c++/14/bits/cow_string.h	/^      operator[](size_type __pos)$/;"	f	class:std::basic_string	typeref:typename:reference	access:public	signature:(size_type __pos)
std::basic_string::operator [] 	d:/include/c++/14/bits/basic_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reference	access:public	signature:(size_type __pos) const
std::basic_string::operator [] 	d:/include/c++/14/bits/cow_string.h	/^      operator[] (size_type __pos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reference	access:public	signature:(size_type __pos) const
std::basic_string::operator __sv_type	d:/include/c++/14/bits/basic_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:() const
std::basic_string::operator __sv_type	d:/include/c++/14/bits/cow_string.h	/^      operator __sv_type() const noexcept$/;"	f	class:std::basic_string	access:public	signature:() const
std::basic_string::pointer	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::pointer		pointer;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::pointer	access:public
std::basic_string::pointer	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::pointer	    pointer;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::pointer	access:public
std::basic_string::pop_back	d:/include/c++/14/bits/basic_string.h	/^      pop_back() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
std::basic_string::pop_back	d:/include/c++/14/bits/cow_string.h	/^      pop_back() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::push_back	d:/include/c++/14/bits/basic_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(_CharT __c)
std::basic_string::push_back	d:/include/c++/14/bits/cow_string.h	/^      push_back(_CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(_CharT __c)
std::basic_string::rbegin	d:/include/c++/14/bits/basic_string.h	/^      rbegin() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reverse_iterator	access:public	signature:()
std::basic_string::rbegin	d:/include/c++/14/bits/basic_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
std::basic_string::rbegin	d:/include/c++/14/bits/cow_string.h	/^      rbegin() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::rbegin	d:/include/c++/14/bits/cow_string.h	/^      rbegin() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::reference	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::reference		reference;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::reference	access:public
std::basic_string::reference	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_type::reference	    reference;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_type::reference	access:public
std::basic_string::reference	d:/include/c++/14/bits/cow_string.h	/^      typedef value_type&				    reference;$/;"	t	class:std::basic_string	typeref:typename:value_type &	access:public
std::basic_string::rend	d:/include/c++/14/bits/basic_string.h	/^      rend() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR reverse_iterator	access:public	signature:()
std::basic_string::rend	d:/include/c++/14/bits/basic_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR const_reverse_iterator	access:public	signature:() const
std::basic_string::rend	d:/include/c++/14/bits/cow_string.h	/^      rend() \/\/ FIXME C++11: should be noexcept.$/;"	f	class:std::basic_string	typeref:typename:reverse_iterator	access:public	signature:()
std::basic_string::rend	d:/include/c++/14/bits/cow_string.h	/^      rend() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:const_reverse_iterator	access:public	signature:() const
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR _If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^        replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^        replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:__enable_if_not_native_iterator<_InputIterator>::__type	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      basic_string& replace(const_iterator __i1, const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(const_iterator __i1,const_iterator __i2,initializer_list<_CharT> __l)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2, size_type __n,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,size_type __n,_CharT __c)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,_CharT * __k1,_CharT * __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __k1,const _CharT * __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const _CharT * __s,size_type __n)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const basic_string & __str)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,const_iterator __k1,const_iterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(__const_iterator __i1, __const_iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(__const_iterator __i1,__const_iterator __i2,iterator __k1,iterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::replace	d:/include/c++/14/bits/basic_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^	replace(const_iterator __i1, const_iterator __i2, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(const_iterator __i1,const_iterator __i2,const _Tp & __svt)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^	replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_InputIterator __k1,_InputIterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^	replace(size_type __pos, size_type __n, const _Tp& __svt)$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos,size_type __n,const _Tp & __svt)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^	replace(size_type __pos1, size_type __n1, const _Tp& __svt,$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,basic_string &>	access:public	signature:(size_type __pos1,size_type __n1,const _Tp & __svt,size_type __pos2,size_type __n2=npos)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      basic_string& replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,initializer_list<_CharT> __l)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,_CharT * __k1,_CharT * __k2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __s,size_type __n)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const basic_string & __str)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,iterator __k1,iterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,size_type __n,_CharT __c)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const _CharT * __k1,const _CharT * __k2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(iterator __i1, iterator __i2,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(iterator __i1,iterator __i2,const_iterator __k1,const_iterator __k2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n, const basic_string& __str)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n,const basic_string & __str)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	p	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos,size_type __n1,size_type __n2,_CharT __c)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^      replace(size_type __pos1, size_type __n1, const basic_string& __str,$/;"	f	class:std::basic_string	typeref:typename:basic_string &	access:public	signature:(size_type __pos1,size_type __n1,const basic_string & __str,size_type __pos2,size_type __n2=npos)
std::basic_string::replace	d:/include/c++/14/bits/cow_string.h	/^     replace(size_type __pos, size_type __n1, const _CharT* __s,$/;"	f	class:std::basic_string	typeref:typename:basic_string<_CharT,_Traits,_Alloc> &	signature:(size_type __pos,size_type __n1,const _CharT * __s,size_type __n2)
std::basic_string::reserve	d:/include/c++/14/bits/basic_string.h	/^      reserve();$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
std::basic_string::reserve	d:/include/c++/14/bits/basic_string.h	/^      reserve(size_type __res_arg);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __res_arg)
std::basic_string::reserve	d:/include/c++/14/bits/cow_string.h	/^      reserve();$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::reserve	d:/include/c++/14/bits/cow_string.h	/^      reserve(size_type __res_arg);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __res_arg)
std::basic_string::reserve	d:/include/c++/14/bits/cow_string.h	/^    reserve()$/;"	f	class:std::basic_string	typeref:typename:void	signature:()
std::basic_string::reserve	d:/include/c++/14/bits/cow_string.h	/^    reserve(size_type __res)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __res)
std::basic_string::resize	d:/include/c++/14/bits/basic_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n)
std::basic_string::resize	d:/include/c++/14/bits/basic_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::resize	d:/include/c++/14/bits/cow_string.h	/^      resize(size_type __n)$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n)
std::basic_string::resize	d:/include/c++/14/bits/cow_string.h	/^      resize(size_type __n, _CharT __c);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_CharT __c)
std::basic_string::resize	d:/include/c++/14/bits/cow_string.h	/^    resize(size_type __n, _CharT __c)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(size_type __n,_CharT __c)
std::basic_string::resize_and_overwrite	d:/include/c++/14/bits/basic_string.h	/^	resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
std::basic_string::resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^	resize_and_overwrite(size_type __n, _Operation __op);$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(size_type __n,_Operation __op)
std::basic_string::resize_and_overwrite	d:/include/c++/14/bits/cow_string.h	/^    resize_and_overwrite(const size_type __n, _Operation __op)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(const size_type __n,_Operation __op)
std::basic_string::resize_and_overwrite::_Terminator::_M_r	d:/include/c++/14/bits/cow_string.h	/^	size_type _M_r;$/;"	m	struct:std::basic_string::resize_and_overwrite::_Terminator	typeref:typename:size_type	access:public
std::basic_string::resize_and_overwrite::_Terminator::_M_this	d:/include/c++/14/bits/cow_string.h	/^	basic_string* _M_this;$/;"	m	struct:std::basic_string::resize_and_overwrite::_Terminator	typeref:typename:basic_string *	access:public
std::basic_string::resize_and_overwrite::_Terminator::~_Terminator	d:/include/c++/14/bits/cow_string.h	/^	~_Terminator() { _M_this->_M_rep()->_M_set_length_and_sharable(_M_r); }$/;"	f	struct:std::basic_string::resize_and_overwrite::_Terminator	access:public	signature:()
std::basic_string::reverse_iterator	d:/include/c++/14/bits/basic_string.h	/^      typedef std::reverse_iterator<iterator>		reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
std::basic_string::reverse_iterator	d:/include/c++/14/bits/cow_string.h	/^      typedef std::reverse_iterator<iterator>		    reverse_iterator;$/;"	t	class:std::basic_string	typeref:typename:std::reverse_iterator<iterator>	access:public
std::basic_string::rfind	d:/include/c++/14/bits/basic_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::rfind	d:/include/c++/14/bits/basic_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/cow_string.h	/^	rfind(const _Tp& __svt, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:_If_sv<_Tp,size_type>	access:public	signature:(const _Tp & __svt,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(_CharT __c, size_type __pos = npos) const _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(_CharT __c,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const _CharT* __s, size_type __pos = npos) const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos=npos) const
std::basic_string::rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const _CharT* __s, size_type __pos, size_type __n) const$/;"	p	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const _CharT * __s,size_type __pos,size_type __n) const
std::basic_string::rfind	d:/include/c++/14/bits/cow_string.h	/^      rfind(const basic_string& __str, size_type __pos = npos) const$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:(const basic_string & __str,size_type __pos=npos) const
std::basic_string::shrink_to_fit	d:/include/c++/14/bits/basic_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:()
std::basic_string::shrink_to_fit	d:/include/c++/14/bits/cow_string.h	/^      shrink_to_fit() noexcept$/;"	f	class:std::basic_string	typeref:typename:void	access:public	signature:()
std::basic_string::size	d:/include/c++/14/bits/basic_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR size_type	access:public	signature:() const
std::basic_string::size	d:/include/c++/14/bits/cow_string.h	/^      size() const _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	typeref:typename:size_type	access:public	signature:() const
std::basic_string::size_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Alloc_traits::size_type		size_type;$/;"	t	class:std::basic_string	typeref:typename:_Alloc_traits::size_type	access:public
std::basic_string::size_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _CharT_alloc_traits::size_type	    size_type;$/;"	t	class:std::basic_string	typeref:typename:_CharT_alloc_traits::size_type	access:public
std::basic_string::starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::starts_with	d:/include/c++/14/bits/basic_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(_CharT __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(_CharT __x) const
std::basic_string::starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(basic_string_view<_CharT, _Traits> __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(basic_string_view<_CharT,_Traits> __x) const
std::basic_string::starts_with	d:/include/c++/14/bits/cow_string.h	/^      starts_with(const _CharT* __x) const noexcept$/;"	f	class:std::basic_string	typeref:typename:bool	access:public	signature:(const _CharT * __x) const
std::basic_string::substr	d:/include/c++/14/bits/basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
std::basic_string::substr	d:/include/c++/14/bits/cow_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
std::basic_string::swap	d:/include/c++/14/bits/basic_string.h	/^      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(basic_string & __s)
std::basic_string::swap	d:/include/c++/14/bits/cow_string.h	/^      swap(basic_string& __s)$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
std::basic_string::swap	d:/include/c++/14/bits/cow_string.h	/^    swap(basic_string& __s)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(basic_string & __s)
std::basic_string::traits_type	d:/include/c++/14/bits/basic_string.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
std::basic_string::traits_type	d:/include/c++/14/bits/cow_string.h	/^      typedef _Traits					    traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
std::basic_string::value_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Traits::char_type		value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
std::basic_string::value_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _Traits::char_type		    value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
std::basic_string::~basic_string	d:/include/c++/14/bits/basic_string.h	/^      ~basic_string()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
std::basic_string::~basic_string	d:/include/c++/14/bits/cow_string.h	/^      ~basic_string() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	access:public	signature:()
std::basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage	d:/include/c++/14/bits/cow_string.h	/^    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:basic_string<_CharT,_Traits,_Alloc>::size_type[]
std::basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_max_size	d:/include/c++/14/bits/cow_string.h	/^    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))\/sizeof(_CharT)) - 1) \/ 4;$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:const typename basic_string<_CharT,_Traits,_Alloc>::size_type
std::basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_terminal	d:/include/c++/14/bits/cow_string.h	/^    _Rep::_S_terminal = _CharT();$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>::_Rep	typeref:typename:const _CharT
std::basic_string<_CharT, _Traits, _Alloc>::npos	d:/include/c++/14/bits/cow_string.h	/^    basic_string<_CharT, _Traits, _Alloc>::npos;$/;"	m	class:std::basic_string<_CharT, _Traits, _Alloc>	typeref:typename:const typename basic_string<_CharT,_Traits,_Alloc>::size_type
std::begin	d:/include/c++/14/bits/range_access.h	/^    begin(_Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.begin ())	signature:(_Container & __cont)
std::begin	d:/include/c++/14/bits/range_access.h	/^    begin(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
std::begin	d:/include/c++/14/bits/range_access.h	/^    begin(const _Container& __cont) -> decltype(__cont.begin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.begin ())	signature:(const _Container & __cont)
std::begin	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> _Tp* begin(valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
std::begin	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> const _Tp* begin(const valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
std::bidirectional_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct bidirectional_iterator_tag : public forward_iterator_tag { };$/;"	s	namespace:std	inherits:forward_iterator_tag
std::binary_function	d:/include/c++/14/bits/stl_function.h	/^    struct binary_function$/;"	s	namespace:std
std::binary_function::first_argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg1 	first_argument_type; $/;"	t	struct:std::binary_function	typeref:typename:_Arg1	access:public
std::binary_function::result_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Result 	result_type;$/;"	t	struct:std::binary_function	typeref:typename:_Result	access:public
std::binary_function::second_argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg2 	second_argument_type;$/;"	t	struct:std::binary_function	typeref:typename:_Arg2	access:public
std::binary_negate	d:/include/c++/14/bits/stl_function.h	/^    class _GLIBCXX17_DEPRECATED binary_negate$/;"	c	namespace:std	inherits:binary_function<typename_Predicate::first_argument_type,typename_Predicate::second_argument_type,bool>
std::binary_negate::_M_pred	d:/include/c++/14/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::binary_negate	typeref:typename:_Predicate	access:protected
std::binary_negate::binary_negate	d:/include/c++/14/bits/stl_function.h	/^      binary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
std::binary_negate::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const typename _Predicate::first_argument_type& __x,$/;"	f	class:std::binary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::first_argument_type & __x,const typename _Predicate::second_argument_type & __y) const
std::bind1st	d:/include/c++/14/backward/binders.h	/^    bind1st(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation & __fn,const _Tp & __x)
std::bind2nd	d:/include/c++/14/backward/binders.h	/^    bind2nd(const _Operation& __fn, const _Tp& __x)$/;"	f	namespace:std	signature:(const _Operation & __fn,const _Tp & __x)
std::binder1st	d:/include/c++/14/backward/binders.h	/^    class binder1st$/;"	c	namespace:std	inherits:unary_function<typename_Operation::second_argument_type,typename_Operation::result_type>
std::binder1st::binder1st	d:/include/c++/14/backward/binders.h	/^      binder1st(const _Operation& __x,$/;"	f	class:std::binder1st	access:public	signature:(const _Operation & __x,const typename _Operation::first_argument_type & __y)
std::binder1st::op	d:/include/c++/14/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder1st	typeref:typename:_Operation	access:protected
std::binder1st::operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(const typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::second_argument_type & __x) const
std::binder1st::operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(typename _Operation::second_argument_type& __x) const$/;"	f	class:std::binder1st	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::second_argument_type & __x) const
std::binder1st::value	d:/include/c++/14/backward/binders.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
std::binder2nd	d:/include/c++/14/backward/binders.h	/^    class binder2nd$/;"	c	namespace:std	inherits:unary_function<typename_Operation::first_argument_type,typename_Operation::result_type>
std::binder2nd::binder2nd	d:/include/c++/14/backward/binders.h	/^      binder2nd(const _Operation& __x,$/;"	f	class:std::binder2nd	access:public	signature:(const _Operation & __x,const typename _Operation::second_argument_type & __y)
std::binder2nd::op	d:/include/c++/14/backward/binders.h	/^      _Operation op;$/;"	m	class:std::binder2nd	typeref:typename:_Operation	access:protected
std::binder2nd::operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(const typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(const typename _Operation::first_argument_type & __x) const
std::binder2nd::operator ()	d:/include/c++/14/backward/binders.h	/^      operator()(typename _Operation::first_argument_type& __x) const$/;"	f	class:std::binder2nd	typeref:typename:_Operation::result_type	access:public	signature:(typename _Operation::first_argument_type & __x) const
std::binder2nd::value	d:/include/c++/14/backward/binders.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
std::bit_and	d:/include/c++/14/bits/stl_function.h	/^    struct bit_and : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_and	d:/include/c++/14/bits/stl_function.h	/^    struct bit_and<void>$/;"	s	namespace:std
std::bit_and::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_and	typeref:typename:__is_transparent	access:public
std::bit_and::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_and::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_and	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::bit_not	d:/include/c++/14/bits/stl_function.h	/^    struct bit_not : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::bit_not	d:/include/c++/14/bits/stl_function.h	/^    struct bit_not<void>$/;"	s	namespace:std
std::bit_not::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_not	typeref:typename:__is_transparent	access:public
std::bit_not::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::bit_not::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::bit_not	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
std::bit_or	d:/include/c++/14/bits/stl_function.h	/^    struct bit_or : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_or	d:/include/c++/14/bits/stl_function.h	/^    struct bit_or<void>$/;"	s	namespace:std
std::bit_or::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_or	typeref:typename:__is_transparent	access:public
std::bit_or::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_or::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_or	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::bit_xor	d:/include/c++/14/bits/stl_function.h	/^    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::bit_xor	d:/include/c++/14/bits/stl_function.h	/^    struct bit_xor<void>$/;"	s	namespace:std
std::bit_xor::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::bit_xor	typeref:typename:__is_transparent	access:public
std::bit_xor::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::bit_xor::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::bit_xor	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::boolalpha	d:/include/c++/14/bits/ios_base.h	/^  boolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::cbegin	d:/include/c++/14/bits/range_access.h	/^    cbegin(const _Container& __cont) noexcept(noexcept(std::begin(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::cend	d:/include/c++/14/bits/range_access.h	/^    cend(const _Container& __cont) noexcept(noexcept(std::end(__cont)))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits : public __gnu_cxx::char_traits<_CharT>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<_CharT>
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char16_t>$/;"	s	namespace:std
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char32_t>$/;"	s	namespace:std
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char8_t>$/;"	s	namespace:std
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<char>$/;"	s	namespace:std
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<wchar_t> : public __gnu_cxx::char_traits<wchar_t>$/;"	s	namespace:std	inherits:__gnu_cxx::char_traits<wchar_t>
std::char_traits	d:/include/c++/14/bits/char_traits.h	/^    struct char_traits<wchar_t>$/;"	s	namespace:std
std::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
std::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR void	access:public	signature:(char_type & __c1,const char_type & __c2)
std::char_traits::assign	d:/include/c++/14/bits/char_traits.h	/^      assign(char_type* __s, size_t __n, char_type __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s,size_t __n,char_type __a)
std::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char              char_type;$/;"	t	struct:std::char_traits	typeref:typename:char	access:public
std::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char16_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char16_t	access:public
std::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char32_t          char_type;$/;"	t	struct:std::char_traits	typeref:typename:char32_t	access:public
std::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef char8_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:char8_t	access:public
std::char_traits::char_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wchar_t           char_type;$/;"	t	struct:std::char_traits	typeref:typename:wchar_t	access:public
std::char_traits::compare	d:/include/c++/14/bits/char_traits.h	/^      compare(const char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR int	access:public	signature:(const char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::comparison_category	d:/include/c++/14/bits/char_traits.h	/^      using comparison_category = strong_ordering;$/;"	t	struct:std::char_traits	typeref:typename:strong_ordering	access:public
std::char_traits::copy	d:/include/c++/14/bits/char_traits.h	/^      copy(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::eof	d:/include/c++/14/bits/char_traits.h	/^      eof() _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:()
std::char_traits::eof	d:/include/c++/14/bits/char_traits.h	/^      eof() noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:()
std::char_traits::eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::eq	d:/include/c++/14/bits/char_traits.h	/^      eq(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
std::char_traits::eq_int_type	d:/include/c++/14/bits/char_traits.h	/^      eq_int_type(const int_type& __c1, const int_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const int_type & __c1,const int_type & __c2)
std::char_traits::find	d:/include/c++/14/bits/char_traits.h	/^      find(const char_type* __s, size_t __n, const char_type& __a)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR const char_type *	access:public	signature:(const char_type * __s,size_t __n,const char_type & __a)
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef __UINT_LEAST16_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST16_TYPE__	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef __UINT_LEAST32_TYPE__	    int_type;$/;"	t	struct:std::char_traits	typeref:typename:__UINT_LEAST32_TYPE__	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef int               int_type;$/;"	t	struct:std::char_traits	typeref:typename:int	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef uint_least16_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least16_t	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef uint_least32_t    int_type;$/;"	t	struct:std::char_traits	typeref:typename:uint_least32_t	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef unsigned int      int_type;$/;"	t	struct:std::char_traits	typeref:typename:unsigned int	access:public
std::char_traits::int_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wint_t            int_type;$/;"	t	struct:std::char_traits	typeref:typename:wint_t	access:public
std::char_traits::length	d:/include/c++/14/bits/char_traits.h	/^      length(const char_type* __s)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX17_CONSTEXPR size_t	access:public	signature:(const char_type * __s)
std::char_traits::lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::lt	d:/include/c++/14/bits/char_traits.h	/^      lt(const char_type& __c1, const char_type& __c2) noexcept$/;"	f	struct:std::char_traits	typeref:typename:bool	access:public	signature:(const char_type & __c1,const char_type & __c2)
std::char_traits::move	d:/include/c++/14/bits/char_traits.h	/^      move(char_type* __s1, const char_type* __s2, size_t __n)$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX20_CONSTEXPR char_type *	access:public	signature:(char_type * __s1,const char_type * __s2,size_t __n)
std::char_traits::not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const int_type & __c)
std::char_traits::not_eof	d:/include/c++/14/bits/char_traits.h	/^      not_eof(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const int_type & __c)
std::char_traits::off_type	d:/include/c++/14/bits/char_traits.h	/^      typedef streamoff         off_type;$/;"	t	struct:std::char_traits	typeref:typename:streamoff	access:public
std::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef streampos         pos_type;$/;"	t	struct:std::char_traits	typeref:typename:streampos	access:public
std::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u16streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u16streampos	access:public
std::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u32streampos      pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u32streampos	access:public
std::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef u8streampos       pos_type;$/;"	t	struct:std::char_traits	typeref:typename:u8streampos	access:public
std::char_traits::pos_type	d:/include/c++/14/bits/char_traits.h	/^      typedef wstreampos        pos_type;$/;"	t	struct:std::char_traits	typeref:typename:wstreampos	access:public
std::char_traits::state_type	d:/include/c++/14/bits/char_traits.h	/^      typedef mbstate_t         state_type;$/;"	t	struct:std::char_traits	typeref:typename:mbstate_t	access:public
std::char_traits::to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
std::char_traits::to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
std::char_traits::to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
std::char_traits::to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
std::collate	d:/include/c++/14/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::collate::_M_c_locale_collate	d:/include/c++/14/bits/locale_classes.h	/^      __c_locale			_M_c_locale_collate;$/;"	m	class:std::collate	typeref:typename:__c_locale	access:protected
std::collate::_M_compare	d:/include/c++/14/bits/locale_classes.h	/^      _M_compare(const _CharT*, const _CharT*) const throw();$/;"	p	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT *,const _CharT *) const
std::collate::_M_compare	d:/include/c++/14/bits/locale_classes.h	/^    collate<char>::_M_compare(const char*, const char*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const char *,const char *) const
std::collate::_M_compare	d:/include/c++/14/bits/locale_classes.h	/^    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const throw();$/;"	p	class:std::collate	typeref:typename:int	signature:(const wchar_t *,const wchar_t *) const
std::collate::_M_transform	d:/include/c++/14/bits/locale_classes.h	/^      _M_transform(_CharT*, const _CharT*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	access:public	signature:(_CharT *,const _CharT *,size_t) const
std::collate::_M_transform	d:/include/c++/14/bits/locale_classes.h	/^    collate<char>::_M_transform(char*, const char*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(char *,const char *,size_t) const
std::collate::_M_transform	d:/include/c++/14/bits/locale_classes.h	/^    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const throw();$/;"	p	class:std::collate	typeref:typename:size_t	signature:(wchar_t *,const wchar_t *,size_t) const
std::collate::char_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef _CharT			char_type;$/;"	t	class:std::collate	typeref:typename:_CharT	access:public
std::collate::collate	d:/include/c++/14/bits/locale_classes.h	/^      collate(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::collate::collate	d:/include/c++/14/bits/locale_classes.h	/^      collate(size_t __refs = 0)$/;"	f	class:std::collate	access:public	signature:(size_t __refs=0)
std::collate::compare	d:/include/c++/14/bits/locale_classes.h	/^      compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	f	class:std::collate	typeref:typename:int	access:public	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_compare	d:/include/c++/14/bits/locale_classes.h	/^      do_compare(const _CharT* __lo1, const _CharT* __hi1,$/;"	p	class:std::collate	typeref:typename:int	access:protected	signature:(const _CharT * __lo1,const _CharT * __hi1,const _CharT * __lo2,const _CharT * __hi2) const
std::collate::do_hash	d:/include/c++/14/bits/locale_classes.h	/^      do_hash(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:long	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::do_transform	d:/include/c++/14/bits/locale_classes.h	/^      do_transform(const _CharT* __lo, const _CharT* __hi) const;$/;"	p	class:std::collate	typeref:typename:string_type	access:protected	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::hash	d:/include/c++/14/bits/locale_classes.h	/^      hash(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:long	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::id	d:/include/c++/14/bits/locale_classes.h	/^      static locale::id			id;$/;"	m	class:std::collate	typeref:typename:locale::id	access:public
std::collate::string_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
std::collate::transform	d:/include/c++/14/bits/locale_classes.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
std::collate::~collate	d:/include/c++/14/bits/locale_classes.h	/^      ~collate()$/;"	f	class:std::collate	access:protected	signature:()
std::collate<_CharT>::id	d:/include/c++/14/bits/locale_classes.h	/^    locale::id collate<_CharT>::id;$/;"	m	class:std::collate<_CharT>	typeref:typename:locale::id
std::collate_byname	d:/include/c++/14/bits/locale_classes.h	/^    class _GLIBCXX_NAMESPACE_CXX11 collate_byname : public collate<_CharT>$/;"	c	namespace:std	inherits:collate<_CharT>
std::collate_byname::char_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef _CharT               char_type;$/;"	t	class:std::collate_byname	typeref:typename:_CharT	access:public
std::collate_byname::collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      collate_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::collate_byname::collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      collate_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::collate_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::collate_byname::string_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
std::collate_byname::~collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname	access:protected	signature:()
std::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^  class common_iterator$/;"	c	namespace:std
std::common_iterator::_M_assign	d:/include/c++/14/bits/stl_iterator.h	/^      _M_assign(_CIt&& __x)$/;"	f	class:std::common_iterator	typeref:typename:void	access:private	signature:(_CIt && __x)
std::common_iterator::_M_has_value	d:/include/c++/14/bits/stl_iterator.h	/^    _M_has_value() const noexcept { return _M_index != _S_valueless; }$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:() const
std::common_iterator::_M_index	d:/include/c++/14/bits/stl_iterator.h	/^    unsigned char _M_index; \/\/ 0 == _M_it, 1 == _M_sent, 2 == valueless$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
std::common_iterator::_S_noexcept	d:/include/c++/14/bits/stl_iterator.h	/^      _S_noexcept()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
std::common_iterator::_S_noexcept1	d:/include/c++/14/bits/stl_iterator.h	/^      _S_noexcept1()$/;"	f	class:std::common_iterator	typeref:typename:bool	access:private	signature:()
std::common_iterator::_S_valueless	d:/include/c++/14/bits/stl_iterator.h	/^    static constexpr unsigned char _S_valueless{2};$/;"	m	class:std::common_iterator	typeref:typename:unsigned char	access:private
std::common_iterator::__anon657713b4010a	d:/include/c++/14/bits/stl_iterator.h	/^    {$/;"	u	class:std::common_iterator	access:private
std::common_iterator::__anon657713b4010a::_M_it	d:/include/c++/14/bits/stl_iterator.h	/^      _It _M_it;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:_It	access:public
std::common_iterator::__anon657713b4010a::_M_sent	d:/include/c++/14/bits/stl_iterator.h	/^      _Sent _M_sent;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:_Sent	access:public
std::common_iterator::__anon657713b4010a::_M_valueless	d:/include/c++/14/bits/stl_iterator.h	/^      unsigned char _M_valueless;$/;"	m	union:std::common_iterator::__anon657713b4010a	typeref:typename:unsigned char	access:public
std::common_iterator::__arrow_proxy	d:/include/c++/14/bits/stl_iterator.h	/^    class __arrow_proxy$/;"	c	class:std::common_iterator	access:private
std::common_iterator::__arrow_proxy::_M_keep	d:/include/c++/14/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::__arrow_proxy	typeref:typename:iter_value_t<_It>	access:private
std::common_iterator::__arrow_proxy::__arrow_proxy	d:/include/c++/14/bits/stl_iterator.h	/^      __arrow_proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::__arrow_proxy	access:private	signature:(iter_reference_t<_It> && __x)
std::common_iterator::__arrow_proxy::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const noexcept$/;"	f	class:std::common_iterator::__arrow_proxy	typeref:typename:const iter_value_t<_It> *	access:public	signature:() const
std::common_iterator::__postfix_proxy	d:/include/c++/14/bits/stl_iterator.h	/^    class __postfix_proxy$/;"	c	class:std::common_iterator	access:private
std::common_iterator::__postfix_proxy::_M_keep	d:/include/c++/14/bits/stl_iterator.h	/^      iter_value_t<_It> _M_keep;$/;"	m	class:std::common_iterator::__postfix_proxy	typeref:typename:iter_value_t<_It>	access:private
std::common_iterator::__postfix_proxy::__postfix_proxy	d:/include/c++/14/bits/stl_iterator.h	/^      __postfix_proxy(iter_reference_t<_It>&& __x)$/;"	f	class:std::common_iterator::__postfix_proxy	access:private	signature:(iter_reference_t<_It> && __x)
std::common_iterator::__postfix_proxy::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const noexcept$/;"	f	class:std::common_iterator::__postfix_proxy	typeref:typename:const iter_value_t<_It> &	access:public	signature:() const
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      common_iterator(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> && convertible_to<const _Sent2 &,_Sent> 	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(_It __i)$/;"	f	class:std::common_iterator	access:public	signature:(_It __i)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(_Sent __s)$/;"	f	class:std::common_iterator	access:public	signature:(_Sent __s)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(common_iterator&& __x)$/;"	f	class:std::common_iterator	access:public	signature:(common_iterator && __x)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(common_iterator&&) = default;$/;"	p	class:std::common_iterator	access:public	signature:(common_iterator &&)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(const common_iterator& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator & __x)
std::common_iterator::common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    common_iterator(const common_iterator&) = default;$/;"	p	class:std::common_iterator	access:public	signature:(const common_iterator &)
std::common_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*() const requires __detail::__dereferenceable<const _It>$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:() const
std::common_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^    operator*()$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:()
std::common_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++()$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:()
std::common_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^    operator++(int)$/;"	f	class:std::common_iterator	typeref:typename:decltype(auto)	access:public	signature:(int)
std::common_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^    operator->() const requires __detail::__common_iter_has_arrow<_It>$/;"	f	class:std::common_iterator	typeref:typename:auto	access:public	signature:() const
std::common_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const common_iterator<_It2, _Sent2>& __x)$/;"	f	class:std::common_iterator	access:public	signature:(const common_iterator<_It2,_Sent2> & __x)
std::common_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(common_iterator&& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(common_iterator && __x)
std::common_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(common_iterator&&) = default;$/;"	p	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(common_iterator &&)
std::common_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(const common_iterator& __x)$/;"	f	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator & __x)
std::common_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^    operator=(const common_iterator&) = default;$/;"	p	class:std::common_iterator	typeref:typename:common_iterator &	access:public	signature:(const common_iterator &)
std::common_iterator::~common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    ~common_iterator() = default;$/;"	p	class:std::common_iterator	access:public	signature:()
std::common_iterator::~common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    ~common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
std::common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<_Up, basic_const_iterator<_Tp>>$/;"	s	namespace:std
std::common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<basic_const_iterator<_Tp>, _Up>$/;"	s	namespace:std
std::common_type	d:/include/c++/14/bits/stl_iterator.h	/^    struct common_type<basic_const_iterator<_Tp>, basic_const_iterator<_Up>>$/;"	s	namespace:std
std::common_type	d:/include/c++/14/bits/stl_pair.h	/^  struct common_type<pair<_T1, _T2>, pair<_U1, _U2>>$/;"	s	namespace:std
std::common_type::type	d:/include/c++/14/bits/stl_iterator.h	/^    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };$/;"	t	struct:std::common_type	typeref:typename:basic_const_iterator<common_type_t<_Tp,_Up>>	access:public
std::common_type::type	d:/include/c++/14/bits/stl_pair.h	/^  { using type = pair<common_type_t<_T1, _U1>, common_type_t<_T2, _U2>>; };$/;"	t	struct:std::common_type	typeref:typename:pair<common_type_t<_T1,_U1>,common_type_t<_T2,_U2>>	access:public
std::const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    using const_iterator$/;"	t	namespace:std	typeref:typename:__conditional_t<__detail::__constant_iterator<_It>,_It,basic_const_iterator<_It>>
std::const_mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::const_mem_fun1_ref_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_ref_t::const_mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_ref_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __r, _Arg __x) const$/;"	f	class:std::const_mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r,_Arg __x) const
std::const_mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<const_Tp*,_Arg,_Ret>
std::const_mem_fun1_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg) const;$/;"	p	class:std::const_mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun1_t::const_mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)$/;"	f	class:std::const_mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg)const)
std::const_mem_fun1_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp* __p, _Arg __x) const$/;"	f	class:std::const_mem_fun1_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p,_Arg __x) const
std::const_mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
std::const_mem_fun_ref_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_ref_t::const_mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_ref_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __r) const$/;"	f	class:std::const_mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(const _Tp & __r) const
std::const_mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<const_Tp*,_Ret>
std::const_mem_fun_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)() const;$/;"	p	class:std::const_mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::const_mem_fun_t::const_mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^      const_mem_fun_t(_Ret (_Tp::*__pf)() const)$/;"	f	class:std::const_mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)()const)
std::const_mem_fun_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp* __p) const$/;"	f	class:std::const_mem_fun_t	typeref:typename:_Ret	access:public	signature:(const _Tp * __p) const
std::const_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    const_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
std::const_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    const_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
std::const_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    const_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
std::const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    using const_sentinel = typename __detail::__const_sentinel<_Sent>::type;$/;"	t	namespace:std	typeref:typename:__detail::__const_sentinel<_Sent>::type
std::construct_at	d:/include/c++/14/bits/stl_construct.h	/^    construct_at(_Tp* __location, _Args&&... __args)$/;"	f	namespace:std	typeref:typename:auto	signature:(_Tp * __location,_Args &&...__args)
std::consume	d:/include/c++/14/bits/atomic_base.h	/^      consume,$/;"	e	enum:std::memory_order	access:public
std::contiguous_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct contiguous_iterator_tag : public random_access_iterator_tag { };$/;"	s	namespace:std	inherits:random_access_iterator_tag
std::copy	d:/include/c++/14/bits/stl_algobase.h	/^    copy(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::copy	d:/include/c++/14/bits/streambuf_iterator.h	/^    copy(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,ostreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,ostreambuf_iterator<_CharT> __result)
std::copy_backward	d:/include/c++/14/bits/stl_algobase.h	/^    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class counted_iterator$/;"	c	namespace:std	inherits:__detail::__counted_iter_value_type<_It>,__detail::__counted_iter_concept<_It>,__detail::__counted_iter_cat<_It>
std::counted_iterator::_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _It _M_current = _It();$/;"	m	class:std::counted_iterator	typeref:typename:_It	access:private
std::counted_iterator::_M_length	d:/include/c++/14/bits/stl_iterator.h	/^      iter_difference_t<_It> _M_length = 0;$/;"	m	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:private
std::counted_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::counted_iterator	typeref:typename:_It	access:public	signature:()
std::counted_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const & noexcept$/;"	f	class:std::counted_iterator	typeref:typename:const _It &	access:public	signature:() const
std::counted_iterator::count	d:/include/c++/14/bits/stl_iterator.h	/^      count() const noexcept { return _M_length; }$/;"	f	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public	signature:() const
std::counted_iterator::counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	counted_iterator(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires convertible_to<const _It2 &,_It> 	access:public	signature:(const counted_iterator<_It2> & __x)
std::counted_iterator::counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      constexpr counted_iterator() requires default_initializable<_It> = default;$/;"	p	class:std::counted_iterator	access:public	signature:()
std::counted_iterator::counted_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      counted_iterator(_It __i, iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	access:public	signature:(_It __i,iter_difference_t<_It> __n)
std::counted_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	class:std::counted_iterator	typeref:typename:iter_difference_t<_It>	access:public
std::counted_iterator::iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_type = _It;$/;"	t	class:std::counted_iterator	typeref:typename:_It	access:public
std::counted_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:() const
std::counted_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:()
std::counted_iterator::operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
std::counted_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
std::counted_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) requires forward_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
std::counted_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:(int)
std::counted_iterator::operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
std::counted_iterator::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(iter_difference_t<_It> __n) const
std::counted_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--() requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:()
std::counted_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int) requires bidirectional_iterator<_It>$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator	access:public	signature:(int)
std::counted_iterator::operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(iter_difference_t<_It> __n)$/;"	f	class:std::counted_iterator	typeref:typename:counted_iterator &	access:public	signature:(iter_difference_t<_It> __n)
std::counted_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const noexcept$/;"	f	class:std::counted_iterator	typeref:typename:auto	access:public	signature:() const
std::counted_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const counted_iterator<_It2>& __x)$/;"	f	class:std::counted_iterator	typeref:typename:requires assignable_from<_It &,const _It2 &> counted_iterator &	access:public	signature:(const counted_iterator<_It2> & __x)
std::counted_iterator::operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](iter_difference_t<_It> __n) const$/;"	f	class:std::counted_iterator	typeref:typename:decltype(auto)	access:public	signature:(iter_difference_t<_It> __n) const
std::crbegin	d:/include/c++/14/bits/range_access.h	/^    crbegin(const _Container& __cont) -> decltype(std::rbegin(__cont))$/;"	f	namespace:std	typeref:typename:decltype(std::rbegin (__cont))	signature:(const _Container & __cont)
std::cref	d:/include/c++/14/bits/refwrap.h	/^    cref(const _Tp& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<const _Tp>	signature:(const _Tp & __t)
std::cref	d:/include/c++/14/bits/refwrap.h	/^    cref(reference_wrapper<_Tp> __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<const _Tp>	signature:(reference_wrapper<_Tp> __t)
std::cref	d:/include/c++/14/bits/refwrap.h	/^    void cref(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Tp &&)
std::crend	d:/include/c++/14/bits/range_access.h	/^    crend(const _Container& __cont) -> decltype(std::rend(__cont))$/;"	f	namespace:std	typeref:typename:decltype(std::rend (__cont))	signature:(const _Container & __cont)
std::ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype : public __ctype_abstract_base<_CharT>$/;"	c	namespace:std	inherits:__ctype_abstract_base<_CharT>
std::ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype<char> : public locale::facet, public ctype_base$/;"	c	namespace:std	inherits:locale::facet,ctype_base
std::ctype	d:/include/c++/14/bits/locale_facets.h	/^    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>$/;"	c	namespace:std	inherits:__ctype_abstract_base<wchar_t>
std::ctype::_M_bit	d:/include/c++/14/bits/locale_facets.h	/^      mask                      _M_bit[16];$/;"	m	class:std::ctype	typeref:typename:mask[16]	access:protected
std::ctype::_M_c_locale_ctype	d:/include/c++/14/bits/locale_facets.h	/^      __c_locale		_M_c_locale_ctype;$/;"	m	class:std::ctype	typeref:typename:__c_locale	access:protected
std::ctype::_M_convert_to_wmask	d:/include/c++/14/bits/locale_facets.h	/^      _M_convert_to_wmask(const mask __m) const throw();$/;"	p	class:std::ctype	typeref:typename:__wmask_type	access:protected	signature:(const mask __m) const
std::ctype::_M_del	d:/include/c++/14/bits/locale_facets.h	/^      bool			_M_del;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_initialize_ctype	d:/include/c++/14/bits/locale_facets.h	/^      _M_initialize_ctype() throw();$/;"	p	class:std::ctype	typeref:typename:void	access:protected	signature:()
std::ctype::_M_narrow	d:/include/c++/14/bits/locale_facets.h	/^      char                      _M_narrow[128];$/;"	m	class:std::ctype	typeref:typename:char[128]	access:protected
std::ctype::_M_narrow	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_narrow[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_narrow_init	d:/include/c++/14/bits/locale_facets.h	/^      void _M_narrow_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_narrow_ok	d:/include/c++/14/bits/locale_facets.h	/^      bool                      _M_narrow_ok;$/;"	m	class:std::ctype	typeref:typename:bool	access:protected
std::ctype::_M_narrow_ok	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_narrow_ok;	\/\/ 0 uninitialized, 1 init,$/;"	m	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_table	d:/include/c++/14/bits/locale_facets.h	/^      const mask*		_M_table;$/;"	m	class:std::ctype	typeref:typename:const mask *	access:protected
std::ctype::_M_tolower	d:/include/c++/14/bits/locale_facets.h	/^      __to_type			_M_tolower;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_toupper	d:/include/c++/14/bits/locale_facets.h	/^      __to_type			_M_toupper;$/;"	m	class:std::ctype	typeref:typename:__to_type	access:protected
std::ctype::_M_widen	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:char[]	access:protected
std::ctype::_M_widen	d:/include/c++/14/bits/locale_facets.h	/^      wint_t                    _M_widen[1 + static_cast<unsigned char>(-1)];$/;"	m	class:std::ctype	typeref:typename:wint_t[]	access:protected
std::ctype::_M_widen_init	d:/include/c++/14/bits/locale_facets.h	/^      void _M_widen_init() const;$/;"	p	class:std::ctype	typeref:typename:void	access:private	signature:() const
std::ctype::_M_widen_ok	d:/include/c++/14/bits/locale_facets.h	/^      mutable char		_M_widen_ok;$/;"	m	class:std::ctype	typeref:typename:char	access:protected
std::ctype::_M_wmask	d:/include/c++/14/bits/locale_facets.h	/^      __wmask_type              _M_wmask[16];$/;"	m	class:std::ctype	typeref:typename:__wmask_type[16]	access:protected
std::ctype::__wmask_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef wctype_t		__wmask_type;$/;"	t	class:std::ctype	typeref:typename:wctype_t	access:public
std::ctype::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::ctype	typeref:typename:_CharT	access:public
std::ctype::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef char		char_type;$/;"	t	class:std::ctype	typeref:typename:char	access:public
std::ctype::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef wchar_t		char_type;$/;"	t	class:std::ctype	typeref:typename:wchar_t	access:public
std::ctype::classic_table	d:/include/c++/14/bits/locale_facets.h	/^      classic_table() throw();$/;"	p	class:std::ctype	typeref:typename:const mask *	access:public	signature:()
std::ctype::ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(__c_locale __cloc, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::ctype::ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(const mask * __table=0,bool __del=false,size_t __refs=0)
std::ctype::ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }$/;"	f	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::ctype	d:/include/c++/14/bits/locale_facets.h	/^      ctype(size_t __refs = 0);$/;"	p	class:std::ctype	access:public	signature:(size_t __refs=0)
std::ctype::do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,mask * __vec) const
std::ctype::do_is	d:/include/c++/14/bits/locale_facets.h	/^      do_is(mask __m, char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:protected	signature:(mask __m,char_type __c) const
std::ctype::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault __attribute__((__unused__))) const$/;"	f	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::ctype::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type __c, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type __c,char __dfault) const
std::ctype::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(char_type, char __dfault) const;$/;"	p	class:std::ctype	typeref:typename:char	access:protected	signature:(char_type,char __dfault) const
std::ctype::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::do_narrow	d:/include/c++/14/bits/locale_facets.h	/^      do_narrow(const char_type* __lo, const char_type* __hi,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::do_scan_is	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_scan_not	d:/include/c++/14/bits/locale_facets.h	/^      do_scan_not(mask __m, const char_type* __lo,$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(mask __m,const char_type * __lo,const char_type * __hi) const
std::ctype::do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_tolower	d:/include/c++/14/bits/locale_facets.h	/^      do_tolower(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char_type __c) const
std::ctype::do_toupper	d:/include/c++/14/bits/locale_facets.h	/^      do_toupper(char_type* __lo, const char_type* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char_type *	access:protected	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(char __c) const;$/;"	p	class:std::ctype	typeref:typename:char_type	access:protected	signature:(char __c) const
std::ctype::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __dest) const
std::ctype::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::do_widen	d:/include/c++/14/bits/locale_facets.h	/^      do_widen(const char* __lo, const char* __hi, char_type* __to) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:protected	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id        id;$/;"	m	class:std::ctype	typeref:typename:locale::id	access:public
std::ctype::is	d:/include/c++/14/bits/locale_facets.h	/^      is(const char* __lo, const char* __hi, mask* __vec) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,mask * __vec) const
std::ctype::is	d:/include/c++/14/bits/locale_facets.h	/^      is(mask __m, char __c) const;$/;"	p	class:std::ctype	typeref:typename:bool	access:public	signature:(mask __m,char __c) const
std::ctype::mask	d:/include/c++/14/bits/locale_facets.h	/^      typedef typename __ctype_abstract_base<_CharT>::mask mask;$/;"	t	class:std::ctype	typeref:typename:__ctype_abstract_base<_CharT>::mask	access:public
std::ctype::narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(char_type __c, char __dfault) const$/;"	f	class:std::ctype	typeref:typename:char	access:public	signature:(char_type __c,char __dfault) const
std::ctype::narrow	d:/include/c++/14/bits/locale_facets.h	/^      narrow(const char_type* __lo, const char_type* __hi,$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(const char_type * __lo,const char_type * __hi,char __dfault,char * __to) const
std::ctype::scan_is	d:/include/c++/14/bits/locale_facets.h	/^      scan_is(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::scan_not	d:/include/c++/14/bits/locale_facets.h	/^      scan_not(mask __m, const char* __lo, const char* __hi) const;$/;"	p	class:std::ctype	typeref:typename:const char *	access:public	signature:(mask __m,const char * __lo,const char * __hi) const
std::ctype::table	d:/include/c++/14/bits/locale_facets.h	/^      table() const throw()$/;"	f	class:std::ctype	typeref:typename:const mask *	access:public	signature:() const
std::ctype::table_size	d:/include/c++/14/bits/locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	typeref:typename:const size_t	access:public
std::ctype::tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
std::ctype::toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
std::ctype::widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
std::ctype::widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
std::ctype::~ctype	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
std::ctype<_CharT>::id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id ctype<_CharT>::id;$/;"	m	class:std::ctype<_CharT>	typeref:typename:locale::id
std::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname : public ctype<_CharT>$/;"	c	namespace:std	inherits:ctype<_CharT>
std::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname<char> : public ctype<char>$/;"	c	namespace:std	inherits:ctype<char>
std::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^    class ctype_byname<wchar_t> : public ctype<wchar_t>$/;"	c	namespace:std	inherits:ctype<wchar_t>
std::ctype_byname::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const char* __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::ctype_byname::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::ctype_byname::ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ctype_byname(const string& __s, size_t __refs = 0);$/;"	p	class:std::ctype_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::ctype_byname::mask	d:/include/c++/14/bits/locale_facets.h	/^      typedef typename ctype<_CharT>::mask  mask;$/;"	t	class:std::ctype_byname	typeref:typename:ctype<_CharT>::mask	access:public
std::ctype_byname::~ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype_byname() { }$/;"	f	class:std::ctype_byname	access:protected	signature:()
std::ctype_byname::~ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	access:protected	signature:()
std::current_exception	d:/include/c++/14/bits/exception_ptr.h	/^  exception_ptr current_exception() _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:()
std::data	d:/include/c++/14/bits/range_access.h	/^    data(_Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(_Container & __cont)
std::data	d:/include/c++/14/bits/range_access.h	/^    data(_Tp (&__array)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp (& __array)[_Nm])
std::data	d:/include/c++/14/bits/range_access.h	/^    data(const _Container& __cont) noexcept(noexcept(__cont.data()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::data	d:/include/c++/14/bits/range_access.h	/^    data(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp *	signature:(initializer_list<_Tp> __il)
std::dec	d:/include/c++/14/bits/ios_base.h	/^  dec(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::default_delete	d:/include/c++/14/bits/unique_ptr.h	/^    struct default_delete$/;"	s	namespace:std
std::default_delete	d:/include/c++/14/bits/unique_ptr.h	/^    struct default_delete<_Tp[]>$/;"	s	namespace:std
std::default_delete::default_delete	d:/include/c++/14/bits/unique_ptr.h	/^        default_delete(const default_delete<_Up>&) noexcept { }$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(const default_delete<_Up> &)
std::default_delete::default_delete	d:/include/c++/14/bits/unique_ptr.h	/^        default_delete(const default_delete<_Up[]>&) noexcept { }$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(const default_delete<_Up[]> &)
std::default_delete::default_delete	d:/include/c++/14/bits/unique_ptr.h	/^      constexpr default_delete() noexcept = default;$/;"	p	struct:std::default_delete	access:public	signature:()
std::default_delete::operator ()	d:/include/c++/14/bits/unique_ptr.h	/^	operator()(_Up* __ptr) const$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<is_convertible<_Up (*)[],_Tp (*)[]>::value>::type	access:public	signature:(_Up * __ptr) const
std::default_delete::operator ()	d:/include/c++/14/bits/unique_ptr.h	/^      operator()(_Tp* __ptr) const$/;"	f	struct:std::default_delete	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(_Tp * __ptr) const
std::defaultfloat	d:/include/c++/14/bits/ios_base.h	/^  defaultfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::destroy	d:/include/c++/14/bits/stl_construct.h	/^    destroy(_ForwardIterator __first, _ForwardIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::destroy	d:/include/c++/14/pstl/glue_memory_defs.h	/^destroy(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
std::destroy_at	d:/include/c++/14/bits/stl_construct.h	/^    destroy_at(_Tp* __location)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX20_CONSTEXPR void	signature:(_Tp * __location)
std::destroy_n	d:/include/c++/14/bits/stl_construct.h	/^    destroy_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::destroy_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^destroy_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
std::distance	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    distance(_InputIterator __first, _InputIterator __last)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR typename iterator_traits<_InputIterator>::difference_type	signature:(_InputIterator __first,_InputIterator __last)
std::divides	d:/include/c++/14/bits/stl_function.h	/^    struct divides : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::divides	d:/include/c++/14/bits/stl_function.h	/^    struct divides<void>$/;"	s	namespace:std
std::divides::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::divides	typeref:typename:__is_transparent	access:public
std::divides::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::divides::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::divides	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    dynamic_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
std::dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    dynamic_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
std::dynamic_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    dynamic_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
std::empty	d:/include/c++/14/bits/range_access.h	/^    empty(const _Container& __cont) noexcept(noexcept(__cont.empty()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::empty	d:/include/c++/14/bits/range_access.h	/^    empty(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const _Tp (&)[_Nm])
std::empty	d:/include/c++/14/bits/range_access.h	/^    empty(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(initializer_list<_Tp> __il)
std::enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^    class enable_shared_from_this$/;"	c	namespace:std
std::enable_shared_from_this::_M_weak_assign	d:/include/c++/14/bits/shared_ptr.h	/^	_M_weak_assign(_Tp1* __p, const __shared_count<>& __n) const noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:void	access:private	signature:(_Tp1 * __p,const __shared_count<> & __n) const
std::enable_shared_from_this::_M_weak_this	d:/include/c++/14/bits/shared_ptr.h	/^      mutable weak_ptr<_Tp>  _M_weak_this;$/;"	m	class:std::enable_shared_from_this	typeref:typename:weak_ptr<_Tp>	access:private
std::enable_shared_from_this::enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr enable_shared_from_this() noexcept { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:()
std::enable_shared_from_this::enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      enable_shared_from_this(const enable_shared_from_this&) noexcept { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:(const enable_shared_from_this &)
std::enable_shared_from_this::operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(const enable_shared_from_this&) noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:enable_shared_from_this &	access:protected	signature:(const enable_shared_from_this &)
std::enable_shared_from_this::shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      shared_from_this() const$/;"	f	class:std::enable_shared_from_this	typeref:typename:shared_ptr<const _Tp>	access:public	signature:() const
std::enable_shared_from_this::shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      shared_from_this()$/;"	f	class:std::enable_shared_from_this	typeref:typename:shared_ptr<_Tp>	access:public	signature:()
std::enable_shared_from_this::weak_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      weak_from_this() const noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:weak_ptr<const _Tp>	access:public	signature:() const
std::enable_shared_from_this::weak_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      weak_from_this() noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:weak_ptr<_Tp>	access:public	signature:()
std::enable_shared_from_this::~enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      ~enable_shared_from_this() { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:()
std::end	d:/include/c++/14/bits/range_access.h	/^    end(_Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype(__cont.end ())	signature:(_Container & __cont)
std::end	d:/include/c++/14/bits/range_access.h	/^    end(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp *	signature:(_Tp (& __arr)[_Nm])
std::end	d:/include/c++/14/bits/range_access.h	/^    end(const _Container& __cont) -> decltype(__cont.end())$/;"	f	namespace:std	typeref:typename:decltype(__cont.end ())	signature:(const _Container & __cont)
std::end	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> _Tp* end(valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp *	signature:(valarray<_Tp> &)
std::end	d:/include/c++/14/bits/range_access.h	/^  template<typename _Tp> const _Tp* end(const valarray<_Tp>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp *	signature:(const valarray<_Tp> &)
std::equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2)
std::equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_BinaryPredicate __binary_pred)
std::equal	d:/include/c++/14/bits/stl_algobase.h	/^    equal(_IIter1 __first1, _IIter1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_IIter1 __first1,_IIter1 __last1,_IIter2 __first2,_IIter2 __last2,_BinaryPredicate __binary_pred)
std::equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct equal_to<void>$/;"	s	namespace:std
std::equal_to::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::equal_to	typeref:typename:__is_transparent	access:public
std::equal_to::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::equal_to::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::exception	d:/include/c++/14/bits/exception.h	/^  class exception$/;"	c	namespace:std
std::exception::exception	d:/include/c++/14/bits/exception.h	/^    exception() _GLIBCXX_NOTHROW { }$/;"	f	class:std::exception	access:public	signature:()
std::exception::exception	d:/include/c++/14/bits/exception.h	/^    exception(const exception&) = default;$/;"	p	class:std::exception	access:public	signature:(const exception &)
std::exception::exception	d:/include/c++/14/bits/exception.h	/^    exception(exception&&) = default;$/;"	p	class:std::exception	access:public	signature:(exception &&)
std::exception::operator =	d:/include/c++/14/bits/exception.h	/^    exception& operator=(const exception&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(const exception &)
std::exception::operator =	d:/include/c++/14/bits/exception.h	/^    exception& operator=(exception&&) = default;$/;"	p	class:std::exception	typeref:typename:exception &	access:public	signature:(exception &&)
std::exception::what	d:/include/c++/14/bits/exception.h	/^    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	typeref:typename:const char *	access:public	signature:() const
std::exception::~exception	d:/include/c++/14/bits/exception.h	/^    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	access:public	signature:()
std::fill	d:/include/c++/14/bits/stl_algobase.h	/^    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::fill_n	d:/include/c++/14/bits/stl_algobase.h	/^    fill_n(_OI __first, _Size __n, const _Tp& __value)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_OI __first,_Size __n,const _Tp & __value)
std::find	d:/include/c++/14/bits/streambuf_iterator.h	/^    find(istreambuf_iterator<_CharT> __first,$/;"	f	namespace:std	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT>::__value,istreambuf_iterator<_CharT>>::__type	signature:(istreambuf_iterator<_CharT> __first,istreambuf_iterator<_CharT> __last,const _CharT & __val)
std::fixed	d:/include/c++/14/bits/ios_base.h	/^  fixed(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::forward	d:/include/c++/14/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _Tp &&	signature:(typename std::remove_reference<_Tp>::type & __t)
std::forward	d:/include/c++/14/bits/move.h	/^    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _Tp &&	signature:(typename std::remove_reference<_Tp>::type && __t)
std::forward_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct forward_iterator_tag : public input_iterator_tag { };$/;"	s	namespace:std	inherits:input_iterator_tag
std::forward_like	d:/include/c++/14/bits/move.h	/^  forward_like(_Up&& __x) noexcept$/;"	f	namespace:std	typeref:typename:__like_t<_Tp,_Up>	signature:(_Up && __x)
std::fpos	d:/include/c++/14/bits/postypes.h	/^    class fpos$/;"	c	namespace:std
std::fpos::_M_off	d:/include/c++/14/bits/postypes.h	/^      streamoff	                _M_off;$/;"	m	class:std::fpos	typeref:typename:streamoff	access:private
std::fpos::_M_state	d:/include/c++/14/bits/postypes.h	/^      _StateT			_M_state;$/;"	m	class:std::fpos	typeref:typename:_StateT	access:private
std::fpos::fpos	d:/include/c++/14/bits/postypes.h	/^      fpos()$/;"	f	class:std::fpos	access:public	signature:()
std::fpos::fpos	d:/include/c++/14/bits/postypes.h	/^      fpos(const fpos&) = default;$/;"	p	class:std::fpos	access:public	signature:(const fpos &)
std::fpos::fpos	d:/include/c++/14/bits/postypes.h	/^      fpos(streamoff __off)$/;"	f	class:std::fpos	access:public	signature:(streamoff __off)
std::fpos::operator +	d:/include/c++/14/bits/postypes.h	/^      operator+(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator +=	d:/include/c++/14/bits/postypes.h	/^      operator+=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator -	d:/include/c++/14/bits/postypes.h	/^      operator-(const fpos& __other) const$/;"	f	class:std::fpos	typeref:typename:streamoff	access:public	signature:(const fpos & __other) const
std::fpos::operator -	d:/include/c++/14/bits/postypes.h	/^      operator-(streamoff __off) const$/;"	f	class:std::fpos	typeref:typename:fpos	access:public	signature:(streamoff __off) const
std::fpos::operator -=	d:/include/c++/14/bits/postypes.h	/^      operator-=(streamoff __off)$/;"	f	class:std::fpos	typeref:typename:fpos &	access:public	signature:(streamoff __off)
std::fpos::operator =	d:/include/c++/14/bits/postypes.h	/^      fpos& operator=(const fpos&) = default;$/;"	p	class:std::fpos	typeref:typename:fpos &	access:public	signature:(const fpos &)
std::fpos::operator streamoff	d:/include/c++/14/bits/postypes.h	/^      operator streamoff() const { return _M_off; }$/;"	f	class:std::fpos	access:public	signature:() const
std::fpos::state	d:/include/c++/14/bits/postypes.h	/^      state() const$/;"	f	class:std::fpos	typeref:typename:_StateT	access:public	signature:() const
std::fpos::state	d:/include/c++/14/bits/postypes.h	/^      state(_StateT __st)$/;"	f	class:std::fpos	typeref:typename:void	access:public	signature:(_StateT __st)
std::fpos::~fpos	d:/include/c++/14/bits/postypes.h	/^      ~fpos() = default;$/;"	p	class:std::fpos	access:public	signature:()
std::front_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class front_insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::front_insert_iterator::container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::front_insert_iterator	typeref:typename:_Container *	access:protected
std::front_insert_iterator::container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::front_insert_iterator	typeref:typename:_Container	access:public
std::front_insert_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::front_insert_iterator	typeref:typename:ptrdiff_t	access:public
std::front_insert_iterator::front_insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      front_insert_iterator(_Container& __x)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x)
std::front_insert_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:()
std::front_insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator	access:public	signature:(int)
std::front_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::front_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:front_insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::front_insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::front_insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR front_insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::front_inserter	d:/include/c++/14/bits/stl_iterator.h	/^    front_inserter(_Container& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR front_insert_iterator<_Container>	signature:(_Container & __x)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(array<_Tp, _Nm>&&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp &&	signature:(array<_Tp,_Nm> &&)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(array<_Tp, _Nm>&) noexcept;$/;"	p	namespace:std	typeref:typename:_Tp &	signature:(array<_Tp,_Nm> &)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const array<_Tp, _Nm>&&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp &&	signature:(const array<_Tp,_Nm> &&)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const array<_Tp, _Nm>&) noexcept;$/;"	p	namespace:std	typeref:typename:const _Tp &	signature:(const array<_Tp,_Nm> &)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp, _Up>& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &	signature:(const pair<_Tp,_Up> & __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp, _Up>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &&	signature:(const pair<_Tp,_Up> && __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>& __in) noexcept$/;"	f	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(const pair<_Tp1,_Tp2> & __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>& __in) noexcept;$/;"	p	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(const pair<_Tp1,_Tp2> & __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>&& __in) noexcept$/;"	f	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(const pair<_Tp1,_Tp2> && __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Tp1, _Tp2>&& __in) noexcept;$/;"	p	namespace:std	typeref:typename:const typename tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(const pair<_Tp1,_Tp2> && __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Up, _Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &	signature:(const pair<_Up,_Tp> & __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const pair<_Up, _Tp>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:const _Tp &&	signature:(const pair<_Up,_Tp> && __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const tuple<_Elements...>& __t) noexcept;$/;"	p	namespace:std	typeref:typename:const __tuple_element_t<__i,tuple<_Elements...>> &	signature:(const tuple<_Elements...> & __t)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(const tuple<_Elements...>&& __t) noexcept;$/;"	p	namespace:std	typeref:typename:const __tuple_element_t<__i,tuple<_Elements...>> &&	signature:(const tuple<_Elements...> && __t)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp, _Up>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &	signature:(pair<_Tp,_Up> & __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp, _Up>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(pair<_Tp,_Up> && __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>& __in) noexcept$/;"	f	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(pair<_Tp1,_Tp2> & __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>& __in) noexcept;$/;"	p	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &	signature:(pair<_Tp1,_Tp2> & __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>&& __in) noexcept$/;"	f	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(pair<_Tp1,_Tp2> && __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Tp1, _Tp2>&& __in) noexcept;$/;"	p	namespace:std	typeref:typename:tuple_element<_Int,pair<_Tp1,_Tp2>>::type &&	signature:(pair<_Tp1,_Tp2> && __in)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Up, _Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &	signature:(pair<_Up,_Tp> & __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(pair<_Up, _Tp>&& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Tp &&	signature:(pair<_Up,_Tp> && __p)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(tuple<_Elements...>& __t) noexcept;$/;"	p	namespace:std	typeref:typename:__tuple_element_t<__i,tuple<_Elements...>> &	signature:(tuple<_Elements...> & __t)
std::get	d:/include/c++/14/bits/stl_pair.h	/^    get(tuple<_Elements...>&& __t) noexcept;$/;"	p	namespace:std	typeref:typename:__tuple_element_t<__i,tuple<_Elements...>> &&	signature:(tuple<_Elements...> && __t)
std::get_deleter	d:/include/c++/14/bits/shared_ptr.h	/^    get_deleter(const __shared_ptr<_Tp, _Lp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Del *	signature:(const __shared_ptr<_Tp,_Lp> & __p)
std::get_deleter	d:/include/c++/14/bits/shared_ptr.h	/^    get_deleter(const shared_ptr<_Tp>& __p) noexcept$/;"	f	namespace:std	typeref:typename:_Del *	signature:(const shared_ptr<_Tp> & __p)
std::get_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    get_temporary_buffer(ptrdiff_t __len) _GLIBCXX_NOEXCEPT$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_DEPRECATED pair<_Tp *,ptrdiff_t>	signature:(ptrdiff_t __len)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<_CharT, _Traits>&& __is,$/;"	f	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> && __is,basic_string<_CharT,_Traits,_Alloc> & __str,_CharT __delim)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<char>& __in, basic_string<char>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __in,basic_string<char> & __str,char __delim)
std::getline	d:/include/c++/14/bits/basic_string.h	/^    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,$/;"	p	namespace:std	typeref:typename:basic_istream<wchar_t> &	signature:(basic_istream<wchar_t> & __in,basic_string<wchar_t> & __str,wchar_t __delim)
std::greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::greater	d:/include/c++/14/bits/stl_function.h	/^    struct greater<void>$/;"	s	namespace:std
std::greater::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::greater::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::greater::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::greater::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
std::greater::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater	inherits:true_type	access:private
std::greater::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater	inherits:false_type	access:private
std::greater::__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::greater::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater	typeref:typename:__is_transparent	access:public
std::greater::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::greater::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::greater::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::greater::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::greater_equal	d:/include/c++/14/bits/stl_function.h	/^    struct greater_equal<void>$/;"	s	namespace:std
std::greater_equal::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::greater_equal	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::greater_equal::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::greater_equal::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::greater_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::greater_equal::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
std::greater_equal::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::greater_equal	inherits:true_type	access:private
std::greater_equal::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::greater_equal	inherits:false_type	access:private
std::greater_equal::__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::greater_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::greater_equal::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::greater_equal	typeref:typename:__is_transparent	access:public
std::greater_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::greater_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::greater_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::greater_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::greater_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::greater_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::greater_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::has_facet	d:/include/c++/14/bits/localefwd.h	/^    has_facet(const locale&) throw();$/;"	p	namespace:std	typeref:typename:bool	signature:(const locale &)
std::hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char, char_traits<char>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char,_Alloc>
std::hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char16_t, char_traits<char16_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char16_t,_Alloc>
std::hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char32_t, char_traits<char32_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char32_t,_Alloc>
std::hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<char8_t, char_traits<char8_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<char8_t,_Alloc>
std::hash	d:/include/c++/14/bits/basic_string.h	/^    struct hash<basic_string<wchar_t, char_traits<wchar_t>, _Alloc>>$/;"	s	namespace:std	inherits:__str_hash_base<wchar_t,_Alloc>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash : __hash_enum<_Tp>$/;"	s	namespace:std	inherits:__hash_enum<_Tp>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<_Tp*> : public __hash_base<size_t, _Tp*>$/;"	s	namespace:std	inherits:__hash_base<size_t,_Tp*>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<double> : public __hash_base<size_t, double>$/;"	s	namespace:std	inherits:__hash_base<size_t,double>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<float> : public __hash_base<size_t, float>$/;"	s	namespace:std	inherits:__hash_base<size_t,float>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<long double>$/;"	s	namespace:std	inherits:__hash_base<size_t,longdouble>
std::hash	d:/include/c++/14/bits/functional_hash.h	/^    struct hash<nullptr_t> : public __hash_base<size_t, nullptr_t>$/;"	s	namespace:std	inherits:__hash_base<size_t,nullptr_t>
std::hash	d:/include/c++/14/bits/shared_ptr.h	/^    struct hash<shared_ptr<_Tp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,shared_ptr<_Tp>>
std::hash	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct hash<__shared_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,__shared_ptr<_Tp,_Lp>>
std::hash	d:/include/c++/14/bits/unique_ptr.h	/^    struct hash<unique_ptr<_Tp, _Dp>>$/;"	s	namespace:std	inherits:__hash_base<size_t,unique_ptr<_Tp,_Dp>>,__uniq_ptr_hash<unique_ptr<_Tp,_Dp>>
std::hash::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(_Tp* __p) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(_Tp * __p) const
std::hash::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(double __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(double __val) const
std::hash::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(float __val) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(float __val) const
std::hash::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(long double __val) const noexcept;$/;"	p	struct:std::hash	typeref:typename:_GLIBCXX_PURE size_t	access:public	signature:(long double __val) const
std::hash::operator ()	d:/include/c++/14/bits/functional_hash.h	/^      operator()(nullptr_t) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(nullptr_t) const
std::hash::operator ()	d:/include/c++/14/bits/shared_ptr.h	/^      operator()(const shared_ptr<_Tp>& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const shared_ptr<_Tp> & __s) const
std::hash::operator ()	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator()(const __shared_ptr<_Tp, _Lp>& __s) const noexcept$/;"	f	struct:std::hash	typeref:typename:size_t	access:public	signature:(const __shared_ptr<_Tp,_Lp> & __s) const
std::hex	d:/include/c++/14/bits/ios_base.h	/^  hex(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::hexfloat	d:/include/c++/14/bits/ios_base.h	/^  hexfloat(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::in_place	d:/include/c++/14/bits/utility.h	/^  inline constexpr in_place_t in_place{};$/;"	v	namespace:std	typeref:typename:in_place_t
std::in_place_index	d:/include/c++/14/bits/utility.h	/^    inline constexpr in_place_index_t<_Idx> in_place_index{};$/;"	v	namespace:std	typeref:typename:in_place_index_t<_Idx>
std::in_place_index_t	d:/include/c++/14/bits/utility.h	/^  template<size_t _Idx> struct in_place_index_t$/;"	s	namespace:std
std::in_place_index_t::in_place_index_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_index_t() = default;$/;"	p	struct:std::in_place_index_t	access:public	signature:()
std::in_place_t	d:/include/c++/14/bits/utility.h	/^  struct in_place_t {$/;"	s	namespace:std
std::in_place_t::in_place_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_t() = default;$/;"	p	struct:std::in_place_t	access:public	signature:()
std::in_place_type	d:/include/c++/14/bits/utility.h	/^    inline constexpr in_place_type_t<_Tp> in_place_type{};$/;"	v	namespace:std	typeref:typename:in_place_type_t<_Tp>
std::in_place_type_t	d:/include/c++/14/bits/utility.h	/^  template<typename _Tp> struct in_place_type_t$/;"	s	namespace:std
std::in_place_type_t::in_place_type_t	d:/include/c++/14/bits/utility.h	/^    explicit in_place_type_t() = default;$/;"	p	struct:std::in_place_type_t	access:public	signature:()
std::incrementable_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct incrementable_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
std::incrementable_traits::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::incrementable_traits	typeref:typename:iter_difference_t<_It>	access:public
std::index_sequence	d:/include/c++/14/bits/utility.h	/^    using index_sequence = integer_sequence<size_t, _Idx...>;$/;"	t	namespace:std	typeref:typename:integer_sequence<size_t,_Idx...>
std::index_sequence_for	d:/include/c++/14/bits/utility.h	/^    using index_sequence_for = make_index_sequence<sizeof...(_Types)>;$/;"	t	namespace:std
std::input_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct input_iterator_tag { };$/;"	s	namespace:std
std::insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class insert_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::insert_iterator::_Iter	d:/include/c++/14/bits/stl_iterator.h	/^      using _Iter = std::__detail::__range_iter_t<_Container>;$/;"	t	class:std::insert_iterator	typeref:typename:std::__detail::__range_iter_t<_Container>	access:private
std::insert_iterator::container	d:/include/c++/14/bits/stl_iterator.h	/^      _Container* container;$/;"	m	class:std::insert_iterator	typeref:typename:_Container *	access:protected
std::insert_iterator::container_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Container          container_type;$/;"	t	class:std::insert_iterator	typeref:typename:_Container	access:public
std::insert_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::insert_iterator	typeref:typename:ptrdiff_t	access:public
std::insert_iterator::insert_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      insert_iterator(_Container& __x, _Iter __i)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Container & __x,_Iter __i)
std::insert_iterator::iter	d:/include/c++/14/bits/stl_iterator.h	/^      _Iter iter;$/;"	m	class:std::insert_iterator	typeref:typename:_Iter	access:protected
std::insert_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:()
std::insert_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(int)
std::insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(const typename _Container::value_type& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(const typename _Container::value_type & __value)
std::insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::const_reference __value)$/;"	f	class:std::insert_iterator	typeref:typename:insert_iterator &	access:public	signature:(typename _Container::const_reference __value)
std::insert_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      operator=(typename _Container::value_type&& __value)$/;"	f	class:std::insert_iterator	typeref:typename:_GLIBCXX20_CONSTEXPR insert_iterator &	access:public	signature:(typename _Container::value_type && __value)
std::inserter	d:/include/c++/14/bits/stl_iterator.h	/^    inserter(_Container& __x, std::__detail::__range_iter_t<_Container> __i)$/;"	f	namespace:std	typeref:typename:insert_iterator<_Container>	signature:(_Container & __x,std::__detail::__range_iter_t<_Container> __i)
std::inserter	d:/include/c++/14/bits/stl_iterator.h	/^    inserter(_Container& __x, typename _Container::iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD insert_iterator<_Container>	signature:(_Container & __x,typename _Container::iterator __i)
std::integer_sequence	d:/include/c++/14/bits/utility.h	/^    struct integer_sequence$/;"	s	namespace:std
std::integer_sequence::size	d:/include/c++/14/bits/utility.h	/^      static constexpr size_t size() noexcept { return sizeof...(_Idx); }$/;"	f	struct:std::integer_sequence	typeref:typename:size_t	access:public	signature:()
std::integer_sequence::value_type	d:/include/c++/14/bits/utility.h	/^      typedef _Tp value_type;$/;"	t	struct:std::integer_sequence	typeref:typename:_Tp	access:public
std::internal	d:/include/c++/14/bits/ios_base.h	/^  internal(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::io_errc	d:/include/c++/14/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	g	namespace:std
std::ios_base	d:/include/c++/14/bits/ios_base.h	/^  class ios_base$/;"	c	namespace:std
std::ios_base::Init	d:/include/c++/14/bits/ios_base.h	/^    class Init$/;"	c	class:std::ios_base	access:public
std::ios_base::Init::Init	d:/include/c++/14/bits/ios_base.h	/^      Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
std::ios_base::Init::Init	d:/include/c++/14/bits/ios_base.h	/^      Init(const Init&) = default;$/;"	p	class:std::ios_base::Init	access:public	signature:(const Init &)
std::ios_base::Init::_S_refcount	d:/include/c++/14/bits/ios_base.h	/^      static _Atomic_word	_S_refcount;$/;"	m	class:std::ios_base::Init	typeref:typename:_Atomic_word	access:private
std::ios_base::Init::_S_synced_with_stdio	d:/include/c++/14/bits/ios_base.h	/^      static bool		_S_synced_with_stdio;$/;"	m	class:std::ios_base::Init	typeref:typename:bool	access:private
std::ios_base::Init::operator =	d:/include/c++/14/bits/ios_base.h	/^      Init& operator=(const Init&) = default;$/;"	p	class:std::ios_base::Init	typeref:typename:Init &	access:public	signature:(const Init &)
std::ios_base::Init::~Init	d:/include/c++/14/bits/ios_base.h	/^      ~Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
std::ios_base::_Callback_list	d:/include/c++/14/bits/ios_base.h	/^    struct _Callback_list$/;"	s	class:std::ios_base	access:protected
std::ios_base::_Callback_list::_Callback_list	d:/include/c++/14/bits/ios_base.h	/^      _Callback_list(ios_base::event_callback __fn, int __index,$/;"	f	struct:std::ios_base::_Callback_list	access:public	signature:(ios_base::event_callback __fn,int __index,_Callback_list * __cb)
std::ios_base::_Callback_list::_M_add_reference	d:/include/c++/14/bits/ios_base.h	/^      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }$/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:void	access:public	signature:()
std::ios_base::_Callback_list::_M_fn	d:/include/c++/14/bits/ios_base.h	/^      ios_base::event_callback	_M_fn;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:ios_base::event_callback	access:public
std::ios_base::_Callback_list::_M_index	d:/include/c++/14/bits/ios_base.h	/^      int			_M_index;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public
std::ios_base::_Callback_list::_M_next	d:/include/c++/14/bits/ios_base.h	/^      _Callback_list*		_M_next;$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Callback_list *	access:public
std::ios_base::_Callback_list::_M_refcount	d:/include/c++/14/bits/ios_base.h	/^      _Atomic_word		_M_refcount;  \/\/ 0 means one reference.$/;"	m	struct:std::ios_base::_Callback_list	typeref:typename:_Atomic_word	access:public
std::ios_base::_Callback_list::_M_remove_reference	d:/include/c++/14/bits/ios_base.h	/^      _M_remove_reference() $/;"	f	struct:std::ios_base::_Callback_list	typeref:typename:int	access:public	signature:()
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::iostate");$/;"	t	class:std::ios_base	typeref:typename:int io_state ()("std::iostate")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::openmode");$/;"	t	class:std::ios_base	typeref:typename:int open_mode ()("std::openmode")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::seekdir");$/;"	t	class:std::ios_base	typeref:typename:int seek_dir ()("std::seekdir")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streamoff");$/;"	t	class:std::ios_base	typeref:typename:std::streamoff streamoff ()("std::streamoff")	access:public
std::ios_base::_GLIBCXX_DEPRECATED_SUGGEST	d:/include/c++/14/bits/ios_base.h	/^      _GLIBCXX_DEPRECATED_SUGGEST("std::streampos");$/;"	t	class:std::ios_base	typeref:typename:std::streampos streampos ()("std::streampos")	access:public
std::ios_base::_M_call_callbacks	d:/include/c++/14/bits/ios_base.h	/^    _M_call_callbacks(event __ev) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(event __ev)
std::ios_base::_M_callbacks	d:/include/c++/14/bits/ios_base.h	/^     _Callback_list*	_M_callbacks;$/;"	m	class:std::ios_base	typeref:typename:_Callback_list *	access:protected
std::ios_base::_M_dispose_callbacks	d:/include/c++/14/bits/ios_base.h	/^    _M_dispose_callbacks(void) throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(void)
std::ios_base::_M_exception	d:/include/c++/14/bits/ios_base.h	/^    iostate		_M_exception;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_flags	d:/include/c++/14/bits/ios_base.h	/^    fmtflags		_M_flags;$/;"	m	class:std::ios_base	typeref:typename:fmtflags	access:protected
std::ios_base::_M_getloc	d:/include/c++/14/bits/ios_base.h	/^    _M_getloc() const$/;"	f	class:std::ios_base	typeref:typename:const locale &	access:public	signature:() const
std::ios_base::_M_grow_words	d:/include/c++/14/bits/ios_base.h	/^    _M_grow_words(int __index, bool __iword);$/;"	p	class:std::ios_base	typeref:typename:_Words &	access:protected	signature:(int __index,bool __iword)
std::ios_base::_M_init	d:/include/c++/14/bits/ios_base.h	/^    _M_init() throw();$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:()
std::ios_base::_M_ios_locale	d:/include/c++/14/bits/ios_base.h	/^    locale		_M_ios_locale;$/;"	m	class:std::ios_base	typeref:typename:locale	access:protected
std::ios_base::_M_local_word	d:/include/c++/14/bits/ios_base.h	/^    _Words		_M_local_word[_S_local_word_size];$/;"	m	class:std::ios_base	typeref:typename:_Words[]	access:protected
std::ios_base::_M_move	d:/include/c++/14/bits/ios_base.h	/^    _M_move(ios_base&) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base &)
std::ios_base::_M_precision	d:/include/c++/14/bits/ios_base.h	/^    streamsize		_M_precision;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_streambuf_state	d:/include/c++/14/bits/ios_base.h	/^    iostate		_M_streambuf_state;$/;"	m	class:std::ios_base	typeref:typename:iostate	access:protected
std::ios_base::_M_swap	d:/include/c++/14/bits/ios_base.h	/^    _M_swap(ios_base& __rhs) noexcept;$/;"	p	class:std::ios_base	typeref:typename:void	access:protected	signature:(ios_base & __rhs)
std::ios_base::_M_width	d:/include/c++/14/bits/ios_base.h	/^    streamsize		_M_width;$/;"	m	class:std::ios_base	typeref:typename:streamsize	access:protected
std::ios_base::_M_word	d:/include/c++/14/bits/ios_base.h	/^    _Words*		_M_word;$/;"	m	class:std::ios_base	typeref:typename:_Words *	access:protected
std::ios_base::_M_word_size	d:/include/c++/14/bits/ios_base.h	/^    int			_M_word_size;$/;"	m	class:std::ios_base	typeref:typename:int	access:protected
std::ios_base::_M_word_zero	d:/include/c++/14/bits/ios_base.h	/^    _Words		_M_word_zero;$/;"	m	class:std::ios_base	typeref:typename:_Words	access:protected
std::ios_base::_S_local_word_size	d:/include/c++/14/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	e	enum:std::ios_base::__anon9dd0171d0103	access:public
std::ios_base::_Words	d:/include/c++/14/bits/ios_base.h	/^    struct _Words$/;"	s	class:std::ios_base	access:protected
std::ios_base::_Words::_M_iword	d:/include/c++/14/bits/ios_base.h	/^      long	_M_iword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:long	access:public
std::ios_base::_Words::_M_pword	d:/include/c++/14/bits/ios_base.h	/^      void*	_M_pword;$/;"	m	struct:std::ios_base::_Words	typeref:typename:void *	access:public
std::ios_base::_Words::_Words	d:/include/c++/14/bits/ios_base.h	/^      _Words() : _M_pword(0), _M_iword(0) { }$/;"	f	struct:std::ios_base::_Words	access:public	signature:()
std::ios_base::__anon9dd0171d0103	d:/include/c++/14/bits/ios_base.h	/^    enum { _S_local_word_size = 8 };$/;"	g	class:std::ios_base	access:protected
std::ios_base::__noreplace	d:/include/c++/14/bits/ios_base.h	/^    static const openmode __noreplace =	_S_noreplace;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::adjustfield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags adjustfield = _S_adjustfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::app	d:/include/c++/14/bits/ios_base.h	/^    static const openmode app =		_S_app;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::ate	d:/include/c++/14/bits/ios_base.h	/^    static const openmode ate =		_S_ate;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::badbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate badbit =	_S_badbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::basefield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags basefield =   _S_basefield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::beg	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir beg =		_S_beg;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::binary	d:/include/c++/14/bits/ios_base.h	/^    static const openmode binary =	_S_bin;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::boolalpha	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags boolalpha =   _S_boolalpha;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::copyfmt_event	d:/include/c++/14/bits/ios_base.h	/^      copyfmt_event$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::cur	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir cur =		_S_cur;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::dec	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags dec =         _S_dec;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::end	d:/include/c++/14/bits/ios_base.h	/^    static const seekdir end =		_S_end;$/;"	m	class:std::ios_base	typeref:typename:const seekdir	access:public
std::ios_base::eofbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate eofbit =	_S_eofbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::erase_event	d:/include/c++/14/bits/ios_base.h	/^      erase_event,$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::event	d:/include/c++/14/bits/ios_base.h	/^    enum event$/;"	g	class:std::ios_base	access:public
std::ios_base::event_callback	d:/include/c++/14/bits/ios_base.h	/^    typedef void (*event_callback) (event __e, ios_base& __b, int __i);$/;"	t	class:std::ios_base	typeref:typename:void (*)(event __e,ios_base & __b,int __i)	access:public
std::ios_base::failbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate failbit =	_S_failbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::failure	d:/include/c++/14/bits/ios_base.h	/^    class _GLIBCXX_ABI_TAG_CXX11 failure : public system_error$/;"	c	class:std::ios_base	inherits:system_error	access:public
std::ios_base::failure::failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const char*, const error_code& = io_errc::stream);$/;"	p	class:std::ios_base::failure	access:public	signature:(const char *,const error_code &=io_errc::stream)
std::ios_base::failure::failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const string& __str);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string & __str)
std::ios_base::failure::failure	d:/include/c++/14/bits/ios_base.h	/^      failure(const string&, const error_code&);$/;"	p	class:std::ios_base::failure	access:public	signature:(const string &,const error_code &)
std::ios_base::failure::what	d:/include/c++/14/bits/ios_base.h	/^      what() const throw();$/;"	p	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
std::ios_base::failure::~failure	d:/include/c++/14/bits/ios_base.h	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	access:public	signature:()
std::ios_base::fixed	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags fixed =       _S_fixed;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::flags	d:/include/c++/14/bits/ios_base.h	/^    flags() const$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:() const
std::ios_base::flags	d:/include/c++/14/bits/ios_base.h	/^    flags(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::floatfield	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags floatfield =  _S_floatfield;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::fmtflags	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Fmtflags fmtflags;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Fmtflags	access:public
std::ios_base::getloc	d:/include/c++/14/bits/ios_base.h	/^    getloc() const$/;"	f	class:std::ios_base	typeref:typename:locale	access:public	signature:() const
std::ios_base::goodbit	d:/include/c++/14/bits/ios_base.h	/^    static const iostate goodbit =	_S_goodbit;$/;"	m	class:std::ios_base	typeref:typename:const iostate	access:public
std::ios_base::hex	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags hex =         _S_hex;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::imbue	d:/include/c++/14/bits/ios_base.h	/^    imbue(const locale& __loc) throw();$/;"	p	class:std::ios_base	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::ios_base::imbue_event	d:/include/c++/14/bits/ios_base.h	/^      imbue_event,$/;"	e	enum:std::ios_base::event	access:public
std::ios_base::in	d:/include/c++/14/bits/ios_base.h	/^    static const openmode in =		_S_in;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::internal	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags internal =    _S_internal;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base() throw ();$/;"	p	class:std::ios_base	access:protected	signature:()
std::ios_base::ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base(const ios_base&) = delete;$/;"	p	class:std::ios_base	access:public	signature:(const ios_base &)
std::ios_base::ios_base	d:/include/c++/14/bits/ios_base.h	/^    ios_base(const ios_base&);$/;"	p	class:std::ios_base	access:private	signature:(const ios_base &)
std::ios_base::iostate	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Iostate iostate;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Iostate	access:public
std::ios_base::iword	d:/include/c++/14/bits/ios_base.h	/^    iword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:long &	access:public	signature:(int __ix)
std::ios_base::left	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags left =        _S_left;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::noreplace	d:/include/c++/14/bits/ios_base.h	/^    static const openmode noreplace =	_S_noreplace;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::oct	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags oct =         _S_oct;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::openmode	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Openmode openmode;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Openmode	access:public
std::ios_base::operator =	d:/include/c++/14/bits/ios_base.h	/^    operator=(const ios_base&) = delete;$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:public	signature:(const ios_base &)
std::ios_base::operator =	d:/include/c++/14/bits/ios_base.h	/^    operator=(const ios_base&);$/;"	p	class:std::ios_base	typeref:typename:ios_base &	access:private	signature:(const ios_base &)
std::ios_base::out	d:/include/c++/14/bits/ios_base.h	/^    static const openmode out =		_S_out;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::precision	d:/include/c++/14/bits/ios_base.h	/^    precision() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::precision	d:/include/c++/14/bits/ios_base.h	/^    precision(streamsize __prec)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __prec)
std::ios_base::pword	d:/include/c++/14/bits/ios_base.h	/^    pword(int __ix)$/;"	f	class:std::ios_base	typeref:typename:void * &	access:public	signature:(int __ix)
std::ios_base::register_callback	d:/include/c++/14/bits/ios_base.h	/^    register_callback(event_callback __fn, int __index);$/;"	p	class:std::ios_base	typeref:typename:void	access:public	signature:(event_callback __fn,int __index)
std::ios_base::right	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags right =       _S_right;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::scientific	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags scientific =  _S_scientific;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::seekdir	d:/include/c++/14/bits/ios_base.h	/^    typedef _Ios_Seekdir seekdir;$/;"	t	class:std::ios_base	typeref:typename:_Ios_Seekdir	access:public
std::ios_base::setf	d:/include/c++/14/bits/ios_base.h	/^    setf(fmtflags __fmtfl)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl)
std::ios_base::setf	d:/include/c++/14/bits/ios_base.h	/^    setf(fmtflags __fmtfl, fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:fmtflags	access:public	signature:(fmtflags __fmtfl,fmtflags __mask)
std::ios_base::showbase	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showbase =    _S_showbase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpoint	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showpoint =   _S_showpoint;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::showpos	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags showpos =     _S_showpos;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::skipws	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags skipws =      _S_skipws;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::sync_with_stdio	d:/include/c++/14/bits/ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
std::ios_base::system_error	d:/include/c++/14/bits/ios_base.h	/^    struct system_error : std::runtime_error$/;"	s	class:std::ios_base	inherits:std::runtime_error	access:private
std::ios_base::system_error::_M_code	d:/include/c++/14/bits/ios_base.h	/^      } _M_code;$/;"	m	struct:std::ios_base::system_error	typeref:struct:std::ios_base::system_error::error_code	access:public
std::ios_base::system_error::error_code	d:/include/c++/14/bits/ios_base.h	/^      struct error_code$/;"	s	struct:std::ios_base::system_error	access:public
std::ios_base::system_error::error_code::_M_cat	d:/include/c++/14/bits/ios_base.h	/^	const void*	_M_cat;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:const void *	access:private
std::ios_base::system_error::error_code::_M_value	d:/include/c++/14/bits/ios_base.h	/^	int		_M_value;$/;"	m	struct:std::ios_base::system_error::error_code	typeref:typename:int	access:private
std::ios_base::system_error::error_code::error_code	d:/include/c++/14/bits/ios_base.h	/^	error_code() { }$/;"	f	struct:std::ios_base::system_error::error_code	access:public	signature:()
std::ios_base::trunc	d:/include/c++/14/bits/ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
std::ios_base::unitbuf	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::unsetf	d:/include/c++/14/bits/ios_base.h	/^    unsetf(fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
std::ios_base::uppercase	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
std::ios_base::width	d:/include/c++/14/bits/ios_base.h	/^    width() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
std::ios_base::width	d:/include/c++/14/bits/ios_base.h	/^    width(streamsize __wide)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
std::ios_base::xalloc	d:/include/c++/14/bits/ios_base.h	/^    xalloc() throw();$/;"	p	class:std::ios_base	typeref:typename:int	access:public	signature:()
std::ios_base::~ios_base	d:/include/c++/14/bits/ios_base.h	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	access:public	signature:()
std::iostream_category	d:/include/c++/14/bits/ios_base.h	/^  iostream_category() noexcept;$/;"	p	namespace:std	typeref:typename:const error_category &	signature:()
std::is_error_code_enum	d:/include/c++/14/bits/ios_base.h	/^  template <> struct is_error_code_enum<io_errc> : public true_type { };$/;"	s	namespace:std	inherits:true_type
std::is_permutation	d:/include/c++/14/bits/stl_algobase.h	/^    is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
std::isalnum	d:/include/c++/14/bits/locale_facets.h	/^    isalnum(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalnum	d:/include/c++/14/bits/localefwd.h	/^    isalnum(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isalpha	d:/include/c++/14/bits/locale_facets.h	/^    isalpha(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isalpha	d:/include/c++/14/bits/localefwd.h	/^    isalpha(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isblank	d:/include/c++/14/bits/locale_facets.h	/^    isblank(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isblank	d:/include/c++/14/bits/localefwd.h	/^    isblank(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iscntrl	d:/include/c++/14/bits/locale_facets.h	/^    iscntrl(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::iscntrl	d:/include/c++/14/bits/localefwd.h	/^    iscntrl(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isdigit	d:/include/c++/14/bits/locale_facets.h	/^    isdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isdigit	d:/include/c++/14/bits/localefwd.h	/^    isdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isgraph	d:/include/c++/14/bits/locale_facets.h	/^    isgraph(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isgraph	d:/include/c++/14/bits/localefwd.h	/^    isgraph(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::islower	d:/include/c++/14/bits/locale_facets.h	/^    islower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::islower	d:/include/c++/14/bits/localefwd.h	/^    islower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isprint	d:/include/c++/14/bits/locale_facets.h	/^    isprint(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isprint	d:/include/c++/14/bits/localefwd.h	/^    isprint(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::ispunct	d:/include/c++/14/bits/locale_facets.h	/^    ispunct(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::ispunct	d:/include/c++/14/bits/localefwd.h	/^    ispunct(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isspace	d:/include/c++/14/bits/locale_facets.h	/^    isspace(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_END_NAMESPACE_LDBL bool	signature:(_CharT __c,const locale & __loc)
std::isspace	d:/include/c++/14/bits/localefwd.h	/^    isspace(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^    class istreambuf_iterator$/;"	c	namespace:std	inherits:iterator<input_iterator_tag,_CharT,typename_Traits::off_type,_CharT*,_CharT>
std::istreambuf_iterator::_M_at_eof	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_at_eof() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:() const
std::istreambuf_iterator::_M_c	d:/include/c++/14/bits/streambuf_iterator.h	/^      int_type			_M_c;$/;"	m	class:std::istreambuf_iterator	typeref:typename:int_type	access:private
std::istreambuf_iterator::_M_get	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_get() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:int_type	access:private	signature:() const
std::istreambuf_iterator::_M_sbuf	d:/include/c++/14/bits/streambuf_iterator.h	/^      mutable streambuf_type*	_M_sbuf;$/;"	m	class:std::istreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::istreambuf_iterator::_S_is_eof	d:/include/c++/14/bits/streambuf_iterator.h	/^      _S_is_eof(int_type __c)$/;"	f	class:std::istreambuf_iterator	typeref:typename:bool	access:private	signature:(int_type __c)
std::istreambuf_iterator::char_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT					char_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT	access:public
std::istreambuf_iterator::equal	d:/include/c++/14/bits/streambuf_iterator.h	/^      equal(const istreambuf_iterator& __b) const$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const istreambuf_iterator & __b) const
std::istreambuf_iterator::int_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename _Traits::int_type		int_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits::int_type	access:public
std::istreambuf_iterator::istream_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_istream<_CharT, _Traits>		istream_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_istream<_CharT,_Traits>	access:public
std::istreambuf_iterator::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      _GLIBCXX_CONSTEXPR istreambuf_iterator() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_CONSTEXPR	access:public	signature:()
std::istreambuf_iterator::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      constexpr istreambuf_iterator(default_sentinel_t) noexcept$/;"	f	class:std::istreambuf_iterator	access:public	signature:(default_sentinel_t)
std::istreambuf_iterator::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:(const istreambuf_iterator &)
std::istreambuf_iterator::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(istream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(istream_type & __s)
std::istreambuf_iterator::istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::istreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::istreambuf_iterator::operator *	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator*() const$/;"	f	class:std::istreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD char_type	access:public	signature:() const
std::istreambuf_iterator::operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:()
std::istreambuf_iterator::operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator	access:public	signature:(int)
std::istreambuf_iterator::operator =	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator=(const istreambuf_iterator&) noexcept = default;$/;"	p	class:std::istreambuf_iterator	typeref:typename:istreambuf_iterator &	access:public	signature:(const istreambuf_iterator &)
std::istreambuf_iterator::reference	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT& reference; \/\/ Changed to _CharT by LWG 445$/;"	t	class:std::istreambuf_iterator	typeref:typename:_CharT &	access:public
std::istreambuf_iterator::streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::istreambuf_iterator::traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
std::istreambuf_iterator::~istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ~istreambuf_iterator() = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:()
std::isupper	d:/include/c++/14/bits/locale_facets.h	/^    isupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isupper	d:/include/c++/14/bits/localefwd.h	/^    isupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::isxdigit	d:/include/c++/14/bits/locale_facets.h	/^    isxdigit(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:bool	signature:(_CharT __c,const locale & __loc)
std::isxdigit	d:/include/c++/14/bits/localefwd.h	/^    isxdigit(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:bool	signature:(_CharT,const locale &)
std::iter_const_reference_t	d:/include/c++/14/bits/stl_iterator.h	/^    using iter_const_reference_t$/;"	t	namespace:std	typeref:typename:common_reference_t<const iter_value_t<_It> &&,iter_reference_t<_It>>
std::iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const counted_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const counted_iterator & __i)
std::iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const move_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const move_iterator & __i)
std::iter_move	d:/include/c++/14/bits/stl_iterator.h	/^      iter_move(const reverse_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_Iterator>	signature:(const reverse_iterator & __i)
std::iter_move	d:/include/c++/14/bits/stl_iterator.h	/^    iter_move(const basic_const_iterator& __i)$/;"	f	namespace:std	typeref:typename:__rvalue_reference	signature:(const basic_const_iterator & __i)
std::iter_move	d:/include/c++/14/bits/stl_iterator.h	/^    iter_move(const common_iterator& __i)$/;"	f	namespace:std	typeref:typename:iter_rvalue_reference_t<_It>	signature:(const common_iterator & __i)
std::iter_swap	d:/include/c++/14/bits/stl_algobase.h	/^    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(_ForwardIterator1 __a,_ForwardIterator2 __b)
std::iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const move_iterator& __x, const move_iterator<_Iter2>& __y)$/;"	f	namespace:std	typeref:typename:void	signature:(const move_iterator & __x,const move_iterator<_Iter2> & __y)
std::iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^	iter_swap(const reverse_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const reverse_iterator & __x,const reverse_iterator<_Iter2> & __y)
std::iter_swap	d:/include/c++/14/bits/stl_iterator.h	/^      iter_swap(const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:void	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::iterator	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct _GLIBCXX17_DEPRECATED iterator$/;"	s	namespace:std
std::iterator::difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Distance  difference_type;$/;"	t	struct:std::iterator	typeref:typename:_Distance	access:public
std::iterator::iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Category  iterator_category;$/;"	t	struct:std::iterator	typeref:typename:_Category	access:public
std::iterator::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Pointer   pointer;$/;"	t	struct:std::iterator	typeref:typename:_Pointer	access:public
std::iterator::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Reference reference;$/;"	t	struct:std::iterator	typeref:typename:_Reference	access:public
std::iterator::value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	typeref:typename:_Tp	access:public
std::iterator_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct iterator_traits<common_iterator<_It, _Sent>>$/;"	s	namespace:std
std::iterator_traits	d:/include/c++/14/bits/stl_iterator.h	/^    struct iterator_traits<counted_iterator<_It>> : iterator_traits<_It>$/;"	s	namespace:std	inherits:iterator_traits<_It>
std::iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std
std::iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits$/;"	s	namespace:std	inherits:__iterator_traits<_Iterator>
std::iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits<_Tp*>$/;"	s	namespace:std
std::iterator_traits	d:/include/c++/14/bits/stl_iterator_base_types.h	/^    struct iterator_traits<const _Tp*>$/;"	s	namespace:std
std::iterator_traits::_S_iter_cat	d:/include/c++/14/bits/stl_iterator.h	/^      _S_iter_cat()$/;"	f	struct:std::iterator_traits	typeref:typename:auto	access:private	signature:()
std::iterator_traits::__ptr	d:/include/c++/14/bits/stl_iterator.h	/^	struct __ptr$/;"	s	struct:std::iterator_traits	access:private
std::iterator_traits::__ptr	d:/include/c++/14/bits/stl_iterator.h	/^	struct __ptr<_Iter>$/;"	s	struct:std::iterator_traits	access:private
std::iterator_traits::__ptr::_CIter	d:/include/c++/14/bits/stl_iterator.h	/^	  using _CIter = common_iterator<_Iter, _Sent>;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:common_iterator<_Iter,_Sent>	access:public
std::iterator_traits::__ptr::type	d:/include/c++/14/bits/stl_iterator.h	/^	  using type = decltype(std::declval<const _CIter&>().operator->());$/;"	t	struct:std::iterator_traits::__ptr	access:public
std::iterator_traits::__ptr::type	d:/include/c++/14/bits/stl_iterator.h	/^	  using type = void;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:void	access:public
std::iterator_traits::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_difference_t<_It>	access:public
std::iterator_traits::difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef ptrdiff_t                   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
std::iterator_traits::difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::difference_type   difference_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::difference_type	access:public
std::iterator_traits::difference_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using difference_type   = ptrdiff_t;$/;"	t	struct:std::iterator_traits	typeref:typename:ptrdiff_t	access:public
std::iterator_traits::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_category = decltype(_S_iter_cat());$/;"	t	struct:std::iterator_traits	access:public
std::iterator_traits::iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef random_access_iterator_tag iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
std::iterator_traits::iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::iterator_category iterator_category;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::iterator_category	access:public
std::iterator_traits::iterator_category	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using iterator_category = random_access_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:random_access_iterator_tag	access:public
std::iterator_traits::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = __conditional_t<forward_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:__conditional_t<forward_iterator<_It>,forward_iterator_tag,input_iterator_tag>	access:public
std::iterator_traits::iterator_concept	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using iterator_concept  = contiguous_iterator_tag;$/;"	t	struct:std::iterator_traits	typeref:typename:contiguous_iterator_tag	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = __conditional_t<contiguous_iterator<_It>,$/;"	t	struct:std::iterator_traits	typeref:typename:__conditional_t<contiguous_iterator<_It>,add_pointer_t<iter_reference_t<_It>>,void>	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = typename __ptr<_It>::type;$/;"	t	struct:std::iterator_traits	typeref:typename:__ptr<_It>::type	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp*                        pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef const _Tp*                  pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp *	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::pointer           pointer;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::pointer	access:public
std::iterator_traits::pointer	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using pointer	      = _Tp*;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp *	access:public
std::iterator_traits::reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_reference_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_reference_t<_It>	access:public
std::iterator_traits::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp&                        reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
std::iterator_traits::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef const _Tp&                  reference;$/;"	t	struct:std::iterator_traits	typeref:typename:const _Tp &	access:public
std::iterator_traits::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::reference         reference;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::reference	access:public
std::iterator_traits::reference	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using reference	      = _Tp&;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp &	access:public
std::iterator_traits::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_value_t<_It>	access:public
std::iterator_traits::value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp	access:public
std::iterator_traits::value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
std::iterator_traits::value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using value_type	      = remove_cv_t<_Tp>;$/;"	t	struct:std::iterator_traits	typeref:typename:remove_cv_t<_Tp>	access:public
std::kill_dependency	d:/include/c++/14/bits/atomic_base.h	/^    kill_dependency(_Tp __y) noexcept$/;"	f	namespace:std	typeref:typename:_Tp	signature:(_Tp __y)
std::left	d:/include/c++/14/bits/ios_base.h	/^  left(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::less	d:/include/c++/14/bits/stl_function.h	/^    struct less : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less	d:/include/c++/14/bits/stl_function.h	/^    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::less	d:/include/c++/14/bits/stl_function.h	/^    struct less<void>$/;"	s	namespace:std
std::less::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::less::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::less::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::less::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
std::less::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less	inherits:true_type	access:private
std::less::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less	inherits:false_type	access:private
std::less::__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::less::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less	typeref:typename:__is_transparent	access:public
std::less::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::less::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::less::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::less::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal<_Tp*> : public binary_function<_Tp*, _Tp*, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp*,_Tp*,bool>
std::less_equal	d:/include/c++/14/bits/stl_function.h	/^    struct less_equal<void>$/;"	s	namespace:std
std::less_equal::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, false_type)$/;"	f	struct:std::less_equal	typeref:typename:decltype(auto)	access:private	signature:(_Tp && __t,_Up && __u,false_type)
std::less_equal::_S_cmp	d:/include/c++/14/bits/stl_function.h	/^	_S_cmp(_Tp&& __t, _Up&& __u, true_type) noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:private	signature:(_Tp && __t,_Up && __u,true_type)
std::less_equal::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded : __not_overloaded2<_Tp, _Up> { };$/;"	s	struct:std::less_equal	inherits:__not_overloaded2<_Tp,_Up>	access:private
std::less_equal::__not_overloaded	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
std::less_equal::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2 : true_type { };$/;"	s	struct:std::less_equal	inherits:true_type	access:private
std::less_equal::__not_overloaded2	d:/include/c++/14/bits/stl_function.h	/^	struct __not_overloaded2<_Tp, _Up, __void_t<$/;"	s	struct:std::less_equal	inherits:false_type	access:private
std::less_equal::__ptr_cmp	d:/include/c++/14/bits/stl_function.h	/^	using __ptr_cmp = __and_<__not_overloaded<_Tp, _Up>,$/;"	t	struct:std::less_equal	typeref:typename:__and_<__not_overloaded<_Tp,_Up>,is_convertible<_Tp,const volatile void * >,is_convertible<_Up,const volatile void * >>	access:private
std::less_equal::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::less_equal	typeref:typename:__is_transparent	access:public
std::less_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::less_equal	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::less_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp* __t, _Up* __u) const noexcept$/;"	f	struct:std::less_equal	typeref:typename:bool	access:public	signature:(_Tp * __t,_Up * __u) const
std::less_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(_Tp * __x,_Tp * __y) const
std::less_equal::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::less_equal	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2)
std::lexicographical_compare	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare(_II1 __first1, _II1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(_II1 __first1,_II1 __last1,_II2 __first2,_II2 __last2,_Compare __comp)
std::lexicographical_compare_three_way	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:auto	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2)
std::lexicographical_compare_three_way	d:/include/c++/14/bits/stl_algobase.h	/^    lexicographical_compare_three_way(_InputIter1 __first1,$/;"	f	namespace:std	typeref:typename:decltype(__comp (* __first1,* __first2))	signature:(_InputIter1 __first1,_InputIter1 __last1,_InputIter2 __first2,_InputIter2 __last2,_Comp __comp)
std::literals	d:/include/c++/14/bits/basic_string.h	/^  inline namespace literals$/;"	n	namespace:std
std::literals::string_literals	d:/include/c++/14/bits/basic_string.h	/^  inline namespace string_literals$/;"	n	namespace:std::literals
std::literals::string_literals::operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char>	signature:(const char * __str,size_t __len)
std::literals::string_literals::operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char16_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char16_t>	signature:(const char16_t * __str,size_t __len)
std::literals::string_literals::operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char32_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char32_t>	signature:(const char32_t * __str,size_t __len)
std::literals::string_literals::operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const char8_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<char8_t>	signature:(const char8_t * __str,size_t __len)
std::literals::string_literals::operator ""s	d:/include/c++/14/bits/basic_string.h	/^    operator""s(const wchar_t* __str, size_t __len)$/;"	f	namespace:std::literals::string_literals	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG _GLIBCXX_STRING_CONSTEXPR basic_string<wchar_t>	signature:(const wchar_t * __str,size_t __len)
std::locale	d:/include/c++/14/bits/locale_classes.h	/^  class locale$/;"	c	namespace:std
std::locale::_Impl	d:/include/c++/14/bits/locale_classes.h	/^  class locale::_Impl$/;"	c	class:std::locale
std::locale::_Impl::_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &)
std::locale::_Impl::_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const _Impl&, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const _Impl &,size_t)
std::locale::_Impl::_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(const char*, size_t);$/;"	p	class:std::locale::_Impl	access:private	signature:(const char *,size_t)
std::locale::_Impl::_Impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl(size_t) throw();$/;"	p	class:std::locale::_Impl	access:private	signature:(size_t)
std::locale::_Impl::_M_add_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_add_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_caches	d:/include/c++/14/bits/locale_classes.h	/^    const facet**			_M_caches;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_check_same_name	d:/include/c++/14/bits/locale_classes.h	/^    _M_check_same_name()$/;"	f	class:std::locale::_Impl	typeref:typename:bool	access:private	signature:()
std::locale::_Impl::_M_facets	d:/include/c++/14/bits/locale_classes.h	/^    const facet**			_M_facets;$/;"	m	class:std::locale::_Impl	typeref:typename:const facet **	access:private
std::locale::_Impl::_M_facets_size	d:/include/c++/14/bits/locale_classes.h	/^    size_t				_M_facets_size;$/;"	m	class:std::locale::_Impl	typeref:typename:size_t	access:private
std::locale::_Impl::_M_init_extra	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra(facet**);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(facet **)
std::locale::_Impl::_M_init_extra	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra(void*, void*, const char*, const char*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(void *,void *,const char *,const char *)
std::locale::_Impl::_M_init_extra_ldbl128	d:/include/c++/14/bits/locale_classes.h	/^    void _M_init_extra_ldbl128(bool);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(bool)
std::locale::_Impl::_M_init_facet	d:/include/c++/14/bits/locale_classes.h	/^      _M_init_facet(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
std::locale::_Impl::_M_init_facet_unchecked	d:/include/c++/14/bits/locale_classes.h	/^      _M_init_facet_unchecked(_Facet* __facet)$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(_Facet * __facet)
std::locale::_Impl::_M_install_cache	d:/include/c++/14/bits/locale_classes.h	/^    _M_install_cache(const facet*, size_t);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const facet *,size_t)
std::locale::_Impl::_M_install_facet	d:/include/c++/14/bits/locale_classes.h	/^    _M_install_facet(const locale::id*, const facet*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const locale::id *,const facet *)
std::locale::_Impl::_M_names	d:/include/c++/14/bits/locale_classes.h	/^    char**				_M_names;$/;"	m	class:std::locale::_Impl	typeref:typename:char **	access:private
std::locale::_Impl::_M_refcount	d:/include/c++/14/bits/locale_classes.h	/^    _Atomic_word			_M_refcount;$/;"	m	class:std::locale::_Impl	typeref:typename:_Atomic_word	access:private
std::locale::_Impl::_M_remove_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_remove_reference() throw()$/;"	f	class:std::locale::_Impl	typeref:typename:void	access:private	signature:()
std::locale::_Impl::_M_replace_categories	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_categories(const _Impl*, category);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,category)
std::locale::_Impl::_M_replace_category	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_category(const _Impl*, const locale::id* const*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id * const *)
std::locale::_Impl::_M_replace_facet	d:/include/c++/14/bits/locale_classes.h	/^    _M_replace_facet(const _Impl*, const locale::id*);$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl *,const locale::id *)
std::locale::_Impl::_S_facet_categories	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const* const _S_facet_categories[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const * const[]	access:private
std::locale::_Impl::_S_id_collate	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_collate[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_ctype	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_ctype[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_messages	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_messages[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_monetary	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_monetary[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_numeric	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_numeric[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::_S_id_time	d:/include/c++/14/bits/locale_classes.h	/^    static const locale::id* const	_S_id_time[];$/;"	m	class:std::locale::_Impl	typeref:typename:const locale::id * const[]	access:private
std::locale::_Impl::operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const _Impl&);  \/\/ Not defined.$/;"	p	class:std::locale::_Impl	typeref:typename:void	access:private	signature:(const _Impl &)
std::locale::_Impl::~_Impl	d:/include/c++/14/bits/locale_classes.h	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	access:private	signature:()
std::locale::_M_coalesce	d:/include/c++/14/bits/locale_classes.h	/^    _M_coalesce(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::_M_impl	d:/include/c++/14/bits/locale_classes.h	/^    _Impl*		_M_impl;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_categories	d:/include/c++/14/bits/locale_classes.h	/^    static const char* const* const _S_categories;$/;"	m	class:std::locale	typeref:typename:const char * const * const	access:private
std::locale::_S_categories_size	d:/include/c++/14/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	e	enum:std::locale::__anonf3d5def50103	access:public
std::locale::_S_classic	d:/include/c++/14/bits/locale_classes.h	/^    static _Impl*       _S_classic;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_global	d:/include/c++/14/bits/locale_classes.h	/^    static _Impl*	_S_global;$/;"	m	class:std::locale	typeref:typename:_Impl *	access:private
std::locale::_S_initialize	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_initialize_once	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize_once() throw();$/;"	p	class:std::locale	typeref:typename:void	access:private	signature:()
std::locale::_S_normalize_category	d:/include/c++/14/bits/locale_classes.h	/^    _S_normalize_category(category);$/;"	p	class:std::locale	typeref:typename:category	access:private	signature:(category)
std::locale::_S_once	d:/include/c++/14/bits/locale_classes.h	/^    static __gthread_once_t _S_once;$/;"	m	class:std::locale	typeref:typename:__gthread_once_t	access:private
std::locale::_S_twinned_facets	d:/include/c++/14/bits/locale_classes.h	/^    static const id* const _S_twinned_facets[];$/;"	m	class:std::locale	typeref:typename:const id * const[]	access:private
std::locale::__anonf3d5def50103	d:/include/c++/14/bits/locale_classes.h	/^    enum { _S_categories_size = 6 + _GLIBCXX_NUM_CATEGORIES };$/;"	g	class:std::locale	access:private
std::locale::all	d:/include/c++/14/bits/locale_classes.h	/^    static const category all		= (ctype | numeric | collate |$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::category	d:/include/c++/14/bits/locale_classes.h	/^    typedef int	category;$/;"	t	class:std::locale	typeref:typename:int	access:public
std::locale::classic	d:/include/c++/14/bits/locale_classes.h	/^    classic();$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD const locale &	access:public	signature:()
std::locale::collate	d:/include/c++/14/bits/locale_classes.h	/^    static const category collate	= 1L << 2;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::combine	d:/include/c++/14/bits/locale_classes.h	/^      combine(const locale& __other) const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD locale	access:public	signature:(const locale & __other) const
std::locale::ctype	d:/include/c++/14/bits/locale_classes.h	/^    static const category ctype		= 1L << 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::encoding	d:/include/c++/14/bits/locale_classes.h	/^    encoding() const = delete;$/;"	p	class:std::locale	typeref:typename:text_encoding	access:public	signature:() const
std::locale::encoding	d:/include/c++/14/bits/locale_classes.h	/^    encoding() const;$/;"	p	class:std::locale	typeref:typename:text_encoding	access:public	signature:() const
std::locale::facet	d:/include/c++/14/bits/locale_classes.h	/^  class locale::facet$/;"	c	class:std::locale
std::locale::facet::_M_add_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_add_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_M_cow_shim	d:/include/c++/14/bits/locale_classes.h	/^    const facet* _M_cow_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
std::locale::facet::_M_refcount	d:/include/c++/14/bits/locale_classes.h	/^    mutable _Atomic_word		_M_refcount;$/;"	m	class:std::locale::facet	typeref:typename:_Atomic_word	access:private
std::locale::facet::_M_remove_reference	d:/include/c++/14/bits/locale_classes.h	/^    _M_remove_reference() const throw()$/;"	f	class:std::locale::facet	typeref:typename:void	access:private	signature:() const
std::locale::facet::_M_sso_shim	d:/include/c++/14/bits/locale_classes.h	/^    const facet* _M_sso_shim(const id*) const;$/;"	p	class:std::locale::facet	typeref:typename:const facet *	access:private	signature:(const id *) const
std::locale::facet::_S_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    static __c_locale                   _S_c_locale;$/;"	m	class:std::locale::facet	typeref:typename:__c_locale	access:private
std::locale::facet::_S_c_name	d:/include/c++/14/bits/locale_classes.h	/^    static const char			_S_c_name[2];$/;"	m	class:std::locale::facet	typeref:typename:const char[2]	access:private
std::locale::facet::_S_clone_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_clone_c_locale(__c_locale& __cloc) throw();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_create_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_create_c_locale(__c_locale& __cloc, const char* __s,$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc,const char * __s,__c_locale __old=0)
std::locale::facet::_S_destroy_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_destroy_c_locale(__c_locale& __cloc);$/;"	p	class:std::locale::facet	typeref:typename:void	access:protected	signature:(__c_locale & __cloc)
std::locale::facet::_S_get_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_get_c_locale();$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:()
std::locale::facet::_S_get_c_name	d:/include/c++/14/bits/locale_classes.h	/^    _S_get_c_name() throw();$/;"	p	class:std::locale::facet	typeref:typename:_GLIBCXX_CONST const char *	access:protected	signature:()
std::locale::facet::_S_initialize_once	d:/include/c++/14/bits/locale_classes.h	/^    _S_initialize_once();$/;"	p	class:std::locale::facet	typeref:typename:void	access:private	signature:()
std::locale::facet::_S_lc_ctype_c_locale	d:/include/c++/14/bits/locale_classes.h	/^    _S_lc_ctype_c_locale(__c_locale __cloc, const char* __s);$/;"	p	class:std::locale::facet	typeref:typename:__c_locale	access:protected	signature:(__c_locale __cloc,const char * __s)
std::locale::facet::_S_once	d:/include/c++/14/bits/locale_classes.h	/^    static __gthread_once_t		_S_once;$/;"	m	class:std::locale::facet	typeref:typename:__gthread_once_t	access:private
std::locale::facet::facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(const facet&) = delete;$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
std::locale::facet::facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	access:private	signature:(const facet &)
std::locale::facet::facet	d:/include/c++/14/bits/locale_classes.h	/^    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)$/;"	f	class:std::locale::facet	access:protected	signature:(size_t __refs=0)
std::locale::facet::operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const facet&) = delete;$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
std::locale::facet::operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const facet&);  \/\/ Not defined.$/;"	p	class:std::locale::facet	typeref:typename:facet &	access:private	signature:(const facet &)
std::locale::facet::~facet	d:/include/c++/14/bits/locale_classes.h	/^    ~facet();$/;"	p	class:std::locale::facet	access:protected	signature:()
std::locale::global	d:/include/c++/14/bits/locale_classes.h	/^    global(const locale& __loc);$/;"	p	class:std::locale	typeref:typename:locale	access:public	signature:(const locale & __loc)
std::locale::id	d:/include/c++/14/bits/locale_classes.h	/^  class locale::id$/;"	c	class:std::locale
std::locale::id::_M_id	d:/include/c++/14/bits/locale_classes.h	/^    _M_id() const throw();$/;"	p	class:std::locale::id	typeref:typename:size_t	access:public	signature:() const
std::locale::id::_M_index	d:/include/c++/14/bits/locale_classes.h	/^    mutable size_t		_M_index;$/;"	m	class:std::locale::id	typeref:typename:size_t	access:private
std::locale::id::_S_refcount	d:/include/c++/14/bits/locale_classes.h	/^    static _Atomic_word		_S_refcount;$/;"	m	class:std::locale::id	typeref:typename:_Atomic_word	access:private
std::locale::id::id	d:/include/c++/14/bits/locale_classes.h	/^    id() { }$/;"	f	class:std::locale::id	access:public	signature:()
std::locale::id::id	d:/include/c++/14/bits/locale_classes.h	/^    id(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	access:private	signature:(const id &)
std::locale::id::operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const id&);  \/\/ Not defined.$/;"	p	class:std::locale::id	typeref:typename:void	access:private	signature:(const id &)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^      locale(const locale& __other, _Facet* __f);$/;"	p	class:std::locale	access:public	signature:(const locale & __other,_Facet * __f)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale() throw();$/;"	p	class:std::locale	access:public	signature:()
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(_Impl*) throw();$/;"	p	class:std::locale	access:private	signature:(_Impl *)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const char* __s);$/;"	p	class:std::locale	access:public	signature:(const char * __s)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const char* __s, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const char * __s,category __cat)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const locale& __add, category __cat);$/;"	p	class:std::locale	access:public	signature:(const locale & __base,const locale & __add,category __cat)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __base, const std::string& __s, category __cat)$/;"	f	class:std::locale	access:public	signature:(const locale & __base,const std::string & __s,category __cat)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const locale& __other) throw();$/;"	p	class:std::locale	access:public	signature:(const locale & __other)
std::locale::locale	d:/include/c++/14/bits/locale_classes.h	/^    locale(const std::string& __s) : locale(__s.c_str()) { }$/;"	f	class:std::locale	access:public	signature:(const std::string & __s)
std::locale::messages	d:/include/c++/14/bits/locale_classes.h	/^    static const category messages	= 1L << 5;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::monetary	d:/include/c++/14/bits/locale_classes.h	/^    static const category monetary	= 1L << 4;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::name	d:/include/c++/14/bits/locale_classes.h	/^    name() const;$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_DEFAULT_ABI_TAG string	access:public	signature:() const
std::locale::none	d:/include/c++/14/bits/locale_classes.h	/^    static const category none		= 0;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::numeric	d:/include/c++/14/bits/locale_classes.h	/^    static const category numeric	= 1L << 1;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::operator !=	d:/include/c++/14/bits/locale_classes.h	/^    operator!=(const locale& __other) const throw()$/;"	f	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const locale & __other) const
std::locale::operator ()	d:/include/c++/14/bits/locale_classes.h	/^      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const basic_string<_Char,_Traits,_Alloc> & __s1,const basic_string<_Char,_Traits,_Alloc> & __s2) const
std::locale::operator =	d:/include/c++/14/bits/locale_classes.h	/^    operator=(const locale& __other) throw();$/;"	p	class:std::locale	typeref:typename:const locale &	access:public	signature:(const locale & __other)
std::locale::operator ==	d:/include/c++/14/bits/locale_classes.h	/^    operator==(const locale& __other) const throw();$/;"	p	class:std::locale	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:(const locale & __other) const
std::locale::time	d:/include/c++/14/bits/locale_classes.h	/^    static const category time		= 1L << 3;$/;"	m	class:std::locale	typeref:typename:const category	access:public
std::locale::~locale	d:/include/c++/14/bits/locale_classes.h	/^    ~locale() throw();$/;"	p	class:std::locale	access:public	signature:()
std::logical_and	d:/include/c++/14/bits/stl_function.h	/^    struct logical_and : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_and	d:/include/c++/14/bits/stl_function.h	/^    struct logical_and<void>$/;"	s	namespace:std
std::logical_and::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_and	typeref:typename:__is_transparent	access:public
std::logical_and::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::logical_and::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_and	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::logical_not	d:/include/c++/14/bits/stl_function.h	/^    struct logical_not : public unary_function<_Tp, bool>$/;"	s	namespace:std	inherits:unary_function<_Tp,bool>
std::logical_not	d:/include/c++/14/bits/stl_function.h	/^    struct logical_not<void>$/;"	s	namespace:std
std::logical_not::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_not	typeref:typename:__is_transparent	access:public
std::logical_not::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::logical_not::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::logical_not	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x) const
std::logical_or	d:/include/c++/14/bits/stl_function.h	/^    struct logical_or : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::logical_or	d:/include/c++/14/bits/stl_function.h	/^    struct logical_or<void>$/;"	s	namespace:std
std::logical_or::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::logical_or	typeref:typename:__is_transparent	access:public
std::logical_or::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::logical_or::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::logical_or	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::lower_bound	d:/include/c++/14/bits/stl_algobase.h	/^    lower_bound(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR _ForwardIterator	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __val)
std::make_const_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_const_iterator(_It __it)$/;"	f	namespace:std	typeref:typename:const_iterator<_It>	signature:(_It __it)
std::make_const_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    make_const_sentinel(_Sent __s)$/;"	f	namespace:std	typeref:typename:const_sentinel<_Sent>	signature:(_Sent __s)
std::make_error_code	d:/include/c++/14/bits/ios_base.h	/^  make_error_code(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_code	signature:(io_errc __e)
std::make_error_condition	d:/include/c++/14/bits/ios_base.h	/^  make_error_condition(io_errc __e) noexcept$/;"	f	namespace:std	typeref:typename:error_condition	signature:(io_errc __e)
std::make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    make_exception_ptr(_Ex __ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex __ex)
std::make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT$/;"	f	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
std::make_exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^  exception_ptr make_exception_ptr(_Ex) _GLIBCXX_USE_NOEXCEPT;$/;"	p	namespace:std	typeref:typename:exception_ptr	signature:(_Ex)
std::make_index_sequence	d:/include/c++/14/bits/utility.h	/^    using make_index_sequence = make_integer_sequence<size_t, _Num>;$/;"	t	namespace:std	typeref:typename:make_integer_sequence<size_t,_Num>
std::make_integer_sequence	d:/include/c++/14/bits/utility.h	/^    using make_integer_sequence$/;"	t	namespace:std	typeref:typename:__make_integer_seq<integer_sequence,_Tp,_Num>
std::make_move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_move_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(_Iterator __i)
std::make_pair	d:/include/c++/14/bits/stl_pair.h	/^    make_pair(_T1 __x, _T2 __y)$/;"	f	namespace:std	typeref:typename:pair<_T1,_T2>	signature:(_T1 __x,_T2 __y)
std::make_pair	d:/include/c++/14/bits/stl_pair.h	/^    make_pair(_T1&& __x, _T2&& __y)$/;"	f	namespace:std	typeref:typename:pair<typename __decay_and_strip<_T1>::__type,typename __decay_and_strip<_T2>::__type>	signature:(_T1 && __x,_T2 && __y)
std::make_reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    make_reverse_iterator(_Iterator __i)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(_Iterator __i)
std::make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared()$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:()
std::make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:shared_ptr<_NonArray<_Tp>>	signature:(_Args &&...__args)
std::make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_BoundedArray<_Tp>>	signature:(const remove_extent_t<_Tp> & __u)
std::make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n)
std::make_shared	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared(size_t __n, const remove_extent_t<_Tp>& __u)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n,const remove_extent_t<_Tp> & __u)
std::make_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared_for_overwrite()$/;"	f	namespace:std	typeref:typename:shared_ptr<_NotUnboundedArray<_Tp>>	signature:()
std::make_shared_for_overwrite	d:/include/c++/14/bits/shared_ptr.h	/^    make_shared_for_overwrite(size_t __n)$/;"	f	namespace:std	typeref:typename:shared_ptr<_UnboundedArray<_Tp>>	signature:(size_t __n)
std::make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(_Args&&... __args)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_t<_Tp>	signature:(_Args &&...__args)
std::make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(_Args&&...) = delete;$/;"	p	namespace:std	typeref:typename:__detail::__invalid_make_unique_t<_Tp>	signature:(_Args &&...)
std::make_unique	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique(size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_array_t<_Tp>	signature:(size_t __num)
std::make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite()$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_t<_Tp>	signature:()
std::make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite(_Args&&...) = delete;$/;"	p	namespace:std	typeref:typename:__detail::__invalid_make_unique_t<_Tp>	signature:(_Args &&...)
std::make_unique_for_overwrite	d:/include/c++/14/bits/unique_ptr.h	/^    make_unique_for_overwrite(size_t __num)$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR __detail::__unique_ptr_array_t<_Tp>	signature:(size_t __num)
std::max	d:/include/c++/14/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::max	d:/include/c++/14/bits/stl_algobase.h	/^    max(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)())
std::mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun	d:/include/c++/14/bits/stl_function.h	/^    mem_fun(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp,_Arg,_Ret>
std::mem_fun1_ref_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_ref_t::mem_fun1_ref_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_ref_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_ref_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __r, _Arg __x) const$/;"	f	class:std::mem_fun1_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r,_Arg __x) const
std::mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>$/;"	c	namespace:std	inherits:binary_function<_Tp*,_Arg,_Ret>
std::mem_fun1_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)(_Arg);$/;"	p	class:std::mem_fun1_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun1_t::mem_fun1_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))$/;"	f	class:std::mem_fun1_t	access:public	signature:(_Ret (_Tp::* __pf)(_Arg))
std::mem_fun1_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __p, _Arg __x) const$/;"	f	class:std::mem_fun1_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p,_Arg __x) const
std::mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)() const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)()const)
std::mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)())$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)())
std::mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg)const)
std::mem_fun_ref	d:/include/c++/14/bits/stl_function.h	/^    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))$/;"	f	namespace:std	signature:(_Ret (_Tp::* __f)(_Arg))
std::mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun_ref_t : public unary_function<_Tp, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp,_Ret>
std::mem_fun_ref_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_ref_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_ref_t::mem_fun_ref_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun_ref_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_ref_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_ref_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp& __r) const$/;"	f	class:std::mem_fun_ref_t	typeref:typename:_Ret	access:public	signature:(_Tp & __r) const
std::mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^    class mem_fun_t : public unary_function<_Tp*, _Ret>$/;"	c	namespace:std	inherits:unary_function<_Tp*,_Ret>
std::mem_fun_t::_Ret	d:/include/c++/14/bits/stl_function.h	/^      _Ret (_Tp::*_M_f)();$/;"	p	class:std::mem_fun_t	access:private	signature:(_Tp::* _M_f)
std::mem_fun_t::mem_fun_t	d:/include/c++/14/bits/stl_function.h	/^      mem_fun_t(_Ret (_Tp::*__pf)())$/;"	f	class:std::mem_fun_t	access:public	signature:(_Ret (_Tp::* __pf)())
std::mem_fun_t::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Tp* __p) const$/;"	f	class:std::mem_fun_t	typeref:typename:_Ret	access:public	signature:(_Tp * __p) const
std::memory_order	d:/include/c++/14/bits/atomic_base.h	/^  enum class memory_order : int$/;"	g	namespace:std	typeref:typename:int
std::memory_order_acq_rel	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_acq_rel = memory_order::acq_rel;$/;"	v	namespace:std	typeref:typename:memory_order
std::memory_order_acquire	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_acquire = memory_order::acquire;$/;"	v	namespace:std	typeref:typename:memory_order
std::memory_order_consume	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_consume = memory_order::consume;$/;"	v	namespace:std	typeref:typename:memory_order
std::memory_order_relaxed	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_relaxed = memory_order::relaxed;$/;"	v	namespace:std	typeref:typename:memory_order
std::memory_order_release	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_release = memory_order::release;$/;"	v	namespace:std	typeref:typename:memory_order
std::memory_order_seq_cst	d:/include/c++/14/bits/atomic_base.h	/^  inline constexpr memory_order memory_order_seq_cst = memory_order::seq_cst;$/;"	v	namespace:std	typeref:typename:memory_order
std::min	d:/include/c++/14/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b)
std::min	d:/include/c++/14/bits/stl_algobase.h	/^    min(const _Tp& __a, const _Tp& __b, _Compare __comp)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX14_CONSTEXPR const _Tp &	signature:(const _Tp & __a,const _Tp & __b,_Compare __comp)
std::minus	d:/include/c++/14/bits/stl_function.h	/^    struct minus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::minus	d:/include/c++/14/bits/stl_function.h	/^    struct minus<void>$/;"	s	namespace:std
std::minus::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::minus	typeref:typename:__is_transparent	access:public
std::minus::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::minus::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::minus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2)
std::mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_BinaryPredicate __binary_pred)
std::mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2)
std::mismatch	d:/include/c++/14/bits/stl_algobase.h	/^    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR pair<_InputIterator1,_InputIterator2>	signature:(_InputIterator1 __first1,_InputIterator1 __last1,_InputIterator2 __first2,_InputIterator2 __last2,_BinaryPredicate __binary_pred)
std::modulus	d:/include/c++/14/bits/stl_function.h	/^    struct modulus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::modulus	d:/include/c++/14/bits/stl_function.h	/^    struct modulus<void>$/;"	s	namespace:std
std::modulus::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::modulus	typeref:typename:__is_transparent	access:public
std::modulus::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::modulus::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::modulus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::move	d:/include/c++/14/bits/move.h	/^    move(_Tp&& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD typename std::remove_reference<_Tp>::type &&	signature:(_Tp && __t)
std::move	d:/include/c++/14/bits/stl_algobase.h	/^    move(_II __first, _II __last, _OI __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _OI	signature:(_II __first,_II __last,_OI __result)
std::move_backward	d:/include/c++/14/bits/stl_algobase.h	/^    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _BI2	signature:(_BI1 __first,_BI1 __last,_BI2 __result)
std::move_if_noexcept	d:/include/c++/14/bits/move.h	/^    move_if_noexcept(_Tp& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD __conditional_t<__move_if_noexcept_cond<_Tp>::value,const _Tp &,_Tp &&>	signature:(_Tp & __x)
std::move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class move_iterator$/;"	c	namespace:std	inherits:__detail::__move_iter_cat<_Iterator>
std::move_iterator::_M_current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator _M_current;$/;"	m	class:std::move_iterator	typeref:typename:_Iterator	access:private
std::move_iterator::_S_iter_concept	d:/include/c++/14/bits/stl_iterator.h	/^      _S_iter_concept()$/;"	f	class:std::move_iterator	typeref:typename:auto	access:private	signature:()
std::move_iterator::__base_ref	d:/include/c++/14/bits/stl_iterator.h	/^      using __base_ref = typename __traits_type::reference;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::reference	access:private
std::move_iterator::__convertible	d:/include/c++/14/bits/stl_iterator.h	/^	static constexpr bool __convertible = !is_same_v<_Iter2, _Iterator>$/;"	m	class:std::move_iterator	typeref:typename:bool	access:private
std::move_iterator::__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      using __traits_type = iterator_traits<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iterator_traits<_Iterator>	access:private
std::move_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() &&$/;"	f	class:std::move_iterator	typeref:typename:iterator_type	access:public	signature:()
std::move_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const & noexcept$/;"	f	class:std::move_iterator	typeref:typename:const iterator_type &	access:public	signature:() const
std::move_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
std::move_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::difference_type	access:public
std::move_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
std::move_iterator::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::iterator_category iterator_category;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::iterator_category	access:public
std::move_iterator::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept = decltype(_S_iter_concept());$/;"	t	class:std::move_iterator	access:public
std::move_iterator::iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_type = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^	move_iterator(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:requires __convertible<_Iter> _GLIBCXX17_CONSTEXPR	access:public	signature:(const move_iterator<_Iter> & __i)
std::move_iterator::move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      move_iterator()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
std::move_iterator::move_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      move_iterator(iterator_type __i)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __i)
std::move_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
std::move_iterator::operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
std::move_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
std::move_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int) requires (!forward_iterator<_Iterator>)$/;"	f	class:std::move_iterator	typeref:typename:void	access:public	signature:(int)
std::move_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
std::move_iterator::operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
std::move_iterator::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(difference_type __n) const
std::move_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:()
std::move_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator	access:public	signature:(int)
std::move_iterator::operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(difference_type __n)
std::move_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^      operator->() const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:public	signature:() const
std::move_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^	move_iterator& operator=(const move_iterator<_Iter>& __i)$/;"	f	class:std::move_iterator	typeref:typename:requires __convertible<_Iter> && assignable_from<_Iterator &,const _Iter &> _GLIBCXX17_CONSTEXPR move_iterator &	access:public	signature:(const move_iterator<_Iter> & __i)
std::move_iterator::operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::move_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
std::move_iterator::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					pointer;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      using pointer = _Iterator;$/;"	t	class:std::move_iterator	typeref:typename:_Iterator	access:public
std::move_iterator::reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_rvalue_reference_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_rvalue_reference_t<_Iterator>	access:public
std::move_iterator::reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference$/;"	t	class:std::move_iterator	typeref:typename:__conditional_t<is_reference<__base_ref>::value,typename remove_reference<__base_ref>::type &&,__base_ref>	access:public
std::move_iterator::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::value_type	access:public
std::move_iterator::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
std::move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^    class move_sentinel$/;"	c	namespace:std
std::move_sentinel::_M_last	d:/include/c++/14/bits/stl_iterator.h	/^      _Sent _M_last;$/;"	m	class:std::move_sentinel	typeref:typename:_Sent	access:private
std::move_sentinel::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::move_sentinel	typeref:typename:_Sent	access:public	signature:() const
std::move_sentinel::move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^	move_sentinel(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires convertible_to<const _S2 &,_Sent> 	access:public	signature:(const move_sentinel<_S2> & __s)
std::move_sentinel::move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      move_sentinel()$/;"	f	class:std::move_sentinel	access:public	signature:()
std::move_sentinel::move_sentinel	d:/include/c++/14/bits/stl_iterator.h	/^      move_sentinel(_Sent __s)$/;"	f	class:std::move_sentinel	access:public	signature:(_Sent __s)
std::move_sentinel::operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const move_sentinel<_S2>& __s)$/;"	f	class:std::move_sentinel	typeref:typename:requires assignable_from<_Sent &,const _S2 &> move_sentinel &	access:public	signature:(const move_sentinel<_S2> & __s)
std::multiplies	d:/include/c++/14/bits/stl_function.h	/^    struct multiplies : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::multiplies	d:/include/c++/14/bits/stl_function.h	/^    struct multiplies<void>$/;"	s	namespace:std
std::multiplies::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::multiplies	typeref:typename:__is_transparent	access:public
std::multiplies::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::multiplies::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::multiplies	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::negate	d:/include/c++/14/bits/stl_function.h	/^    struct negate : public unary_function<_Tp, _Tp>$/;"	s	namespace:std	inherits:unary_function<_Tp,_Tp>
std::negate	d:/include/c++/14/bits/stl_function.h	/^    struct negate<void>$/;"	s	namespace:std
std::negate::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::negate	typeref:typename:__is_transparent	access:public
std::negate::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t) const
std::negate::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x) const$/;"	f	struct:std::negate	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x) const
std::nested_exception	d:/include/c++/14/bits/nested_exception.h	/^  class nested_exception$/;"	c	namespace:std
std::nested_exception::_M_ptr	d:/include/c++/14/bits/nested_exception.h	/^    exception_ptr _M_ptr;$/;"	m	class:std::nested_exception	typeref:typename:exception_ptr	access:private
std::nested_exception::nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception() noexcept : _M_ptr(current_exception()) { }$/;"	f	class:std::nested_exception	access:public	signature:()
std::nested_exception::nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	access:public	signature:(const nested_exception &)
std::nested_exception::nested_ptr	d:/include/c++/14/bits/nested_exception.h	/^    nested_ptr() const noexcept$/;"	f	class:std::nested_exception	typeref:typename:exception_ptr	access:public	signature:() const
std::nested_exception::operator =	d:/include/c++/14/bits/nested_exception.h	/^    nested_exception& operator=(const nested_exception&) noexcept = default;$/;"	p	class:std::nested_exception	typeref:typename:nested_exception &	access:public	signature:(const nested_exception &)
std::nested_exception::rethrow_nested	d:/include/c++/14/bits/nested_exception.h	/^    rethrow_nested() const$/;"	f	class:std::nested_exception	typeref:typename:void	access:public	signature:() const
std::nested_exception::~nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    virtual ~nested_exception() noexcept;$/;"	p	class:std::nested_exception	access:public	signature:()
std::next	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    next(_InputIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _InputIterator	signature:(_InputIterator __x,typename iterator_traits<_InputIterator>::difference_type __n=1)
std::noboolalpha	d:/include/c++/14/bits/ios_base.h	/^  noboolalpha(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowbase	d:/include/c++/14/bits/ios_base.h	/^  noshowbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpoint	d:/include/c++/14/bits/ios_base.h	/^  noshowpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noshowpos	d:/include/c++/14/bits/ios_base.h	/^  noshowpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::noskipws	d:/include/c++/14/bits/ios_base.h	/^  noskipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::not1	d:/include/c++/14/bits/stl_function.h	/^    not1(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate & __pred)
std::not2	d:/include/c++/14/bits/stl_function.h	/^    not2(const _Predicate& __pred)$/;"	f	namespace:std	signature:(const _Predicate & __pred)
std::not_equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct not_equal_to : public binary_function<_Tp, _Tp, bool>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,bool>
std::not_equal_to	d:/include/c++/14/bits/stl_function.h	/^    struct not_equal_to<void>$/;"	s	namespace:std
std::not_equal_to::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::not_equal_to	typeref:typename:__is_transparent	access:public
std::not_equal_to::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::not_equal_to	typeref:typename:auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::not_equal_to::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::not_equal_to	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::nounitbuf	d:/include/c++/14/bits/ios_base.h	/^  nounitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::nouppercase	d:/include/c++/14/bits/ios_base.h	/^  nouppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::num_get	d:/include/c++/14/bits/locale_facets.h	/^    class num_get : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::num_get::_M_extract_float	d:/include/c++/14/bits/locale_facets.h	/^      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,string &) const
std::num_get::_M_extract_int	d:/include/c++/14/bits/locale_facets.h	/^	_M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:_GLIBCXX_DEFAULT_ABI_TAG iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,_ValueT &) const
std::num_get::_M_find	d:/include/c++/14/bits/locale_facets.h	/^	_M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 * __zero,size_t __len,_CharT2 __c) const
std::num_get::_M_find	d:/include/c++/14/bits/locale_facets.h	/^	_M_find(const _CharT2*, size_t __len, _CharT2 __c) const$/;"	f	class:std::num_get	typeref:typename:__gnu_cxx::__enable_if<__is_char<_CharT2>::__value,int>::__type	access:protected	signature:(const _CharT2 *,size_t __len,_CharT2 __c) const
std::num_get::__do_get	d:/include/c++/14/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,__ibm128 &) const
std::num_get::__do_get	d:/include/c++/14/bits/locale_facets.h	/^      __do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
std::num_get::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::num_get	typeref:typename:_CharT	access:public
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type __beg, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type __beg,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,bool &) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, float&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,float &) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, void*&) const;$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,void * &) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,double &) const
std::num_get::do_get	d:/include/c++/14/bits/locale_facets.h	/^      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&,$/;"	p	class:std::num_get	typeref:typename:iter_type	access:protected	signature:(iter_type,iter_type,ios_base &,ios_base::iostate &,long double &) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,bool & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,double & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,float & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long double & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,long long & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned int & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned long long & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,unsigned short & __v) const
std::num_get::get	d:/include/c++/14/bits/locale_facets.h	/^      get(iter_type __in, iter_type __end, ios_base& __io,$/;"	f	class:std::num_get	typeref:typename:iter_type	access:public	signature:(iter_type __in,iter_type __end,ios_base & __io,ios_base::iostate & __err,void * & __v) const
std::num_get::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::num_get	typeref:typename:locale::id	access:public
std::num_get::iter_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _InIter			iter_type;$/;"	t	class:std::num_get	typeref:typename:_InIter	access:public
std::num_get::num_get	d:/include/c++/14/bits/locale_facets.h	/^      num_get(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_get	access:public	signature:(size_t __refs=0)
std::num_get::~num_get	d:/include/c++/14/bits/locale_facets.h	/^      virtual ~num_get() { }$/;"	f	class:std::num_get	access:protected	signature:()
std::num_get<_CharT, _InIter>::id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id num_get<_CharT, _InIter>::id;$/;"	m	class:std::num_get<_CharT, _InIter>	typeref:typename:locale::id
std::num_put	d:/include/c++/14/bits/locale_facets.h	/^    class num_put : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::num_put::_M_group_float	d:/include/c++/14/bits/locale_facets.h	/^      _M_group_float(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,const char_type * __p,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_group_int	d:/include/c++/14/bits/locale_facets.h	/^      _M_group_int(const char* __grouping, size_t __grouping_size,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(const char * __grouping,size_t __grouping_size,char_type __sep,ios_base & __io,char_type * __new,char_type * __cs,int & __len) const
std::num_put::_M_insert_float	d:/include/c++/14/bits/locale_facets.h	/^	_M_insert_float(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,char __mod,_ValueT __v) const
std::num_put::_M_insert_int	d:/include/c++/14/bits/locale_facets.h	/^	_M_insert_int(iter_type, ios_base& __io, char_type __fill,$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base & __io,char_type __fill,_ValueT __v) const
std::num_put::_M_pad	d:/include/c++/14/bits/locale_facets.h	/^      _M_pad(char_type __fill, streamsize __w, ios_base& __io,$/;"	p	class:std::num_put	typeref:typename:void	access:protected	signature:(char_type __fill,streamsize __w,ios_base & __io,char_type * __new,const char_type * __cs,int & __len) const
std::num_put::__do_put	d:/include/c++/14/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, __ibm128) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,__ibm128) const
std::num_put::__do_put	d:/include/c++/14/bits/locale_facets.h	/^      __do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
std::num_put::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT		char_type;$/;"	t	class:std::num_put	typeref:typename:_CharT	access:public
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, const void*) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,const void *) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,double) const
std::num_put::do_put	d:/include/c++/14/bits/locale_facets.h	/^      do_put(iter_type, ios_base&, char_type, long double) const;$/;"	p	class:std::num_put	typeref:typename:iter_type	access:protected	signature:(iter_type,ios_base &,char_type,long double) const
std::num_put::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id		id;$/;"	m	class:std::num_put	typeref:typename:locale::id	access:public
std::num_put::iter_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _OutIter		iter_type;$/;"	t	class:std::num_put	typeref:typename:_OutIter	access:public
std::num_put::num_put	d:/include/c++/14/bits/locale_facets.h	/^      num_put(size_t __refs = 0) : facet(__refs) { }$/;"	f	class:std::num_put	access:public	signature:(size_t __refs=0)
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,bool __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, double __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,double __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill, long long __v) const$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long long __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,const void * __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,long double __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long __v) const
std::num_put::put	d:/include/c++/14/bits/locale_facets.h	/^      put(iter_type __s, ios_base& __io, char_type __fill,$/;"	f	class:std::num_put	typeref:typename:iter_type	access:public	signature:(iter_type __s,ios_base & __io,char_type __fill,unsigned long long __v) const
std::num_put::~num_put	d:/include/c++/14/bits/locale_facets.h	/^      ~num_put() { }$/;"	f	class:std::num_put	access:protected	signature:()
std::num_put<_CharT, _OutIter>::id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id num_put<_CharT, _OutIter>::id;$/;"	m	class:std::num_put<_CharT, _OutIter>	typeref:typename:locale::id
std::numpunct	d:/include/c++/14/bits/locale_facets.h	/^    class numpunct : public locale::facet$/;"	c	namespace:std	inherits:locale::facet
std::numpunct::_M_data	d:/include/c++/14/bits/locale_facets.h	/^      __cache_type*			_M_data;$/;"	m	class:std::numpunct	typeref:typename:__cache_type *	access:protected
std::numpunct::_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^      _M_initialize_numpunct(__c_locale __cloc = 0);$/;"	p	class:std::numpunct	typeref:typename:void	access:protected	signature:(__c_locale __cloc=0)
std::numpunct::_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::_M_initialize_numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);$/;"	p	class:std::numpunct	typeref:typename:void	signature:(__c_locale __cloc)
std::numpunct::__cache_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef __numpunct_cache<_CharT>  __cache_type;$/;"	t	class:std::numpunct	typeref:typename:__numpunct_cache<_CharT>	access:public
std::numpunct::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct	typeref:typename:_CharT	access:public
std::numpunct::decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::do_decimal_point	d:/include/c++/14/bits/locale_facets.h	/^      do_decimal_point() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_falsename	d:/include/c++/14/bits/locale_facets.h	/^      do_falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::do_grouping	d:/include/c++/14/bits/locale_facets.h	/^      do_grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:protected	signature:() const
std::numpunct::do_thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      do_thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:protected	signature:() const
std::numpunct::do_truename	d:/include/c++/14/bits/locale_facets.h	/^      do_truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:protected	signature:() const
std::numpunct::falsename	d:/include/c++/14/bits/locale_facets.h	/^      falsename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::grouping	d:/include/c++/14/bits/locale_facets.h	/^      grouping() const$/;"	f	class:std::numpunct	typeref:typename:string	access:public	signature:() const
std::numpunct::id	d:/include/c++/14/bits/locale_facets.h	/^      static locale::id			id;$/;"	m	class:std::numpunct	typeref:typename:locale::id	access:public
std::numpunct::numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(__c_locale __cloc, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__c_locale __cloc,size_t __refs=0)
std::numpunct::numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(__cache_type* __cache, size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(__cache_type * __cache,size_t __refs=0)
std::numpunct::numpunct	d:/include/c++/14/bits/locale_facets.h	/^      numpunct(size_t __refs = 0)$/;"	f	class:std::numpunct	access:public	signature:(size_t __refs=0)
std::numpunct::string_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
std::numpunct::thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
std::numpunct::truename	d:/include/c++/14/bits/locale_facets.h	/^      truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
std::numpunct::~numpunct	d:/include/c++/14/bits/locale_facets.h	/^      ~numpunct();$/;"	p	class:std::numpunct	access:protected	signature:()
std::numpunct::~numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	signature:()
std::numpunct::~numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	signature:()
std::numpunct<_CharT>::id	d:/include/c++/14/bits/locale_facets.h	/^    locale::id numpunct<_CharT>::id;$/;"	m	class:std::numpunct<_CharT>	typeref:typename:locale::id
std::numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^    class numpunct_byname : public numpunct<_CharT>$/;"	c	namespace:std	inherits:numpunct<_CharT>
std::numpunct_byname::char_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef _CharT			char_type;$/;"	t	class:std::numpunct_byname	typeref:typename:_CharT	access:public
std::numpunct_byname::numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      numpunct_byname(const char* __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const char * __s,size_t __refs=0)
std::numpunct_byname::numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      numpunct_byname(const string& __s, size_t __refs = 0)$/;"	f	class:std::numpunct_byname	access:public	signature:(const string & __s,size_t __refs=0)
std::numpunct_byname::string_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
std::numpunct_byname::~numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname	access:protected	signature:()
std::oct	d:/include/c++/14/bits/ios_base.h	/^  oct(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::operator !=	d:/include/c++/14/bits/allocator.h	/^      operator!=(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
std::operator !=	d:/include/c++/14/bits/allocator.h	/^    operator!=(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator !=	d:/include/c++/14/bits/basic_string.h	/^    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator !=	d:/include/c++/14/bits/new_allocator.h	/^	operator!=(const __new_allocator&, const __new_allocator<_Up>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __new_allocator &,const __new_allocator<_Up> &)
std::operator !=	d:/include/c++/14/bits/postypes.h	/^    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator !=	d:/include/c++/14/bits/shared_ptr.h	/^    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
std::operator !=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator !=	d:/include/c++/14/bits/stl_iterator.h	/^    operator!=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator !=	d:/include/c++/14/bits/stl_pair.h	/^    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator !=	d:/include/c++/14/bits/streambuf_iterator.h	/^    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator !=	d:/include/c++/14/bits/unique_ptr.h	/^    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator &	d:/include/c++/14/bits/atomic_base.h	/^  operator&(memory_order __m, __memory_order_modifier __mod) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m,__memory_order_modifier __mod)
std::operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator &	d:/include/c++/14/bits/ios_base.h	/^  operator&(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator &=	d:/include/c++/14/bits/ios_base.h	/^  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(_CharT __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(_CharT __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,_CharT __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const _CharT * __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(basic_string<_CharT,_Traits,_Alloc> && __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const _CharT * __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,_CharT __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> && __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator +	d:/include/c++/14/bits/basic_string.h	/^    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string<_CharT,_Traits,_Alloc>	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(iter_difference_t<_It> __n, const counted_iterator& __x)$/;"	f	namespace:std	typeref:typename:counted_iterator	signature:(iter_difference_t<_It> __n,const counted_iterator & __x)
std::operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(const basic_const_iterator& __i, difference_type __n)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(const basic_const_iterator & __i,difference_type __n)
std::operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(difference_type __n, const basic_const_iterator& __i)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(difference_type __n,const basic_const_iterator & __i)
std::operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename move_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR move_iterator<_Iterator>	signature:(typename move_iterator<_Iterator>::difference_type __n,const move_iterator<_Iterator> & __x)
std::operator +	d:/include/c++/14/bits/stl_iterator.h	/^    operator+(typename reverse_iterator<_Iterator>::difference_type __n,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator<_Iterator>	signature:(typename reverse_iterator<_Iterator>::difference_type __n,const reverse_iterator<_Iterator> & __x)
std::operator +::_Alloc_traits::is_always_equal	d:/include/c++/14/bits/basic_string.h	/^      if _GLIBCXX17_CONSTEXPR (typename _Alloc_traits::is_always_equal{})$/;"	m	class:std::operator +::_Alloc_traits	typeref:meta:typename	file:
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It2>	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^	operator-(const move_sentinel<_Sent>& __x, const move_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_Iterator>	signature:(const move_sentinel<_Sent> & __x,const move_iterator & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator- [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It2> iter_difference_t<_It2>	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const _Sent& __x, const basic_const_iterator& __y)$/;"	f	namespace:std	typeref:typename:requires sized_sentinel_for<_Sent,_It> difference_type	signature:(const _Sent & __x,const basic_const_iterator & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(const counted_iterator & __x,default_sentinel_t)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(default_sentinel_t, const counted_iterator& __y)$/;"	f	namespace:std	typeref:typename:iter_difference_t<_It>	signature:(default_sentinel_t,const counted_iterator & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const basic_const_iterator& __i, difference_type __n)$/;"	f	namespace:std	typeref:typename:basic_const_iterator	signature:(const basic_const_iterator & __i,difference_type __n)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype(__x.base ()-__y.base ())	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_Iterator>::difference_type	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:decltype(__y.base ()-__x.base ())	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator -	d:/include/c++/14/bits/stl_iterator.h	/^    operator-(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:reverse_iterator<_IteratorL>::difference_type	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <	d:/include/c++/14/bits/basic_string.h	/^    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator <	d:/include/c++/14/bits/shared_ptr.h	/^    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(const __shared_ptr<_Tp, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,const __shared_ptr<_Up,_Lp> & __b)
std::operator <	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^      operator<(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	d:/include/c++/14/bits/stl_iterator.h	/^    operator<(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <	d:/include/c++/14/bits/stl_pair.h	/^    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator <	d:/include/c++/14/bits/unique_ptr.h	/^    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator <<	d:/include/c++/14/bits/basic_string.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator <<	d:/include/c++/14/bits/shared_ptr.h	/^    operator<<(std::basic_ostream<_Ch, _Tr>& __os,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION std::basic_ostream<_Ch,_Tr> &	signature:(std::basic_ostream<_Ch,_Tr> & __os,const __shared_ptr<_Tp,_Lp> & __p)
std::operator <<	d:/include/c++/14/bits/unique_ptr.h	/^    operator<<(basic_ostream<_CharT, _Traits>& __os,$/;"	f	namespace:std	typeref:typename:basic_ostream<_CharT,_Traits> &	signature:(basic_ostream<_CharT,_Traits> & __os,const unique_ptr<_Tp,_Dp> & __p)
std::operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <=	d:/include/c++/14/bits/basic_string.h	/^    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator <=	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
std::operator <=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^      operator<=(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=	d:/include/c++/14/bits/stl_pair.h	/^    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator <=	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator <=>	d:/include/c++/14/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator <=>	d:/include/c++/14/bits/basic_string.h	/^    operator<=>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:auto	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, const _Tp& __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,const _Tp & __y)
std::operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, reference_wrapper __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,reference_wrapper __y)
std::operator <=>	d:/include/c++/14/bits/refwrap.h	/^      operator<=>(reference_wrapper __x, reference_wrapper<const _Tp> __y)$/;"	f	namespace:std	typeref:typename:auto	signature:(reference_wrapper __x,reference_wrapper<const _Tp> __y)
std::operator <=>	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator <=>	d:/include/c++/14/bits/shared_ptr.h	/^    operator<=>(const shared_ptr<_Tp>& __a,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator <=>	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator <=>	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator<=>(const __shared_ptr<_Tp, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const __shared_ptr<_Tp,_Lp> & __a,const __shared_ptr<_Up,_Lp> & __b)
std::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^	operator<=>(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:strong_ordering	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_Iterator>	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_Iterator,_Iterator>	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator <=>	d:/include/c++/14/bits/stl_iterator.h	/^    operator<=>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:compare_three_way_result_t<_IteratorL,_IteratorR>	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator <=>	d:/include/c++/14/bits/stl_pair.h	/^    operator<=>(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y)$/;"	f	namespace:std	typeref:typename:common_comparison_category_t<__detail::__synth3way_t<_T1,_U1>,__detail::__synth3way_t<_T2,_U2>>	signature:(const pair<_T1,_T2> & __x,const pair<_U1,_U2> & __y)
std::operator <=>	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:requires three_way_comparable<typename unique_ptr<_Tp,_Dp>::pointer> _GLIBCXX23_CONSTEXPR compare_three_way_result_t<typename unique_ptr<_Tp,_Dp>::pointer>	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator <=>	d:/include/c++/14/bits/unique_ptr.h	/^    operator<=>(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator ==	d:/include/c++/14/bits/allocator.h	/^      operator==(const allocator&, const allocator&) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator &,const allocator &)
std::operator ==	d:/include/c++/14/bits/allocator.h	/^    operator==(const allocator<_T1>&, const allocator<_T2>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const allocator<_T1> &,const allocator<_T2> &)
std::operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator ==	d:/include/c++/14/bits/basic_string.h	/^    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator ==	d:/include/c++/14/bits/new_allocator.h	/^	operator==(const __new_allocator&, const __new_allocator<_Up>&)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR bool	signature:(const __new_allocator &,const __new_allocator<_Up> &)
std::operator ==	d:/include/c++/14/bits/postypes.h	/^    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)$/;"	f	namespace:std	typeref:typename:bool	signature:(const fpos<_StateT> & __lhs,const fpos<_StateT> & __rhs)
std::operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, const _Tp& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,const _Tp & __y)
std::operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, reference_wrapper __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,reference_wrapper __y)
std::operator ==	d:/include/c++/14/bits/refwrap.h	/^      operator==(reference_wrapper __x, reference_wrapper<const _Tp> __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(reference_wrapper __x,reference_wrapper<const _Tp> __y)
std::operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator ==	d:/include/c++/14/bits/shared_ptr.h	/^    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator==(const __shared_count& __a, const __shared_count& __b) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_count & __a,const __shared_count & __b)
std::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^      operator==(const __weak_count& __a, const __weak_count& __b) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __weak_count & __a,const __weak_count & __b)
std::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
std::operator ==	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^	operator==(const counted_iterator& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,const counted_iterator<_It2> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^	operator==(const move_iterator& __x, const move_sentinel<_Sent>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const move_iterator & __x,const move_sentinel<_Sent> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator== [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> && equality_comparable_with<_It,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator== [[nodiscard]] (const common_iterator& __x,$/;"	f	namespace:std	typeref:typename:requires sentinel_for<_Sent,_It2> bool	signature:(const common_iterator & __x,const common_iterator<_It2,_Sent2> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^      operator==(const counted_iterator& __x, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const counted_iterator & __x,default_sentinel_t)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator ==	d:/include/c++/14/bits/stl_iterator.h	/^    operator==(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator ==	d:/include/c++/14/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator ==	d:/include/c++/14/bits/stl_pair.h	/^    operator==(const pair<_T1, _T2>& __x, const pair<_U1, _U2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_U1,_U2> & __y)
std::operator ==	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator==(const istreambuf_iterator& __i, default_sentinel_t)$/;"	f	namespace:std	typeref:typename:bool	signature:(const istreambuf_iterator & __i,default_sentinel_t)
std::operator ==	d:/include/c++/14/bits/streambuf_iterator.h	/^    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const istreambuf_iterator<_CharT,_Traits> & __a,const istreambuf_iterator<_CharT,_Traits> & __b)
std::operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator ==	d:/include/c++/14/bits/unique_ptr.h	/^    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >	d:/include/c++/14/bits/basic_string.h	/^    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator >	d:/include/c++/14/bits/shared_ptr.h	/^    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
std::operator >	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^      operator>(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >	d:/include/c++/14/bits/stl_iterator.h	/^    operator>(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >	d:/include/c++/14/bits/stl_pair.h	/^    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator >	d:/include/c++/14/bits/unique_ptr.h	/^    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const _CharT* __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const _CharT * __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const _CharT * __rhs)
std::operator >=	d:/include/c++/14/bits/basic_string.h	/^    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const basic_string<_CharT,_Traits,_Alloc> & __lhs,const basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(const shared_ptr<_Tp>& __a, const shared_ptr<_Up>& __b) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,const shared_ptr<_Up> & __b)
std::operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(const shared_ptr<_Tp> & __a,nullptr_t)
std::operator >=	d:/include/c++/14/bits/shared_ptr.h	/^    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const shared_ptr<_Tp> & __a)
std::operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp,_Lp> & __a,nullptr_t)
std::operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,$/;"	f	namespace:std	typeref:typename:bool	signature:(const __shared_ptr<_Tp1,_Lp> & __a,const __shared_ptr<_Tp2,_Lp> & __b)
std::operator >=	d:/include/c++/14/bits/shared_ptr_base.h	/^    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept$/;"	f	namespace:std	typeref:typename:bool	signature:(nullptr_t,const __shared_ptr<_Tp,_Lp> & __a)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^      operator>=(const _It2& __x, const basic_const_iterator<_It3>& __y)$/;"	f	namespace:std	typeref:typename:bool	signature:(const _It2 & __x,const basic_const_iterator<_It3> & __y)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const move_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_Iterator> & __x,const move_iterator<_Iterator> & __y)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const move_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR bool	signature:(const move_iterator<_IteratorL> & __x,const move_iterator<_IteratorR> & __y)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_Iterator>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_Iterator> & __x,const reverse_iterator<_Iterator> & __y)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >=	d:/include/c++/14/bits/stl_iterator.h	/^    operator>=(const reverse_iterator<_IteratorL>& __x,$/;"	f	namespace:std	typeref:typename:bool	signature:(const reverse_iterator<_IteratorL> & __x,const reverse_iterator<_IteratorR> & __y)
std::operator >=	d:/include/c++/14/bits/stl_pair.h	/^    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_CONSTEXPR bool	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,nullptr_t)
std::operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(const unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX23_CONSTEXPR bool	signature:(const unique_ptr<_Tp,_Dp> & __x,const unique_ptr<_Up,_Ep> & __y)
std::operator >=	d:/include/c++/14/bits/unique_ptr.h	/^    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD bool	signature:(nullptr_t,const unique_ptr<_Tp,_Dp> & __x)
std::operator >>	d:/include/c++/14/bits/basic_string.h	/^    operator>>(basic_istream<_CharT, _Traits>& __is,$/;"	p	namespace:std	typeref:typename:basic_istream<_CharT,_Traits> &	signature:(basic_istream<_CharT,_Traits> & __is,basic_string<_CharT,_Traits,_Alloc> & __str)
std::operator >>	d:/include/c++/14/bits/basic_string.h	/^    operator>>(basic_istream<char>& __is, basic_string<char>& __str);$/;"	p	namespace:std	typeref:typename:basic_istream<char> &	signature:(basic_istream<char> & __is,basic_string<char> & __str)
std::operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator ^	d:/include/c++/14/bits/ios_base.h	/^  operator^(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator ^=	d:/include/c++/14/bits/ios_base.h	/^  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator |	d:/include/c++/14/bits/atomic_base.h	/^  operator|(memory_order __m, __memory_order_modifier __mod) noexcept$/;"	f	namespace:std	typeref:typename:memory_order	signature:(memory_order __m,__memory_order_modifier __mod)
std::operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a,_Ios_Fmtflags __b)
std::operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Iostate __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a,_Ios_Iostate __b)
std::operator |	d:/include/c++/14/bits/ios_base.h	/^  operator|(_Ios_Openmode __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a,_Ios_Openmode __b)
std::operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Fmtflags &	signature:(_Ios_Fmtflags & __a,_Ios_Fmtflags __b)
std::operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Iostate &	signature:(_Ios_Iostate & __a,_Ios_Iostate __b)
std::operator |=	d:/include/c++/14/bits/ios_base.h	/^  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX14_CONSTEXPR const _Ios_Openmode &	signature:(_Ios_Openmode & __a,_Ios_Openmode __b)
std::operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Fmtflags __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Fmtflags	signature:(_Ios_Fmtflags __a)
std::operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Iostate __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Iostate	signature:(_Ios_Iostate __a)
std::operator ~	d:/include/c++/14/bits/ios_base.h	/^  operator~(_Ios_Openmode __a) _GLIBCXX_NOTHROW$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX_CONSTEXPR _Ios_Openmode	signature:(_Ios_Openmode __a)
std::ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^    class ostreambuf_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::ostreambuf_iterator::_M_failed	d:/include/c++/14/bits/streambuf_iterator.h	/^      bool		_M_failed;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:bool	access:private
std::ostreambuf_iterator::_M_put	d:/include/c++/14/bits/streambuf_iterator.h	/^      _M_put(const _CharT* __ws, streamsize __len)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(const _CharT * __ws,streamsize __len)
std::ostreambuf_iterator::_M_sbuf	d:/include/c++/14/bits/streambuf_iterator.h	/^      streambuf_type*	_M_sbuf;$/;"	m	class:std::ostreambuf_iterator	typeref:typename:streambuf_type *	access:private
std::ostreambuf_iterator::char_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _CharT			       char_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_CharT	access:public
std::ostreambuf_iterator::difference_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      using difference_type = ptrdiff_t;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:ptrdiff_t	access:public
std::ostreambuf_iterator::failed	d:/include/c++/14/bits/streambuf_iterator.h	/^      failed() const _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD bool	access:public	signature:() const
std::ostreambuf_iterator::operator *	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator*()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:_GLIBCXX_NODISCARD ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++()$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:()
std::ostreambuf_iterator::operator ++	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator++(int)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(int)
std::ostreambuf_iterator::operator =	d:/include/c++/14/bits/streambuf_iterator.h	/^      operator=(_CharT __c)$/;"	f	class:std::ostreambuf_iterator	typeref:typename:ostreambuf_iterator &	access:public	signature:(_CharT __c)
std::ostreambuf_iterator::ostream_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_ostream<_CharT, _Traits>   ostream_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_ostream<_CharT,_Traits>	access:public
std::ostreambuf_iterator::ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator() noexcept$/;"	f	class:std::ostreambuf_iterator	access:public	signature:()
std::ostreambuf_iterator::ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator(ostream_type& __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(ostream_type & __s)
std::ostreambuf_iterator::ostreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ostreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::ostreambuf_iterator	access:public	signature:(streambuf_type * __s)
std::ostreambuf_iterator::streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
std::ostreambuf_iterator::traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _Traits			       traits_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
std::output_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct output_iterator_tag { };$/;"	s	namespace:std
std::owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<shared_ptr<_Tp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<shared_ptr<_Tp>,weak_ptr<_Tp>>
std::owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<void> : _Sp_owner_less<void, void>$/;"	s	namespace:std	inherits:_Sp_owner_less<void,void>
std::owner_less	d:/include/c++/14/bits/shared_ptr.h	/^    struct owner_less<weak_ptr<_Tp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<weak_ptr<_Tp>,shared_ptr<_Tp>>
std::owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct owner_less<__shared_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<__shared_ptr<_Tp,_Lp>,__weak_ptr<_Tp,_Lp>>
std::owner_less	d:/include/c++/14/bits/shared_ptr_base.h	/^    struct owner_less<__weak_ptr<_Tp, _Lp>>$/;"	s	namespace:std	inherits:_Sp_owner_less<__weak_ptr<_Tp,_Lp>,__shared_ptr<_Tp,_Lp>>
std::pair	d:/include/c++/14/bits/stl_pair.h	/^    requires requires { typename pair<common_reference_t<_TQual<_T1>, _UQual<_U1>>,$/;"	v	namespace:std	typeref:meta:typename
std::pair	d:/include/c++/14/bits/stl_pair.h	/^    requires requires { typename pair<common_type_t<_T1, _U1>, common_type_t<_T2, _U2>>; }$/;"	v	namespace:std	typeref:meta:typename
std::pair	d:/include/c++/14/bits/stl_pair.h	/^    struct pair$/;"	s	namespace:std	inherits:__pair_base<_T1,_T2>
std::pair	d:/include/c++/14/bits/stl_pair.h	/^  template<typename _T1, typename _T2> pair(_T1, _T2) -> pair<_T1, _T2>;$/;"	p	namespace:std	signature:(_T1,_T2)
std::pair::_S_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_assignable_from_tuple_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_assignable_from_tuple_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_const_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_const_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_const_assignable_from_tuple_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_const_assignable_from_tuple_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_constructible	d:/include/c++/14/bits/stl_pair.h	/^	_S_constructible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_constructible_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_constructible_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_convertible	d:/include/c++/14/bits/stl_pair.h	/^	_S_convertible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_convertible_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_convertible_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_dangles	d:/include/c++/14/bits/stl_pair.h	/^	_S_dangles()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_dangles_from_pair_like	d:/include/c++/14/bits/stl_pair.h	/^	_S_dangles_from_pair_like()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_nothrow_assignable	d:/include/c++/14/bits/stl_pair.h	/^	_S_nothrow_assignable()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::_S_nothrow_constructible	d:/include/c++/14/bits/stl_pair.h	/^	_S_nothrow_constructible()$/;"	f	struct:std::pair	typeref:typename:bool	access:private	signature:()
std::pair::first	d:/include/c++/14/bits/stl_pair.h	/^      _T1 first;                 \/\/\/< The first member$/;"	m	struct:std::pair	typeref:typename:_T1	access:public
std::pair::first_type	d:/include/c++/14/bits/stl_pair.h	/^      typedef _T1 first_type;    \/\/\/< The type of the `first` member$/;"	t	struct:std::pair	typeref:typename:_T1	access:public
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(_UPair&& __p) const$/;"	f	struct:std::pair	typeref:typename:requires (_S_const_assignable_from_tuple_like<_UPair> ())const pair &	access:public	signature:(_UPair && __p) const
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(_UPair&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_assignable_from_tuple_like<_UPair> ())pair &	access:public	signature:(_UPair && __p)
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(const pair<_U1,_U2> & __p) const
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(pair<_U1,_U2> && __p) const
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^	operator=(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(pair<_U1,_U2> && __p)
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(const pair& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(const pair & __p) const
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(const pair& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair & __p)
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(pair&& __p) const$/;"	f	struct:std::pair	typeref:typename:const pair &	access:public	signature:(pair && __p) const
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^      operator=(pair&& __p)$/;"	f	struct:std::pair	typeref:typename:pair &	access:public	signature:(pair && __p)
std::pair::operator =	d:/include/c++/14/bits/stl_pair.h	/^      pair& operator=(const pair&) = delete;$/;"	p	struct:std::pair	typeref:typename:pair &	access:public	signature:(const pair &)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_U1&& __x, _U2&& __y)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(_U1 && __x,_U2 && __y)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_U1&&, _U2&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(_U1 &&,_U2 &&)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_UPair&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible_from_pair_like<_UPair> ())&& (!_S_dangles_from_pair_like<_UPair> ())(!_S_convertible_from_pair_like<_UPair> ())	access:public	signature:(_UPair && __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(_UPair&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible_from_pair_like<_UPair> ())&& (_S_dangles_from_pair_like<_UPair> ())(!_S_convertible_from_pair_like<_UPair> ())	access:public	signature:(_UPair &&)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1 &,const _U2 &> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<const _U1 &,const _U2 &> ())	access:public	signature:(const pair<_U1,_U2> & __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1,const _U2> ())&& (!_S_dangles<const _U1,const _U2> ())(!_S_convertible<const _U1,const _U2> ())	access:public	signature:(const pair<_U1,_U2> && __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1,const _U2> ())&& (_S_dangles<const _U1,const _U2> ())(!_S_convertible<const _U1,const _U2> ())	access:public	signature:(const pair<_U1,_U2> &&)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(const pair<_U1, _U2>&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<const _U1 &,const _U2 &> ())&& (_S_dangles<const _U1 &,const _U2 &> ())(!_S_convertible<const _U1 &,const _U2 &> ())	access:public	signature:(const pair<_U1,_U2> &)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1 &,_U2 &> ())&& (!_S_dangles<_U1 &,_U2 &> ())(!_S_convertible<_U1 &,_U2 &> ())	access:public	signature:(pair<_U1,_U2> & __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&& __p)$/;"	f	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (!_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(pair<_U1,_U2> && __p)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1,_U2> ())&& (_S_dangles<_U1,_U2> ())(!_S_convertible<_U1,_U2> ())	access:public	signature:(pair<_U1,_U2> &&)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(pair<_U1, _U2>&) = delete;$/;"	p	struct:std::pair	typeref:typename:requires (_S_constructible<_U1 &,_U2 &> ())&& (_S_dangles<_U1 &,_U2 &> ())(!_S_convertible<_U1 &,_U2 &> ())	access:public	signature:(pair<_U1,_U2> &)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(piecewise_construct_t, tuple<_Args1...>, tuple<_Args2...>);$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(piecewise_construct_t,tuple<_Args1...>,tuple<_Args2...>)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^	pair(tuple<_Args1...>&, tuple<_Args2...>&,$/;"	p	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR	access:private	signature:(tuple<_Args1...> &,tuple<_Args2...> &,_Index_tuple<_Indexes1...>,_Index_tuple<_Indexes2...>)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      constexpr pair(const pair&) = default;	\/\/\/< Copy constructor$/;"	p	struct:std::pair	access:public	signature:(const pair &)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      constexpr pair(pair&&) = default;		\/\/\/< Move constructor$/;"	p	struct:std::pair	access:public	signature:(pair &&)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      pair() : first(), second() { }$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      pair()$/;"	f	struct:std::pair	access:public	signature:()
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      pair(const _T1& __a, const _T2& __b)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __a,const _T2 & __b)
std::pair::pair	d:/include/c++/14/bits/stl_pair.h	/^      pair(const _T1& __x, const _T2& __y)$/;"	f	struct:std::pair	access:public	signature:(const _T1 & __x,const _T2 & __y)
std::pair::second	d:/include/c++/14/bits/stl_pair.h	/^      _T2 second;                \/\/\/< The second member$/;"	m	struct:std::pair	typeref:typename:_T2	access:public
std::pair::second_type	d:/include/c++/14/bits/stl_pair.h	/^      typedef _T2 second_type;   \/\/\/< The type of the `second` member$/;"	t	struct:std::pair	typeref:typename:_T2	access:public
std::pair::swap	d:/include/c++/14/bits/stl_pair.h	/^      swap(const pair& __p) const$/;"	f	struct:std::pair	typeref:typename:void	access:public	signature:(const pair & __p) const
std::pair::swap	d:/include/c++/14/bits/stl_pair.h	/^      swap(pair& __p)$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(pair & __p)
std::piecewise_construct	d:/include/c++/14/bits/stl_pair.h	/^  _GLIBCXX17_INLINE constexpr piecewise_construct_t piecewise_construct =$/;"	v	namespace:std	typeref:typename:_GLIBCXX17_INLINE piecewise_construct_t
std::piecewise_construct_t	d:/include/c++/14/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	s	namespace:std
std::piecewise_construct_t::piecewise_construct_t	d:/include/c++/14/bits/stl_pair.h	/^  struct piecewise_construct_t { explicit piecewise_construct_t() = default; };$/;"	p	struct:std::piecewise_construct_t	access:public	signature:()
std::plus	d:/include/c++/14/bits/stl_function.h	/^    struct plus : public binary_function<_Tp, _Tp, _Tp>$/;"	s	namespace:std	inherits:binary_function<_Tp,_Tp,_Tp>
std::plus	d:/include/c++/14/bits/stl_function.h	/^    struct plus<void>$/;"	s	namespace:std
std::plus::is_transparent	d:/include/c++/14/bits/stl_function.h	/^      typedef __is_transparent is_transparent;$/;"	t	struct:std::plus	typeref:typename:__is_transparent	access:public
std::plus::operator ()	d:/include/c++/14/bits/stl_function.h	/^	operator()(_Tp&& __t, _Up&& __u) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR auto	access:public	signature:(_Tp && __t,_Up && __u) const
std::plus::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const _Tp& __x, const _Tp& __y) const$/;"	f	struct:std::plus	typeref:typename:_GLIBCXX14_CONSTEXPR _Tp	access:public	signature:(const _Tp & __x,const _Tp & __y) const
std::pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^    class pointer_to_binary_function$/;"	c	namespace:std	inherits:binary_function<_Arg1,_Arg2,_Result>
std::pointer_to_binary_function::_M_ptr	d:/include/c++/14/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg1, _Arg2);$/;"	m	class:std::pointer_to_binary_function	typeref:typename:_Result (*)(_Arg1,_Arg2)	access:protected
std::pointer_to_binary_function::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Arg1 __x, _Arg2 __y) const$/;"	f	class:std::pointer_to_binary_function	typeref:typename:_Result	access:public	signature:(_Arg1 __x,_Arg2 __y) const
std::pointer_to_binary_function::pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_binary_function() { }$/;"	f	class:std::pointer_to_binary_function	access:public	signature:()
std::pointer_to_binary_function::pointer_to_binary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))$/;"	f	class:std::pointer_to_binary_function	access:public	signature:(_Result (* __x)(_Arg1,_Arg2))
std::pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^    class pointer_to_unary_function : public unary_function<_Arg, _Result>$/;"	c	namespace:std	inherits:unary_function<_Arg,_Result>
std::pointer_to_unary_function::_M_ptr	d:/include/c++/14/bits/stl_function.h	/^      _Result (*_M_ptr)(_Arg);$/;"	m	class:std::pointer_to_unary_function	typeref:typename:_Result (*)(_Arg)	access:protected
std::pointer_to_unary_function::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(_Arg __x) const$/;"	f	class:std::pointer_to_unary_function	typeref:typename:_Result	access:public	signature:(_Arg __x) const
std::pointer_to_unary_function::pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_unary_function() { }$/;"	f	class:std::pointer_to_unary_function	access:public	signature:()
std::pointer_to_unary_function::pointer_to_unary_function	d:/include/c++/14/bits/stl_function.h	/^      pointer_to_unary_function(_Result (*__x)(_Arg))$/;"	f	class:std::pointer_to_unary_function	access:public	signature:(_Result (* __x)(_Arg))
std::pointer_traits	d:/include/c++/14/bits/ptr_traits.h	/^    struct pointer_traits : __ptr_traits_impl<_Ptr, __ptr_traits_elem_t<_Ptr>>$/;"	s	namespace:std	inherits:__ptr_traits_impl<_Ptr,__ptr_traits_elem_t<_Ptr>>
std::pointer_traits	d:/include/c++/14/bits/ptr_traits.h	/^    struct pointer_traits<_Tp*> : __ptr_traits_ptr_to<_Tp*, _Tp>$/;"	s	namespace:std	inherits:__ptr_traits_ptr_to<_Tp*,_Tp>
std::pointer_traits::difference_type	d:/include/c++/14/bits/ptr_traits.h	/^      typedef ptrdiff_t difference_type;$/;"	t	struct:std::pointer_traits	typeref:typename:ptrdiff_t	access:public
std::pointer_traits::element_type	d:/include/c++/14/bits/ptr_traits.h	/^      typedef _Tp  element_type;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp	access:public
std::pointer_traits::pointer	d:/include/c++/14/bits/ptr_traits.h	/^      typedef _Tp* pointer;$/;"	t	struct:std::pointer_traits	typeref:typename:_Tp *	access:public
std::pointer_traits::rebind	d:/include/c++/14/bits/ptr_traits.h	/^      template<typename _Up> using rebind = _Up*;$/;"	t	struct:std::pointer_traits	typeref:typename:_Up *	access:public
std::prev	d:/include/c++/14/bits/stl_iterator_base_funcs.h	/^    prev(_BidirectionalIterator __x, typename$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR _BidirectionalIterator	signature:(_BidirectionalIterator __x,typename iterator_traits<_BidirectionalIterator>::difference_type __n=1)
std::ptr_fun	d:/include/c++/14/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg))$/;"	f	namespace:std	signature:(_Result (* __x)(_Arg))
std::ptr_fun	d:/include/c++/14/bits/stl_function.h	/^    ptr_fun(_Result (*__x)(_Arg1, _Arg2))$/;"	f	namespace:std	signature:(_Result (* __x)(_Arg1,_Arg2))
std::random_access_iterator_tag	d:/include/c++/14/bits/stl_iterator_base_types.h	/^  struct random_access_iterator_tag : public bidirectional_iterator_tag { };$/;"	s	namespace:std	inherits:bidirectional_iterator_tag
std::ranges	d:/include/c++/14/bits/utility.h	/^  namespace ranges::__detail$/;"	n	namespace:std
std::ranges::__detail	d:/include/c++/14/bits/utility.h	/^  namespace ranges::__detail$/;"	n	namespace:std::ranges
std::ranges::__detail::__is_subrange	d:/include/c++/14/bits/utility.h	/^      inline constexpr bool __is_subrange = false;$/;"	v	namespace:std::ranges::__detail	typeref:typename:bool
std::raw_storage_iterator	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^    class _GLIBCXX17_DEPRECATED raw_storage_iterator$/;"	c	namespace:std	inherits:iterator<output_iterator_tag,void,void,void,void>
std::raw_storage_iterator::_M_iter	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      _OutputIterator _M_iter;$/;"	m	class:std::raw_storage_iterator	typeref:typename:_OutputIterator	access:protected
std::raw_storage_iterator::base	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      _OutputIterator base() const { return _M_iter; }$/;"	f	class:std::raw_storage_iterator	typeref:typename:_OutputIterator	access:public	signature:() const
std::raw_storage_iterator::operator *	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator*() { return *this; }$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
std::raw_storage_iterator::operator ++	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator++()$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:()
std::raw_storage_iterator::operator ++	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator++(int)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator	access:public	signature:(int)
std::raw_storage_iterator::operator =	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator=(_Tp&& __element)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(_Tp && __element)
std::raw_storage_iterator::operator =	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      operator=(const _Tp& __element)$/;"	f	class:std::raw_storage_iterator	typeref:typename:raw_storage_iterator &	access:public	signature:(const _Tp & __element)
std::raw_storage_iterator::raw_storage_iterator	d:/include/c++/14/bits/stl_raw_storage_iter.h	/^      raw_storage_iterator(_OutputIterator __x)$/;"	f	class:std::raw_storage_iterator	access:public	signature:(_OutputIterator __x)
std::rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(_Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rbegin ())	signature:(_Container & __cont)
std::rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
std::rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(const _Container& __cont) -> decltype(__cont.rbegin())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rbegin ())	signature:(const _Container & __cont)
std::rbegin	d:/include/c++/14/bits/range_access.h	/^    rbegin(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
std::ref	d:/include/c++/14/bits/refwrap.h	/^    ref(_Tp& __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<_Tp>	signature:(_Tp & __t)
std::ref	d:/include/c++/14/bits/refwrap.h	/^    ref(reference_wrapper<_Tp> __t) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR reference_wrapper<_Tp>	signature:(reference_wrapper<_Tp> __t)
std::ref	d:/include/c++/14/bits/refwrap.h	/^    void ref(const _Tp&&) = delete;$/;"	p	namespace:std	typeref:typename:void	signature:(const _Tp &&)
std::reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^    class reference_wrapper$/;"	c	namespace:std	inherits:_Reference_wrapper_base_memfun<typenameremove_cv<_Tp>::type>
std::reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^    reference_wrapper(_Tp&) -> reference_wrapper<_Tp>;$/;"	p	namespace:std	signature:(_Tp &)
std::reference_wrapper::_M_data	d:/include/c++/14/bits/refwrap.h	/^      _Tp* _M_data;$/;"	m	class:std::reference_wrapper	typeref:typename:_Tp *	access:private
std::reference_wrapper::_S_fun	d:/include/c++/14/bits/refwrap.h	/^      static _Tp* _S_fun(_Tp& __r) noexcept { return std::__addressof(__r); }$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp *	access:private	signature:(_Tp & __r)
std::reference_wrapper::_S_fun	d:/include/c++/14/bits/refwrap.h	/^      static void _S_fun(_Tp&&) = delete;$/;"	p	class:std::reference_wrapper	typeref:typename:void	access:private	signature:(_Tp &&)
std::reference_wrapper::__not_same	d:/include/c++/14/bits/refwrap.h	/^	using __not_same$/;"	t	class:std::reference_wrapper	typeref:typename:enable_if<!is_same<reference_wrapper,_Up2>::value>::type	access:private
std::reference_wrapper::get	d:/include/c++/14/bits/refwrap.h	/^      get() const noexcept$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR _Tp &	access:public	signature:() const
std::reference_wrapper::operator ()	d:/include/c++/14/bits/refwrap.h	/^	operator()(_Args&&... __args) const$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR typename __invoke_result<_Tp &,_Args...>::type	access:public	signature:(_Args &&...__args) const
std::reference_wrapper::operator =	d:/include/c++/14/bits/refwrap.h	/^      operator=(const reference_wrapper&) = default;$/;"	p	class:std::reference_wrapper	typeref:typename:reference_wrapper &	access:public	signature:(const reference_wrapper &)
std::reference_wrapper::operator _Tp&	d:/include/c++/14/bits/refwrap.h	/^      operator _Tp&() const noexcept$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:() const
std::reference_wrapper::reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^	reference_wrapper(_Up&& __uref)$/;"	f	class:std::reference_wrapper	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:(_Up && __uref)
std::reference_wrapper::reference_wrapper	d:/include/c++/14/bits/refwrap.h	/^      reference_wrapper(const reference_wrapper&) = default;$/;"	p	class:std::reference_wrapper	access:public	signature:(const reference_wrapper &)
std::reference_wrapper::type	d:/include/c++/14/bits/refwrap.h	/^      typedef _Tp type;$/;"	t	class:std::reference_wrapper	typeref:typename:_Tp	access:public
std::reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    reinterpret_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
std::reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    reinterpret_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
std::reinterpret_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    reinterpret_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
std::relaxed	d:/include/c++/14/bits/atomic_base.h	/^      relaxed,$/;"	e	enum:std::memory_order	access:public
std::release	d:/include/c++/14/bits/atomic_base.h	/^      release,$/;"	e	enum:std::memory_order	access:public
std::rend	d:/include/c++/14/bits/range_access.h	/^    rend(_Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rend ())	signature:(_Container & __cont)
std::rend	d:/include/c++/14/bits/range_access.h	/^    rend(_Tp (&__arr)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<_Tp * >	signature:(_Tp (& __arr)[_Nm])
std::rend	d:/include/c++/14/bits/range_access.h	/^    rend(const _Container& __cont) -> decltype(__cont.rend())$/;"	f	namespace:std	typeref:typename:decltype(__cont.rend ())	signature:(const _Container & __cont)
std::rend	d:/include/c++/14/bits/range_access.h	/^    rend(initializer_list<_Tp> __il) noexcept$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator<const _Tp * >	signature:(initializer_list<_Tp> __il)
std::rethrow_exception	d:/include/c++/14/bits/exception_ptr.h	/^  void rethrow_exception(exception_ptr) __attribute__ ((__noreturn__));$/;"	p	namespace:std	typeref:typename:void	signature:(exception_ptr)
std::rethrow_if_nested	d:/include/c++/14/bits/nested_exception.h	/^    rethrow_if_nested(const _Ex& __ex)$/;"	f	namespace:std	typeref:typename:void	signature:(const _Ex & __ex)
std::return_temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^    return_temporary_buffer(_Tp* __p)$/;"	f	namespace:std	typeref:typename:_GLIBCXX17_DEPRECATED void	signature:(_Tp * __p)
std::reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    class reverse_iterator$/;"	c	namespace:std	inherits:iterator<typenameiterator_traits<_Iterator>::iterator_category,typenameiterator_traits<_Iterator>::value_type,typenameiterator_traits<_Iterator>::difference_type,typenameiterator_traits<_Iterator>::pointer,typenameiterator_traits<_Iterator>::reference>
std::reverse_iterator::_S_to_pointer	d:/include/c++/14/bits/stl_iterator.h	/^	_S_to_pointer(_Tp __t)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR pointer	access:private	signature:(_Tp __t)
std::reverse_iterator::_S_to_pointer	d:/include/c++/14/bits/stl_iterator.h	/^	_S_to_pointer(_Tp* __p)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR _Tp *	access:private	signature:(_Tp * __p)
std::reverse_iterator::__convertible	d:/include/c++/14/bits/stl_iterator.h	/^	static constexpr bool __convertible = !is_same_v<_Iter, _Iterator>$/;"	m	class:std::reverse_iterator	typeref:typename:bool	access:private
std::reverse_iterator::__tmp	d:/include/c++/14/bits/stl_iterator.h	/^	_Iterator __tmp = current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
std::reverse_iterator::__traits_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef iterator_traits<_Iterator>		__traits_type;$/;"	t	class:std::reverse_iterator	typeref:typename:iterator_traits<_Iterator>	access:protected
std::reverse_iterator::base	d:/include/c++/14/bits/stl_iterator.h	/^      base() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR iterator_type	access:public	signature:() const
std::reverse_iterator::current	d:/include/c++/14/bits/stl_iterator.h	/^      _Iterator current;$/;"	m	class:std::reverse_iterator	typeref:typename:_Iterator	access:protected
std::reverse_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::difference_type	difference_type;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::difference_type	access:public
std::reverse_iterator::difference_type	d:/include/c++/14/bits/stl_iterator.h	/^      using difference_type = iter_difference_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_difference_t<_Iterator>	access:public
std::reverse_iterator::iterator_category	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_category$/;"	t	class:std::reverse_iterator	typeref:typename:__detail::__clamp_iter_cat<typename __traits_type::iterator_category,random_access_iterator_tag>	access:public
std::reverse_iterator::iterator_concept	d:/include/c++/14/bits/stl_iterator.h	/^      using iterator_concept$/;"	t	class:std::reverse_iterator	typeref:typename:__conditional_t<random_access_iterator<_Iterator>,random_access_iterator_tag,bidirectional_iterator_tag>	access:public
std::reverse_iterator::iterator_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef _Iterator					iterator_type;$/;"	t	class:std::reverse_iterator	typeref:typename:_Iterator	access:public
std::reverse_iterator::operator *	d:/include/c++/14/bits/stl_iterator.h	/^      operator*() const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reference	access:public	signature:() const
std::reverse_iterator::operator +	d:/include/c++/14/bits/stl_iterator.h	/^      operator+(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator ++	d:/include/c++/14/bits/stl_iterator.h	/^      operator++(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator +=	d:/include/c++/14/bits/stl_iterator.h	/^      operator+=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator -	d:/include/c++/14/bits/stl_iterator.h	/^      operator-(difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(difference_type __n) const
std::reverse_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:()
std::reverse_iterator::operator --	d:/include/c++/14/bits/stl_iterator.h	/^      operator--(int)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator	access:public	signature:(int)
std::reverse_iterator::operator -=	d:/include/c++/14/bits/stl_iterator.h	/^      operator-=(difference_type __n)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(difference_type __n)
std::reverse_iterator::operator ->	d:/include/c++/14/bits/stl_iterator.h	/^	|| requires(const _Iterator __i) { __i.operator->(); }$/;"	p	class:std::reverse_iterator	typeref:typename:__i.	access:public	signature:()
std::reverse_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^	operator=(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:requires __convertible<_Iter> && assignable_from<_Iterator &,const _Iter &> _GLIBCXX17_CONSTEXPR reverse_iterator &	access:public	signature:(const reverse_iterator<_Iter> & __x)
std::reverse_iterator::operator =	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator& operator=(const reverse_iterator&) = default;$/;"	p	class:std::reverse_iterator	typeref:typename:reverse_iterator &	access:public	signature:(const reverse_iterator &)
std::reverse_iterator::operator []	d:/include/c++/14/bits/stl_iterator.h	/^      operator[](difference_type __n) const$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX17_CONSTEXPR reference	access:public	signature:(difference_type __n) const
std::reverse_iterator::pointer	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::pointer		pointer;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::pointer	access:public
std::reverse_iterator::reference	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::reference		reference;$/;"	t	class:std::reverse_iterator	typeref:typename:__traits_type::reference	access:public
std::reverse_iterator::reference	d:/include/c++/14/bits/stl_iterator.h	/^      using reference = iter_reference_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_reference_t<_Iterator>	access:public
std::reverse_iterator::reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^        reverse_iterator(const reverse_iterator<_Iter>& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:requires __convertible<_Iter> _GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator<_Iter> & __x)
std::reverse_iterator::reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator()$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:()
std::reverse_iterator::reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator(const reverse_iterator& __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(const reverse_iterator & __x)
std::reverse_iterator::reverse_iterator	d:/include/c++/14/bits/stl_iterator.h	/^      reverse_iterator(iterator_type __x)$/;"	f	class:std::reverse_iterator	typeref:typename:_GLIBCXX17_CONSTEXPR	access:public	signature:(iterator_type __x)
std::reverse_iterator::value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
std::right	d:/include/c++/14/bits/ios_base.h	/^  right(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::scientific	d:/include/c++/14/bits/ios_base.h	/^  scientific(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::search	d:/include/c++/14/bits/stl_algobase.h	/^    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_ALGO _GLIBCXX20_CONSTEXPR _ForwardIterator1	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2,_ForwardIterator2 __last2,_BinaryPredicate __predicate)
std::seq_cst	d:/include/c++/14/bits/atomic_base.h	/^      seq_cst$/;"	e	enum:std::memory_order	access:public
std::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    class shared_ptr : public __shared_ptr<_Tp>$/;"	c	namespace:std	inherits:__shared_ptr<_Tp>
std::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    shared_ptr(unique_ptr<_Tp, _Del>) ->  shared_ptr<_Tp>;$/;"	p	namespace:std	signature:(unique_ptr<_Tp,_Del>)
std::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    shared_ptr(weak_ptr<_Tp>) ->  shared_ptr<_Tp>;$/;"	p	namespace:std	signature:(weak_ptr<_Tp>)
std::shared_ptr::_Assignable	d:/include/c++/14/bits/shared_ptr.h	/^	using _Assignable = typename enable_if<$/;"	t	class:std::shared_ptr	typeref:typename:enable_if<is_assignable<__shared_ptr<_Tp> &,_Arg>::value,shared_ptr &>::type	access:private
std::shared_ptr::_Constructible	d:/include/c++/14/bits/shared_ptr.h	/^	using _Constructible = typename enable_if<$/;"	t	class:std::shared_ptr	typeref:typename:enable_if<is_constructible<__shared_ptr<_Tp>,_Args...>::value>::type	access:private
std::shared_ptr::element_type	d:/include/c++/14/bits/shared_ptr.h	/^      using element_type = typename __shared_ptr<_Tp>::element_type;$/;"	t	class:std::shared_ptr	typeref:typename:__shared_ptr<_Tp>::element_type	access:public
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(auto_ptr<_Yp>&& __r)$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<auto_ptr<_Yp>>	access:public	signature:(auto_ptr<_Yp> && __r)
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<const shared_ptr<_Yp> &>	access:public	signature:(const shared_ptr<_Yp> & __r)
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(shared_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<shared_ptr<_Yp>>	access:public	signature:(shared_ptr<_Yp> && __r)
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::shared_ptr	typeref:typename:_Assignable<unique_ptr<_Yp,_Del>>	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(shared_ptr&& __r) noexcept$/;"	f	class:std::shared_ptr	typeref:typename:shared_ptr &	access:public	signature:(shared_ptr && __r)
std::shared_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr& operator=(const shared_ptr&) noexcept = default;$/;"	p	class:std::shared_ptr	typeref:typename:shared_ptr &	access:public	signature:(const shared_ptr &)
std::shared_ptr::shared_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    shared_ptr<_Tp>::shared_ptr(std::auto_ptr<_Tp1>&& __r)$/;"	f	class:std::shared_ptr	signature:(std::auto_ptr<_Tp1> && __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	explicit shared_ptr(const weak_ptr<_Yp>& __r)$/;"	f	class:std::shared_ptr	access:public	signature:(const weak_ptr<_Yp> & __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)$/;"	f	class:std::shared_ptr	access:private	signature:(_Sp_alloc_shared_tag<_Alloc> __tag,_Args &&...__args)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p) : __shared_ptr<_Tp>(__p) { }$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p, _Deleter __d)$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(_Yp* __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::shared_ptr	access:public	signature:(_Yp * __p,_Deleter __d,_Alloc __a)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(auto_ptr<_Yp>&& __r);$/;"	p	class:std::shared_ptr	access:public	signature:(auto_ptr<_Yp> && __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const _Sp_counted_array_base<_Alloc>& __a,$/;"	f	class:std::shared_ptr	access:private	signature:(const _Sp_counted_array_base<_Alloc> & __a,_Init __init=nullptr)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(const shared_ptr<_Yp> & __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(const shared_ptr<_Yp>& __r, element_type* __p) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(const shared_ptr<_Yp> & __r,element_type * __p)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(nullptr_t __p, _Deleter __d)$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(nullptr_t __p, _Deleter __d, _Alloc __a)$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t __p,_Deleter __d,_Alloc __a)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(shared_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr<_Yp> && __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(shared_ptr<_Yp>&& __r, element_type* __p) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr<_Yp> && __r,element_type * __p)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	shared_ptr(unique_ptr<_Yp, _Del>&& __r)$/;"	f	class:std::shared_ptr	access:public	signature:(unique_ptr<_Yp,_Del> && __r)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }$/;"	f	class:std::shared_ptr	access:public	signature:()
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }$/;"	f	class:std::shared_ptr	access:public	signature:(nullptr_t)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(const shared_ptr&) noexcept = default; \/\/\/< Copy constructor$/;"	p	class:std::shared_ptr	access:public	signature:(const shared_ptr &)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(const weak_ptr<_Tp>& __r, std::nothrow_t) noexcept$/;"	f	class:std::shared_ptr	access:private	signature:(const weak_ptr<_Tp> & __r,std::nothrow_t)
std::shared_ptr::shared_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      shared_ptr(shared_ptr&& __r) noexcept$/;"	f	class:std::shared_ptr	access:public	signature:(shared_ptr && __r)
std::shared_ptr::weak_type	d:/include/c++/14/bits/shared_ptr.h	/^      using weak_type = weak_ptr<_Tp>;$/;"	t	class:std::shared_ptr	typeref:typename:weak_ptr<_Tp>	access:public
std::showbase	d:/include/c++/14/bits/ios_base.h	/^  showbase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpoint	d:/include/c++/14/bits/ios_base.h	/^  showpoint(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::showpos	d:/include/c++/14/bits/ios_base.h	/^  showpos(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::size	d:/include/c++/14/bits/range_access.h	/^    size(const _Container& __cont) noexcept(noexcept(__cont.size()))$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::size	d:/include/c++/14/bits/range_access.h	/^    size(const _Tp (&)[_Nm]) noexcept$/;"	f	namespace:std	typeref:typename:size_t	signature:(const _Tp (&)[_Nm])
std::skipws	d:/include/c++/14/bits/ios_base.h	/^  skipws(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::ssize	d:/include/c++/14/bits/range_access.h	/^    ssize(const _Container& __cont)$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Container & __cont)
std::ssize	d:/include/c++/14/bits/range_access.h	/^    ssize(const _Tp (&)[_Num]) noexcept$/;"	f	namespace:std	typeref:typename:ptrdiff_t	signature:(const _Tp (&)[_Num])
std::static_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    static_pointer_cast(const shared_ptr<_Up>& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(const shared_ptr<_Up> & __r)
std::static_pointer_cast	d:/include/c++/14/bits/shared_ptr.h	/^    static_pointer_cast(shared_ptr<_Up>&& __r) noexcept$/;"	f	namespace:std	typeref:typename:shared_ptr<_Tp>	signature:(shared_ptr<_Up> && __r)
std::static_pointer_cast	d:/include/c++/14/bits/shared_ptr_base.h	/^    static_pointer_cast(const __shared_ptr<_Tp1, _Lp>& __r) noexcept$/;"	f	namespace:std	typeref:typename:__shared_ptr<_Tp,_Lp>	signature:(const __shared_ptr<_Tp1,_Lp> & __r)
std::std::__niter_base	d:/include/c++/14/bits/stl_algobase.h	/^    decltype(std::__niter_base(std::declval<_Ite>()))$/;"	p	class:std::std	typeref:typename:_GLIBCXX20_CONSTEXPR decltype() __niter_base (const::__gnu_debug::_Safe_iterator<_Ite,_Seq,std::random_access_iterator_tag> &)noexcept (std::is_nothrow_copy_constructible<_Ite>::value)	signature:(std::declval<_Ite> ())
std::stod	d:/include/c++/14/bits/basic_string.h	/^  stod(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const string & __str,size_t * __idx=0)
std::stod	d:/include/c++/14/bits/basic_string.h	/^  stod(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const wstring & __str,size_t * __idx=0)
std::stof	d:/include/c++/14/bits/basic_string.h	/^  stof(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const string & __str,size_t * __idx=0)
std::stof	d:/include/c++/14/bits/basic_string.h	/^  stof(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const wstring & __str,size_t * __idx=0)
std::stoi	d:/include/c++/14/bits/basic_string.h	/^  stoi(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11 int	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoi	d:/include/c++/14/bits/basic_string.h	/^  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:int	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stol	d:/include/c++/14/bits/basic_string.h	/^  stol(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stol	d:/include/c++/14/bits/basic_string.h	/^  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stold	d:/include/c++/14/bits/basic_string.h	/^  stold(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const string & __str,size_t * __idx=0)
std::stold	d:/include/c++/14/bits/basic_string.h	/^  stold(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const wstring & __str,size_t * __idx=0)
std::stoll	d:/include/c++/14/bits/basic_string.h	/^  stoll(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoll	d:/include/c++/14/bits/basic_string.h	/^  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stoul	d:/include/c++/14/bits/basic_string.h	/^  stoul(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoul	d:/include/c++/14/bits/basic_string.h	/^  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stoull	d:/include/c++/14/bits/basic_string.h	/^  stoull(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
std::stoull	d:/include/c++/14/bits/basic_string.h	/^  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
std::stream	d:/include/c++/14/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	e	enum:std::io_errc	access:public
std::streamoff	d:/include/c++/14/bits/postypes.h	/^  typedef __INT64_TYPE__          streamoff;$/;"	t	namespace:std	typeref:typename:__INT64_TYPE__
std::streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::streamsize	d:/include/c++/14/bits/postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	t	namespace:std	typeref:typename:ptrdiff_t
std::string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char>    string;   $/;"	t	namespace:std	typeref:typename:basic_string<char>
std::swap	d:/include/c++/14/bits/basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
std::swap	d:/include/c++/14/bits/move.h	/^    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__is_swappable<_Tp>::value>::type	signature:(_Tp (& __a)[_Nm],_Tp (& __b)[_Nm])
std::swap	d:/include/c++/14/bits/move.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,is_move_constructible<_Tp>,is_move_assignable<_Tp>>::value>::type	signature:(_Tp & __a,_Tp & __b)
std::swap	d:/include/c++/14/bits/shared_ptr.h	/^    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(shared_ptr<_Tp> & __a,shared_ptr<_Tp> & __b)
std::swap	d:/include/c++/14/bits/shared_ptr.h	/^    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(weak_ptr<_Tp> & __a,weak_ptr<_Tp> & __b)
std::swap	d:/include/c++/14/bits/shared_ptr_base.h	/^    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(__shared_ptr<_Tp,_Lp> & __a,__shared_ptr<_Tp,_Lp> & __b)
std::swap	d:/include/c++/14/bits/shared_ptr_base.h	/^    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(__weak_ptr<_Tp,_Lp> & __a,__weak_ptr<_Tp,_Lp> & __b)
std::swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:requires is_swappable_v<const _T1> && is_swappable_v<const _T2> void	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
std::swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> & __x,pair<_T1,_T2> & __y)
std::swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;$/;"	p	namespace:std	typeref:typename:enable_if<!__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> &,pair<_T1,_T2> &)
std::swap	d:/include/c++/14/bits/unique_ptr.h	/^    swap(unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<__is_swappable<_Dp>::value>::type	signature:(unique_ptr<_Tp,_Dp> & __x,unique_ptr<_Tp,_Dp> & __y)
std::swap	d:/include/c++/14/bits/unique_ptr.h	/^    swap(unique_ptr<_Tp, _Dp>&,$/;"	p	namespace:std	typeref:typename:enable_if<!__is_swappable<_Dp>::value>::type	signature:(unique_ptr<_Tp,_Dp> &,unique_ptr<_Tp,_Dp> &)
std::swap_ranges	d:/include/c++/14/bits/stl_algobase.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
std::throw_with_nested	d:/include/c++/14/bits/nested_exception.h	/^    throw_with_nested(_Tp&& __t)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t)
std::to_address	d:/include/c++/14/bits/ptr_traits.h	/^    to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
std::to_address	d:/include/c++/14/bits/ptr_traits.h	/^    to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(double __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(double __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(float __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:string	signature:(float __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(int __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(int __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long double __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long double __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long long __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned long __val)
std::to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned long long __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(double __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(float __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(float __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(int __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(int __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long double __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long long __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned long __val)
std::to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned long long __val)
std::tolower	d:/include/c++/14/bits/locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::tolower	d:/include/c++/14/bits/localefwd.h	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::toupper	d:/include/c++/14/bits/locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
std::toupper	d:/include/c++/14/bits/localefwd.h	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
std::tuple_element	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_element<0, pair<_Tp1, _Tp2>>$/;"	s	namespace:std
std::tuple_element	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_element<1, pair<_Tp1, _Tp2>>$/;"	s	namespace:std
std::tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, const _Tp>$/;"	s	namespace:std
std::tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, const volatile _Tp>$/;"	s	namespace:std
std::tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, volatile _Tp>$/;"	s	namespace:std
std::tuple_element::type	d:/include/c++/14/bits/stl_pair.h	/^    { typedef _Tp1 type; };$/;"	t	struct:std::tuple_element	typeref:typename:_Tp1	access:public
std::tuple_element::type	d:/include/c++/14/bits/stl_pair.h	/^    { typedef _Tp2 type; };$/;"	t	struct:std::tuple_element	typeref:typename:_Tp2	access:public
std::tuple_element::type	d:/include/c++/14/bits/utility.h	/^      using type = const __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:const __tuple_element_t<__i,_Tp>	access:public
std::tuple_element::type	d:/include/c++/14/bits/utility.h	/^      using type = const volatile __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:const volatile __tuple_element_t<__i,_Tp>	access:public
std::tuple_element::type	d:/include/c++/14/bits/utility.h	/^      using type = volatile __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:volatile __tuple_element_t<__i,_Tp>	access:public
std::tuple_element_t	d:/include/c++/14/bits/utility.h	/^    using tuple_element_t = typename tuple_element<__i, _Tp>::type;$/;"	t	namespace:std	typeref:typename:tuple_element<__i,_Tp>::type
std::tuple_size	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_size<pair<_Tp1, _Tp2>>$/;"	s	namespace:std	inherits:integral_constant<size_t,2>
std::tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
std::tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
std::tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
std::tuple_size_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;$/;"	v	namespace:std	typeref:typename:size_t
std::tuple_size_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr size_t tuple_size_v<pair<_Tp1, _Tp2>> = 2;$/;"	v	namespace:std	typeref:typename:size_t
std::tuple_size_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;$/;"	v	namespace:std	typeref:typename:size_t
std::u16streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u16streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u16string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char16_t> u16string; $/;"	t	namespace:std	typeref:typename:basic_string<char16_t>
std::u32streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u32streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u32string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char32_t> u32string; $/;"	t	namespace:std	typeref:typename:basic_string<char32_t>
std::u8streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u8streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::u8string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char8_t> u8string;$/;"	t	namespace:std	typeref:typename:basic_string<char8_t>
std::unary_function	d:/include/c++/14/bits/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
std::unary_function::argument_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Arg 	argument_type;   $/;"	t	struct:std::unary_function	typeref:typename:_Arg	access:public
std::unary_function::result_type	d:/include/c++/14/bits/stl_function.h	/^      typedef _Result 	result_type;  $/;"	t	struct:std::unary_function	typeref:typename:_Result	access:public
std::unary_negate	d:/include/c++/14/bits/stl_function.h	/^    class _GLIBCXX17_DEPRECATED unary_negate$/;"	c	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
std::unary_negate::_M_pred	d:/include/c++/14/bits/stl_function.h	/^      _Predicate _M_pred;$/;"	m	class:std::unary_negate	typeref:typename:_Predicate	access:protected
std::unary_negate::operator ()	d:/include/c++/14/bits/stl_function.h	/^      operator()(const typename _Predicate::argument_type& __x) const$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR bool	access:public	signature:(const typename _Predicate::argument_type & __x) const
std::unary_negate::unary_negate	d:/include/c++/14/bits/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
std::uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::uninitialized_copy	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_copy(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _Fo/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_copy_n(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result)
std::uninitialized_copy_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_copy_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_Size __n,_ForwardIterator __result)
std::uninitialized_default_construct	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_default_construct(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::uninitialized_default_construct	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_default_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIte/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
std::uninitialized_default_construct_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::uninitialized_default_construct_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_default_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
std::uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
std::uninitialized_fill	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
std::uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
std::uninitialized_fill_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_fill_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, const _Tp& /;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n,const _Tp & __value)
std::uninitialized_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_move(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::uninitialized_move	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_move(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _Fo/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
std::uninitialized_move_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_move_n(_InputIterator __first, _Size __count,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __count,_ForwardIterator __result)
std::uninitialized_move_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_move_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_Size __n,_ForwardIterator __result)
std::uninitialized_value_construct	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_value_construct(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
std::uninitialized_value_construct	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_value_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
std::uninitialized_value_construct_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
std::uninitialized_value_construct_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
std::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    class unique_ptr$/;"	c	namespace:std
std::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    class unique_ptr<_Tp[], _Dp>$/;"	c	namespace:std
std::unique_ptr::_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^	using _DeleterConstraint =$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Up>::_DeleterConstraint::type	access:private
std::unique_ptr::_DeleterConstraint	d:/include/c++/14/bits/unique_ptr.h	/^      using _DeleterConstraint =$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Up>::_DeleterConstraint::type	access:private
std::unique_ptr::_M_t	d:/include/c++/14/bits/unique_ptr.h	/^      __uniq_ptr_data<_Tp, _Dp> _M_t;$/;"	m	class:std::unique_ptr	typeref:typename:__uniq_ptr_data<_Tp,_Dp>	access:private
std::unique_ptr::__is_derived_Tp	d:/include/c++/14/bits/unique_ptr.h	/^	using __is_derived_Tp$/;"	t	class:std::unique_ptr	typeref:typename:__and_<is_base_of<_Tp,_Up>,__not_<is_same<__remove_cv_t<_Tp>,__remove_cv_t<_Up>>>>	access:private
std::unique_ptr::__safe_conversion_raw	d:/include/c++/14/bits/unique_ptr.h	/^        using __safe_conversion_raw = __and_<$/;"	t	class:std::unique_ptr	access:public
std::unique_ptr::__safe_conversion_up	d:/include/c++/14/bits/unique_ptr.h	/^	using __safe_conversion_up = __and_<$/;"	t	class:std::unique_ptr	access:public
std::unique_ptr::__safe_conversion_up	d:/include/c++/14/bits/unique_ptr.h	/^	using __safe_conversion_up = __and_<$/;"	t	class:std::unique_ptr	typeref:typename:__and_<is_convertible<typename unique_ptr<_Up,_Ep>::pointer,pointer>,__not_<is_array<_Up>>>	access:private
std::unique_ptr::deleter_type	d:/include/c++/14/bits/unique_ptr.h	/^      using deleter_type  = _Dp;$/;"	t	class:std::unique_ptr	typeref:typename:_Dp	access:public
std::unique_ptr::element_type	d:/include/c++/14/bits/unique_ptr.h	/^      using element_type  = _Tp;$/;"	t	class:std::unique_ptr	typeref:typename:_Tp	access:public
std::unique_ptr::get	d:/include/c++/14/bits/unique_ptr.h	/^      get() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
std::unique_ptr::get_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      get_deleter() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR const deleter_type &	access:public	signature:() const
std::unique_ptr::get_deleter	d:/include/c++/14/bits/unique_ptr.h	/^      get_deleter() noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR deleter_type &	access:public	signature:()
std::unique_ptr::operator *	d:/include/c++/14/bits/unique_ptr.h	/^      operator*() const noexcept(noexcept(*std::declval<pointer>()))$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename add_lvalue_reference<element_type>::type	access:public	signature:() const
std::unique_ptr::operator ->	d:/include/c++/14/bits/unique_ptr.h	/^      operator->() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:() const
std::unique_ptr::operator =	d:/include/c++/14/bits/unique_ptr.h	/^	operator=(unique_ptr<_Up, _Ep>&& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<__and_<__safe_conversion_up<_Up,_Ep>,is_assignable<deleter_type &,_Ep &&>>::value,unique_ptr &>::type	access:public	signature:(unique_ptr<_Up,_Ep> && __u)
std::unique_ptr::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      operator=(nullptr_t) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR unique_ptr &	access:public	signature:(nullptr_t)
std::unique_ptr::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      operator=(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(unique_ptr &&)
std::unique_ptr::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr& operator=(const unique_ptr&) = delete;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(const unique_ptr &)
std::unique_ptr::operator =	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr& operator=(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	typeref:typename:unique_ptr &	access:public	signature:(unique_ptr &&)
std::unique_ptr::operator []	d:/include/c++/14/bits/unique_ptr.h	/^      operator[](size_t __i) const$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR typename std::add_lvalue_reference<element_type>::type	access:public	signature:(size_t __i) const
std::unique_ptr::operator bool	d:/include/c++/14/bits/unique_ptr.h	/^      explicit operator bool() const noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:() const
std::unique_ptr::pointer	d:/include/c++/14/bits/unique_ptr.h	/^      using pointer	  = typename __uniq_ptr_impl<_Tp, _Dp>::pointer;$/;"	t	class:std::unique_ptr	typeref:typename:__uniq_ptr_impl<_Tp,_Dp>::pointer	access:public
std::unique_ptr::release	d:/include/c++/14/bits/unique_ptr.h	/^      release() noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR pointer	access:public	signature:()
std::unique_ptr::reset	d:/include/c++/14/bits/unique_ptr.h	/^      reset(_Up __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(_Up __p)
std::unique_ptr::reset	d:/include/c++/14/bits/unique_ptr.h	/^      reset(pointer __p = pointer()) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(pointer __p=pointer ())
std::unique_ptr::reset	d:/include/c++/14/bits/unique_ptr.h	/^      void reset(nullptr_t = nullptr) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(nullptr_t=nullptr)
std::unique_ptr::swap	d:/include/c++/14/bits/unique_ptr.h	/^      swap(unique_ptr& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(unique_ptr & __u)
std::unique_ptr::unique_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept$/;"	f	class:std::unique_ptr	signature:(auto_ptr<_Up> && __u)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	constexpr unique_ptr() noexcept$/;"	f	class:std::unique_ptr	access:public	signature:()
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	constexpr unique_ptr(nullptr_t) noexcept$/;"	f	class:std::unique_ptr	access:public	signature:(nullptr_t)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p, const deleter_type& __d) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p,const deleter_type & __d)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p,$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p,__enable_if_t<!is_lvalue_reference<_Del>::value,_Del &&> __d)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up,$/;"	p	class:std::unique_ptr	access:public	signature:(_Up,__enable_if_t<is_lvalue_reference<_Del>::value,_DelUnref &&>)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(auto_ptr<_Up>&& __u) noexcept;$/;"	p	class:std::unique_ptr	access:public	signature:(auto_ptr<_Up> && __u)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p, const deleter_type& __d) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,const deleter_type & __d)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p,$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,__enable_if_t<!is_lvalue_reference<_Del>::value,_Del &&> __d)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer,$/;"	p	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer,__enable_if_t<is_lvalue_reference<_Del>::value,_DelUnref &&>)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(unique_ptr<_Up,_Ep> && __u)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr(const unique_ptr&) = delete;$/;"	p	class:std::unique_ptr	access:public	signature:(const unique_ptr &)
std::unique_ptr::unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	access:public	signature:(unique_ptr &&)
std::unique_ptr::~unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      ~unique_ptr() noexcept$/;"	f	class:std::unique_ptr	access:public	signature:()
std::unique_ptr::~unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      ~unique_ptr()$/;"	f	class:std::unique_ptr	access:public	signature:()
std::unitbuf	d:/include/c++/14/bits/ios_base.h	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::uppercase	d:/include/c++/14/bits/ios_base.h	/^  uppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
std::use_facet	d:/include/c++/14/bits/localefwd.h	/^    use_facet(const locale&);$/;"	p	namespace:std	typeref:typename:const _Facet &	signature:(const locale &)
std::uses_allocator	d:/include/c++/14/bits/uses_allocator.h	/^    struct uses_allocator$/;"	s	namespace:std	inherits:__uses_allocator_helper<_Tp,_Alloc>::type
std::uses_allocator_v	d:/include/c++/14/bits/uses_allocator.h	/^    inline constexpr bool uses_allocator_v =$/;"	v	namespace:std	typeref:typename:bool
std::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    class weak_ptr : public __weak_ptr<_Tp>$/;"	c	namespace:std	inherits:__weak_ptr<_Tp>
std::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    weak_ptr(shared_ptr<_Tp>) ->  weak_ptr<_Tp>;$/;"	p	namespace:std	signature:(shared_ptr<_Tp>)
std::weak_ptr::_Assignable	d:/include/c++/14/bits/shared_ptr.h	/^	using _Assignable = typename enable_if<$/;"	t	class:std::weak_ptr	typeref:typename:enable_if<is_assignable<__weak_ptr<_Tp> &,_Arg>::value,weak_ptr &>::type	access:private
std::weak_ptr::_Constructible	d:/include/c++/14/bits/shared_ptr.h	/^	using _Constructible = typename enable_if<$/;"	t	class:std::weak_ptr	typeref:typename:enable_if<is_constructible<__weak_ptr<_Tp>,_Arg>::value>::type	access:private
std::weak_ptr::lock	d:/include/c++/14/bits/shared_ptr.h	/^      lock() const noexcept$/;"	f	class:std::weak_ptr	typeref:typename:shared_ptr<_Tp>	access:public	signature:() const
std::weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<const shared_ptr<_Yp> &>	access:public	signature:(const shared_ptr<_Yp> & __r)
std::weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(const weak_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<const weak_ptr<_Yp> &>	access:public	signature:(const weak_ptr<_Yp> & __r)
std::weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^	operator=(weak_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::weak_ptr	typeref:typename:_Assignable<weak_ptr<_Yp>>	access:public	signature:(weak_ptr<_Yp> && __r)
std::weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(const weak_ptr& __r) noexcept = default;$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	access:public	signature:(const weak_ptr & __r)
std::weak_ptr::operator =	d:/include/c++/14/bits/shared_ptr.h	/^      operator=(weak_ptr&& __r) noexcept = default;$/;"	p	class:std::weak_ptr	typeref:typename:weak_ptr &	access:public	signature:(weak_ptr && __r)
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(const shared_ptr<_Yp> & __r)
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(const weak_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(const weak_ptr<_Yp> & __r)
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(weak_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(weak_ptr<_Yp> && __r)
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr weak_ptr() noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:()
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      weak_ptr(const weak_ptr&) noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:(const weak_ptr &)
std::weak_ptr::weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      weak_ptr(weak_ptr&&) noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:(weak_ptr &&)
std::wstreampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
std::wstring	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<wchar_t> wstring;   $/;"	t	namespace:std	typeref:typename:basic_string<wchar_t>
stderr	d:/include/stdio.h	/^#define stderr stderr$/;"	d
stdin	d:/include/stdio.h	/^#define stdin stdin$/;"	d
stdout	d:/include/stdio.h	/^#define stdout stdout$/;"	d
stod	d:/include/c++/14/bits/basic_string.h	/^  stod(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const string & __str,size_t * __idx=0)
stod	d:/include/c++/14/bits/basic_string.h	/^  stod(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:double	signature:(const wstring & __str,size_t * __idx=0)
stof	d:/include/c++/14/bits/basic_string.h	/^  stof(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const string & __str,size_t * __idx=0)
stof	d:/include/c++/14/bits/basic_string.h	/^  stof(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:float	signature:(const wstring & __str,size_t * __idx=0)
stoi	d:/include/c++/14/bits/basic_string.h	/^  stoi(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_BEGIN_NAMESPACE_VERSION _GLIBCXX_BEGIN_NAMESPACE_CXX11 int	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoi	d:/include/c++/14/bits/basic_string.h	/^  stoi(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:int	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stol	d:/include/c++/14/bits/basic_string.h	/^  stol(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stol	d:/include/c++/14/bits/basic_string.h	/^  stol(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stold	d:/include/c++/14/bits/basic_string.h	/^  stold(const string& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const string & __str,size_t * __idx=0)
stold	d:/include/c++/14/bits/basic_string.h	/^  stold(const wstring& __str, size_t* __idx = 0)$/;"	f	namespace:std	typeref:typename:long double	signature:(const wstring & __str,size_t * __idx=0)
stoll	d:/include/c++/14/bits/basic_string.h	/^  stoll(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoll	d:/include/c++/14/bits/basic_string.h	/^  stoll(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst) const
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Fp __t, memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:void	access:public	signature:(_Fp __t,memory_order __m=memory_order_seq_cst)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Tp __t,memory_order __m=memory_order_seq_cst) const
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp* __ptr, _Val<_Tp> __t, memory_order __m) noexcept$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(_Tp * __ptr,_Val<_Tp> __t,memory_order __m)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(_Tp* __t, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:void	access:public	signature:(_Tp * __t,memory_order __m=memory_order_seq_cst) const
store	d:/include/c++/14/bits/atomic_base.h	/^      store(__int_type __i, memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(__int_type __i,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __i,memory_order __m=memory_order_seq_cst)
store	d:/include/c++/14/bits/atomic_base.h	/^      store(__pointer_type __p,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__pointer_type __p,memory_order __m=memory_order_seq_cst)
store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      store(shared_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(shared_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
store	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      store(weak_ptr<_Tp> __desired,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(weak_ptr<_Tp> __desired,memory_order __o=memory_order_seq_cst)
stoul	d:/include/c++/14/bits/basic_string.h	/^  stoul(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoul	d:/include/c++/14/bits/basic_string.h	/^  stoul(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stoull	d:/include/c++/14/bits/basic_string.h	/^  stoull(const string& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const string & __str,size_t * __idx=0,int __base=10)
stoull	d:/include/c++/14/bits/basic_string.h	/^  stoull(const wstring& __str, size_t* __idx = 0, int __base = 10)$/;"	f	namespace:std	typeref:typename:unsigned long long	signature:(const wstring & __str,size_t * __idx=0,int __base=10)
stream	d:/include/c++/14/bits/ios_base.h	/^  enum class io_errc { stream = 1 };$/;"	e	enum:std::io_errc	access:public
streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits>		streambuf_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef basic_streambuf<_CharT, _Traits> streambuf_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:basic_streambuf<_CharT,_Traits>	access:public
streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:__is_iterator_type::streambuf_type
streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::advance	typeref:typename:__is_iterator_type::streambuf_type
streambuf_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::streambuf_type  streambuf_type;$/;"	t	function:std::find	typeref:typename:__is_iterator_type::streambuf_type
streamoff	d:/include/c++/14/bits/postypes.h	/^  typedef __INT64_TYPE__          streamoff;$/;"	t	namespace:std	typeref:typename:__INT64_TYPE__
streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
streamsize	d:/include/c++/14/bits/postypes.h	/^  typedef ptrdiff_t	streamsize; \/\/ Signed integral type$/;"	t	namespace:std	typeref:typename:ptrdiff_t
strftime	d:/include/time.h	/^extern size_t strftime (char *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,size_t __maxsize,const char * __restrict __format,const struct tm * __restrict __tp)
strftime_l	d:/include/time.h	/^extern size_t strftime_l (char *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,size_t __maxsize,const char * __restrict __format,const struct tm * __restrict __tp,locale_t __loc)
string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char>    string;   $/;"	t	namespace:std	typeref:typename:basic_string<char>
string_literals	d:/include/c++/14/bits/basic_string.h	/^  inline namespace string_literals$/;"	n	namespace:std::literals
string_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::collate	typeref:typename:basic_string<_CharT>	access:public
string_type	d:/include/c++/14/bits/locale_classes.h	/^      typedef basic_string<_CharT> string_type;$/;"	t	class:std::collate_byname	typeref:typename:basic_string<_CharT>	access:public
string_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct	typeref:typename:basic_string<_CharT>	access:public
string_type	d:/include/c++/14/bits/locale_facets.h	/^      typedef basic_string<_CharT>	string_type;$/;"	t	class:std::numpunct_byname	typeref:typename:basic_string<_CharT>	access:public
strptime	d:/include/time.h	/^extern char *strptime (const char *__restrict __s,$/;"	p	typeref:typename:char *	signature:(const char * __restrict __s,const char * __restrict __fmt,struct tm * __tp)
strptime_l	d:/include/time.h	/^extern char *strptime_l (const char *__restrict __s,$/;"	p	typeref:typename:char *	signature:(const char * __restrict __s,const char * __restrict __fmt,struct tm * __tp,locale_t __loc)
strtod	../../../../../../usr/include/stdlib.h	/^double	strtod (const char *__restrict __n, char **__restrict __end_PTR);$/;"	p	typeref:typename:double	signature:(const char * __restrict __n,char ** __restrict __end_PTR)
strtod_l	../../../../../../usr/include/stdlib.h	/^double	strtod_l (const char *__restrict, char **__restrict, locale_t);$/;"	p	typeref:typename:double	signature:(const char * __restrict,char ** __restrict,locale_t)
strtodf	../../../../../../usr/include/stdlib.h	/^#  define strtodf /;"	d
strtof	../../../../../../usr/include/stdlib.h	/^float	strtof (const char *__restrict __n, char **__restrict __end_PTR);$/;"	p	typeref:typename:float	signature:(const char * __restrict __n,char ** __restrict __end_PTR)
strtof_l	../../../../../../usr/include/stdlib.h	/^float	strtof_l (const char *__restrict, char **__restrict, locale_t);$/;"	p	typeref:typename:float	signature:(const char * __restrict,char ** __restrict,locale_t)
strtol	../../../../../../usr/include/stdlib.h	/^long	strtol (const char *__restrict __n, char **__restrict __end_PTR, int __base);$/;"	p	typeref:typename:long	signature:(const char * __restrict __n,char ** __restrict __end_PTR,int __base)
strtol_l	../../../../../../usr/include/stdlib.h	/^long	strtol_l (const char *__restrict, char **__restrict, int, locale_t);$/;"	p	typeref:typename:long	signature:(const char * __restrict,char ** __restrict,int,locale_t)
strtold	../../../../../../usr/include/stdlib.h	/^extern long double strtold (const char *__restrict, char **__restrict);$/;"	p	typeref:typename:long double	signature:(const char * __restrict,char ** __restrict)
strtold_l	../../../../../../usr/include/stdlib.h	/^extern long double strtold_l (const char *__restrict, char **__restrict,$/;"	p	typeref:typename:long double	signature:(const char * __restrict,char ** __restrict,locale_t)
strtoll	../../../../../../usr/include/stdlib.h	/^long long strtoll (const char *__restrict __n, char **__restrict __end_PTR, int __base);$/;"	p	typeref:typename:long long	signature:(const char * __restrict __n,char ** __restrict __end_PTR,int __base)
strtoll_l	../../../../../../usr/include/stdlib.h	/^long long strtoll_l (const char *__restrict, char **__restrict, int, locale_t);$/;"	p	typeref:typename:long long	signature:(const char * __restrict,char ** __restrict,int,locale_t)
strtoul	../../../../../../usr/include/stdlib.h	/^unsigned long strtoul (const char *__restrict __n, char **__restrict __end_PTR, int __base);$/;"	p	typeref:typename:unsigned long	signature:(const char * __restrict __n,char ** __restrict __end_PTR,int __base)
strtoul_l	../../../../../../usr/include/stdlib.h	/^unsigned long strtoul_l (const char *__restrict, char **__restrict, int,$/;"	p	typeref:typename:unsigned long	signature:(const char * __restrict,char ** __restrict,int,locale_t __loc)
strtoull	../../../../../../usr/include/stdlib.h	/^unsigned long long strtoull (const char *__restrict __n, char **__restrict __end_PTR, int __base/;"	p	typeref:typename:unsigned long long	signature:(const char * __restrict __n,char ** __restrict __end_PTR,int __base)
strtoull_l	../../../../../../usr/include/stdlib.h	/^unsigned long long strtoull_l (const char *__restrict, char **__restrict, int,$/;"	p	typeref:typename:unsigned long long	signature:(const char * __restrict,char ** __restrict,int,locale_t __loc)
substr	d:/include/c++/14/bits/basic_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
substr	d:/include/c++/14/bits/cow_string.h	/^      substr(size_type __pos = 0, size_type __n = npos) const$/;"	f	class:std::basic_string	typeref:typename:basic_string	access:public	signature:(size_type __pos=0,size_type __n=npos) const
swap	d:/include/c++/14/bits/basic_ios.h	/^      swap(basic_ios& __rhs) noexcept$/;"	f	class:std::basic_ios	typeref:typename:void	access:protected	signature:(basic_ios & __rhs)
swap	d:/include/c++/14/bits/basic_string.h	/^      swap(basic_string& __s) _GLIBCXX_NOEXCEPT;$/;"	p	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(basic_string & __s)
swap	d:/include/c++/14/bits/basic_string.h	/^    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR void	signature:(basic_string<_CharT,_Traits,_Alloc> & __lhs,basic_string<_CharT,_Traits,_Alloc> & __rhs)
swap	d:/include/c++/14/bits/cow_string.h	/^      swap(basic_string& __s)$/;"	p	class:std::basic_string	typeref:typename:void	access:public	signature:(basic_string & __s)
swap	d:/include/c++/14/bits/cow_string.h	/^    swap(basic_string& __s)$/;"	f	class:std::basic_string	typeref:typename:void	signature:(basic_string & __s)
swap	d:/include/c++/14/bits/exception_ptr.h	/^      swap(exception_ptr&) _GLIBCXX_USE_NOEXCEPT;$/;"	p	class:std::__exception_ptr::exception_ptr	typeref:typename:void	access:public	signature:(exception_ptr &)
swap	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::swap(exception_ptr &__other) _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED void	signature:(exception_ptr & __other)
swap	d:/include/c++/14/bits/exception_ptr.h	/^    swap(exception_ptr& __lhs, exception_ptr& __rhs)$/;"	f	namespace:std::__exception_ptr	typeref:typename:void	signature:(exception_ptr & __lhs,exception_ptr & __rhs)
swap	d:/include/c++/14/bits/move.h	/^    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__is_swappable<_Tp>::value>::type	signature:(_Tp (& __a)[_Nm],_Tp (& __b)[_Nm])
swap	d:/include/c++/14/bits/move.h	/^    swap(_Tp& __a, _Tp& __b)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,is_move_constructible<_Tp>,is_move_assignable<_Tp>>::value>::type	signature:(_Tp & __a,_Tp & __b)
swap	d:/include/c++/14/bits/shared_ptr.h	/^    swap(shared_ptr<_Tp>& __a, shared_ptr<_Tp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(shared_ptr<_Tp> & __a,shared_ptr<_Tp> & __b)
swap	d:/include/c++/14/bits/shared_ptr.h	/^    swap(weak_ptr<_Tp>& __a, weak_ptr<_Tp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(weak_ptr<_Tp> & __a,weak_ptr<_Tp> & __b)
swap	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      swap(value_type& __r, memory_order __o) noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(value_type & __r,memory_order __o)
swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      swap(__shared_ptr<_Tp, _Lp>& __other) noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:void	access:public	signature:(__shared_ptr<_Tp,_Lp> & __other)
swap	d:/include/c++/14/bits/shared_ptr_base.h	/^      swap(__weak_ptr& __s) noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:void	access:public	signature:(__weak_ptr & __s)
swap	d:/include/c++/14/bits/shared_ptr_base.h	/^    swap(__shared_ptr<_Tp, _Lp>& __a, __shared_ptr<_Tp, _Lp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(__shared_ptr<_Tp,_Lp> & __a,__shared_ptr<_Tp,_Lp> & __b)
swap	d:/include/c++/14/bits/shared_ptr_base.h	/^    swap(__weak_ptr<_Tp, _Lp>& __a, __weak_ptr<_Tp, _Lp>& __b) noexcept$/;"	f	namespace:std	typeref:typename:void	signature:(__weak_ptr<_Tp,_Lp> & __a,__weak_ptr<_Tp,_Lp> & __b)
swap	d:/include/c++/14/bits/stl_pair.h	/^      swap(const pair& __p) const$/;"	f	struct:std::pair	typeref:typename:void	access:public	signature:(const pair & __p) const
swap	d:/include/c++/14/bits/stl_pair.h	/^      swap(pair& __p)$/;"	f	struct:std::pair	typeref:typename:_GLIBCXX20_CONSTEXPR void	access:public	signature:(pair & __p)
swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:requires is_swappable_v<const _T1> && is_swappable_v<const _T2> void	signature:(const pair<_T1,_T2> & __x,const pair<_T1,_T2> & __y)
swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(pair<_T1, _T2>& __x, pair<_T1, _T2>& __y)$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR typename enable_if<__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> & __x,pair<_T1,_T2> & __y)
swap	d:/include/c++/14/bits/stl_pair.h	/^    swap(pair<_T1, _T2>&, pair<_T1, _T2>&) = delete;$/;"	p	namespace:std	typeref:typename:enable_if<!__and_<__is_swappable<_T1>,__is_swappable<_T2>>::value>::type	signature:(pair<_T1,_T2> &,pair<_T1,_T2> &)
swap	d:/include/c++/14/bits/unique_ptr.h	/^      swap(__uniq_ptr_impl& __rhs) noexcept$/;"	f	class:std::__uniq_ptr_impl	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(__uniq_ptr_impl & __rhs)
swap	d:/include/c++/14/bits/unique_ptr.h	/^      swap(unique_ptr& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR void	access:public	signature:(unique_ptr & __u)
swap	d:/include/c++/14/bits/unique_ptr.h	/^    swap(unique_ptr<_Tp, _Dp>& __x,$/;"	f	namespace:std	typeref:typename:_GLIBCXX23_CONSTEXPR typename enable_if<__is_swappable<_Dp>::value>::type	signature:(unique_ptr<_Tp,_Dp> & __x,unique_ptr<_Tp,_Dp> & __y)
swap	d:/include/c++/14/bits/unique_ptr.h	/^    swap(unique_ptr<_Tp, _Dp>&,$/;"	p	namespace:std	typeref:typename:enable_if<!__is_swappable<_Dp>::value>::type	signature:(unique_ptr<_Tp,_Dp> &,unique_ptr<_Tp,_Dp> &)
swap_ranges	d:/include/c++/14/bits/stl_algobase.h	/^    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,$/;"	f	namespace:std	typeref:typename:_GLIBCXX20_CONSTEXPR _ForwardIterator2	signature:(_ForwardIterator1 __first1,_ForwardIterator1 __last1,_ForwardIterator2 __first2)
swprintf	d:/include/wchar.h	/^extern int swprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict __s,size_t __n,const wchar_t * __restrict __format,...)
swscanf	d:/include/wchar.h	/^#    define swscanf __isoc23_swscanf$/;"	d
swscanf	d:/include/wchar.h	/^#    define swscanf __isoc99_swscanf$/;"	d
swscanf	d:/include/wchar.h	/^extern int swscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,...)
sync_with_stdio	d:/include/c++/14/bits/ios_base.h	/^    sync_with_stdio(bool __sync = true);$/;"	p	class:std::ios_base	typeref:typename:bool	access:public	signature:(bool __sync=true)
system	../../../../../../usr/include/stdlib.h	/^int	system (const char *__string);$/;"	p	typeref:typename:int	signature:(const char * __string)
system_error	d:/include/c++/14/bits/ios_base.h	/^    struct system_error : std::runtime_error$/;"	s	class:std::ios_base	inherits:std::runtime_error	access:private
table	d:/include/c++/14/bits/locale_facets.h	/^      table() const throw()$/;"	f	class:std::ctype	typeref:typename:const mask *	access:public	signature:() const
table_size	d:/include/c++/14/bits/locale_facets.h	/^      static const size_t      table_size = 1 + static_cast<unsigned char>(-1);$/;"	m	class:std::ctype	typeref:typename:const size_t	access:public
tempnam	d:/include/stdio.h	/^extern char *tempnam (const char *__dir, const char *__pfx)$/;"	p	typeref:typename:char *	signature:(const char * __dir,const char * __pfx)
test	d:/include/c++/14/bits/atomic_base.h	/^    test(memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst) const
test	d:/include/c++/14/bits/atomic_base.h	/^    test(memory_order __m = memory_order_seq_cst) const volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst) const
test_and_set	d:/include/c++/14/bits/atomic_base.h	/^    test_and_set(memory_order __m = memory_order_seq_cst) noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst)
test_and_set	d:/include/c++/14/bits/atomic_base.h	/^    test_and_set(memory_order __m = memory_order_seq_cst) volatile noexcept$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE bool	access:public	signature:(memory_order __m=memory_order_seq_cst)
thousands_sep	d:/include/c++/14/bits/locale_facets.h	/^      thousands_sep() const$/;"	f	class:std::numpunct	typeref:typename:char_type	access:public	signature:() const
thousands_sep	d:/include/locale.h	/^  char *thousands_sep;		\/* Thousands separator.  *\/$/;"	m	struct:lconv	typeref:typename:char *	access:public
throw_with_nested	d:/include/c++/14/bits/nested_exception.h	/^    throw_with_nested(_Tp&& __t)$/;"	f	namespace:std	typeref:typename:void	signature:(_Tp && __t)
tie	d:/include/c++/14/bits/basic_ios.h	/^      tie() const$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:() const
tie	d:/include/c++/14/bits/basic_ios.h	/^      tie(basic_ostream<_CharT, _Traits>* __tiestr)$/;"	f	class:std::basic_ios	typeref:typename:basic_ostream<_CharT,_Traits> *	access:public	signature:(basic_ostream<_CharT,_Traits> * __tiestr)
time	d:/include/c++/14/bits/locale_classes.h	/^    static const category time		= 1L << 3;$/;"	m	class:std::locale	typeref:typename:const category	access:public
time	d:/include/time.h	/^#  define time __time6/;"	d
time	d:/include/time.h	/^extern time_t time (time_t *__timer) __THROW;$/;"	p	typeref:typename:time_t	signature:(time_t * __timer)
time_t	d:/include/x86_64-linux-gnu/bits/types/time_t.h	/^typedef __time64_t time_t;$/;"	t	typeref:typename:__time64_t
time_t	d:/include/x86_64-linux-gnu/bits/types/time_t.h	/^typedef __time_t time_t;$/;"	t	typeref:typename:__time_t
timegm	d:/include/time.h	/^#   define timegm __timegm6/;"	d
timegm	d:/include/time.h	/^extern time_t timegm (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
timelocal	d:/include/time.h	/^extern time_t timelocal (struct tm *__tp) __THROW;$/;"	p	typeref:typename:time_t	signature:(struct tm * __tp)
timer_create	d:/include/time.h	/^extern int timer_create (clockid_t __clock_id,$/;"	p	typeref:typename:int	signature:(clockid_t __clock_id,struct sigevent * __restrict __evp,timer_t * __restrict __timerid)
timer_delete	d:/include/time.h	/^extern int timer_delete (timer_t __timerid) __THROW;$/;"	p	typeref:typename:int	signature:(timer_t __timerid)
timer_getoverrun	d:/include/time.h	/^extern int timer_getoverrun (timer_t __timerid) __THROW;$/;"	p	typeref:typename:int	signature:(timer_t __timerid)
timer_gettime	d:/include/time.h	/^#   define timer_gettime __timer_gettime6/;"	d
timer_gettime	d:/include/time.h	/^extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)$/;"	p	typeref:typename:int	signature:(timer_t __timerid,struct itimerspec * __value)
timer_settime	d:/include/time.h	/^#   define timer_settime __timer_settime6/;"	d
timer_settime	d:/include/time.h	/^extern int timer_settime (timer_t __timerid, int __flags,$/;"	p	typeref:typename:int	signature:(timer_t __timerid,int __flags,const struct itimerspec * __restrict __value,struct itimerspec * __restrict __ovalue)
timer_t	d:/include/x86_64-linux-gnu/bits/types/timer_t.h	/^typedef __timer_t timer_t;$/;"	t	typeref:typename:__timer_t
timespec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^struct timespec$/;"	s
timespec::tv_nsec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __syscall_slong_t tv_nsec;	\/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:__syscall_slong_t	access:public
timespec::tv_nsec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  long int tv_nsec;  \/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:long int	access:public
timespec::tv_sec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __time64_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timespec	typeref:typename:__time64_t	access:public
timespec_get	d:/include/time.h	/^#   define timespec_get __timespec_get6/;"	d
timespec_get	d:/include/time.h	/^extern int timespec_get (struct timespec *__ts, int __base)$/;"	p	typeref:typename:int	signature:(struct timespec * __ts,int __base)
timespec_getres	d:/include/time.h	/^#   define timespec_getres __timespec_getres6/;"	d
timespec_getres	d:/include/time.h	/^extern int timespec_getres (struct timespec *__ts, int __base)$/;"	p	typeref:typename:int	signature:(struct timespec * __ts,int __base)
tm	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^struct tm$/;"	s
tm::__tm_gmtoff	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int __tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm::__tm_zone	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *__tm_zone;	\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tm::tm_gmtoff	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm::tm_hour	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_hour;			\/* Hours.	[0-23] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_isdst	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_isdst;			\/* DST.		[-1\/0\/1]*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_mday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mday;			\/* Day.		[1-31] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_min	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_min;			\/* Minutes.	[0-59] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_mon	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mon;			\/* Month.	[0-11] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_sec	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_sec;			\/* Seconds.	[0-60] (1 leap second) *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_wday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_wday;			\/* Day of week.	[0-6] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_yday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_yday;			\/* Days in year.[0-365]	*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_year	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_year;			\/* Year	- 1900.  *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm::tm_zone	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *tm_zone;		\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tm_gmtoff	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  long int tm_gmtoff;		\/* Seconds east of UTC.  *\/$/;"	m	struct:tm	typeref:typename:long int	access:public
tm_hour	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_hour;			\/* Hours.	[0-23] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_isdst	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_isdst;			\/* DST.		[-1\/0\/1]*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_mday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mday;			\/* Day.		[1-31] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_min	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_min;			\/* Minutes.	[0-59] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_mon	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_mon;			\/* Month.	[0-11] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_sec	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_sec;			\/* Seconds.	[0-60] (1 leap second) *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_wday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_wday;			\/* Day of week.	[0-6] *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_yday	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_yday;			\/* Days in year.[0-365]	*\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_year	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  int tm_year;			\/* Year	- 1900.  *\/$/;"	m	struct:tm	typeref:typename:int	access:public
tm_zone	d:/include/x86_64-linux-gnu/bits/types/struct_tm.h	/^  const char *tm_zone;		\/* Timezone abbreviation.  *\/$/;"	m	struct:tm	typeref:typename:const char *	access:public
tmpfile	d:/include/stdio.h	/^#  define tmpfile tmpfile6/;"	d
tmpfile	d:/include/stdio.h	/^extern FILE *tmpfile (void)$/;"	p	typeref:typename:FILE *	signature:(void)
tmpfile64	d:/include/stdio.h	/^extern FILE *tmpfile64 (void)$/;"	p	typeref:typename:FILE *	signature:(void)
tmpnam	d:/include/stdio.h	/^extern char *tmpnam (char[L_tmpnam]) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(char[L_tmpnam])
tmpnam_r	d:/include/stdio.h	/^extern char *tmpnam_r (char __s[L_tmpnam]) __THROW __wur;$/;"	p	typeref:typename:char *	signature:(char __s[L_tmpnam])
to_address	d:/include/c++/14/bits/ptr_traits.h	/^    to_address(_Tp* __ptr) noexcept$/;"	f	namespace:std	typeref:typename:_Tp *	signature:(_Tp * __ptr)
to_address	d:/include/c++/14/bits/ptr_traits.h	/^    to_address(const _Ptr& __ptr) noexcept$/;"	f	namespace:std	typeref:typename:auto	signature:(const _Ptr & __ptr)
to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:char_type	access:public	signature:(const int_type & __c)
to_char_type	d:/include/c++/14/bits/char_traits.h	/^      to_char_type(const int_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR char_type	access:public	signature:(const int_type & __c)
to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c) _GLIBCXX_NOEXCEPT$/;"	f	struct:std::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c) noexcept$/;"	f	struct:std::char_traits	typeref:typename:int_type	access:public	signature:(const char_type & __c)
to_int_type	d:/include/c++/14/bits/char_traits.h	/^      to_int_type(const char_type& __c)$/;"	f	struct:__gnu_cxx::char_traits	typeref:typename:_GLIBCXX_CONSTEXPR int_type	access:public	signature:(const char_type & __c)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(double __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(double __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(float __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(float __val)$/;"	f	namespace:std	typeref:typename:string	signature:(float __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(int __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(int __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long double __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long double __val)$/;"	f	namespace:std	typeref:typename:string	signature:(long double __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(long long __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned long __val)
to_string	d:/include/c++/14/bits/basic_string.h	/^  to_string(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD string	signature:(unsigned long long __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(double __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(float __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(float __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(int __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(int __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long double __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long double __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(long long __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned long __val)
to_wstring	d:/include/c++/14/bits/basic_string.h	/^  to_wstring(unsigned long long __val)$/;"	f	namespace:std	typeref:typename:_GLIBCXX_NODISCARD wstring	signature:(unsigned long long __val)
toascii	d:/include/ctype.h	/^#  define toascii(c)	__toascii /;"	d	signature:(c)
toascii	d:/include/ctype.h	/^extern int toascii (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
toascii_l	d:/include/ctype.h	/^#   define toascii_l(c,l)	__toascii_l /;"	d	signature:(c,l)
tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	d:/include/c++/14/bits/locale_facets.h	/^      tolower(char_type* __lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
tolower	d:/include/c++/14/bits/locale_facets.h	/^    tolower(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
tolower	d:/include/c++/14/bits/localefwd.h	/^    tolower(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
tolower	d:/include/ctype.h	/^#  define tolower(c)	__tobody (c, tolower, *__ctype_tolower_/;"	d	signature:(c)
tolower	d:/include/ctype.h	/^extern int tolower (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
tolower_l	d:/include/ctype.h	/^#  define tolower_l(c, locale)	__tolower_l /;"	d	signature:(c,locale)
tolower_l	d:/include/ctype.h	/^extern int tolower_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type *__lo, const char_type* __hi) const$/;"	f	class:std::ctype	typeref:typename:const char_type *	access:public	signature:(char_type * __lo,const char_type * __hi) const
toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	d:/include/c++/14/bits/locale_facets.h	/^      toupper(char_type __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char_type __c) const
toupper	d:/include/c++/14/bits/locale_facets.h	/^    toupper(_CharT __c, const locale& __loc)$/;"	f	namespace:std	typeref:typename:_CharT	signature:(_CharT __c,const locale & __loc)
toupper	d:/include/c++/14/bits/localefwd.h	/^    toupper(_CharT, const locale&);$/;"	p	namespace:std	typeref:typename:_CharT	signature:(_CharT,const locale &)
toupper	d:/include/ctype.h	/^#  define toupper(c)	__tobody (c, toupper, *__ctype_toupper_/;"	d	signature:(c)
toupper	d:/include/ctype.h	/^extern int toupper (int __c) __THROW;$/;"	p	typeref:typename:int	signature:(int __c)
toupper_l	d:/include/ctype.h	/^#  define toupper_l(c, locale)	__toupper_l /;"	d	signature:(c,locale)
toupper_l	d:/include/ctype.h	/^extern int toupper_l (int __c, locale_t __l) __THROW;$/;"	p	typeref:typename:int	signature:(int __c,locale_t __l)
towctrans	d:/include/wctype.h	/^extern wint_t towctrans (wint_t __wc, wctrans_t __desc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,wctrans_t __desc)
towctrans_l	d:/include/wctype.h	/^extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,wctrans_t __desc,locale_t __locale)
towlower	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wint_t towlower (wint_t __wc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc)
towlower_l	d:/include/wctype.h	/^extern wint_t towlower_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,locale_t __locale)
towupper	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wint_t towupper (wint_t __wc) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc)
towupper_l	d:/include/wctype.h	/^extern wint_t towupper_l (wint_t __wc, locale_t __locale) __THROW;$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,locale_t __locale)
traits_type	d:/include/c++/14/bits/basic_ios.h	/^      typedef _Traits                                traits_type;$/;"	t	class:std::basic_ios	typeref:typename:_Traits	access:public
traits_type	d:/include/c++/14/bits/basic_string.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
traits_type	d:/include/c++/14/bits/cow_string.h	/^      typedef _Traits					    traits_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits	access:public
traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _Traits					traits_type;$/;"	t	class:std::istreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef _Traits			       traits_type;$/;"	t	class:std::ostreambuf_iterator	typeref:typename:_Traits	access:public
traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type	   traits_type;$/;"	t	function:std::__copy_move_a2	typeref:typename:__is_iterator_type::traits_type
traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type	   traits_type;$/;"	t	function:std::advance	typeref:typename:__is_iterator_type::traits_type
traits_type	d:/include/c++/14/bits/streambuf_iterator.h	/^      typedef typename __is_iterator_type::traits_type     traits_type;$/;"	t	function:std::find	typeref:typename:__is_iterator_type::traits_type
transform	d:/include/c++/14/bits/locale_classes.h	/^      transform(const _CharT* __lo, const _CharT* __hi) const$/;"	f	class:std::collate	typeref:typename:string_type	access:public	signature:(const _CharT * __lo,const _CharT * __hi) const
truename	d:/include/c++/14/bits/locale_facets.h	/^      truename() const$/;"	f	class:std::numpunct	typeref:typename:string_type	access:public	signature:() const
trunc	d:/include/c++/14/bits/ios_base.h	/^    static const openmode trunc =	_S_trunc;$/;"	m	class:std::ios_base	typeref:typename:const openmode	access:public
tuple_element	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_element<0, pair<_Tp1, _Tp2>>$/;"	s	namespace:std
tuple_element	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_element<1, pair<_Tp1, _Tp2>>$/;"	s	namespace:std
tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, const _Tp>$/;"	s	namespace:std
tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, const volatile _Tp>$/;"	s	namespace:std
tuple_element	d:/include/c++/14/bits/utility.h	/^    struct tuple_element<__i, volatile _Tp>$/;"	s	namespace:std
tuple_element_t	d:/include/c++/14/bits/utility.h	/^    using tuple_element_t = typename tuple_element<__i, _Tp>::type;$/;"	t	namespace:std	typeref:typename:tuple_element<__i,_Tp>::type
tuple_size	d:/include/c++/14/bits/stl_pair.h	/^    struct tuple_size<pair<_Tp1, _Tp2>>$/;"	s	namespace:std	inherits:integral_constant<size_t,2>
tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<const __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<const volatile __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
tuple_size	d:/include/c++/14/bits/utility.h	/^    struct tuple_size<volatile __enable_if_has_tuple_size<_Tp>>$/;"	s	namespace:std	inherits:tuple_size<_Tp>
tuple_size_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr size_t tuple_size_v<const pair<_Tp1, _Tp2>> = 2;$/;"	v	namespace:std	typeref:typename:size_t
tuple_size_v	d:/include/c++/14/bits/stl_pair.h	/^    inline constexpr size_t tuple_size_v<pair<_Tp1, _Tp2>> = 2;$/;"	v	namespace:std	typeref:typename:size_t
tuple_size_v	d:/include/c++/14/bits/utility.h	/^    inline constexpr size_t tuple_size_v = tuple_size<_Tp>::value;$/;"	v	namespace:std	typeref:typename:size_t
tv_nsec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __syscall_slong_t tv_nsec;	\/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:__syscall_slong_t	access:public
tv_nsec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  long int tv_nsec;  \/* Nanoseconds.  *\/$/;"	m	struct:timespec	typeref:typename:long int	access:public
tv_sec	d:/include/x86_64-linux-gnu/bits/types/struct_timespec.h	/^  __time64_t tv_sec;		\/* Seconds.  *\/$/;"	m	struct:timespec	typeref:typename:__time64_t	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	  using type = _Func<_Alloc>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:_Func<_Alloc>	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	  using type = typename pointer_traits<pointer>::template rebind<_Tp>;$/;"	t	struct:std::allocator_traits::_Ptr	typeref:typename:pointer_traits<pointer>::template rebind<_Tp>	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	using type = typename _Tp::template rebind<_Up>::other;$/;"	t	struct:std::__allocator_traits_base::__rebind	typeref:typename:_Tp::template rebind<_Up>::other	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename _A2::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:_A2::difference_type	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename _A2::size_type; };$/;"	t	struct:std::allocator_traits::_Size	typeref:typename:_A2::size_type	access:public
type	d:/include/c++/14/bits/alloc_traits.h	/^	{ using type = typename pointer_traits<_PtrT>::difference_type; };$/;"	t	struct:std::allocator_traits::_Diff	typeref:typename:pointer_traits<_PtrT>::difference_type	access:public
type	d:/include/c++/14/bits/move.h	/^  { using type = _Up&&; };$/;"	t	struct:std::__like_impl	typeref:typename:_Up &&	access:public
type	d:/include/c++/14/bits/move.h	/^  { using type = _Up&; };$/;"	t	struct:std::__like_impl	typeref:typename:_Up &	access:public
type	d:/include/c++/14/bits/move.h	/^  { using type = const _Up&&; };$/;"	t	struct:std::__like_impl	typeref:typename:const _Up &&	access:public
type	d:/include/c++/14/bits/move.h	/^  { using type = const _Up&; };$/;"	t	struct:std::__like_impl	typeref:typename:const _Up &	access:public
type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = _SomeTemplate<_Up, _Types...>; };$/;"	t	struct:std::__replace_first_arg	typeref:typename:_SomeTemplate<_Up,_Types...>	access:public
type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = _Tp; };$/;"	t	struct:std::__get_first_arg	typeref:typename:_Tp	access:public
type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = __undefined; };$/;"	t	struct:std::__get_first_arg	typeref:typename:__undefined	access:public
type	d:/include/c++/14/bits/ptr_traits.h	/^    { using type = typename _Ptr::element_type; };$/;"	t	struct:std::__ptr_traits_elem	typeref:typename:_Ptr::element_type	access:public
type	d:/include/c++/14/bits/range_access.h	/^      using type = make_signed_t<decltype(__cont.size())>;$/;"	t	function:std::ssize
type	d:/include/c++/14/bits/refwrap.h	/^      typedef _Tp type;$/;"	t	class:std::reference_wrapper	typeref:typename:_Tp	access:public
type	d:/include/c++/14/bits/shared_ptr_base.h	/^	struct __not_alloc_shared_tag { using type = void; };$/;"	t	struct:std::__shared_count::__not_alloc_shared_tag	typeref:typename:void	access:public
type	d:/include/c++/14/bits/stl_function.h	/^    { typedef void type; };$/;"	t	struct:std::__has_is_transparent	typeref:typename:void	access:public
type	d:/include/c++/14/bits/stl_iterator.h	/^	  using type = decltype(std::declval<const _CIter&>().operator->());$/;"	t	struct:std::iterator_traits::__ptr	access:public
type	d:/include/c++/14/bits/stl_iterator.h	/^	  using type = void;$/;"	t	struct:std::iterator_traits::__ptr	typeref:typename:void	access:public
type	d:/include/c++/14/bits/stl_iterator.h	/^      { using type = _Sent; };$/;"	t	struct:std::__detail::__const_sentinel	typeref:typename:_Sent	access:public
type	d:/include/c++/14/bits/stl_iterator.h	/^      { using type = const_iterator<_Sent>; };$/;"	t	struct:std::__detail::__const_sentinel	typeref:typename:const_iterator<_Sent>	access:public
type	d:/include/c++/14/bits/stl_iterator.h	/^    { using type = basic_const_iterator<common_type_t<_Tp, _Up>>; };$/;"	t	struct:std::common_type	typeref:typename:basic_const_iterator<common_type_t<_Tp,_Up>>	access:public
type	d:/include/c++/14/bits/stl_pair.h	/^    using type = pair<common_reference_t<_TQual<_T1>, _UQual<_U1>>,$/;"	t	struct:std::basic_common_reference	typeref:typename:pair<common_reference_t<_TQual<_T1>,_UQual<_U1>>,common_reference_t<_TQual<_T2>,_UQual<_U2>>>	access:public
type	d:/include/c++/14/bits/stl_pair.h	/^    { typedef _Tp1 type; };$/;"	t	struct:std::tuple_element	typeref:typename:_Tp1	access:public
type	d:/include/c++/14/bits/stl_pair.h	/^    { typedef _Tp2 type; };$/;"	t	struct:std::tuple_element	typeref:typename:_Tp2	access:public
type	d:/include/c++/14/bits/stl_pair.h	/^  { using type = pair<common_type_t<_T1, _U1>, common_type_t<_T2, _U2>>; };$/;"	t	struct:std::common_type	typeref:typename:pair<common_type_t<_T1,_U1>,common_type_t<_T2,_U2>>	access:public
type	d:/include/c++/14/bits/unique_ptr.h	/^	  using type = _Up*;$/;"	t	struct:std::__uniq_ptr_impl::_Ptr	typeref:typename:_Up *	access:public
type	d:/include/c++/14/bits/unique_ptr.h	/^	  using type = typename remove_reference<_Ep>::type::pointer;$/;"	t	struct:std::__uniq_ptr_impl::_Ptr	typeref:typename:remove_reference<_Ep>::type::pointer	access:public
type	d:/include/c++/14/bits/utility.h	/^      using type = const __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:const __tuple_element_t<__i,_Tp>	access:public
type	d:/include/c++/14/bits/utility.h	/^      using type = const volatile __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:const volatile __tuple_element_t<__i,_Tp>	access:public
type	d:/include/c++/14/bits/utility.h	/^      using type = volatile __tuple_element_t<__i, _Tp>;$/;"	t	struct:std::tuple_element	typeref:typename:volatile __tuple_element_t<__i,_Tp>	access:public
type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp0; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp0	access:public
type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp1; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp1	access:public
type	d:/include/c++/14/bits/utility.h	/^    { using type = _Tp2; };$/;"	t	struct:std::_Nth_type	typeref:typename:_Tp2	access:public
type	d:/include/c++/14/bits/utility.h	/^    { using type = __type_pack_element<_Np, _Types...>; };$/;"	t	struct:std::_Nth_type	typeref:typename:__type_pack_element<_Np,_Types...>	access:public
tzset	d:/include/time.h	/^extern void tzset (void) __THROW;$/;"	p	typeref:typename:void	signature:(void)
u16streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u16streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u16string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char16_t> u16string; $/;"	t	namespace:std	typeref:typename:basic_string<char16_t>
u32streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u32streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u32string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char32_t> u32string; $/;"	t	namespace:std	typeref:typename:basic_string<char32_t>
u8streampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> u8streampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
u8string	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<char8_t> u8string;$/;"	t	namespace:std	typeref:typename:basic_string<char8_t>
uint16_t	d:/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint16_t uint16_t;$/;"	t	typeref:typename:__uint16_t
uint32_t	d:/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint32_t uint32_t;$/;"	t	typeref:typename:__uint32_t
uint64_t	d:/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint64_t uint64_t;$/;"	t	typeref:typename:__uint64_t
uint8_t	d:/include/x86_64-linux-gnu/bits/stdint-uintn.h	/^typedef __uint8_t uint8_t;$/;"	t	typeref:typename:__uint8_t
uint_fast16_t	d:/include/stdint.h	/^typedef unsigned int		uint_fast16_t;$/;"	t	typeref:typename:unsigned int
uint_fast16_t	d:/include/stdint.h	/^typedef unsigned long int	uint_fast16_t;$/;"	t	typeref:typename:unsigned long int
uint_fast32_t	d:/include/stdint.h	/^typedef unsigned int		uint_fast32_t;$/;"	t	typeref:typename:unsigned int
uint_fast32_t	d:/include/stdint.h	/^typedef unsigned long int	uint_fast32_t;$/;"	t	typeref:typename:unsigned long int
uint_fast64_t	d:/include/stdint.h	/^typedef unsigned long int	uint_fast64_t;$/;"	t	typeref:typename:unsigned long int
uint_fast64_t	d:/include/stdint.h	/^typedef unsigned long long int	uint_fast64_t;$/;"	t	typeref:typename:unsigned long long int
uint_fast8_t	d:/include/stdint.h	/^typedef unsigned char		uint_fast8_t;$/;"	t	typeref:typename:unsigned char
uint_least16_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __uint_least16_t uint_least16_t;$/;"	t	typeref:typename:__uint_least16_t
uint_least32_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __uint_least32_t uint_least32_t;$/;"	t	typeref:typename:__uint_least32_t
uint_least64_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __uint_least64_t uint_least64_t;$/;"	t	typeref:typename:__uint_least64_t
uint_least8_t	d:/include/x86_64-linux-gnu/bits/stdint-least.h	/^typedef __uint_least8_t uint_least8_t;$/;"	t	typeref:typename:__uint_least8_t
uintmax_t	d:/include/stdint.h	/^typedef __uintmax_t		uintmax_t;$/;"	t	typeref:typename:__uintmax_t
uintptr_t	d:/include/stdint.h	/^typedef unsigned int		uintptr_t;$/;"	t	typeref:typename:unsigned int
uintptr_t	d:/include/stdint.h	/^typedef unsigned long int	uintptr_t;$/;"	t	typeref:typename:unsigned long int
unary_function	d:/include/c++/14/bits/stl_function.h	/^    struct unary_function$/;"	s	namespace:std
unary_negate	d:/include/c++/14/bits/stl_function.h	/^      unary_negate(const _Predicate& __x) : _M_pred(__x) { }$/;"	f	class:std::unary_negate	typeref:typename:_GLIBCXX14_CONSTEXPR	access:public	signature:(const _Predicate & __x)
unary_negate	d:/include/c++/14/bits/stl_function.h	/^    class _GLIBCXX17_DEPRECATED unary_negate$/;"	c	namespace:std	inherits:unary_function<typename_Predicate::argument_type,bool>
ungetc	d:/include/stdio.h	/^extern int ungetc (int __c, FILE *__stream) __nonnull ((2));$/;"	p	typeref:typename:int	signature:(int __c,FILE * __stream)
ungetwc	d:/include/wchar.h	/^extern wint_t ungetwc (wint_t __wc, __FILE *__stream);$/;"	p	typeref:typename:wint_t	signature:(wint_t __wc,__FILE * __stream)
uninitialized_copy	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_copy(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
uninitialized_copy	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_copy(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _Fo/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
uninitialized_copy_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_copy_n(_InputIterator __first, _Size __n,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_Size __n,_ForwardIterator __result)
uninitialized_copy_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_copy_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_Size __n,_ForwardIterator __result)
uninitialized_default_construct	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_default_construct(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
uninitialized_default_construct	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_default_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIte/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
uninitialized_default_construct_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_default_construct_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
uninitialized_default_construct_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_default_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
uninitialized_fill	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last,const _Tp & __x)
uninitialized_fill	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_fill(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator __last,/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last,const _Tp & __value)
uninitialized_fill_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __n,const _Tp & __x)
uninitialized_fill_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_fill_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n, const _Tp& /;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n,const _Tp & __value)
uninitialized_move	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_move(_InputIterator __first, _InputIterator __last,$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
uninitialized_move	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_move(_ExecutionPolicy&& __exec, _InputIterator __first, _InputIterator __last, _Fo/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_InputIterator __last,_ForwardIterator __result)
uninitialized_move_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_move_n(_InputIterator __first, _Size __count,$/;"	f	namespace:std	typeref:typename:pair<_InputIterator,_ForwardIterator>	signature:(_InputIterator __first,_Size __count,_ForwardIterator __result)
uninitialized_move_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_move_n(_ExecutionPolicy&& __exec, _InputIterator __first, _Size __n, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_InputIterator __first,_Size __n,_ForwardIterator __result)
uninitialized_value_construct	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_value_construct(_ForwardIterator __first,$/;"	f	namespace:std	typeref:typename:void	signature:(_ForwardIterator __first,_ForwardIterator __last)
uninitialized_value_construct	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_value_construct(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardItera/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,void>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_ForwardIterator __last)
uninitialized_value_construct_n	d:/include/c++/14/bits/stl_uninitialized.h	/^    uninitialized_value_construct_n(_ForwardIterator __first, _Size __count)$/;"	f	namespace:std	typeref:typename:_ForwardIterator	signature:(_ForwardIterator __first,_Size __count)
uninitialized_value_construct_n	d:/include/c++/14/pstl/glue_memory_defs.h	/^uninitialized_value_construct_n(_ExecutionPolicy&& __exec, _ForwardIterator __first, _Size __n);$/;"	p	namespace:std	typeref:typename:__pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,_ForwardIterator>	signature:(_ExecutionPolicy && __exec,_ForwardIterator __first,_Size __n)
unique	d:/include/c++/14/bits/shared_ptr_base.h	/^      unique() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:bool	access:public	signature:() const
unique_ptr	d:/include/c++/14/backward/auto_ptr.h	/^    unique_ptr<_Tp, _Dp>::unique_ptr(auto_ptr<_Up>&& __u) noexcept$/;"	f	class:std::unique_ptr	signature:(auto_ptr<_Up> && __u)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	constexpr unique_ptr() noexcept$/;"	f	class:std::unique_ptr	access:public	signature:()
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	constexpr unique_ptr(nullptr_t) noexcept$/;"	f	class:std::unique_ptr	access:public	signature:(nullptr_t)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p, const deleter_type& __d) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p,const deleter_type & __d)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up __p,$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(_Up __p,__enable_if_t<!is_lvalue_reference<_Del>::value,_Del &&> __d)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(_Up,$/;"	p	class:std::unique_ptr	access:public	signature:(_Up,__enable_if_t<is_lvalue_reference<_Del>::value,_DelUnref &&>)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(auto_ptr<_Up>&& __u) noexcept;$/;"	p	class:std::unique_ptr	access:public	signature:(auto_ptr<_Up> && __u)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p, const deleter_type& __d) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,const deleter_type & __d)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer __p,$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer __p,__enable_if_t<!is_lvalue_reference<_Del>::value,_Del &&> __d)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(pointer,$/;"	p	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(pointer,__enable_if_t<is_lvalue_reference<_Del>::value,_DelUnref &&>)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^	unique_ptr(unique_ptr<_Up, _Ep>&& __u) noexcept$/;"	f	class:std::unique_ptr	typeref:typename:_GLIBCXX23_CONSTEXPR	access:public	signature:(unique_ptr<_Up,_Ep> && __u)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr(const unique_ptr&) = delete;$/;"	p	class:std::unique_ptr	access:public	signature:(const unique_ptr &)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      unique_ptr(unique_ptr&&) = default;$/;"	p	class:std::unique_ptr	access:public	signature:(unique_ptr &&)
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    class unique_ptr$/;"	c	namespace:std
unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^    class unique_ptr<_Tp[], _Dp>$/;"	c	namespace:std
unitbuf	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags unitbuf =     _S_unitbuf;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
unitbuf	d:/include/c++/14/bits/ios_base.h	/^  unitbuf(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
unlock	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	unlock(memory_order __o) const noexcept$/;"	f	struct:std::_Sp_atomic::_Atomic_count	typeref:typename:void	access:public	signature:(memory_order __o) const
unlock	d:/include/c++/14/ext/concurrence.h	/^    void unlock()$/;"	f	class:__gnu_cxx::__mutex	typeref:typename:void	access:public	signature:()
unlock	d:/include/c++/14/ext/concurrence.h	/^    void unlock()$/;"	f	class:__gnu_cxx::__recursive_mutex	typeref:typename:void	access:public	signature:()
unlockpt	../../../../../../usr/include/cygwin/stdlib.h	/^int unlockpt (int);$/;"	p	typeref:typename:int	signature:(int)
unseq	d:/include/c++/14/pstl/execution_defs.h	/^_GLIBCXX17_INLINE constexpr unsequenced_policy unseq{};$/;"	v	namespace:__pstl::execution::v1	typeref:typename:_GLIBCXX17_INLINE unsequenced_policy
unsequenced_policy	d:/include/c++/14/pstl/execution_defs.h	/^class unsequenced_policy$/;"	c	namespace:__pstl::execution::v1
unsetenv	../../../../../../usr/include/cygwin/stdlib.h	/^#define unsetenv UNUSED_unsetenv$/;"	d
unsetenv	../../../../../../usr/include/cygwin/stdlib.h	/^int unsetenv (const char *);$/;"	p	typeref:typename:int	signature:(const char *)
unsetenv	../../../../../../usr/include/stdlib.h	/^int	unsetenv (const char *__string);$/;"	p	typeref:typename:int	signature:(const char * __string)
unsetf	d:/include/c++/14/bits/ios_base.h	/^    unsetf(fmtflags __mask)$/;"	f	class:std::ios_base	typeref:typename:void	access:public	signature:(fmtflags __mask)
unshare	d:/include/x86_64-linux-gnu/bits/sched.h	/^extern int unshare (int __flags) __THROW;$/;"	p	typeref:typename:int	signature:(int __flags)
unsigned	../../../../../../usr/include/sys/_types.h	/^#define unsigned /;"	d
uppercase	d:/include/c++/14/bits/ios_base.h	/^    static const fmtflags uppercase =   _S_uppercase;$/;"	m	class:std::ios_base	typeref:typename:const fmtflags	access:public
uppercase	d:/include/c++/14/bits/ios_base.h	/^  uppercase(ios_base& __base)$/;"	f	namespace:std	typeref:typename:ios_base &	signature:(ios_base & __base)
use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      use_count() const noexcept$/;"	f	class:std::__shared_ptr	typeref:typename:long	access:public	signature:() const
use_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      use_count() const noexcept$/;"	f	class:std::__weak_ptr	typeref:typename:long	access:public	signature:() const
use_facet	d:/include/c++/14/bits/localefwd.h	/^    use_facet(const locale&);$/;"	p	namespace:std	typeref:typename:const _Facet &	signature:(const locale &)
uselocale	d:/include/locale.h	/^extern locale_t uselocale (locale_t __dataset) __THROW;$/;"	p	typeref:typename:locale_t	signature:(locale_t __dataset)
uses_allocator	d:/include/c++/14/bits/uses_allocator.h	/^    struct uses_allocator$/;"	s	namespace:std	inherits:__uses_allocator_helper<_Tp,_Alloc>::type
uses_allocator_v	d:/include/c++/14/bits/uses_allocator.h	/^    inline constexpr bool uses_allocator_v =$/;"	v	namespace:std	typeref:typename:bool
utoa	../../../../../../usr/include/stdlib.h	/^char *	utoa (unsigned, char *, int);$/;"	p	typeref:typename:char *	signature:(unsigned,char *,int)
v1	d:/include/c++/14/pstl/execution_defs.h	/^inline namespace v1$/;"	n	namespace:__pstl::execution
va_list	d:/include/stdio.h	/^typedef __gnuc_va_list va_list;$/;"	t	typeref:typename:__gnuc_va_list
va_list	d:/include/wchar.h	/^typedef __gnuc_va_list va_list;$/;"	t	typeref:typename:__gnuc_va_list
valloc	../../../../../../usr/include/cygwin/stdlib.h	/^extern void *valloc (size_t);$/;"	p	typeref:typename:void *	signature:(size_t)
value	d:/include/c++/14/backward/binders.h	/^      typename _Operation::first_argument_type value;$/;"	m	class:std::binder1st	typeref:typename:_Operation::first_argument_type	access:protected
value	d:/include/c++/14/backward/binders.h	/^      typename _Operation::second_argument_type value;$/;"	m	class:std::binder2nd	typeref:typename:_Operation::second_argument_type	access:protected
value_type	d:/include/c++/14/bits/alloc_traits.h	/^      typedef typename _Alloc::value_type value_type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Alloc::value_type	access:public
value_type	d:/include/c++/14/bits/alloc_traits.h	/^      typename _Alloc::value_type;$/;"	m	class:std::_Alloc	typeref:meta:typename
value_type	d:/include/c++/14/bits/alloc_traits.h	/^      using value_type = _Tp;$/;"	t	struct:std::allocator_traits	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/alloc_traits.h	/^      using value_type = void;$/;"	t	struct:std::allocator_traits	typeref:typename:void	access:public
value_type	d:/include/c++/14/bits/allocated_ptr.h	/^      using value_type = typename allocator_traits<_Alloc>::value_type;$/;"	t	struct:std::__allocated_ptr	typeref:typename:allocator_traits<_Alloc>::value_type	access:public
value_type	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/allocator.h	/^      typedef _Tp value_type;$/;"	t	class:std::allocator	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/allocator.h	/^      typedef void        value_type;$/;"	t	class:std::allocator	typeref:typename:void	access:public
value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Fp;$/;"	t	struct:std::__atomic_float	typeref:typename:_Fp	access:public
value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Fp;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Fp	access:public
value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _ITp;$/;"	t	struct:std::__atomic_base	typeref:typename:_ITp	access:public
value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Tp*;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Tp *	access:public
value_type	d:/include/c++/14/bits/atomic_base.h	/^      using value_type = _Tp;$/;"	t	struct:std::__atomic_ref	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/basic_string.h	/^      typedef typename _Traits::char_type		value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
value_type	d:/include/c++/14/bits/cow_string.h	/^      typedef typename _Traits::char_type		    value_type;$/;"	t	class:std::basic_string	typeref:typename:_Traits::char_type	access:public
value_type	d:/include/c++/14/bits/new_allocator.h	/^      typedef _Tp        value_type;$/;"	t	class:std::__new_allocator	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = _Tp;$/;"	t	class:std::_Sp_atomic	typeref:typename:_Tp	access:private
value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = shared_ptr<_Tp>;$/;"	t	struct:std::atomic	typeref:typename:shared_ptr<_Tp>	access:public
value_type	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      using value_type = weak_ptr<_Tp>;$/;"	t	struct:std::atomic	typeref:typename:weak_ptr<_Tp>	access:public
value_type	d:/include/c++/14/bits/shared_ptr_base.h	/^		using value_type = _Up;$/;"	t	struct:std::_Sp_counted_array_base::_M_init::_Iter	typeref:typename:_Up	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:__gnu_cxx::__normal_iterator	typeref:typename:__traits_type::value_type	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      typedef typename __traits_type::value_type  	value_type;$/;"	t	class:std::move_iterator	typeref:typename:__traits_type::value_type	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_It>;$/;"	t	struct:std::iterator_traits	typeref:typename:iter_value_t<_It>	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::move_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      using value_type = iter_value_t<_Iterator>;$/;"	t	class:std::reverse_iterator	typeref:typename:iter_value_t<_Iterator>	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^      { using value_type = iter_value_t<_It>; };$/;"	t	struct:std::__detail::__counted_iter_value_type	typeref:typename:iter_value_t<_It>	access:public
value_type	d:/include/c++/14/bits/stl_iterator.h	/^    using value_type = iter_value_t<_It>;$/;"	t	class:std::basic_const_iterator	typeref:typename:iter_value_t<_It>	access:public
value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp                         value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef _Tp        value_type;$/;"	t	struct:std::iterator	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::__iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      typedef typename _Iterator::value_type        value_type;$/;"	t	struct:std::iterator_traits	typeref:typename:_Iterator::value_type	access:public
value_type	d:/include/c++/14/bits/stl_iterator_base_types.h	/^      using value_type	      = remove_cv_t<_Tp>;$/;"	t	struct:std::iterator_traits	typeref:typename:remove_cv_t<_Tp>	access:public
value_type	d:/include/c++/14/bits/stl_tempbuf.h	/^      typedef _Tp         value_type;$/;"	t	class:std::_Temporary_buffer	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/bits/utility.h	/^      typedef _Tp value_type;$/;"	t	struct:std::integer_sequence	typeref:typename:_Tp	access:public
value_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Alloc::value_type             value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Alloc::value_type	access:public
value_type	d:/include/c++/14/ext/alloc_traits.h	/^    typedef typename _Base_type::value_type         value_type;$/;"	t	struct:__gnu_cxx::__alloc_traits	typeref:typename:_Base_type::value_type	access:public
vasprintf	d:/include/stdio.h	/^extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,$/;"	p	typeref:typename:int	signature:(char ** __restrict __ptr,const char * __restrict __f,__gnuc_va_list __arg)
vdprintf	d:/include/stdio.h	/^extern int vdprintf (int __fd, const char *__restrict __fmt,$/;"	p	typeref:typename:int	signature:(int __fd,const char * __restrict __fmt,__gnuc_va_list __arg)
vfprintf	d:/include/stdio.h	/^extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vfscanf	d:/include/stdio.h	/^#    define vfscanf __isoc23_vfscanf$/;"	d
vfscanf	d:/include/stdio.h	/^#    define vfscanf __isoc99_vfscanf$/;"	d
vfscanf	d:/include/stdio.h	/^extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(FILE * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vfwprintf	d:/include/wchar.h	/^extern int vfwprintf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vfwscanf	d:/include/wchar.h	/^#    define vfwscanf __isoc23_vfwscanf$/;"	d
vfwscanf	d:/include/wchar.h	/^#    define vfwscanf __isoc99_vfwscanf$/;"	d
vfwscanf	d:/include/wchar.h	/^extern int vfwscanf (__FILE *__restrict __s,$/;"	p	typeref:typename:int	signature:(__FILE * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using void_pointer = typename _Ptr<__v_pointer, void>::type;$/;"	t	struct:std::allocator_traits	typeref:typename:_Ptr<__v_pointer,void>::type	access:public
void_pointer	d:/include/c++/14/bits/alloc_traits.h	/^      using void_pointer = void*;$/;"	t	struct:std::allocator_traits	typeref:typename:void *	access:public
vprintf	d:/include/stdio.h	/^extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
vscanf	d:/include/stdio.h	/^#    define vscanf __isoc23_vscanf$/;"	d
vscanf	d:/include/stdio.h	/^#    define vscanf __isoc99_vscanf$/;"	d
vscanf	d:/include/stdio.h	/^extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)$/;"	p	typeref:typename:int	signature:(const char * __restrict __format,__gnuc_va_list __arg)
vsnprintf	d:/include/stdio.h	/^extern int vsnprintf (char *__restrict __s, size_t __maxlen,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,size_t __maxlen,const char * __restrict __format,__gnuc_va_list __arg)
vsprintf	d:/include/stdio.h	/^extern int vsprintf (char *__restrict __s, const char *__restrict __format,$/;"	p	typeref:typename:int	signature:(char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vsscanf	d:/include/stdio.h	/^#    define vsscanf __isoc23_vsscanf$/;"	d
vsscanf	d:/include/stdio.h	/^#    define vsscanf __isoc99_vsscanf$/;"	d
vsscanf	d:/include/stdio.h	/^extern int vsscanf (const char *__restrict __s,$/;"	p	typeref:typename:int	signature:(const char * __restrict __s,const char * __restrict __format,__gnuc_va_list __arg)
vswprintf	d:/include/wchar.h	/^extern int vswprintf (wchar_t *__restrict __s, size_t __n,$/;"	p	typeref:typename:int	signature:(wchar_t * __restrict __s,size_t __n,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vswscanf	d:/include/wchar.h	/^#    define vswscanf __isoc23_vswscanf$/;"	d
vswscanf	d:/include/wchar.h	/^#    define vswscanf __isoc99_vswscanf$/;"	d
vswscanf	d:/include/wchar.h	/^extern int vswscanf (const wchar_t *__restrict __s,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __s,const wchar_t * __restrict __format,__gnuc_va_list __arg)
vwprintf	d:/include/wchar.h	/^extern int vwprintf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
vwscanf	d:/include/wchar.h	/^#    define vwscanf __isoc23_vwscanf$/;"	d
vwscanf	d:/include/wchar.h	/^#    define vwscanf __isoc99_vwscanf$/;"	d
vwscanf	d:/include/wchar.h	/^extern int vwscanf (const wchar_t *__restrict __format,$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,__gnuc_va_list __arg)
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_float	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Fp __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Fp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Fp __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Tp __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Tp __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(_Tp* __old, memory_order __m = memory_order_seq_cst) const noexcept$/;"	f	struct:std::__atomic_ref	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(_Tp * __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(__int_type __old,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__int_type __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(__pointer_type __old,$/;"	f	struct:std::__atomic_base	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(__pointer_type __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/atomic_base.h	/^      wait(const _Tp* __ptr, _Val<_Tp> __old,$/;"	f	namespace:std::__atomic_impl	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	signature:(const _Tp * __ptr,_Val<_Tp> __old,memory_order __m=memory_order_seq_cst)
wait	d:/include/c++/14/bits/atomic_base.h	/^    wait(bool __old,$/;"	f	struct:std::atomic_flag	typeref:typename:_GLIBCXX_ALWAYS_INLINE void	access:public	signature:(bool __old,memory_order __m=memory_order_seq_cst) const
wait	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      wait(value_type __old, memory_order __o) const noexcept$/;"	f	class:std::_Sp_atomic	typeref:typename:void	access:private	signature:(value_type __old,memory_order __o) const
wait	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      wait(value_type __old,$/;"	f	struct:std::atomic	typeref:typename:void	access:public	signature:(value_type __old,memory_order __o=memory_order_seq_cst) const
wait	d:/include/c++/14/ext/concurrence.h	/^    void wait(__mutex *mutex)$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:(__mutex * mutex)
wait_recursive	d:/include/c++/14/ext/concurrence.h	/^    void wait_recursive(__recursive_mutex *mutex)$/;"	f	class:__gnu_cxx::__cond	typeref:typename:void	access:public	signature:(__recursive_mutex * mutex)
wcpcpy	d:/include/wchar.h	/^extern wchar_t *wcpcpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcpncpy	d:/include/wchar.h	/^extern wchar_t *wcpncpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcrtomb	d:/include/wchar.h	/^extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __s,wchar_t __wc,mbstate_t * __restrict __ps)
wcscasecmp	d:/include/wchar.h	/^extern int wcscasecmp (const wchar_t *__s1, const wchar_t *__s2) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscasecmp_l	d:/include/wchar.h	/^extern int wcscasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,locale_t __loc)
wcscat	d:/include/wchar.h	/^extern wchar_t *wcscat (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcschr	d:/include/wchar.h	/^extern "C++" const wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcschr	d:/include/wchar.h	/^extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,wchar_t __wc)
wcschr	d:/include/wchar.h	/^extern wchar_t *wcschr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcschrnul	d:/include/wchar.h	/^extern wchar_t *wcschrnul (const wchar_t *__s, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s,wchar_t __wc)
wcscmp	d:/include/wchar.h	/^extern int wcscmp (const wchar_t *__s1, const wchar_t *__s2)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscoll	d:/include/wchar.h	/^extern int wcscoll (const wchar_t *__s1, const wchar_t *__s2) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2)
wcscoll_l	d:/include/wchar.h	/^extern int wcscoll_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,locale_t __loc)
wcscpy	d:/include/wchar.h	/^extern wchar_t *wcscpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src)
wcscspn	d:/include/wchar.h	/^extern size_t wcscspn (const wchar_t *__wcs, const wchar_t *__reject)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __wcs,const wchar_t * __reject)
wcsdup	d:/include/wchar.h	/^extern wchar_t *wcsdup (const wchar_t *__s) __THROW$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s)
wcsftime	d:/include/wchar.h	/^extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s,size_t __maxsize,const wchar_t * __restrict __format,const struct tm * __restrict __tp)
wcsftime_l	d:/include/wchar.h	/^extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s,size_t __maxsize,const wchar_t * __restrict __format,const struct tm * __restrict __tp,locale_t __loc)
wcslcat	d:/include/wchar.h	/^extern size_t wcslcat (wchar_t *__restrict __dest,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcslcpy	d:/include/wchar.h	/^extern size_t wcslcpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcslen	d:/include/wchar.h	/^extern size_t wcslen (const wchar_t *__s) __THROW __attribute_pure__;$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __s)
wcsncasecmp	d:/include/wchar.h	/^extern int wcsncasecmp (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wcsncasecmp_l	d:/include/wchar.h	/^extern int wcsncasecmp_l (const wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n,locale_t __loc)
wcsncat	d:/include/wchar.h	/^extern wchar_t *wcsncat (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcsncmp	d:/include/wchar.h	/^extern int wcsncmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wcsncpy	d:/include/wchar.h	/^extern wchar_t *wcsncpy (wchar_t *__restrict __dest,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __dest,const wchar_t * __restrict __src,size_t __n)
wcsnlen	d:/include/wchar.h	/^extern size_t wcsnlen (const wchar_t *__s, size_t __maxlen)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __s,size_t __maxlen)
wcsnrtombs	d:/include/wchar.h	/^extern size_t wcsnrtombs (char *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __dst,const wchar_t ** __restrict __src,size_t __nwc,size_t __len,mbstate_t * __restrict __ps)
wcspbrk	d:/include/wchar.h	/^extern "C++" const wchar_t *wcspbrk (const wchar_t *__wcs,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcspbrk	d:/include/wchar.h	/^extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,const wchar_t * __accept)
wcspbrk	d:/include/wchar.h	/^extern wchar_t *wcspbrk (const wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcsrchr	d:/include/wchar.h	/^extern "C++" const wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcsrchr	d:/include/wchar.h	/^extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __wcs,wchar_t __wc)
wcsrchr	d:/include/wchar.h	/^extern wchar_t *wcsrchr (const wchar_t *__wcs, wchar_t __wc)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __wcs,wchar_t __wc)
wcsrtombs	d:/include/wchar.h	/^extern size_t wcsrtombs (char *__restrict __dst,$/;"	p	typeref:typename:size_t	signature:(char * __restrict __dst,const wchar_t ** __restrict __src,size_t __len,mbstate_t * __restrict __ps)
wcsspn	d:/include/wchar.h	/^extern size_t wcsspn (const wchar_t *__wcs, const wchar_t *__accept)$/;"	p	typeref:typename:size_t	signature:(const wchar_t * __wcs,const wchar_t * __accept)
wcsstr	d:/include/wchar.h	/^extern "C++" const wchar_t *wcsstr (const wchar_t *__haystack,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcsstr	d:/include/wchar.h	/^extern "C++" wchar_t *wcsstr (wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __haystack,const wchar_t * __needle)
wcsstr	d:/include/wchar.h	/^extern wchar_t *wcsstr (const wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcstod	d:/include/wchar.h	/^extern double wcstod (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstod_l	d:/include/wchar.h	/^extern double wcstod_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof	d:/include/wchar.h	/^extern float wcstof (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128	d:/include/wchar.h	/^extern _Float128 wcstof128 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128_l	d:/include/wchar.h	/^extern _Float128 wcstof128_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof128x	d:/include/wchar.h	/^extern _Float128x wcstof128x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof128x_l	d:/include/wchar.h	/^extern _Float128x wcstof128x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float128x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof16	d:/include/wchar.h	/^extern _Float16 wcstof16 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof16_l	d:/include/wchar.h	/^extern _Float16 wcstof16_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float16	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof32	d:/include/wchar.h	/^extern _Float32 wcstof32 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof32_l	d:/include/wchar.h	/^extern _Float32 wcstof32_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof32x	d:/include/wchar.h	/^extern _Float32x wcstof32x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof32x_l	d:/include/wchar.h	/^extern _Float32x wcstof32x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float32x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof64	d:/include/wchar.h	/^extern _Float64 wcstof64 (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof64_l	d:/include/wchar.h	/^extern _Float64 wcstof64_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof64x	d:/include/wchar.h	/^extern _Float64x wcstof64x (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstof64x_l	d:/include/wchar.h	/^extern _Float64x wcstof64x_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:_Float64x	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstof_l	d:/include/wchar.h	/^extern float wcstof_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:float	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstok	d:/include/wchar.h	/^extern wchar_t *wcstok (wchar_t *__restrict __s,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s,const wchar_t * __restrict __delim,wchar_t ** __restrict __ptr)
wcstol	d:/include/wchar.h	/^#  define wcstol __isoc23_wcstol$/;"	d
wcstol	d:/include/wchar.h	/^extern long int wcstol (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstol_l	d:/include/wchar.h	/^#   define wcstol_l __isoc23_wcstol_l$/;"	d
wcstol_l	d:/include/wchar.h	/^extern long int wcstol_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstold	d:/include/wchar.h	/^extern long double wcstold (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr)
wcstold_l	d:/include/wchar.h	/^extern long double wcstold_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:long double	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,locale_t __loc)
wcstoll	d:/include/wchar.h	/^#  define wcstoll __isoc23_wcstoll$/;"	d
wcstoll	d:/include/wchar.h	/^extern long long int wcstoll (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoll_l	d:/include/wchar.h	/^#   define wcstoll_l __isoc23_wcstoll_l$/;"	d
wcstoll_l	d:/include/wchar.h	/^extern long long int wcstoll_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstombs	../../../../../../usr/include/stdlib.h	/^size_t	wcstombs (char *__restrict, const wchar_t *__restrict, size_t);$/;"	p	typeref:typename:size_t	signature:(char * __restrict,const wchar_t * __restrict,size_t)
wcstoq	d:/include/wchar.h	/^#   define wcstoq /;"	d
wcstoq	d:/include/wchar.h	/^extern long long int wcstoq (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoul	d:/include/wchar.h	/^#  define wcstoul __isoc23_wcstoul$/;"	d
wcstoul	d:/include/wchar.h	/^extern unsigned long int wcstoul (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoul_l	d:/include/wchar.h	/^#   define wcstoul_l __isoc23_wcstoul_l$/;"	d
wcstoul_l	d:/include/wchar.h	/^extern unsigned long int wcstoul_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:unsigned long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstoull	d:/include/wchar.h	/^#  define wcstoull __isoc23_wcstoull$/;"	d
wcstoull	d:/include/wchar.h	/^extern unsigned long long int wcstoull (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcstoull_l	d:/include/wchar.h	/^#   define wcstoull_l __isoc23_wcstoull_l$/;"	d
wcstoull_l	d:/include/wchar.h	/^extern unsigned long long int wcstoull_l (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base,locale_t __loc)
wcstouq	d:/include/wchar.h	/^#   define wcstouq /;"	d
wcstouq	d:/include/wchar.h	/^extern unsigned long long int wcstouq (const wchar_t *__restrict __nptr,$/;"	p	typeref:typename:__extension__ unsigned long long int	signature:(const wchar_t * __restrict __nptr,wchar_t ** __restrict __endptr,int __base)
wcswcs	d:/include/wchar.h	/^extern "C++" const wchar_t *wcswcs (const wchar_t *__haystack,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcswcs	d:/include/wchar.h	/^extern "C++" wchar_t *wcswcs (wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __haystack,const wchar_t * __needle)
wcswcs	d:/include/wchar.h	/^extern wchar_t *wcswcs (const wchar_t *__haystack, const wchar_t *__needle)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __haystack,const wchar_t * __needle)
wcswidth	d:/include/wchar.h	/^extern int wcswidth (const wchar_t *__s, size_t __n) __THROW;$/;"	p	typeref:typename:int	signature:(const wchar_t * __s,size_t __n)
wcsxfrm	d:/include/wchar.h	/^extern size_t wcsxfrm (wchar_t *__restrict __s1,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wcsxfrm_l	d:/include/wchar.h	/^extern size_t wcsxfrm_l (wchar_t *__s1, const wchar_t *__s2,$/;"	p	typeref:typename:size_t	signature:(wchar_t * __s1,const wchar_t * __s2,size_t __n,locale_t __loc)
wctob	d:/include/wchar.h	/^extern int wctob (wint_t __c) __THROW;$/;"	p	typeref:typename:int	signature:(wint_t __c)
wctomb	../../../../../../usr/include/stdlib.h	/^int	wctomb (char *, wchar_t);$/;"	p	typeref:typename:int	signature:(char *,wchar_t)
wctrans	d:/include/wctype.h	/^extern wctrans_t wctrans (const char *__property) __THROW;$/;"	p	typeref:typename:wctrans_t	signature:(const char * __property)
wctrans_l	d:/include/wctype.h	/^extern wctrans_t wctrans_l (const char *__property, locale_t __locale)$/;"	p	typeref:typename:wctrans_t	signature:(const char * __property,locale_t __locale)
wctrans_t	d:/include/wctype.h	/^typedef const __int32_t *wctrans_t;$/;"	t	typeref:typename:const __int32_t *
wctype	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^extern wctype_t wctype (const char *__property) __THROW;$/;"	p	typeref:typename:wctype_t	signature:(const char * __property)
wctype_l	d:/include/wctype.h	/^extern wctype_t wctype_l (const char *__property, locale_t __locale)$/;"	p	typeref:typename:wctype_t	signature:(const char * __property,locale_t __locale)
wctype_t	d:/include/x86_64-linux-gnu/bits/wctype-wchar.h	/^typedef unsigned long int wctype_t;$/;"	t	typeref:typename:unsigned long int
wcwidth	d:/include/wchar.h	/^extern int wcwidth (wchar_t __c) __THROW;$/;"	p	typeref:typename:int	signature:(wchar_t __c)
weak_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      weak_from_this() const noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:weak_ptr<const _Tp>	access:public	signature:() const
weak_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      weak_from_this() noexcept$/;"	f	class:std::enable_shared_from_this	typeref:typename:weak_ptr<_Tp>	access:public	signature:()
weak_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      weak_from_this() const noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<const _Tp,_Lp>	access:public	signature:() const
weak_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      weak_from_this() noexcept$/;"	f	class:std::__enable_shared_from_this	typeref:typename:__weak_ptr<_Tp,_Lp>	access:public	signature:()
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(const shared_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(const shared_ptr<_Yp> & __r)
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(const weak_ptr<_Yp>& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(const weak_ptr<_Yp> & __r)
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^	weak_ptr(weak_ptr<_Yp>&& __r) noexcept$/;"	f	class:std::weak_ptr	access:public	signature:(weak_ptr<_Yp> && __r)
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      constexpr weak_ptr() noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:()
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      weak_ptr(const weak_ptr&) noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:(const weak_ptr &)
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^      weak_ptr(weak_ptr&&) noexcept = default;$/;"	p	class:std::weak_ptr	access:public	signature:(weak_ptr &&)
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    class weak_ptr : public __weak_ptr<_Tp>$/;"	c	namespace:std	inherits:__weak_ptr<_Tp>
weak_ptr	d:/include/c++/14/bits/shared_ptr.h	/^    weak_ptr(shared_ptr<_Tp>) ->  weak_ptr<_Tp>;$/;"	p	namespace:std	signature:(shared_ptr<_Tp>)
weak_type	d:/include/c++/14/bits/shared_ptr.h	/^      using weak_type = weak_ptr<_Tp>;$/;"	t	class:std::shared_ptr	typeref:typename:weak_ptr<_Tp>	access:public
weak_type	d:/include/c++/14/bits/shared_ptr_base.h	/^      using weak_type = __weak_ptr<_Tp, _Lp>;$/;"	t	class:std::__shared_ptr	typeref:typename:__weak_ptr<_Tp,_Lp>	access:public
what	d:/include/c++/14/bits/exception.h	/^    what() const _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	typeref:typename:const char *	access:public	signature:() const
what	d:/include/c++/14/bits/ios_base.h	/^      what() const throw();$/;"	p	class:std::ios_base::failure	typeref:typename:const char *	access:public	signature:() const
what	d:/include/c++/14/bits/shared_ptr_base.h	/^    virtual char const* what() const noexcept;$/;"	p	class:std::bad_weak_ptr	typeref:typename:char const *	access:public	signature:() const
what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_broadcast_error	typeref:typename:char const *	access:public	signature:() const
what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_lock_error	typeref:typename:char const *	access:public	signature:() const
what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_unlock_error	typeref:typename:char const *	access:public	signature:() const
what	d:/include/c++/14/ext/concurrence.h	/^    what() const throw()$/;"	f	class:__gnu_cxx::__concurrence_wait_error	typeref:typename:char const *	access:public	signature:() const
widen	d:/include/c++/14/bits/basic_ios.h	/^      widen(char __c) const$/;"	f	class:std::basic_ios	typeref:typename:char_type	access:public	signature:(char __c) const
widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:char_type	access:public	signature:(char __c) const
widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(char __c) const$/;"	f	class:std::ctype	typeref:typename:char_type	access:public	signature:(char __c) const
widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::__ctype_abstract_base	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
widen	d:/include/c++/14/bits/locale_facets.h	/^      widen(const char* __lo, const char* __hi, char_type* __to) const$/;"	f	class:std::ctype	typeref:typename:const char *	access:public	signature:(const char * __lo,const char * __hi,char_type * __to) const
width	d:/include/c++/14/bits/ios_base.h	/^    width() const$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:() const
width	d:/include/c++/14/bits/ios_base.h	/^    width(streamsize __wide)$/;"	f	class:std::ios_base	typeref:typename:streamsize	access:public	signature:(streamsize __wide)
wint_t	d:/include/x86_64-linux-gnu/bits/types/wint_t.h	/^typedef __WINT_TYPE__ wint_t;$/;"	t	typeref:typename:__WINT_TYPE__
wmemchr	d:/include/wchar.h	/^extern "C++" const wchar_t *wmemchr (const wchar_t *__s, wchar_t __c,$/;"	p	typeref:typename:const wchar_t *	signature:(const wchar_t * __s,wchar_t __c,size_t __n)
wmemchr	d:/include/wchar.h	/^extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s,wchar_t __c,size_t __n)
wmemchr	d:/include/wchar.h	/^extern wchar_t *wmemchr (const wchar_t *__s, wchar_t __c, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(const wchar_t * __s,wchar_t __c,size_t __n)
wmemcmp	d:/include/wchar.h	/^extern int wmemcmp (const wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:int	signature:(const wchar_t * __s1,const wchar_t * __s2,size_t __n)
wmemcpy	d:/include/wchar.h	/^extern wchar_t *wmemcpy (wchar_t *__restrict __s1,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wmemmove	d:/include/wchar.h	/^extern wchar_t *wmemmove (wchar_t *__s1, const wchar_t *__s2, size_t __n)$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s1,const wchar_t * __s2,size_t __n)
wmempcpy	d:/include/wchar.h	/^extern wchar_t *wmempcpy (wchar_t *__restrict __s1,$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __restrict __s1,const wchar_t * __restrict __s2,size_t __n)
wmemset	d:/include/wchar.h	/^extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) __THROW;$/;"	p	typeref:typename:wchar_t *	signature:(wchar_t * __s,wchar_t __c,size_t __n)
wprintf	d:/include/wchar.h	/^extern int wprintf (const wchar_t *__restrict __format, ...)$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
write	d:/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h	/^  cookie_write_function_t *write;	\/* Write bytes.  *\/$/;"	m	struct:_IO_cookie_io_functions_t	typeref:typename:cookie_write_function_t *	access:public
wscanf	d:/include/wchar.h	/^#    define wscanf __isoc23_wscanf$/;"	d
wscanf	d:/include/wchar.h	/^#    define wscanf __isoc99_wscanf$/;"	d
wscanf	d:/include/wchar.h	/^extern int wscanf (const wchar_t *__restrict __format, ...)$/;"	p	typeref:typename:int	signature:(const wchar_t * __restrict __format,...)
wstreampos	d:/include/c++/14/bits/postypes.h	/^  typedef fpos<mbstate_t> wstreampos;$/;"	t	namespace:std	typeref:typename:fpos<mbstate_t>
wstring	d:/include/c++/14/bits/stringfwd.h	/^  typedef basic_string<wchar_t> wstring;   $/;"	t	namespace:std	typeref:typename:basic_string<wchar_t>
xalloc	d:/include/c++/14/bits/ios_base.h	/^    xalloc() throw();$/;"	p	class:std::ios_base	typeref:typename:int	access:public	signature:()
~Init	d:/include/c++/14/bits/ios_base.h	/^      ~Init();$/;"	p	class:std::ios_base::Init	access:public	signature:()
~_Atomic_count	d:/include/c++/14/bits/shared_ptr_atomic.h	/^	~_Atomic_count()$/;"	f	struct:std::_Sp_atomic::_Atomic_count	access:public	signature:()
~_Guarded_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^	    ~_Guarded_ptr()$/;"	f	struct:std::__shared_count::__shared_count::_Guarded_ptr	access:public	signature:()
~_Impl	d:/include/c++/14/bits/locale_classes.h	/^   ~_Impl() throw();$/;"	p	class:std::locale::_Impl	access:private	signature:()
~_Impl	d:/include/c++/14/bits/stl_tempbuf.h	/^	~_Impl()$/;"	f	struct:std::_Temporary_buffer::_Impl	access:public	signature:()
~_Save_errno	d:/include/c++/14/ext/string_conversions.h	/^	~_Save_errno() { if (errno == 0) errno = _M_errno; }$/;"	f	struct:__gnu_cxx::__stoa::_Save_errno	access:public	signature:()
~_Sp_atomic	d:/include/c++/14/bits/shared_ptr_atomic.h	/^      ~_Sp_atomic() = default;$/;"	p	class:std::_Sp_atomic	access:private	signature:()
~_Sp_counted_array	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_array() = default;$/;"	p	class:std::_Sp_counted_array	access:public	signature:()
~_Sp_counted_base	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_base() noexcept$/;"	f	class:std::_Sp_counted_base	access:public	signature:()
~_Sp_counted_deleter	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_deleter() noexcept { }$/;"	f	class:std::_Sp_counted_deleter	access:public	signature:()
~_Sp_counted_ptr_inplace	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~_Sp_counted_ptr_inplace() noexcept { }$/;"	f	class:std::_Sp_counted_ptr_inplace	access:public	signature:()
~_Sp_locker	d:/include/c++/14/bits/shared_ptr_atomic.h	/^    ~_Sp_locker();$/;"	p	struct:std::_Sp_locker	access:public	signature:()
~_Temporary_buffer	d:/include/c++/14/bits/stl_tempbuf.h	/^      ~_Temporary_buffer()$/;"	f	class:std::_Temporary_buffer	access:public	signature:()
~_Terminator	d:/include/c++/14/bits/cow_string.h	/^	~_Terminator() { _M_this->_M_rep()->_M_set_length_and_sharable(_M_r); }$/;"	f	struct:std::basic_string::resize_and_overwrite::_Terminator	access:public	signature:()
~__allocated_ptr	d:/include/c++/14/bits/allocated_ptr.h	/^      ~__allocated_ptr()$/;"	f	struct:std::__allocated_ptr	access:public	signature:()
~__atomic_base	d:/include/c++/14/bits/atomic_base.h	/^      ~__atomic_base() noexcept = default;$/;"	p	struct:std::__atomic_base	access:public	signature:()
~__cond	d:/include/c++/14/ext/concurrence.h	/^    ~__cond() $/;"	f	class:__gnu_cxx::__cond	access:public	signature:()
~__ctype_abstract_base	d:/include/c++/14/bits/locale_facets.h	/^      ~__ctype_abstract_base() { }$/;"	f	class:std::__ctype_abstract_base	access:protected	signature:()
~__enable_shared_from_this	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__enable_shared_from_this() { }$/;"	f	class:std::__enable_shared_from_this	access:protected	signature:()
~__forced_unwind	d:/include/c++/14/bits/cxxabi_forced.h	/^    virtual ~__forced_unwind() throw();$/;"	p	class:__cxxabiv1::__forced_unwind	access:private	signature:()
~__hash_enum	d:/include/c++/14/bits/functional_hash.h	/^      ~__hash_enum();$/;"	p	struct:std::__hash_enum	access:private	signature:()
~__mutex	d:/include/c++/14/ext/concurrence.h	/^    ~__mutex() $/;"	f	class:__gnu_cxx::__mutex	access:public	signature:()
~__new_allocator	d:/include/c++/14/bits/new_allocator.h	/^      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }$/;"	f	class:std::__new_allocator	access:public	signature:()
~__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^      ~__numpunct_cache();$/;"	p	struct:std::__numpunct_cache	access:public	signature:()
~__numpunct_cache	d:/include/c++/14/bits/locale_facets.h	/^    __numpunct_cache<_CharT>::~__numpunct_cache()$/;"	f	class:std::__numpunct_cache	signature:()
~__pair_base	d:/include/c++/14/bits/stl_pair.h	/^    ~__pair_base() = default;$/;"	p	class:std::__pair_base	access:private	signature:()
~__poison_hash	d:/include/c++/14/bits/functional_hash.h	/^      ~__poison_hash();$/;"	p	struct:std::__poison_hash	access:private	signature:()
~__pthread_cleanup_class	d:/include/pthread.h	/^  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }$/;"	f	class:__pthread_cleanup_class	access:public	signature:()
~__recursive_mutex	d:/include/c++/14/ext/concurrence.h	/^    ~__recursive_mutex()$/;"	f	class:__gnu_cxx::__recursive_mutex	access:public	signature:()
~__scoped_lock	d:/include/c++/14/ext/concurrence.h	/^    ~__scoped_lock() throw()$/;"	f	class:__gnu_cxx::__scoped_lock	access:public	signature:()
~__shared_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__shared_count() noexcept$/;"	f	class:std::__shared_count	access:public	signature:()
~__shared_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__shared_ptr() = default;$/;"	p	class:std::__shared_ptr	access:public	signature:()
~__weak_count	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__weak_count() noexcept$/;"	f	class:std::__weak_count	access:public	signature:()
~__weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^      ~__weak_ptr() = default;$/;"	p	class:std::__weak_ptr	access:public	signature:()
~allocator	d:/include/c++/14/bits/allocator.h	/^      ~allocator() = default;$/;"	p	class:std::allocator	access:public	signature:()
~allocator	d:/include/c++/14/bits/allocator.h	/^      ~allocator() _GLIBCXX_NOTHROW { }$/;"	f	class:std::allocator	access:public	signature:()
~atomic_flag	d:/include/c++/14/bits/atomic_base.h	/^    ~atomic_flag() noexcept = default;$/;"	p	struct:std::atomic_flag	access:public	signature:()
~auto_ptr	d:/include/c++/14/backward/auto_ptr.h	/^      ~auto_ptr() { delete _M_ptr; }$/;"	f	class:std::auto_ptr	access:public	signature:()
~bad_weak_ptr	d:/include/c++/14/bits/shared_ptr_base.h	/^    virtual ~bad_weak_ptr() noexcept;$/;"	p	class:std::bad_weak_ptr	access:public	signature:()
~basic_ios	d:/include/c++/14/bits/basic_ios.h	/^      ~basic_ios() { }$/;"	f	class:std::basic_ios	access:public	signature:()
~basic_string	d:/include/c++/14/bits/basic_string.h	/^      ~basic_string()$/;"	f	class:std::basic_string	typeref:typename:_GLIBCXX20_CONSTEXPR	access:public	signature:()
~basic_string	d:/include/c++/14/bits/cow_string.h	/^      ~basic_string() _GLIBCXX_NOEXCEPT$/;"	f	class:std::basic_string	access:public	signature:()
~collate	d:/include/c++/14/bits/locale_classes.h	/^      ~collate()$/;"	f	class:std::collate	access:protected	signature:()
~collate_byname	d:/include/c++/14/bits/locale_classes.h	/^      ~collate_byname() { }$/;"	f	class:std::collate_byname	access:protected	signature:()
~common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    ~common_iterator() = default;$/;"	p	class:std::common_iterator	access:public	signature:()
~common_iterator	d:/include/c++/14/bits/stl_iterator.h	/^    ~common_iterator()$/;"	f	class:std::common_iterator	access:public	signature:()
~ctype	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype();$/;"	p	class:std::ctype	access:protected	signature:()
~ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype_byname() { }$/;"	f	class:std::ctype_byname	access:protected	signature:()
~ctype_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~ctype_byname();$/;"	p	class:std::ctype_byname	access:protected	signature:()
~enable_shared_from_this	d:/include/c++/14/bits/shared_ptr.h	/^      ~enable_shared_from_this() { }$/;"	f	class:std::enable_shared_from_this	access:protected	signature:()
~exception	d:/include/c++/14/bits/exception.h	/^    virtual ~exception() _GLIBCXX_TXN_SAFE_DYN _GLIBCXX_NOTHROW;$/;"	p	class:std::exception	access:public	signature:()
~exception_ptr	d:/include/c++/14/bits/exception_ptr.h	/^    exception_ptr::~exception_ptr() _GLIBCXX_USE_NOEXCEPT$/;"	f	class:std::__exception_ptr::exception_ptr	typeref:typename:_GLIBCXX_EH_PTR_USED	signature:()
~facet	d:/include/c++/14/bits/locale_classes.h	/^    ~facet();$/;"	p	class:std::locale::facet	access:protected	signature:()
~failure	d:/include/c++/14/bits/ios_base.h	/^      ~failure() throw();$/;"	p	class:std::ios_base::failure	access:public	signature:()
~fpos	d:/include/c++/14/bits/postypes.h	/^      ~fpos() = default;$/;"	p	class:std::fpos	access:public	signature:()
~ios_base	d:/include/c++/14/bits/ios_base.h	/^    virtual ~ios_base();$/;"	p	class:std::ios_base	access:public	signature:()
~istreambuf_iterator	d:/include/c++/14/bits/streambuf_iterator.h	/^      ~istreambuf_iterator() = default;$/;"	p	class:std::istreambuf_iterator	access:public	signature:()
~locale	d:/include/c++/14/bits/locale_classes.h	/^    ~locale() throw();$/;"	p	class:std::locale	access:public	signature:()
~nested_exception	d:/include/c++/14/bits/nested_exception.h	/^    virtual ~nested_exception() noexcept;$/;"	p	class:std::nested_exception	access:public	signature:()
~num_get	d:/include/c++/14/bits/locale_facets.h	/^      virtual ~num_get() { }$/;"	f	class:std::num_get	access:protected	signature:()
~num_put	d:/include/c++/14/bits/locale_facets.h	/^      ~num_put() { }$/;"	f	class:std::num_put	access:protected	signature:()
~numpunct	d:/include/c++/14/bits/locale_facets.h	/^      ~numpunct();$/;"	p	class:std::numpunct	access:protected	signature:()
~numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<char>::~numpunct();$/;"	p	class:std::numpunct	signature:()
~numpunct	d:/include/c++/14/bits/locale_facets.h	/^    numpunct<wchar_t>::~numpunct();$/;"	p	class:std::numpunct	signature:()
~numpunct_byname	d:/include/c++/14/bits/locale_facets.h	/^      ~numpunct_byname() { }$/;"	f	class:std::numpunct_byname	access:protected	signature:()
~unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      ~unique_ptr() noexcept$/;"	f	class:std::unique_ptr	access:public	signature:()
~unique_ptr	d:/include/c++/14/bits/unique_ptr.h	/^      ~unique_ptr()$/;"	f	class:std::unique_ptr	access:public	signature:()
